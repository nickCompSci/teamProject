// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"src/CST.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CST = void 0;
/**
This file contains all the constants and keys used in the game.
*/
var CST = {
  SCENES: {
    LOAD: "LOAD",
    MENU: "MENU",
    OPTIONS: "OPTIONS",
    CREDITS: "CREDITS",
    JOIN: "JOIN",
    CREATE: "CREATE",
    LOBBY: "LOBBY"
  }
};
exports.CST = CST;
},{}],"src/scenes/MenuScene.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuScene = void 0;
var _CST = require("../CST");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var MenuScene = /*#__PURE__*/function (_Phaser$Scene) {
  _inherits(MenuScene, _Phaser$Scene);
  var _super = _createSuper(MenuScene);
  function MenuScene() {
    _classCallCheck(this, MenuScene);
    return _super.call(this, {
      key: _CST.CST.SCENES.MENU
    });
  }

  // Used to create our buttons, images, and text
  _createClass(MenuScene, [{
    key: "create",
    value: function create() {
      var _this = this;
      // Adds background image to the scene - (x, y, image)
      this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2, 'background').setDisplaySize(this.game.renderer.width, this.game.renderer.height).setDepth(0);

      // Adds the title image to the scene - (x, y, image), setDepth() is used to set the depth of the image (higher depth = higher priority)
      this.add.text(this.game.renderer.width / 2 - 330, this.game.renderer.height * 0.20, 'Dual Ascent', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2 + 300, this.game.renderer.height * 0.20, 'Tower of Cards', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);

      // Adds a button to the scene - (x, y, image)
      var createButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height / 2, 'Create Game', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);
      var joinButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height / 2 + 75, 'Join Game', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);
      var profileButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height / 2 + 150, 'Profile', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);
      var optionsButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height / 2 + 225, 'Options', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);
      var creditsButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height / 2 + 300, 'Credits', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);

      // Adds the hover arrow that will appear when hovering over a button
      var arrowSprite = this.add.sprite(100, 100, "arrow");

      // Sets the arrow to not be visible until hovering over a button
      arrowSprite.setVisible(false);

      // Fix music from repeating when moving from one scene to another and then back
      if (!this.isMusicPlaying) {
        this.isMusicPlaying = true;
        this.sound.pauseOnBlur = false;
        this.sound.play("soundtrack", {
          loop: true
        });
      }

      /*
      The following code is used to make the buttons interactive
      Pointer Events:
          pointerover - hovering
          pointerout - not hovering
          pointerup - click and release
          pointerdown - just click
      */

      // Allows the start button to be interactive
      createButton.setInteractive();

      // When the pointer is over the button, the arrow will appear
      createButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = createButton.x - createButton.width + 150;
        arrowSprite.y = createButton.y + createButton.height / 4;
      });

      // Signals when the pointer is clicked and released
      createButton.on("pointerup", function () {
        _this.scene.start(_CST.CST.SCENES.CREATE);
        console.log("click");
      });

      // Allows the start button to be interactive
      joinButton.setInteractive();

      // When the pointer is over the button, the arrow will appear
      joinButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = joinButton.x - joinButton.width + 125;
        arrowSprite.y = joinButton.y + joinButton.height / 4;
      });

      // Signals when the pointer is clicked and released
      joinButton.on("pointerup", function () {
        _this.scene.start(_CST.CST.SCENES.JOIN);
        console.log("click");
      });

      // Profile Button
      profileButton.setInteractive();
      profileButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = profileButton.x - profileButton.width + 100;
        arrowSprite.y = profileButton.y + profileButton.height / 4;
      });
      profileButton.on("pointerup", function () {
        console.log("click");
      });

      // Options Button
      optionsButton.setInteractive();
      optionsButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = optionsButton.x - optionsButton.width + 100;
        arrowSprite.y = optionsButton.y + optionsButton.height / 4;
      });
      optionsButton.on("pointerup", function () {
        // Moves to options menu when clicked
        _this.scene.start(_CST.CST.SCENES.OPTIONS);
        console.log("click");
      });

      // Credits Button
      creditsButton.setInteractive();
      creditsButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = creditsButton.x - creditsButton.width + 100;
        arrowSprite.y = creditsButton.y + creditsButton.height / 4;
      });
      creditsButton.on("pointerup", function () {
        // Moves to options menu when clicked
        _this.scene.start(_CST.CST.SCENES.CREDITS);
        console.log("click");
      });
    }
  }]);
  return MenuScene;
}(Phaser.Scene);
exports.MenuScene = MenuScene;
},{"../CST":"src/CST.js"}],"src/scenes/OptionsScene.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptionsScene = void 0;
var _CST = require("../CST");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var OptionsScene = /*#__PURE__*/function (_Phaser$Scene) {
  _inherits(OptionsScene, _Phaser$Scene);
  var _super = _createSuper(OptionsScene);
  function OptionsScene() {
    _classCallCheck(this, OptionsScene);
    return _super.call(this, {
      key: _CST.CST.SCENES.OPTIONS
    });
  }

  // Creates any images, text, etc.
  _createClass(OptionsScene, [{
    key: "create",
    value: function create() {
      var _this = this;
      // Adds background image to the scene - (x, y, image)
      this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2, 'background').setDisplaySize(this.game.renderer.width, this.game.renderer.height).setDepth(0);

      // Options title
      this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.20, 'Options', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);

      // Disable music button
      var disableMusicButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.40, 'Disable Music', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);

      // Back Button for navigating back to the main menu
      var backButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height / 2 + 300, 'Back', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);
      var arrowSprite = this.add.sprite(100, 100, "arrow");
      arrowSprite.setVisible(false);

      // Back Button
      backButton.setInteractive();
      backButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = backButton.x - backButton.width + 60;
        arrowSprite.y = backButton.y + backButton.height / 4;
        console.log("hover");
      });
      backButton.on("pointerup", function () {
        // Moves back to the main menu when the back button is clicked
        _this.scene.start(_CST.CST.SCENES.MENU);
        console.log("click");
      });

      // Disable Music Button
      disableMusicButton.setInteractive();
      disableMusicButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = disableMusicButton.x - disableMusicButton.width + 120;
        arrowSprite.y = disableMusicButton.y + disableMusicButton.height / 4;
        console.log("hover");
      });

      // When clicked, music will be disabled
      // When clicked again, music will be enabled
      var musicEnabled = true;
      disableMusicButton.on("pointerup", function () {
        if (musicEnabled) {
          _this.sound.stopAll();
          musicEnabled = false;
          console.log("Music disabled");
        } else {
          _this.sound.play("soundtrack", {
            loop: true
          });
          musicEnabled = true;
          console.log("Music enabled");
        }
      });
    }
  }]);
  return OptionsScene;
}(Phaser.Scene);
exports.OptionsScene = OptionsScene;
},{"../CST":"src/CST.js"}],"src/scenes/CreditsScene.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreditsScene = void 0;
var _CST = require("../CST");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var CreditsScene = /*#__PURE__*/function (_Phaser$Scene) {
  _inherits(CreditsScene, _Phaser$Scene);
  var _super = _createSuper(CreditsScene);
  function CreditsScene() {
    _classCallCheck(this, CreditsScene);
    return _super.call(this, {
      key: _CST.CST.SCENES.CREDITS
    });
  }

  // Creates any images, text, etc.
  _createClass(CreditsScene, [{
    key: "create",
    value: function create() {
      var _this = this;
      // Adds background image to the scene - (x, y, image)
      this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2, 'background').setDisplaySize(this.game.renderer.width, this.game.renderer.height).setDepth(0);

      // Credits title
      this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.20, 'Credits', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);

      // Credits start here
      this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.30, 'Team Lead', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.35, '-----------------', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.40, 'Nick Shapovalov', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2 - 300, this.game.renderer.height * 0.50, 'Game Mechanics Team', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2 - 300, this.game.renderer.height * 0.55, '-----------------', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2 - 300, this.game.renderer.height * 0.60, 'Kevin Jones Saleh', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2 - 300, this.game.renderer.height * 0.65, 'Eoin Schuch', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2 - 300, this.game.renderer.height * 0.70, 'Zhi Jie Chen', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2 + 300, this.game.renderer.height * 0.50, 'Design Team', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2 + 300, this.game.renderer.height * 0.55, '-----------------', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2 + 300, this.game.renderer.height * 0.60, 'Nick Shapovalov', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2 + 300, this.game.renderer.height * 0.65, 'James Kirkby', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2 + 300, this.game.renderer.height * 0.70, 'Jack O\'Meara', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);

      // Back Button for navigating back to the main menu
      var backButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height / 2 + 300, 'Back', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);
      var arrowSprite = this.add.sprite(100, 100, "arrow");
      arrowSprite.setVisible(false);

      // Back Button
      backButton.setInteractive();
      backButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = backButton.x - backButton.width + 60;
        arrowSprite.y = backButton.y + backButton.height / 4;
        console.log("hover");
      });
      backButton.on("pointerup", function () {
        // Moves back to the main menu when the back button is clicked
        _this.scene.start(_CST.CST.SCENES.MENU);
        console.log("click");
      });
    }
  }]);
  return CreditsScene;
}(Phaser.Scene);
exports.CreditsScene = CreditsScene;
},{"../CST":"src/CST.js"}],"src/scenes/JoinGameScene.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JoinGameScene = void 0;
var _CST = require("../CST");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var JoinGameScene = /*#__PURE__*/function (_Phaser$Scene) {
  _inherits(JoinGameScene, _Phaser$Scene);
  var _super = _createSuper(JoinGameScene);
  function JoinGameScene() {
    _classCallCheck(this, JoinGameScene);
    return _super.call(this, {
      key: _CST.CST.SCENES.JOIN
    });
  }

  // Creates any images, text, etc.
  _createClass(JoinGameScene, [{
    key: "create",
    value: function create() {
      var _this = this;
      // Adds background image to the scene - (x, y, image)
      this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2, 'background').setDisplaySize(this.game.renderer.width, this.game.renderer.height).setDepth(0);

      // Join Game title
      this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.20, 'Join Game', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.40, 'Please enter a join code:', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);

      // Input code box
      var codeBox = this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.50, "Code", {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setOrigin(0.5, 0.5);

      // Code box
      codeBox.setInteractive();
      codeBox.on("pointerdown", function () {
        _this.rexUI.edit(codeBox);
      });

      /** codeBox.on("pointerover", ()=>{
          arrowSprite.setVisible(true);
          arrowSprite.x = codeBox.x - codeBox.width + 40;
          arrowSprite.y = codeBox.y + codeBox.height / 4;
          console.log("hover")
      }); */

      // Submit button
      var lobbyButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height / 2 + 230, 'Join Lobby', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);

      // Back Button for navigating back to the main menu
      var backButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height / 2 + 300, 'Back', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);
      var arrowSprite = this.add.sprite(100, 100, "arrow");
      arrowSprite.setVisible(false);

      // Back Button
      backButton.setInteractive();
      backButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = backButton.x - backButton.width + 60;
        arrowSprite.y = backButton.y + backButton.height / 4;
      });
      backButton.on("pointerup", function () {
        _this.scene.start(_CST.CST.SCENES.MENU);
      });

      // Submit Button
      lobbyButton.setInteractive();
      lobbyButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = lobbyButton.x - lobbyButton.width + 130;
        arrowSprite.y = lobbyButton.y + lobbyButton.height / 4;
      });
      lobbyButton.on("pointerup", function () {
        // Networking!
        // Checks to see if code matches any existing games
        // If it does, then the scene is changed to a lobby scene that shows the other players in the game
        // If it doesn't, then an error message is displayed
        _this.scene.start(_CST.CST.SCENES.LOBBY);
      });
    }
  }]);
  return JoinGameScene;
}(Phaser.Scene);
exports.JoinGameScene = JoinGameScene;
},{"../CST":"src/CST.js"}],"src/scenes/CreateGameScene.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreateGameScene = void 0;
var _CST = require("../CST");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var CreateGameScene = /*#__PURE__*/function (_Phaser$Scene) {
  _inherits(CreateGameScene, _Phaser$Scene);
  var _super = _createSuper(CreateGameScene);
  function CreateGameScene() {
    _classCallCheck(this, CreateGameScene);
    return _super.call(this, {
      key: _CST.CST.SCENES.CREATE
    });
  }

  // Creates any images, text, etc.
  _createClass(CreateGameScene, [{
    key: "create",
    value: function create() {
      var _this = this;
      // Adds background image to the scene - (x, y, image)
      this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2, 'background').setDisplaySize(this.game.renderer.width, this.game.renderer.height).setDepth(0);

      // Join Game title
      this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.20, 'Create Game', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.40, 'Please send the code below to your friend:', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      var joinCode = Math.random().toString(36).substring(2, 8);
      this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.50, "Join code: ".concat(joinCode), {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);

      // Submit button
      var lobbyButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height / 2 + 230, 'Join Lobby', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);

      // Back Button for navigating back to the main menu
      var backButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height / 2 + 300, 'Back', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);
      var arrowSprite = this.add.sprite(100, 100, "arrow");
      arrowSprite.setVisible(false);

      // Back Button
      backButton.setInteractive();
      backButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = backButton.x - backButton.width + 60;
        arrowSprite.y = backButton.y + backButton.height / 4;
      });
      backButton.on("pointerup", function () {
        // Moves back to the main menu when the back button is clicked
        _this.scene.start(_CST.CST.SCENES.MENU);
      });

      // Submit Button
      lobbyButton.setInteractive();
      lobbyButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = lobbyButton.x - lobbyButton.width + 130;
        arrowSprite.y = lobbyButton.y + lobbyButton.height / 4;
      });
      lobbyButton.on("pointerup", function () {
        // Networking!
        // Submit username to the database
        // I'm not sure when join code will be generated
        // Move to the lobby scene
        _this.scene.start(_CST.CST.SCENES.LOBBY);
      });
    }
  }]);
  return CreateGameScene;
}(Phaser.Scene);
exports.CreateGameScene = CreateGameScene;
},{"../CST":"src/CST.js"}],"src/scenes/LobbyScene.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LobbyScene = void 0;
var _CST = require("../CST");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var LobbyScene = /*#__PURE__*/function (_Phaser$Scene) {
  _inherits(LobbyScene, _Phaser$Scene);
  var _super = _createSuper(LobbyScene);
  function LobbyScene() {
    _classCallCheck(this, LobbyScene);
    return _super.call(this, {
      key: _CST.CST.SCENES.LOBBY
    });
  }

  // Creates any images, text, etc.
  _createClass(LobbyScene, [{
    key: "create",
    value: function create() {
      var _this = this;
      // Adds background image to the scene - (x, y, image)
      this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2, 'background').setDisplaySize(this.game.renderer.width, this.game.renderer.height).setDepth(0);

      // Join Game title
      this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.20, 'Lobby', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);
      this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.30, 'Players:', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);

      // Networking!
      // PLACEHOLDER - Lists current players connected to game
      var playerList = this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.40, 'Player 1 (You)', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      var startGameButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.80, 'Start Game', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);

      // Back Button for navigating back to the main menu
      var backButton = this.add.text(this.game.renderer.width / 2, this.game.renderer.height / 2 + 300, 'Back', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '60px'
      }).setDepth(1).setOrigin(0.5);
      var arrowSprite = this.add.sprite(100, 100, "arrow");
      arrowSprite.setVisible(false);

      // Start Game Button
      startGameButton.setInteractive();
      startGameButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = startGameButton.x - startGameButton.width + 130;
        arrowSprite.y = startGameButton.y + startGameButton.height / 4;
      });
      startGameButton.on("pointerup", function () {
        // Moves to the game scene when the start game button is clicked
        _this.scene.start(_CST.CST.SCENES.GAME);
      });

      // Back Button
      backButton.setInteractive();
      backButton.on("pointerover", function () {
        arrowSprite.setVisible(true);
        arrowSprite.x = backButton.x - backButton.width + 60;
        arrowSprite.y = backButton.y + backButton.height / 4;
      });
      backButton.on("pointerup", function () {
        // Moves back to the main menu when the back button is clicked
        _this.scene.start(_CST.CST.SCENES.MENU);
      });
    }
  }]);
  return LobbyScene;
}(Phaser.Scene);
exports.LobbyScene = LobbyScene;
},{"../CST":"src/CST.js"}],"src/scenes/LoadScene.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadScene = void 0;
var _CST = require("../CST");
var _MenuScene = require("./MenuScene");
var _OptionsScene = require("./OptionsScene");
var _CreditsScene = require("./CreditsScene");
var _JoinGameScene = require("./JoinGameScene");
var _CreateGameScene = require("./CreateGameScene");
var _LobbyScene = require("./LobbyScene");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
// Creates the LoadScene class
var LoadScene = /*#__PURE__*/function (_Phaser$Scene) {
  _inherits(LoadScene, _Phaser$Scene);
  var _super = _createSuper(LoadScene);
  function LoadScene() {
    _classCallCheck(this, LoadScene);
    return _super.call(this, {
      key: _CST.CST.SCENES.LOAD
    });
  }

  // Used to initialize variables (currently not used)
  _createClass(LoadScene, [{
    key: "init",
    value: function init() {}

    // Used to load all the assets
  }, {
    key: "preload",
    value: function preload() {
      var _this = this;
      // Load images
      this.load.image("background", "./assets/tower2.jpg");
      this.load.image("arrow", "./assets/arrow.png");

      // Load audio
      this.load.audio("soundtrack", "./assets/soundtrack.mp3");

      // Load plugins
      this.load.scenePlugin({
        key: 'rexuiplugin',
        url: 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js',
        sceneKey: 'rexUI'
      });
      this.load.plugin('rextexteditplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextexteditplugin.min.js', true);
      this.load.plugin('rexroundrectangleplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexroundrectangleplugin.min.js', true);

      // Progress Bar
      var loadingBar = this.add.graphics({
        fillStyle: {
          colour: 0xffffff
        }
      });

      /*
      The following code is used to add functionality to the progress bar (will add a more complex progress bar later)
      Loader Events:
          complete - when everything is loaded
          progress - when something is loading
      */

      // Simulate load times (for testing)
      for (var i = 0; i < 200; i++) {
        this.load.image("background" + i, "./assets/background");
      }

      // Used to create the progress bar
      this.add.text(this.game.renderer.width / 2, this.game.renderer.height * 0.45, 'Loading game...', {
        fontFamily: 'font1',
        fill: '#ffffff',
        fontSize: '40px'
      }).setDepth(1).setOrigin(0.5);
      this.load.on("progress", function (percent) {
        loadingBar.fillRect(0, _this.game.renderer.height / 2, _this.game.renderer.width * percent, 40);
        console.log(percent);
      });

      // Loads menu when everything is loaded
      this.load.on("complete", function () {
        _this.scene.start(_CST.CST.SCENES.MENU);
      });
    }
  }]);
  return LoadScene;
}(Phaser.Scene);
exports.LoadScene = LoadScene;
},{"../CST":"src/CST.js","./MenuScene":"src/scenes/MenuScene.js","./OptionsScene":"src/scenes/OptionsScene.js","./CreditsScene":"src/scenes/CreditsScene.js","./JoinGameScene":"src/scenes/JoinGameScene.js","./CreateGameScene":"src/scenes/CreateGameScene.js","./LobbyScene":"src/scenes/LobbyScene.js"}],"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class ObjectFactory {
  constructor(scene) {
    this.scene = scene;
    this.displayList = scene.sys.displayList;
    this.updateList = scene.sys.updateList;
    scene.events.once('destroy', this.destroy, this);
  }
  destroy() {
    this.scene = null;
    this.displayList = null;
    this.updateList = null;
  }
  static register(type, callback) {
    ObjectFactory.prototype[type] = callback;
  }
}
;
var _default = ObjectFactory;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/SetGetFrameNameCallback.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetGetFrameNameCallback = function (callback) {
  if (callback === undefined) {
    callback = DefaultGetFrameNameCallback;
  }
  this.getFrameNameCallback = callback;
  return this;
};
var DefaultGetFrameNameCallback = function (colIndex, rowIndex, baseFrameName) {
  if (baseFrameName === '__BASE') {
    return `${colIndex},${rowIndex}`;
  } else {
    return `${baseFrameName}_${colIndex},${rowIndex}`;
  }
};
var _default = SetGetFrameNameCallback;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/object/IsPlainObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2018 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

/**
 * This is a slightly modified version of jQuery.isPlainObject.
 * A plain object is an object whose internal class property is [object Object].
 *
 * @function Phaser.Utils.Objects.IsPlainObject
 * @since 3.0.0
 *
 * @param {object} obj - The object to inspect.
 *
 * @return {boolean} `true` if the object is plain, otherwise `false`.
 */
var IsPlainObject = function (obj) {
  // Not plain objects:
  // - Any object or value whose internal [[Class]] property is not "[object Object]"
  // - DOM nodes
  // - window
  if (typeof obj !== 'object' || obj.nodeType || obj === obj.window) {
    return false;
  }

  // Support: Firefox <20
  // The try/catch suppresses exceptions thrown when attempting to access
  // the "constructor" property of certain host objects, ie. |window.location|
  // https://bugzilla.mozilla.org/show_bug.cgi?id=814622
  try {
    if (obj.constructor && !{}.hasOwnProperty.call(obj.constructor.prototype, 'isPrototypeOf')) {
      return false;
    }
  } catch (e) {
    return false;
  }

  // If the function hasn't returned already, we're confident that
  // |obj| is a plain object, created by {} or constructed with new Object
  return true;
};
var _default = IsPlainObject;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsPlainObject = _interopRequireDefault(require("./IsPlainObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DeepClone = function (inObject) {
  var outObject;
  var value;
  var key;
  if (inObject == null || typeof inObject !== 'object') {
    //  inObject is not an object
    return inObject;
  }

  //  Create an array or object to hold the values
  outObject = Array.isArray(inObject) ? [] : {};
  if ((0, _IsPlainObject.default)(inObject)) {
    for (key in inObject) {
      value = inObject[key];

      //  Recursively (deep) copy for nested objects, including arrays
      outObject[key] = DeepClone(value);
    }
  } else {
    outObject = inObject;
  }
  return outObject;
};
var _default = DeepClone;
exports.default = _default;
},{"./IsPlainObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsPlainObject.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/SetTexture.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DeepClone = _interopRequireDefault(require("../../object/DeepClone.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var SetTexture = function (key, baseFrameName, columns, rows) {
  if (Array.isArray(baseFrameName)) {
    rows = columns;
    columns = baseFrameName;
    baseFrameName = undefined;
  }
  if (baseFrameName === undefined) {
    baseFrameName = '__BASE';
  }
  columns = (0, _DeepClone.default)(columns);
  rows = (0, _DeepClone.default)(rows);
  this.textureKey = key;
  this.baseFrameName = baseFrameName;
  this.columns.data = columns;
  this.columns.count = columns ? columns.length : 0;
  this.columns.stretch = 0;
  this.columns.minWidth = 0;
  this.columns.scale = 1;
  this.rows.data = rows;
  this.rows.count = rows ? rows.length : 0;
  this.rows.stretch = 0;
  this.rows.minHeight = 0;
  this.rows.scale = 1;
  var texture = this.scene.sys.textures.get(key);
  if (!texture) {
    this.clear();
    return this;
  }
  if (!columns || !rows) {
    this.clear();
    return this;
  }

  // Get remainder width/height for unknown width/height
  var baseFrame = texture.get(baseFrameName);
  var remainderTextureWidth = baseFrame.width;
  var unknownColumnWidthCount = 0;
  for (var i = 0, cnt = columns.length; i < cnt; i++) {
    if (columns[i] === undefined) {
      unknownColumnWidthCount++;
    } else if (typeof columns[i] === 'number') {
      remainderTextureWidth -= columns[i];
    } else {
      remainderTextureWidth -= columns[i].width;
    }
  }
  var unknownColumnWidth = remainderTextureWidth / unknownColumnWidthCount;
  var remainderTextureHeight = baseFrame.height;
  var unknownRowHeightCount = 0;
  for (var i = 0, cnt = rows.length; i < cnt; i++) {
    if (rows[i] === undefined) {
      unknownRowHeightCount++;
    } else if (typeof rows[i] === 'number') {
      remainderTextureHeight -= rows[i];
    } else {
      remainderTextureHeight -= rows[i].width;
    }
  }
  var unknownRowHeight = remainderTextureHeight / unknownRowHeightCount;
  var row, col, rowHeight, colWidth, frameName;
  var offsetX = 0,
    offsetY = 0;
  for (var j = 0, jcnt = rows.length; j < jcnt; j++) {
    // Unknown height
    if (rows[j] === undefined) {
      rows[j] = unknownRowHeight;
    }
    if (typeof rows[j] === 'number') {
      rows[j] = {
        height: rows[j],
        stretch: j % 2
      };
    }
    row = rows[j];
    rowHeight = row.height;
    this.rows.stretch += row.stretch | 0;
    this.rows.minHeight += row.stretch > 0 ? 0 : rowHeight;
    offsetX = 0;
    for (var i = 0, icnt = columns.length; i < icnt; i++) {
      // Unknown width
      if (columns[i] === undefined) {
        columns[i] = unknownColumnWidth;
      }
      if (typeof columns[i] === 'number') {
        columns[i] = {
          width: columns[i],
          stretch: i % 2
        };
      }
      col = columns[i];
      colWidth = col.width;
      if (j === 0) {
        this.columns.stretch += col.stretch | 0;
        this.columns.minWidth += col.stretch > 0 ? 0 : colWidth;
      }
      if (colWidth >= 1 && rowHeight >= 1) {
        frameName = this.getFrameNameCallback(i, j, baseFrameName);
        var frameNameType = typeof frameName;
        if (frameNameType === 'string' || frameNameType === 'number') {
          texture.add(frameName, 0, offsetX + baseFrame.cutX, offsetY + baseFrame.cutY, colWidth, rowHeight);
          // Do nothing if frameName is existed
        }
      } else {
        // console.warn(`Size of Grid(${i},${j}) = ${colWidth}x${rowHeight}, which is invalid`);
      }
      offsetX += colWidth;
    }
    offsetY += rowHeight;
  }
  this.updateTexture();
  return this;
};
var _default = SetTexture;
exports.default = _default;
},{"../../object/DeepClone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/UpdateTexture.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var UpdateTexture = function () {
  this.clear();
  if (this.textureKey === undefined) {
    return this;
  }
  var texture = this.scene.sys.textures.get(this.textureKey);
  if (!texture) {
    return this;
  }
  var minWidth = this.columns.minWidth * this.maxFixedPartScaleX; // Fixed-part width
  var minHeight = this.rows.minHeight * this.maxFixedPartScaleY; // Fixed-part height
  var stretchWidth = this.width - minWidth;
  var stretchHeight = this.height - minHeight;
  var fixedPartScaleX = stretchWidth >= 0 ? this.maxFixedPartScaleX : this.width / minWidth;
  var fixedPartScaleY = stretchHeight >= 0 ? this.maxFixedPartScaleY : this.height / minHeight;
  if (this.preserveRatio) {
    var minScale = Math.min(fixedPartScaleX, fixedPartScaleY);
    if (fixedPartScaleX > minScale) {
      var compensationWidth = (fixedPartScaleX - minScale) * minWidth;
      if (stretchWidth >= 0) {
        stretchWidth += compensationWidth;
      } else {
        stretchWidth = compensationWidth;
      }
      fixedPartScaleX = minScale;
    }
    if (fixedPartScaleY > minScale) {
      var compensationHeight = (fixedPartScaleY - minScale) * minHeight;
      if (stretchHeight >= 0) {
        stretchHeight += compensationHeight;
      } else {
        stretchHeight = compensationHeight;
      }
      fixedPartScaleY = minScale;
    }
  }
  this.columns.scale = fixedPartScaleX;
  this.rows.scale = fixedPartScaleY;
  var proportionWidth;
  if (stretchWidth > 0) {
    proportionWidth = this.columns.stretch > 0 ? stretchWidth / this.columns.stretch : 0;
  } else {
    proportionWidth = 0;
  }
  var proportionHeight;
  if (stretchHeight > 0) {
    proportionHeight = this.rows.stretch > 0 ? stretchHeight / this.rows.stretch : 0;
  } else {
    proportionHeight = 0;
  }
  var frameName, col, row, colWidth, rowHeight;
  var offsetX = 0,
    offsetY = 0;
  var imageType;
  for (var j = 0, jcnt = this.rows.count; j < jcnt; j++) {
    row = this.rows.data[j];
    rowHeight = row.stretch === 0 ? row.height * fixedPartScaleY : proportionHeight * row.stretch;
    offsetX = 0;
    for (var i = 0, icnt = this.columns.count; i < icnt; i++) {
      col = this.columns.data[i];
      colWidth = col.stretch === 0 ? col.width * fixedPartScaleX : proportionWidth * col.stretch;
      frameName = this.getFrameNameCallback(i, j, this.baseFrameName);
      if (texture.has(frameName) && colWidth > 0 && rowHeight > 0) {
        if (row.stretch === 0 && col.stretch === 0) {
          // Fixed parts
          imageType = 0; // Draw image
        } else {
          // Stretchable parts
          if (this.getStretchMode(i, j) === 0) {
            // Scaled image
            imageType = 0; // Draw scaled image
          } else {
            // Repeat tile-sprite
            imageType = 1; // Draw tile-sprite
          }
        }

        if (imageType === 0) {
          this._drawImage(this.textureKey, frameName, offsetX, offsetY, colWidth, rowHeight);
        } else {
          this._drawTileSprite(this.textureKey, frameName, offsetX, offsetY, colWidth, rowHeight);
        }
      }
      offsetX += colWidth;
    }
    offsetY += rowHeight;
  }
};
var _default = UpdateTexture;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/SetStretchMode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
var SetStretchMode = function (mode) {
  if (IsPlainObject(mode)) {
    this.stretchMode.edge = parseMode(GetValue(mode, 'edge', 0));
    this.stretchMode.internal = parseMode(GetValue(mode, 'internal', 0));
  } else {
    mode = parseMode(mode);
    this.stretchMode.edge = mode;
    this.stretchMode.internal = mode;
  }
  return this;
};
var parseMode = function (mode) {
  if (typeof mode === 'string') {
    mode = EXTENDMODE[mode];
  }
  return mode;
};
const EXTENDMODE = {
  scale: 0,
  repeat: 1
};
var _default = SetStretchMode;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/utils/IsEdge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var IsEdge = function (colIndex, rowIndex) {
  return colIndex === 0 || colIndex === this.columns.count - 1 || rowIndex === 0 || rowIndex === this.rows.count - 1;
};
var _default = IsEdge;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/GetStretchMode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsEdge = _interopRequireDefault(require("../utils/IsEdge.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetStretchMode = function (colIndex, rowIndex) {
  return _IsEdge.default.call(this, colIndex, rowIndex) ? this.stretchMode.edge : this.stretchMode.internal;
};
var _default = GetStretchMode;
exports.default = _default;
},{"../utils/IsEdge.js":"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/utils/IsEdge.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/SetPreserveRatio.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetPreserveRatio = function (enable) {
  if (enable == undefined) {
    enable = true;
  }
  this.preserveRatio = enable;
  return this;
};
var _default = SetPreserveRatio;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/SetMaxFixedPartScale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetMaxFixedPartScale = function (scaleX, scaleY) {
  if (scaleY === undefined) {
    scaleY = scaleX;
  }
  this.maxFixedPartScaleX = scaleX;
  this.maxFixedPartScaleY = scaleY;
  return this;
};
var _default = SetMaxFixedPartScale;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/object/NOOP.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var NOOP = function () {
  //  NOOP
};
var _default = NOOP;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SetGetFrameNameCallback = _interopRequireDefault(require("./texture/SetGetFrameNameCallback.js"));
var _SetTexture = _interopRequireDefault(require("./texture/SetTexture.js"));
var _UpdateTexture = _interopRequireDefault(require("./texture/UpdateTexture.js"));
var _SetStretchMode = _interopRequireDefault(require("./texture/SetStretchMode.js"));
var _GetStretchMode = _interopRequireDefault(require("./texture/GetStretchMode.js"));
var _SetPreserveRatio = _interopRequireDefault(require("./texture/SetPreserveRatio.js"));
var _SetMaxFixedPartScale = _interopRequireDefault(require("./texture/SetMaxFixedPartScale.js"));
var _NOOP = _interopRequireDefault(require("../object/NOOP"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  _drawImage: _NOOP.default,
  _drawTileSprite: _NOOP.default,
  setGetFrameNameCallback: _SetGetFrameNameCallback.default,
  setTexture: _SetTexture.default,
  updateTexture: _UpdateTexture.default,
  setStretchMode: _SetStretchMode.default,
  getStretchMode: _GetStretchMode.default,
  setPreserveRatio: _SetPreserveRatio.default,
  setMaxFixedPartScale: _SetMaxFixedPartScale.default
};
exports.default = _default;
},{"./texture/SetGetFrameNameCallback.js":"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/SetGetFrameNameCallback.js","./texture/SetTexture.js":"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/SetTexture.js","./texture/UpdateTexture.js":"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/UpdateTexture.js","./texture/SetStretchMode.js":"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/SetStretchMode.js","./texture/GetStretchMode.js":"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/GetStretchMode.js","./texture/SetPreserveRatio.js":"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/SetPreserveRatio.js","./texture/SetMaxFixedPartScale.js":"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/texture/SetMaxFixedPartScale.js","../object/NOOP":"node_modules/phaser3-rex-plugins/plugins/utils/object/NOOP.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/NinePatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Methods = _interopRequireDefault(require("./Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
var NinePatchBase = function (GOClass, type) {
  class NinePatch extends GOClass {
    constructor(scene, x, y, width, height, key, baseFrame, columns, rows, config) {
      if (IsPlainObject(x)) {
        config = x;
        x = GetValue(config, 'x', 0);
        y = GetValue(config, 'y', 0);
        width = GetValue(config, 'width', 1);
        height = GetValue(config, 'height', 1);
        key = GetValue(config, 'key', undefined);
        baseFrame = GetValue(config, 'baseFrame', undefined);
        columns = GetValue(config, 'columns', undefined);
        rows = GetValue(config, 'rows', undefined);
      } else if (IsPlainObject(width)) {
        config = width;
        width = GetValue(config, 'width', 1);
        height = GetValue(config, 'height', 1);
        key = GetValue(config, 'key', undefined);
        baseFrame = GetValue(config, 'baseFrame', undefined);
        columns = GetValue(config, 'columns', undefined);
        rows = GetValue(config, 'rows', undefined);
      } else if (IsPlainObject(key)) {
        config = key;
        key = GetValue(config, 'key', undefined);
        baseFrame = GetValue(config, 'baseFrame', undefined);
        columns = GetValue(config, 'columns', undefined);
        rows = GetValue(config, 'rows', undefined);
      } else if (IsPlainObject(baseFrame)) {
        config = baseFrame;
        baseFrame = GetValue(config, 'baseFrame', undefined);
        columns = GetValue(config, 'columns', undefined);
        rows = GetValue(config, 'rows', undefined);
      } else if (Array.isArray(baseFrame)) {
        config = rows;
        rows = columns;
        columns = baseFrame;
        baseFrame = GetValue(config, 'baseFrame', undefined);
      } else if (IsPlainObject(columns)) {
        config = columns;
        columns = GetValue(config, 'columns', undefined);
        rows = GetValue(config, 'rows', undefined);
      }
      super(scene);
      this.type = type;
      this.setPosition(x, y).setSize(width, height).setOrigin(0.5, 0.5);
      this.columns = {};
      this.rows = {};
      this.stretchMode = {};
      this._tileSprite = undefined; // Reserved for drawing image
      this._image = undefined; // Reserved for drawing image

      this.setGetFrameNameCallback(GetValue(config, 'getFrameNameCallback', undefined));
      this.setStretchMode(GetValue(config, 'stretchMode', 0));
      this.setPreserveRatio(GetValue(config, 'preserveRatio', true));
      var maxFixedPartScale = GetValue(config, 'maxFixedPartScale', 1);
      var maxFixedPartScaleX = GetValue(config, 'maxFixedPartScaleX', maxFixedPartScale);
      var maxFixedPartScaleY = GetValue(config, 'maxFixedPartScaleY', undefined);
      this.setMaxFixedPartScale(maxFixedPartScaleX, maxFixedPartScaleY);
      this.setTexture(key, baseFrame, columns, rows);
    }
    get minWidth() {
      return this.columns.minWidth;
    }
    get minHeight() {
      return this.rows.minHeight;
    }
    get fixedPartScaleX() {
      return this.columns.scale;
    }
    get fixedPartScaleY() {
      return this.rows.scale;
    }
    resize(width, height) {
      if (this.width === width && this.height === height) {
        return this;
      }
      super.resize(width, height);
      this.updateTexture();
      return this;
    }
  }
  Object.assign(NinePatch.prototype, _Methods.default);
  return NinePatch;
};
var _default = NinePatchBase;
exports.default = _default;
},{"./Methods.js":"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/Methods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/rendertexture/utils/MakeChildImageGameObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var MakeChildImageGameObject = function (parent, key, className) {
  if (className === undefined) {
    className = 'image';
  }
  if (!parent[key]) {
    parent[key] = parent.scene.make[className]({
      add: false,
      origin: {
        x: 0,
        y: 0
      }
    });
    parent.once('destroy', function () {
      if (parent[key]) {
        parent[key].destroy();
        parent[key] = undefined;
      }
    });
  }
  return parent[key];
};
var _default = MakeChildImageGameObject;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/rendertexture/ninepatch/texture/DrawImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MakeChildImageGameObject = _interopRequireDefault(require("../../utils/MakeChildImageGameObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DrawImage = function (key, frame, x, y, width, height) {
  var gameObject = (0, _MakeChildImageGameObject.default)(this, '_image', 'image').setTexture(key, frame).setDisplaySize(width, height);
  this.draw(gameObject, x, y);
};
var _default = DrawImage;
exports.default = _default;
},{"../../utils/MakeChildImageGameObject.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/rendertexture/utils/MakeChildImageGameObject.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/rendertexture/ninepatch/texture/DrawTileSprite.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MakeChildImageGameObject = _interopRequireDefault(require("../../utils/MakeChildImageGameObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DrawTileSprite = function (key, frame, x, y, width, height) {
  var gameObject = (0, _MakeChildImageGameObject.default)(this, '_tileSprite', 'tileSprite').setTexture(key, frame).setSize(width, height);
  this.draw(gameObject, x, y);
};
var _default = DrawTileSprite;
exports.default = _default;
},{"../../utils/MakeChildImageGameObject.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/rendertexture/utils/MakeChildImageGameObject.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/rendertexture/ninepatch/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DrawImage = _interopRequireDefault(require("./texture/DrawImage.js"));
var _DrawTileSprite = _interopRequireDefault(require("./texture/DrawTileSprite.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  _drawImage: _DrawImage.default,
  _drawTileSprite: _DrawTileSprite.default
};
exports.default = _default;
},{"./texture/DrawImage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/rendertexture/ninepatch/texture/DrawImage.js","./texture/DrawTileSprite.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/rendertexture/ninepatch/texture/DrawTileSprite.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/rendertexture/ninepatch/NinePatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NinePatch = _interopRequireDefault(require("../../../utils/ninepatch/NinePatch.js"));
var _Methods = _interopRequireDefault(require("./Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const RenderTexture = Phaser.GameObjects.RenderTexture;
class NinePatch extends (0, _NinePatch.default)(RenderTexture, 'rexNinePatch') {}
Object.assign(NinePatch.prototype, _Methods.default);
var _default = NinePatch;
exports.default = _default;
},{"../../../utils/ninepatch/NinePatch.js":"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/NinePatch.js","./Methods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/rendertexture/ninepatch/Methods.js"}],"node_modules/phaser3-rex-plugins/plugins/ninepatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NinePatch = _interopRequireDefault(require("./gameobjects/rendertexture/ninepatch/NinePatch.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _NinePatch.default;
exports.default = _default;
},{"./gameobjects/rendertexture/ninepatch/NinePatch.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/rendertexture/ninepatch/NinePatch.js"}],"node_modules/phaser3-rex-plugins/templates/ui/ninepatch/NinePatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ninepatch = _interopRequireDefault(require("../../../plugins/ninepatch.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _ninepatch.default;
exports.default = _default;
},{"../../../plugins/ninepatch.js":"node_modules/phaser3-rex-plugins/plugins/ninepatch.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var IsInValidKey = function (keys) {
  return keys == null || keys === '' || keys.length === 0;
};
var GetEntry = function (target, keys, defaultEntry) {
  var entry = target;
  if (IsInValidKey(keys)) {
    //entry = root;
  } else {
    if (typeof keys === 'string') {
      keys = keys.split('.');
    }
    var key;
    for (var i = 0, cnt = keys.length; i < cnt; i++) {
      key = keys[i];
      if (entry[key] == null || typeof entry[key] !== 'object') {
        var newEntry;
        if (i === cnt - 1) {
          if (defaultEntry === undefined) {
            newEntry = {};
          } else {
            newEntry = defaultEntry;
          }
        } else {
          newEntry = {};
        }
        entry[key] = newEntry;
      }
      entry = entry[key];
    }
  }
  return entry;
};
var SetValue = function (target, keys, value, delimiter) {
  if (delimiter === undefined) {
    delimiter = '.';
  }

  // no object
  if (typeof target !== 'object') {
    return;
  }

  // invalid key
  else if (IsInValidKey(keys)) {
    // don't erase target
    if (value == null) {
      return;
    }
    // set target to another object
    else if (typeof value === 'object') {
      target = value;
    }
  } else {
    if (typeof keys === 'string') {
      keys = keys.split(delimiter);
    }
    var lastKey = keys.pop();
    var entry = GetEntry(target, keys);
    entry[lastKey] = value;
  }
  return target;
};
var _default = SetValue;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/ninepatch/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NinePatch = _interopRequireDefault(require("./NinePatch.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('ninePatch', function (x, y, width, height, key, columns, rows, config) {
  var gameObject = new _NinePatch.default(this.scene, x, y, width, height, key, columns, rows, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.NinePatch', _NinePatch.default);
var _default = _NinePatch.default;
exports.default = _default;
},{"./NinePatch.js":"node_modules/phaser3-rex-plugins/templates/ui/ninepatch/NinePatch.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/render/WebGLRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetCalcMatrix = Phaser.GameObjects.GetCalcMatrix;
var WebGLRenderer = function (renderer, src, camera, parentMatrix) {
  var bobs = src.getRenderList();
  if (bobs.length === 0) {
    return;
  }
  camera.addToRenderList(src);
  var pipeline = renderer.pipelines.set(src.pipeline);
  var texture = src.frame.glTexture;
  var textureUnit = pipeline.setGameObject(src);
  var roundPixels = camera.roundPixels;
  var result = GetCalcMatrix(src, camera, parentMatrix);
  var calcMatrix = pipeline.calcMatrix.copyFrom(result.calc);
  var dx = src._displayOriginX;
  var dy = src._displayOriginY;
  var alpha = camera.alpha * src.alpha;
  renderer.pipelines.preBatch(src);
  for (var i = 0, cnt = bobs.length; i < cnt; i++) {
    bobs[i].webglRender(pipeline, calcMatrix, alpha, dx, dy, texture, textureUnit, roundPixels);
  }
  renderer.pipelines.postBatch(src);
};
var _default = WebGLRenderer;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/render/CanvasRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const SetTransform = Phaser.Renderer.Canvas.SetTransform;
var CanvasRenderer = function (renderer, src, camera, parentMatrix) {
  var ctx = renderer.currentContext;
  var bobs = src.getRenderList();
  if (bobs.length === 0 || !SetTransform(renderer, ctx, src, camera, parentMatrix)) {
    return;
  }
  camera.addToRenderList(src);
  var roundPixels = camera.roundPixels;
  var dx = -src._displayOriginX,
    dy = -src._displayOriginY;
  ctx.translate(dx, dy);
  for (var i = 0, cnt = bobs.length; i < cnt; i++) {
    bobs[i].canvasRender(ctx, dx, dy, roundPixels);
  }

  //  Restore the context saved in SetTransform
  ctx.restore();
};
var _default = CanvasRenderer;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/render/Render.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _WebGLRenderer = _interopRequireDefault(require("./WebGLRenderer.js"));
var _CanvasRenderer = _interopRequireDefault(require("./CanvasRenderer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  renderWebGL: _WebGLRenderer.default,
  renderCanvas: _CanvasRenderer.default
};
exports.default = _default;
},{"./WebGLRenderer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/render/WebGLRenderer.js","./CanvasRenderer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/render/CanvasRenderer.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/SetTexture.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetTexture = function (key, frame) {
  this.texture = this.scene.sys.textures.get(key);
  this.frame = this.texture.get(frame);
  return this;
};
var _default = SetTexture;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/Resize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Resize = function (width, height) {
  if (this.width === width && this.height === height) {
    return this;
  }
  this.width = width;
  this.height = height;
  this.updateDisplayOrigin();
  var input = this.input;
  if (input && !input.customHitArea) {
    input.hitArea.width = width;
    input.hitArea.height = height;
  }
  return this;
};
var _default = Resize;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/AddChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var AddChild = function (bob) {
  this.lastAppendedChildren.length = 0;
  if (Array.isArray(bob)) {
    this.children.add(bob);
    this.lastAppendedChildren.push(...bob);
  } else {
    this.children.add(bob);
    this.lastAppendedChildren.push(bob);
  }
  return this;
};
var _default = AddChild;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/RemoveChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const RemoveItem = Phaser.Utils.Array.Remove;
var RemoveChild = function (bob) {
  if (this.poolManager) {
    // Free this bob (bob.onFree())
    this.poolManager.free(bob);
  }

  // Remove this bob from blitter
  RemoveItem(this.children.list, bob);
  this.lastAppendedChildren.length = 0;
  this.dirty = true;
  return this;
};
var _default = RemoveChild;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/RemoveChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RemoveChildren = function () {
  if (this.poolManager) {
    // Free all bobs (bob.onFree())
    this.poolManager.freeMultiple(this.children.list);
  }

  // Remove all bobs from blitter
  this.children.list.length = 0;
  this.lastAppendedChildren.length = 0;
  this.dirty = true;
  return this;
};
var _default = RemoveChildren;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/GetLastAppendedChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetLastAppendedChildren = function () {
  return this.lastAppendedChildren;
};
var _default = GetLastAppendedChildren;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/GetChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildren = function () {
  return this.children.list;
};
var _default = GetChildren;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/TintMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setTint(tint) {
    // 0: Solid tint + texture alpha
    this.tint = tint;
    this.tintFill = false;
    return this;
  },
  setTintFill(tint) {
    // 1: Solid tint, no texture
    this.tint = tint;
    this.tintFill = true;
    return this;
  },
  clearTint() {
    this.setTint(0xffffff);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SetTexture = _interopRequireDefault(require("./SetTexture.js"));
var _Resize = _interopRequireDefault(require("./Resize.js"));
var _AddChild = _interopRequireDefault(require("./AddChild.js"));
var _RemoveChild = _interopRequireDefault(require("./RemoveChild.js"));
var _RemoveChildren = _interopRequireDefault(require("./RemoveChildren.js"));
var _GetLastAppendedChildren = _interopRequireDefault(require("./GetLastAppendedChildren.js"));
var _GetChildren = _interopRequireDefault(require("./GetChildren.js"));
var _TintMethods = _interopRequireDefault(require("./TintMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  setTexture: _SetTexture.default,
  resize: _Resize.default,
  setSize: _Resize.default,
  addChild: _AddChild.default,
  removeChild: _RemoveChild.default,
  removeChildren: _RemoveChildren.default,
  clear: _RemoveChildren.default,
  getLastAppendedChildren: _GetLastAppendedChildren.default,
  getChildren: _GetChildren.default
};
Object.assign(methods, _TintMethods.default);
var _default = methods;
exports.default = _default;
},{"./SetTexture.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/SetTexture.js","./Resize.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/Resize.js","./AddChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/AddChild.js","./RemoveChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/RemoveChild.js","./RemoveChildren.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/RemoveChildren.js","./GetLastAppendedChildren.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/GetLastAppendedChildren.js","./GetChildren.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/GetChildren.js","./TintMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/TintMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/struct/Stack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Stack {
  constructor() {
    this.items = [];
  }
  destroy() {
    this.clear();
    this.items = undefined;
  }
  pop() {
    return this.items.length > 0 ? this.items.pop() : null;
  }
  push(l) {
    this.items.push(l);
    return this;
  }
  pushMultiple(arr) {
    this.items.push.apply(this.items, arr);
    arr.length = 0;
    return this;
  }
  clear() {
    this.items.length = 0;
    return this;
  }
}
var _default = Stack;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/pool.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Stack = _interopRequireDefault(require("./utils/struct/Stack.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _Stack.default;
exports.default = _default;
},{"./utils/struct/Stack.js":"node_modules/phaser3-rex-plugins/plugins/utils/struct/Stack.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/poolmanager/PoolManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _pool = _interopRequireDefault(require("../../../../pool.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var Pools = {};
class PoolManager {
  constructor(config) {
    this.pools = GetValue(config, 'pools', Pools);
  }
  destroy() {
    this.pools = undefined;
  }
  free(bob) {
    if (!this.pools) {
      return this;
    }
    var bobType = bob.type;
    if (!this.pools.hasOwnProperty(bobType)) {
      this.pools[bobType] = new _pool.default();
    }
    this.pools[bobType].push(bob);
    bob.onFree();
    return this;
  }
  freeMultiple(bobs) {
    if (!this.pools) {
      return this;
    }
    for (var i = 0, cnt = bobs.length; i < cnt; i++) {
      this.free(bobs[i]);
    }
    return this;
  }
  allocate(bobType) {
    if (!this.pools || !this.pools.hasOwnProperty(bobType)) {
      return null;
    }
    return this.pools[bobType].pop();
  }
}
var _default = PoolManager;
exports.default = _default;
},{"../../../../pool.js":"node_modules/phaser3-rex-plugins/plugins/pool.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/BlitterBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Render = _interopRequireDefault(require("./render/Render.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
var _PoolManager = _interopRequireDefault(require("./poolmanager/PoolManager.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GameObject = Phaser.GameObjects.GameObject;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const List = Phaser.Structs.List;
const StableSort = Phaser.Utils.Array.StableSort;
class Blitter extends GameObject {
  constructor(scene, x, y, texture, frame, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      texture = GetValue(config, 'texture');
      frame = GetValue(config, 'frame');
    }
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    super(scene, 'rexBlitter');
    this.children = new List();
    this.renderList = [];
    this.displayListDirty = false;
    this.lastAppendedChildren = [];
    var reuseBob = GetValue(config, 'reuseBob', true);
    this.poolManager = reuseBob ? new _PoolManager.default(config) : undefined;
    this.setTexture(texture, frame).setPosition(x, y).setOrigin(0, 0).clearTint().initPipeline();
  }
  preDestroy() {
    this.removeChildren();
    this.children.destroy();
    this.renderList.length = 0;
    if (this.poolManager) {
      this.poolManager.destroy();
    }
  }
  getRenderList() {
    if (this.displayListDirty) {
      this.renderList.length = 0;
      var needDepthSort = false;
      var children = this.children.list;
      for (var i = 0, cnt = children.length; i < cnt; i++) {
        var child = children[i];
        if (ChildCanRender(child)) {
          this.renderList.push(child);
          if (!needDepthSort) {
            needDepthSort = child.depth !== 0;
          }
        }
      }
      if (needDepthSort) {
        StableSort(this.renderList, SortByDepth);
      }
      this.displayListDirty = false;
    }
    return this.renderList;
  }
}
var ChildCanRender = function (child) {
  return child.active && child.visible && child.alpha > 0;
};
var SortByDepth = function (childA, childB) {
  return childA._depth - childB._depth;
};
const Components = Phaser.GameObjects.Components;
Phaser.Class.mixin(Blitter, [Components.Alpha, Components.BlendMode, Components.ComputedSize, Components.Depth, Components.GetBounds, Components.Mask, Components.Origin, Components.Pipeline, Components.ScrollFactor, Components.Transform, Components.Visible, _Render.default, _Methods.default]);
var _default = Blitter;
exports.default = _default;
},{"./render/Render.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/render/Render.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/Methods.js","./poolmanager/PoolManager.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/poolmanager/PoolManager.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/bob/Types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageTypeName = void 0;
const ImageTypeName = 'image';
exports.ImageTypeName = ImageTypeName;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/object/GetValue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

//  Source object
//  The key as a string, or an array of keys, i.e. 'banner', or 'banner.hideBanner'
//  The default value to use if the key doesn't exist

/**
 * Retrieves a value from an object.
 *
 * @function Phaser.Utils.Objects.GetValue
 * @since 3.0.0
 *
 * @param {object} source - The object to retrieve the value from.
 * @param {string} key - The name of the property to retrieve from the object. If a property is nested, the names of its preceding properties should be separated by a dot (`.`) - `banner.hideBanner` would return the value of the `hideBanner` property from the object stored in the `banner` property of the `source` object.
 * @param {*} defaultValue - The value to return if the `key` isn't found in the `source` object.
 *
 * @return {*} The value of the requested key.
 */
var GetValue = function (source, key, defaultValue) {
  if (!source || typeof source === 'number') {
    return defaultValue;
  } else if (source.hasOwnProperty(key)) {
    return source[key];
  } else if (key.indexOf('.') !== -1) {
    var keys = key.split('.');
    var parent = source;
    var value = defaultValue;

    //  Use for loop here so we can break early
    for (var i = 0; i < keys.length; i++) {
      if (parent.hasOwnProperty(keys[i])) {
        //  Yes it has a key property, let's carry on down
        value = parent[keys[i]];
        parent = parent[keys[i]];
      } else {
        //  Can't go any further, so reset to default
        value = defaultValue;
        break;
      }
    }
    return value;
  } else {
    return defaultValue;
  }
};
var _default = GetValue;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/object/Clear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Clear = function (obj) {
  if (typeof obj !== 'object' || obj === null) {
    return obj;
  }
  if (Array.isArray(obj)) {
    obj.length = 0;
  } else {
    for (var key in obj) {
      delete obj[key];
    }
  }
  return obj;
};
var _default = Clear;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/data/DataMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetValue = _interopRequireDefault(require("../object/GetValue.js"));
var _Clear = _interopRequireDefault(require("../object/Clear.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  enableData() {
    if (this.data === undefined) {
      this.data = {};
    }
    return this;
  },
  setData(key, value) {
    this.enableData();
    if (arguments.length === 1) {
      var data = key;
      for (key in data) {
        this.data[key] = data[key];
      }
    } else {
      this.data[key] = value;
    }
    return this;
  },
  getData(key, defaultValue) {
    this.enableData();
    return key === undefined ? this.data : (0, _GetValue.default)(this.data, key, defaultValue);
  },
  incData(key, inc, defaultValue) {
    if (defaultValue === undefined) {
      defaultValue = 0;
    }
    this.enableData();
    this.setData(key, this.getData(key, defaultValue) + inc);
    return this;
  },
  mulData(key, mul, defaultValue) {
    if (defaultValue === undefined) {
      defaultValue = 0;
    }
    this.enableData();
    this.setData(key, this.getData(key, defaultValue) * mul);
    return this;
  },
  clearData() {
    if (this.data) {
      (0, _Clear.default)(this.data);
    }
    return this;
  }
};
exports.default = _default;
},{"../object/GetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/GetValue.js","../object/Clear.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/Clear.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/bob/Base.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DataMethods = _interopRequireDefault(require("../../../../utils/data/DataMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Base {
  constructor(parent, type) {
    this.type = type;
    this.data = undefined;
    this.setParent(parent).reset().setActive();
  }
  destroy() {
    if (this.parent) {
      this.parent.removeChild(this);
      // Remove this bob from blitter, and free it (bob.onFree())
      // Will set this.parent to undefined
    }
  }

  setParent(parent) {
    this.parent = parent;
    return this;
  }

  // get scene() {
  //     if (this.parent) {
  //         return this.parent.scene;
  //     } else {
  //         return null;
  //     }
  // }

  setDisplayListDirty(displayListDirty) {
    if (displayListDirty && this.parent) {
      this.parent.displayListDirty = true;
    }
    return this;
  }
  get active() {
    return this._active;
  }
  set active(value) {
    this.setDisplayListDirty(this._active != value);
    this._active = value;
  }
  setActive(active) {
    if (active === undefined) {
      active = true;
    }
    this.active = active;
    return this;
  }
  modifyPorperties(o) {
    return this;
  }

  // Override
  reset() {
    this.clearData();
  }

  // Override
  onFree() {
    this.reset().setActive(false).setParent();
  }
}
Object.assign(Base.prototype, _DataMethods.default);
var _default = Base;
exports.default = _default;
},{"../../../../utils/data/DataMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/data/DataMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/bob/RenderBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Base = _interopRequireDefault(require("./Base.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DegToRad = Phaser.Math.DegToRad;
const RadToDeg = Phaser.Math.RadToDeg;
const GetValue = Phaser.Utils.Objects.GetValue;
class RenderBase extends _Base.default {
  get visible() {
    return this._visible;
  }
  set visible(value) {
    this.setDisplayListDirty(this._visible != value);
    this._visible = value;
  }
  setVisible(visible) {
    if (visible === undefined) {
      visible = true;
    }
    this.visible = visible;
    return this;
  }
  get alpha() {
    return this._alpha;
  }
  set alpha(value) {
    this.setDisplayListDirty(!!this._alpha !== !!value);
    this._alpha = value;
  }
  setAlpha(alpha) {
    this.alpha = alpha;
    return this;
  }
  setX(x) {
    this.x = x;
    return this;
  }
  setY(y) {
    this.y = y;
    return this;
  }
  setPosition(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }
  setRotation(rotation) {
    this.rotation = rotation;
    return this;
  }
  get angle() {
    return RadToDeg(this.rotation);
  }
  set angle(value) {
    this.rotation = DegToRad(value);
  }
  setAngle(angle) {
    this.angle = angle;
    return this;
  }
  setScaleX(scaleX) {
    this.scaleX = scaleX;
    return this;
  }
  get width() {
    return this._width;
  }
  set width(value) {
    this._width = value;
  }
  setWidth(width, keepAspectRatio) {
    if (keepAspectRatio === undefined) {
      keepAspectRatio = false;
    }
    this.width = width;
    if (keepAspectRatio) {
      this.scaleY = this.scaleX;
    }
    return this;
  }
  setScaleY(scaleY) {
    this.scaleY = scaleY;
    return this;
  }
  setScale(scaleX, scaleY) {
    if (scaleY === undefined) {
      scaleY = scaleX;
    }
    this.scaleX = scaleX;
    this.scaleY = scaleY;
    return this;
  }
  get height() {
    return this._height;
  }
  set height(value) {
    this._height = value;
  }
  setHeight(height, keepAspectRatio) {
    if (keepAspectRatio === undefined) {
      keepAspectRatio = false;
    }
    this.height = height;
    if (keepAspectRatio) {
      this.scaleX = this.scaleY;
    }
    return this;
  }
  setScale(scaleX, scaleY) {
    if (scaleY === undefined) {
      scaleY = scaleX;
    }
    this.scaleX = scaleX;
    this.scaleY = scaleY;
    return this;
  }
  get displayWidth() {
    return this._width * this.scaleX;
  }
  set displayWidth(value) {
    this.scaleX = value / this._width;
  }
  setDisplayWidth(width, keepAspectRatio) {
    if (keepAspectRatio === undefined) {
      keepAspectRatio = false;
    }
    this.displayWidth = width;
    if (keepAspectRatio) {
      this.scaleY = this.scaleX;
    }
    return this;
  }
  get displayHeight() {
    return this._height * this.scaleY;
  }
  set displayHeight(value) {
    this.scaleY = value / this._height;
  }
  setDisplayHeight(height, keepAspectRatio) {
    if (keepAspectRatio === undefined) {
      keepAspectRatio = false;
    }
    this.displayHeight = height;
    if (keepAspectRatio) {
      this.scaleX = this.scaleY;
    }
    return this;
  }
  setOriginX(originX) {
    this.originX = originX;
    this._displayOriginX = this.width * originX;
    return this;
  }
  setOriginY(originY) {
    this.originY = originY;
    this._displayOriginY = this.height * originY;
    return this;
  }
  setOrigin(originX, originY) {
    if (originY === undefined) {
      originY = originX;
    }
    this.setOriginX(originX).setOriginY(originY);
    return this;
  }
  get depth() {
    return this._depth;
  }
  set depth(value) {
    this.setDisplayListDirty(this._depth != value);
    this._depth = value;
  }
  setDepth(depth) {
    if (depth === undefined) {
      depth = 0;
    }
    this.depth = depth;
    return this;
  }
  modifyPorperties(o) {
    if (!o) {
      return this;
    }
    if (o.hasOwnProperty('x')) {
      this.setX(o.x);
    }
    if (o.hasOwnProperty('y')) {
      this.setY(o.y);
    }
    if (o.hasOwnProperty('rotation')) {
      this.setRotation(o.rotation);
    } else if (o.hasOwnProperty('angle')) {
      this.setAngle(o.angle);
    }
    if (o.hasOwnProperty('alpha')) {
      this.setAlpha(o.alpha);
    }

    // ScaleX, ScaleY
    var width = GetValue(o, 'width', undefined);
    var height = GetValue(o, 'height', undefined);
    var scale = GetValue(o, 'scale', undefined);
    var scaleX = GetValue(o, 'scaleX', scale);
    var scaleY = GetValue(o, 'scaleY', scale);
    if (width !== undefined) {
      if (height === undefined && scaleY === undefined) {
        this.setWidth(width, true);
      } else {
        this.setWidth(width);
      }
    } else if (scaleX !== undefined) {
      this.setScaleX(scaleX);
    } else if (o.hasOwnProperty('displayWidth')) {
      this.setDisplayWidth(o.displayWidth);
    }
    if (height !== undefined) {
      if (width === undefined && scaleX === undefined) {
        this.setHeight(height, true);
      } else {
        this.setHeight(height);
      }
    } else if (scaleY !== undefined) {
      this.setScaleY(scaleY);
    } else if (o.hasOwnProperty('displayHeight')) {
      this.setDisplayHeight(o.displayHeight);
    }
    var origin = GetValue(o, 'origin', undefined);
    if (origin !== undefined) {
      this.setOrigin(origin);
    } else {
      if (o.hasOwnProperty('originX')) {
        this.setOriginX(o.originX);
      }
      if (o.hasOwnProperty('originY')) {
        this.setOriginY(o.originY);
      }
    }
    if (o.hasOwnProperty('depth')) {
      this.setDepth(o.depth);
    }
    return this;
  }
  reset() {
    super.reset();
    this.setVisible().setAlpha(1).setPosition(0, 0).setRotation(0).setScale(1, 1).setOrigin(0).setDepth(0);
    return this;
  }

  // Override
  webglRender(pipeline, calcMatrix, alpha, dx, dy, texture, textureUnit, roundPixels) {}
  // Override
  canvasRender(ctx, dx, dy, roundPixels) {}
}
var _default = RenderBase;
exports.default = _default;
},{"./Base.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/bob/Base.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/bob/image/WebglRender.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const TransformMatrix = Phaser.GameObjects.Components.TransformMatrix;
const GetTint = Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha;
var FrameMatrix = new TransformMatrix();
var WebglRender = function (pipeline, calcMatrix, alpha, dx, dy, texture, textureUnit, roundPixels) {
  var width = this._width,
    height = this._height;
  var displayOriginX = width * this.originX,
    displayOriginY = height * this.originY;
  var x = this.x - dx,
    y = this.y - dy;
  var flipX = 1;
  var flipY = 1;
  if (this.flipX) {
    x += width - displayOriginX * 2;
    flipX = -1;
  }
  if (this.flipY) {
    y += height - displayOriginY * 2;
    flipY = -1;
  }
  FrameMatrix.applyITRS(x, y, this.rotation, this.scaleX * flipX, this.scaleY * flipY);
  calcMatrix.multiply(FrameMatrix, FrameMatrix);
  var tx = -displayOriginX;
  var ty = -displayOriginY;
  var tw = tx + width;
  var th = ty + height;
  var tx0 = FrameMatrix.getXRound(tx, ty, roundPixels);
  var tx1 = FrameMatrix.getXRound(tx, th, roundPixels);
  var tx2 = FrameMatrix.getXRound(tw, th, roundPixels);
  var tx3 = FrameMatrix.getXRound(tw, ty, roundPixels);
  var ty0 = FrameMatrix.getYRound(tx, ty, roundPixels);
  var ty1 = FrameMatrix.getYRound(tx, th, roundPixels);
  var ty2 = FrameMatrix.getYRound(tw, th, roundPixels);
  var ty3 = FrameMatrix.getYRound(tw, ty, roundPixels);
  var u0 = this.frame.u0;
  var v0 = this.frame.v0;
  var u1 = this.frame.u1;
  var v1 = this.frame.v1;
  var tint = GetTint(this.tint, this.alpha * alpha);
  pipeline.batchQuad(this.parent, tx0, ty0, tx1, ty1, tx2, ty2, tx3, ty3, u0, v0, u1, v1, tint, tint, tint, tint, this.tintFill, texture, textureUnit);
};
var _default = WebglRender;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/bob/image/CanvasRender.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var CanvasRender = function (ctx, dx, dy, roundPixels) {
  ctx.save();
  var width = this._width,
    height = this._height;
  var displayOriginX = width * this.originX,
    displayOriginY = height * this.originY;
  var x = this.x - displayOriginX,
    y = this.y - displayOriginY;
  var flipX = 1;
  var flipY = 1;
  if (this.flipX) {
    x += width;
    flipX = -1;
  }
  if (this.flipY) {
    y += height;
    flipY = -1;
  }
  if (roundPixels) {
    x = Math.round(x);
    y = Math.round(y);
  }
  ctx.translate(x, y);
  ctx.rotate(this.rotation);
  ctx.scale(this.scaleX * flipX, this.scaleY * flipY);
  var frame = this.frame;
  ctx.drawImage(frame.source.image, frame.cutX, frame.cutY, width, height, 0, 0, width, height);
  ctx.restore();
};
var _default = CanvasRender;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/bob/image/ImageData.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RenderBase = _interopRequireDefault(require("../RenderBase.js"));
var _Types = require("../Types.js");
var _WebglRender = _interopRequireDefault(require("./WebglRender.js"));
var _CanvasRender = _interopRequireDefault(require("./CanvasRender.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class ImageData extends _RenderBase.default {
  constructor(parent, frame) {
    super(parent, _Types.ImageTypeName);
    this.setFrame(frame);
  }
  get width() {
    return this._width;
  }
  set width(value) {}
  get height() {
    return this._height;
  }
  set height(value) {}
  setFrame(frame) {
    if (arguments.length > 0 && !IsPlainObject(frame)) {
      frame = this.parent.texture.get(frame);
    }
    this.frame = frame;
    this._width = frame ? frame.width : 0;
    this._height = frame ? frame.height : 0;
    return this;
  }
  setFlipX(flipX) {
    if (flipX === undefined) {
      flipX = true;
    }
    this.flipX = flipX;
    return this;
  }
  setFlipY(flipY) {
    if (flipY === undefined) {
      flipY = true;
    }
    this.flipY = flipY;
    return this;
  }
  resetFlip() {
    this.flipX = false;
    this.flipY = false;
    return this;
  }
  get tint() {
    if (this._tint === undefined) {
      return this.parent.tint;
    } else {
      return this._tint;
    }
  }
  set tint(value) {
    this._tint = value;
  }
  setTint(value) {
    this.tint = value;
    this.tintFill = false;
    return this;
  }
  setTintFill(value) {
    this.tint = value;
    this.tintFill = true;
    return this;
  }
  clearTint() {
    this.setTint(0xffffff);
    return this;
  }
  resetTint() {
    this.tint = undefined;
    this.tintFill = undefined;
    return this;
  }
  get tintFill() {
    if (this._tintFill === undefined) {
      return this.parent.tintFill;
    } else {
      return this._tintFill;
    }
  }
  set tintFill(value) {
    this._tintFill = value;
  }
  reset() {
    super.reset();
    this.resetFlip().resetTint().setFrame();
    return this;
  }
  modifyPorperties(o) {
    if (!o) {
      return this;
    }

    // Size of Image is equal to frame size,
    // Move width, height properties to displayWidth,displayHeight
    if (o.hasOwnProperty('width')) {
      o.displayWidth = o.width;
      delete o.width;
    }
    if (o.hasOwnProperty('height')) {
      o.displayHeight = o.height;
      delete o.height;
    }
    if (o.hasOwnProperty('frame')) {
      this.setFrame(o.frame);
    }
    super.modifyPorperties(o);
    if (o.hasOwnProperty('flipX')) {
      this.setFlipX(o.flipX);
    }
    if (o.hasOwnProperty('flipY')) {
      this.setFlipY(o.flipY);
    }
    if (o.hasOwnProperty('tint')) {
      this.setTint(o.tint);
    }
    if (o.hasOwnProperty('tintFill')) {
      this.setTintFill(o.tintFill);
    }
    return this;
  }
}
var methods = {
  webglRender: _WebglRender.default,
  canvasRender: _CanvasRender.default
};
Object.assign(ImageData.prototype, methods);
var _default = ImageData;
exports.default = _default;
},{"../RenderBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/bob/RenderBase.js","../Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/bob/Types.js","./WebglRender.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/bob/image/WebglRender.js","./CanvasRender.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/bob/image/CanvasRender.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/utils/AddImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Types = require("../../blitterbase/bob/Types.js");
var _ImageData = _interopRequireDefault(require("../../blitterbase/bob/image/ImageData.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var AddImage = function (blitter, config) {
  if (typeof config === 'string') {
    config = {
      frame: config
    };
  }
  var bob = blitter.poolManager ? blitter.poolManager.allocate(_Types.ImageTypeName) : null;
  if (bob === null) {
    bob = new _ImageData.default(blitter);
  } else {
    bob.setParent(blitter).setActive();
  }
  bob.modifyPorperties(config);
  blitter.addChild(bob);
  return bob;
};
var _default = AddImage;
exports.default = _default;
},{"../../blitterbase/bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/bob/Types.js","../../blitterbase/bob/image/ImageData.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/bob/image/ImageData.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/ninepatch/texture/DrawImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddImage = _interopRequireDefault(require("../../blitterbase/utils/AddImage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DrawImage = function (key, frame, x, y, width, height) {
  (0, _AddImage.default)(this, {
    frame: frame,
    x: x,
    y: y,
    width: width,
    height: height
  });
};
var _default = DrawImage;
exports.default = _default;
},{"../../blitterbase/utils/AddImage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/utils/AddImage.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/ninepatch/texture/DrawTileSprite.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddImage = _interopRequireDefault(require("../../blitterbase/utils/AddImage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DrawTileSprite = function (key, frame, x, y, width, height) {
  var frameObj = this.texture.get(frame);
  var frameWidth = frameObj.width,
    frameHeight = frameObj.height;
  var colCount = Math.floor(width / frameWidth),
    rowCount = Math.floor(height / frameHeight);
  // Align images at center
  x += (width - colCount * frameWidth) / 2;
  y += (height - rowCount * frameHeight) / 2;
  for (var colIndex = 0; colIndex < colCount; colIndex++) {
    for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
      (0, _AddImage.default)(this, {
        frame: frame,
        x: x + colIndex * frameWidth,
        y: y + rowIndex * frameHeight
      });
    }
  }
};
var _default = DrawTileSprite;
exports.default = _default;
},{"../../blitterbase/utils/AddImage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/utils/AddImage.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/ninepatch/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DrawImage = _interopRequireDefault(require("./texture/DrawImage.js"));
var _DrawTileSprite = _interopRequireDefault(require("./texture/DrawTileSprite.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  _drawImage: _DrawImage.default,
  _drawTileSprite: _DrawTileSprite.default
};
exports.default = _default;
},{"./texture/DrawImage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/ninepatch/texture/DrawImage.js","./texture/DrawTileSprite.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/ninepatch/texture/DrawTileSprite.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/ninepatch/NinePatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BlitterBase = _interopRequireDefault(require("../blitterbase/BlitterBase.js"));
var _NinePatch = _interopRequireDefault(require("../../../utils/ninepatch/NinePatch.js"));
var _Methods = _interopRequireDefault(require("./Methods.js"));
var _SetTexture = _interopRequireDefault(require("../blitterbase/methods/SetTexture.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class NinePatch extends (0, _NinePatch.default)(_BlitterBase.default, 'rexNinePatch2') {
  setTexture(key, baseFrameName, columns, rows) {
    _SetTexture.default.call(this, key, '__BASE');

    // Not initialized yet
    if (!this.columns) {
      return this;
    }
    super.setTexture(key, baseFrameName, columns, rows);
    return this;
  }
}
Object.assign(NinePatch.prototype, _Methods.default);
var _default = NinePatch;
exports.default = _default;
},{"../blitterbase/BlitterBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/BlitterBase.js","../../../utils/ninepatch/NinePatch.js":"node_modules/phaser3-rex-plugins/plugins/utils/ninepatch/NinePatch.js","./Methods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/ninepatch/Methods.js","../blitterbase/methods/SetTexture.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/blitterbase/methods/SetTexture.js"}],"node_modules/phaser3-rex-plugins/plugins/ninepatch2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NinePatch = _interopRequireDefault(require("./gameobjects/blitter/ninepatch/NinePatch.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _NinePatch.default;
exports.default = _default;
},{"./gameobjects/blitter/ninepatch/NinePatch.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/blitter/ninepatch/NinePatch.js"}],"node_modules/phaser3-rex-plugins/templates/ui/ninepatch2/NinePatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ninepatch = _interopRequireDefault(require("../../../plugins/ninepatch2.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _ninepatch.default;
exports.default = _default;
},{"../../../plugins/ninepatch2.js":"node_modules/phaser3-rex-plugins/plugins/ninepatch2.js"}],"node_modules/phaser3-rex-plugins/templates/ui/ninepatch2/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NinePatch = _interopRequireDefault(require("./NinePatch.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('ninePatch2', function (x, y, width, height, key, columns, rows, config) {
  var gameObject = new _NinePatch.default(this.scene, x, y, width, height, key, columns, rows, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.NinePatch2', _NinePatch.default);
var _default = _NinePatch.default;
exports.default = _default;
},{"./NinePatch.js":"node_modules/phaser3-rex-plugins/templates/ui/ninepatch2/NinePatch.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/geom/roundrectangle/RoundRectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetValue = Phaser.Utils.Objects.GetValue;
class RoundRectangle {
  constructor(x, y, width, height, radiusConfig) {
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = x;
    }
    if (width === undefined) {
      width = 0;
    }
    if (height === undefined) {
      height = 0;
    }
    if (radiusConfig === undefined) {
      radiusConfig = 0;
    }
    this.cornerRadius = {};
    this._width = 0;
    this._height = 0;
    this.setTo(x, y, width, height, radiusConfig);
  }
  setTo(x, y, width, height, radiusConfig) {
    this.setPosition(x, y);
    this.setRadius(radiusConfig);
    this.setSize(width, height);
    return this;
  }
  setPosition(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }
  setRadius(value) {
    if (value === undefined) {
      value = 0;
    }
    this.radius = value;
    return this;
  }
  setSize(width, height) {
    this.width = width;
    this.height = height;
    return this;
  }
  get minWidth() {
    var radius = this.cornerRadius;
    return Math.max(radius.tl.x + radius.tr.x, radius.bl.x + radius.br.x);
  }
  get minHeight() {
    var radius = this.cornerRadius;
    return Math.max(radius.tl.y + radius.bl.y, radius.tr.y + radius.br.y);
  }
  get width() {
    return this._width;
  }
  set width(value) {
    if (value == null) {
      value = 0;
    }
    this._width = Math.max(value, this.minWidth);
  }
  get height() {
    return this._height;
  }
  set height(value) {
    if (value == null) {
      value = 0;
    }
    this._height = Math.max(value, this.minHeight);
  }
  get radius() {
    var radius = this.cornerRadius;
    return Math.max(radius.tl.x, radius.tl.y, radius.tr.x, radius.tr.y, radius.bl.x, radius.bl.y, radius.br.x, radius.br.y);
  }
  set radius(value) {
    var defaultRadiusX, defaultRadiusY;
    if (typeof value === 'number') {
      defaultRadiusX = value;
      defaultRadiusY = value;
    } else {
      defaultRadiusX = GetValue(value, 'x', 0);
      defaultRadiusY = GetValue(value, 'y', 0);
    }
    var radius = this.cornerRadius;
    radius.tl = GetRadius(GetValue(value, 'tl', undefined), defaultRadiusX, defaultRadiusY);
    radius.tr = GetRadius(GetValue(value, 'tr', undefined), defaultRadiusX, defaultRadiusY);
    radius.bl = GetRadius(GetValue(value, 'bl', undefined), defaultRadiusX, defaultRadiusY);
    radius.br = GetRadius(GetValue(value, 'br', undefined), defaultRadiusX, defaultRadiusY);
  }
  get radiusTL() {
    var radius = this.cornerRadius.tl;
    return Math.max(radius.x, radius.y);
  }
  set radiusTL(value) {
    SetRadius(this.cornerRadius.tl, value);
  }
  get radiusTR() {
    var radius = this.cornerRadius.tr;
    return Math.max(radius.x, radius.y);
  }
  set radiusTR(value) {
    SetRadius(this.cornerRadius.tr, value);
  }
  get radiusBL() {
    var radius = this.cornerRadius.bl;
    return Math.max(radius.x, radius.y);
  }
  set radiusBL(value) {
    SetRadius(this.cornerRadius.bl, value);
  }
  get radiusBR() {
    var radius = this.cornerRadius.br;
    return Math.max(radius.x, radius.y);
  }
  set radiusBR(value) {
    SetRadius(this.cornerRadius.br, value);
  }
}
var GetRadius = function (radius, defaultRadiusX, defaultRadiusY) {
  if (radius === undefined) {
    radius = {
      x: defaultRadiusX,
      y: defaultRadiusY
    };
  } else if (typeof radius === 'number') {
    radius = {
      x: radius,
      y: radius
    };
  }
  SetConvex(radius);
  return radius;
};
var SetRadius = function (radius, value) {
  if (typeof value === 'number') {
    radius.x = value;
    radius.y = value;
  } else {
    radius.x = GetValue(value, 'x', 0);
    radius.y = GetValue(value, 'y', 0);
  }
  SetConvex(radius);
};
var SetConvex = function (radius) {
  radius.convex = radius.x >= 0 || radius.y >= 0;
  radius.x = Math.abs(radius.x);
  radius.y = Math.abs(radius.y);
};
var _default = RoundRectangle;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/LineTo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var LineTo = function (x, y, pathData) {
  var cnt = pathData.length;
  if (cnt >= 2) {
    var lastX = pathData[cnt - 2];
    var lastY = pathData[cnt - 1];
    if (x === lastX && y === lastY) {
      return pathData;
    }
  }
  pathData.push(x, y);
  return pathData;
};
var _default = LineTo;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/ArcTo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _LineTo = _interopRequireDefault(require("./LineTo.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DegToRad = Phaser.Math.DegToRad;
var ArcTo = function (centerX, centerY, radiusX, radiusY, startAngle, endAngle, antiClockWise, iteration, pathData) {
  // startAngle, endAngle: 0 ~ 360
  if (antiClockWise && endAngle > startAngle) {
    endAngle -= 360;
  } else if (!antiClockWise && endAngle < startAngle) {
    endAngle += 360;
  }
  var deltaAngle = endAngle - startAngle;
  var step = DegToRad(deltaAngle) / iteration;
  startAngle = DegToRad(startAngle);
  for (var i = 0; i <= iteration; i++) {
    var angle = startAngle + step * i;
    var x = centerX + radiusX * Math.cos(angle);
    var y = centerY + radiusY * Math.sin(angle);
    (0, _LineTo.default)(x, y, pathData);
  }
  return pathData;
};
var _default = ArcTo;
exports.default = _default;
},{"./LineTo.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/LineTo.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/FillPathWebGL.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/*
src: {
    fillColor, 
    fillAlpha, 
    pathData, 
    pathIndexes  // Earcut(pathData)
}
*/

var Utils = Phaser.Renderer.WebGL.Utils;
var FillPathWebGL = function (pipeline, calcMatrix, src, alpha, dx, dy) {
  var fillTintColor = Utils.getTintAppendFloatAlpha(src.fillColor, src.fillAlpha * alpha);
  var path = src.pathData;
  var pathIndexes = src.pathIndexes;
  for (var i = 0; i < pathIndexes.length; i += 3) {
    var p0 = pathIndexes[i] * 2;
    var p1 = pathIndexes[i + 1] * 2;
    var p2 = pathIndexes[i + 2] * 2;
    var x0 = path[p0 + 0] - dx;
    var y0 = path[p0 + 1] - dy;
    var x1 = path[p1 + 0] - dx;
    var y1 = path[p1 + 1] - dy;
    var x2 = path[p2 + 0] - dx;
    var y2 = path[p2 + 1] - dy;
    var tx0 = calcMatrix.getX(x0, y0);
    var ty0 = calcMatrix.getY(x0, y0);
    var tx1 = calcMatrix.getX(x1, y1);
    var ty1 = calcMatrix.getY(x1, y1);
    var tx2 = calcMatrix.getX(x2, y2);
    var ty2 = calcMatrix.getY(x2, y2);
    pipeline.batchTri(src, tx0, ty0, tx1, ty1, tx2, ty2, 0, 0, 1, 1, fillTintColor, fillTintColor, fillTintColor, 2);
  }
};
var _default = FillPathWebGL;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/StrokePathWebGL.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/*
src: {
    strokeColor,
    strokeAlpha,
    pathData,
    lineWidth,
    closePath
}
*/
var Utils = Phaser.Renderer.WebGL.Utils;
var StrokePathWebGL = function (pipeline, src, alpha, dx, dy) {
  var strokeTint = pipeline.strokeTint;
  var strokeTintColor = Utils.getTintAppendFloatAlpha(src.strokeColor, src.strokeAlpha * alpha);
  strokeTint.TL = strokeTintColor;
  strokeTint.TR = strokeTintColor;
  strokeTint.BL = strokeTintColor;
  strokeTint.BR = strokeTintColor;
  var path = src.pathData;
  var pathLength = path.length - 1;
  var lineWidth = src.lineWidth;
  var halfLineWidth = lineWidth / 2;
  var px1 = path[0] - dx;
  var py1 = path[1] - dy;
  if (!src.closePath) {
    pathLength -= 2;
  }
  for (var i = 2; i < pathLength; i += 2) {
    var px2 = path[i] - dx;
    var py2 = path[i + 1] - dy;
    pipeline.batchLine(px1, py1, px2, py2, halfLineWidth, halfLineWidth, lineWidth, i - 2, src.closePath ? i === pathLength - 1 : false);
    px1 = px2;
    py1 = py2;
  }
};
var _default = StrokePathWebGL;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/roundrectangle/render/WebGLRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FillPathWebGL = _interopRequireDefault(require("../../utils/render/FillPathWebGL.js"));
var _StrokePathWebGL = _interopRequireDefault(require("../../utils/render/StrokePathWebGL.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetCalcMatrix = Phaser.GameObjects.GetCalcMatrix;
var PolygonWebGLRenderer = function (renderer, src, camera, parentMatrix) {
  if (src.dirty) {
    src.updateData();
    src.dirty = false;
  }
  camera.addToRenderList(src);
  var pipeline = renderer.pipelines.set(src.pipeline);
  var result = GetCalcMatrix(src, camera, parentMatrix);
  var calcMatrix = pipeline.calcMatrix.copyFrom(result.calc);
  var dx = src._displayOriginX;
  var dy = src._displayOriginY;
  var alpha = camera.alpha * src.alpha;
  renderer.pipelines.preBatch(src);
  if (src.isFilled) {
    (0, _FillPathWebGL.default)(pipeline, calcMatrix, src, alpha, dx, dy);
  }
  if (src.isStroked) {
    (0, _StrokePathWebGL.default)(pipeline, src, alpha, dx, dy);
  }
  renderer.pipelines.postBatch(src);
};
var _default = PolygonWebGLRenderer;
exports.default = _default;
},{"../../utils/render/FillPathWebGL.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/FillPathWebGL.js","../../utils/render/StrokePathWebGL.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/StrokePathWebGL.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/FillStyleCanvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var FillStyleCanvas = function (ctx, src, altColor, altAlpha) {
  var fillColor = altColor ? altColor : src.fillColor;
  var fillAlpha = altAlpha ? altAlpha : src.fillAlpha;
  var red = (fillColor & 0xFF0000) >>> 16;
  var green = (fillColor & 0xFF00) >>> 8;
  var blue = fillColor & 0xFF;
  ctx.fillStyle = 'rgba(' + red + ',' + green + ',' + blue + ',' + fillAlpha + ')';
};
var _default = FillStyleCanvas;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/LineStyleCanvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var LineStyleCanvas = function (ctx, src, altColor, altAlpha) {
  var strokeColor = altColor ? altColor : src.strokeColor;
  var strokeAlpha = altAlpha ? altAlpha : src.strokeAlpha;
  var red = (strokeColor & 0xFF0000) >>> 16;
  var green = (strokeColor & 0xFF00) >>> 8;
  var blue = strokeColor & 0xFF;
  ctx.strokeStyle = 'rgba(' + red + ',' + green + ',' + blue + ',' + strokeAlpha + ')';
  ctx.lineWidth = src.lineWidth;
};
var _default = LineStyleCanvas;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/roundrectangle/render/CanvasRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FillStyleCanvas = _interopRequireDefault(require("../../utils/render/FillStyleCanvas"));
var _LineStyleCanvas = _interopRequireDefault(require("../../utils/render/LineStyleCanvas"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SetTransform = Phaser.Renderer.Canvas.SetTransform;
var PolygonCanvasRenderer = function (renderer, src, camera, parentMatrix) {
  if (src.dirty) {
    src.updateData();
    src.dirty = false;
  }
  camera.addToRenderList(src);
  var ctx = renderer.currentContext;
  if (SetTransform(renderer, ctx, src, camera, parentMatrix)) {
    var dx = src._displayOriginX;
    var dy = src._displayOriginY;
    var path = src.pathData;
    var pathLength = path.length - 1;
    var px1 = path[0] - dx;
    var py1 = path[1] - dy;
    ctx.beginPath();
    ctx.moveTo(px1, py1);
    if (!src.closePath) {
      pathLength -= 2;
    }
    for (var i = 2; i < pathLength; i += 2) {
      var px2 = path[i] - dx;
      var py2 = path[i + 1] - dy;
      ctx.lineTo(px2, py2);
    }
    ctx.closePath();
    if (src.isFilled) {
      (0, _FillStyleCanvas.default)(ctx, src);
      ctx.fill();
    }
    if (src.isStroked) {
      (0, _LineStyleCanvas.default)(ctx, src);
      ctx.stroke();
    }

    //  Restore the context saved in SetTransform
    ctx.restore();
  }
};
var _default = PolygonCanvasRenderer;
exports.default = _default;
},{"../../utils/render/FillStyleCanvas":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/FillStyleCanvas.js","../../utils/render/LineStyleCanvas":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/LineStyleCanvas.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/roundrectangle/render/Render.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _WebGLRenderer = _interopRequireDefault(require("./WebGLRenderer.js"));
var _CanvasRenderer = _interopRequireDefault(require("./CanvasRenderer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  renderWebGL: _WebGLRenderer.default,
  renderCanvas: _CanvasRenderer.default
};
exports.default = _default;
},{"./WebGLRenderer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/roundrectangle/render/WebGLRenderer.js","./CanvasRenderer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/roundrectangle/render/CanvasRenderer.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/roundrectangle/RoundRectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RoundRectangle = _interopRequireDefault(require("../../../geom/roundrectangle/RoundRectangle.js"));
var _LineTo = _interopRequireDefault(require("../../../geom/pathdata/LineTo.js"));
var _ArcTo = _interopRequireDefault(require("../../../geom/pathdata/ArcTo.js"));
var _Render = _interopRequireDefault(require("./render/Render.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Shape = Phaser.GameObjects.Shape;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const Earcut = Phaser.Geom.Polygon.Earcut;
class RoundRectangle extends Shape {
  constructor(scene, x, y, width, height, radiusConfig, fillColor, fillAlpha) {
    var strokeColor, strokeAlpha, strokeWidth, shapeType;
    if (IsPlainObject(x)) {
      var config = x;
      x = config.x;
      y = config.y;
      width = config.width;
      height = config.height;
      radiusConfig = config.radius;
      fillColor = config.color;
      fillAlpha = config.alpha;
      strokeColor = config.strokeColor;
      strokeAlpha = config.strokeAlpha;
      strokeWidth = config.strokeWidth;
      shapeType = config.shape;
    }
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (width === undefined) {
      width = 1;
    }
    if (height === undefined) {
      height = width;
    }
    if (radiusConfig === undefined) {
      radiusConfig = 0;
    }
    if (shapeType === undefined) {
      shapeType = 0;
    }
    var geom = new _RoundRectangle.default(); // Configurate it later
    super(scene, 'rexRoundRectangleShape', geom);
    this.setShapeType(shapeType);
    if (this.shapeType === 0) {
      var radius = GetValue(radiusConfig, 'radius', radiusConfig);
      geom.setTo(0, 0, width, height, radius);
    } else {
      var radius = {
        x: width / 2,
        y: height / 2
      };
      geom.setTo(0, 0, width, height, radius);
    }
    var iteration = GetValue(radiusConfig, 'iteration', undefined);
    this.setIteration(iteration);
    this.setPosition(x, y);
    this.setFillStyle(fillColor, fillAlpha);
    if (strokeColor !== undefined && strokeWidth === undefined) {
      strokeWidth = 2;
    }
    this.setStrokeStyle(strokeWidth, strokeColor, strokeAlpha);
    this.updateDisplayOrigin();
    this.dirty = true;
  }
  updateData() {
    var geom = this.geom;
    var pathData = this.pathData;
    pathData.length = 0;
    var width = geom.width,
      height = geom.height,
      cornerRadius = geom.cornerRadius,
      radius,
      iteration = this.iteration + 1;

    // Top-left
    radius = cornerRadius.tl;
    if (IsArcCorner(radius)) {
      if (radius.convex) {
        var centerX = radius.x;
        var centerY = radius.y;
        (0, _ArcTo.default)(centerX, centerY, radius.x, radius.y, 180, 270, false, iteration, pathData);
      } else {
        var centerX = 0;
        var centerY = 0;
        (0, _ArcTo.default)(centerX, centerY, radius.x, radius.y, 90, 0, true, iteration, pathData);
      }
    } else {
      (0, _LineTo.default)(0, 0, pathData);
    }

    // Top-right
    radius = cornerRadius.tr;
    if (IsArcCorner(radius)) {
      if (radius.convex) {
        var centerX = width - radius.x;
        var centerY = radius.y;
        (0, _ArcTo.default)(centerX, centerY, radius.x, radius.y, 270, 360, false, iteration, pathData);
      } else {
        var centerX = width;
        var centerY = 0;
        (0, _ArcTo.default)(centerX, centerY, radius.x, radius.y, 180, 90, true, iteration, pathData);
      }
    } else {
      (0, _LineTo.default)(width, 0, pathData);
    }

    // Bottom-right
    radius = cornerRadius.br;
    if (IsArcCorner(radius)) {
      if (radius.convex) {
        var centerX = width - radius.x;
        var centerY = height - radius.y;
        (0, _ArcTo.default)(centerX, centerY, radius.x, radius.y, 0, 90, false, iteration, pathData);
      } else {
        var centerX = width;
        var centerY = height;
        (0, _ArcTo.default)(centerX, centerY, radius.x, radius.y, 270, 180, true, iteration, pathData);
      }
    } else {
      (0, _LineTo.default)(width, height, pathData);
    }

    // Bottom-left
    radius = cornerRadius.bl;
    if (IsArcCorner(radius)) {
      if (radius.convex) {
        var centerX = radius.x;
        var centerY = height - radius.y;
        (0, _ArcTo.default)(centerX, centerY, radius.x, radius.y, 90, 180, false, iteration, pathData);
      } else {
        var centerX = 0;
        var centerY = height;
        (0, _ArcTo.default)(centerX, centerY, radius.x, radius.y, 360, 270, true, iteration, pathData);
      }
    } else {
      (0, _LineTo.default)(0, height, pathData);
    }
    pathData.push(pathData[0], pathData[1]); // Repeat first point to close curve
    this.pathIndexes = Earcut(pathData);
    return this;
  }
  setShapeType(shapeType) {
    if (typeof shapeType === 'string') {
      shapeType = ShapeTypeMap[shapeType];
    }
    this.shapeType = shapeType;
    return this;
  }
  get width() {
    return this.geom.width;
  }
  set width(value) {
    this.resize(value, this.height);
  }
  get height() {
    return this.geom.height;
  }
  set height(value) {
    this.resize(this.width, value);
  }
  setSize(width, height) {
    // Override Shape's setSize method
    if (height === undefined) {
      height = width;
    }
    if (this.geom.width === width && this.geom.height === height) {
      return this;
    }
    this.geom.setSize(width, height);
    if (this.shapeType === 1) {
      this.setRadius({
        x: width / 2,
        y: height / 2
      });
    }
    this.updateDisplayOrigin();
    this.dirty = true;
    var input = this.input;
    if (input && !input.customHitArea) {
      input.hitArea.width = width;
      input.hitArea.height = height;
    }
    return this;
  }
  resize(width, height) {
    this.setSize(width, height);
    return this;
  }
  get radius() {
    return this.geom.radius;
  }
  set radius(value) {
    this.geom.setRadius(value);
    this.updateDisplayOrigin();
    this.dirty = true;
  }
  get radiusTL() {
    return this.geom.radiusTL;
  }
  set radiusTL(value) {
    this.geom.radiusTL = value;
    this.dirty = true;
  }
  get radiusTR() {
    return this.geom.radiusTR;
  }
  set radiusTR(value) {
    this.geom.radiusTR = value;
    this.dirty = true;
  }
  get radiusBL() {
    return this.geom.radiusBL;
  }
  set radiusBL(value) {
    this.geom.radiusBL = value;
    this.dirty = true;
  }
  get radiusBR() {
    return this.geom.radiusBR;
  }
  set radiusBR(value) {
    this.geom.radiusBR = value;
    this.dirty = true;
  }
  setRadius(value) {
    if (value === undefined) {
      value = 0;
    }
    this.radius = value;
    return this;
  }
  setRadiusTL(value) {
    if (value === undefined) {
      value = 0;
    }
    this.radiusTL = value;
    return this;
  }
  setRadiusTR(value) {
    if (value === undefined) {
      value = 0;
    }
    this.radiusTR = value;
    return this;
  }
  setRadiusBL(value) {
    if (value === undefined) {
      value = 0;
    }
    this.radiusBL = value;
    return this;
  }
  setRadiusBR(value) {
    if (value === undefined) {
      value = 0;
    }
    this.radiusBR = value;
    return this;
  }
  get cornerRadius() {
    return this.geom.cornerRadius;
  }
  set cornerRadius(value) {
    this.radius = value;
  }
  setCornerRadius(value) {
    return this.setRadius(value);
  }
  get iteration() {
    return this._iteration;
  }
  set iteration(value) {
    // Set iteration first time
    if (this._iteration === undefined) {
      this._iteration = value;
      return;
    }

    // Change iteration value
    if (this._iteration === value) {
      return;
    }
    this._iteration = value;
    this.dirty = true;
  }
  setIteration(iteration) {
    if (iteration === undefined) {
      iteration = 6;
    }
    this.iteration = iteration;
    return this;
  }
}
var IsArcCorner = function (radius) {
  return radius.x > 0 && radius.y > 0;
};
const ShapeTypeMap = {
  rectangle: 0,
  circle: 1
};
Object.assign(RoundRectangle.prototype, _Render.default);
var _default = RoundRectangle;
exports.default = _default;
},{"../../../geom/roundrectangle/RoundRectangle.js":"node_modules/phaser3-rex-plugins/plugins/geom/roundrectangle/RoundRectangle.js","../../../geom/pathdata/LineTo.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/LineTo.js","../../../geom/pathdata/ArcTo.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/ArcTo.js","./render/Render.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/roundrectangle/render/Render.js"}],"node_modules/phaser3-rex-plugins/plugins/roundrectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RoundRectangle = _interopRequireDefault(require("./gameobjects/shape/roundrectangle/RoundRectangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _RoundRectangle.default;
exports.default = _default;
},{"./gameobjects/shape/roundrectangle/RoundRectangle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/roundrectangle/RoundRectangle.js"}],"node_modules/phaser3-rex-plugins/templates/ui/roundrectangle/RoundRectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _roundrectangle = _interopRequireDefault(require("../../../plugins/roundrectangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _roundrectangle.default;
exports.default = _default;
},{"../../../plugins/roundrectangle.js":"node_modules/phaser3-rex-plugins/plugins/roundrectangle.js"}],"node_modules/phaser3-rex-plugins/templates/ui/roundrectangle/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RoundRectangle = _interopRequireDefault(require("./RoundRectangle.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('roundRectangle', function (x, y, width, height, radiusConfig, fillColor, fillAlpha) {
  var gameObject = new _RoundRectangle.default(this.scene, x, y, width, height, radiusConfig, fillColor, fillAlpha);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.RoundRectangle', _RoundRectangle.default);
var _default = _RoundRectangle.default;
exports.default = _default;
},{"./RoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/roundrectangle/RoundRectangle.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/render/WebGLRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// copy from Phaser.GameObjects.Text

const Utils = Phaser.Renderer.WebGL.Utils;
var WebGLRenderer = function (renderer, src, camera, parentMatrix) {
  if (src.dirty) {
    src.updateTexture();
    src.dirty = false;
  }
  if (src.width === 0 || src.height === 0) {
    return;
  }
  camera.addToRenderList(src);
  var frame = src.frame;
  var width = frame.width;
  var height = frame.height;
  var getTint = Utils.getTintAppendFloatAlpha;
  var pipeline = renderer.pipelines.set(src.pipeline, src);
  var textureUnit = pipeline.setTexture2D(frame.glTexture, src);
  renderer.pipelines.preBatch(src);
  pipeline.batchTexture(src, frame.glTexture, width, height, src.x, src.y, width / src.resolution, height / src.resolution, src.scaleX, src.scaleY, src.rotation, src.flipX, src.flipY, src.scrollFactorX, src.scrollFactorY, src.displayOriginX, src.displayOriginY, 0, 0, width, height, getTint(src.tintTopLeft, camera.alpha * src._alphaTL), getTint(src.tintTopRight, camera.alpha * src._alphaTR), getTint(src.tintBottomLeft, camera.alpha * src._alphaBL), getTint(src.tintBottomRight, camera.alpha * src._alphaBR), src.tintFill, 0, 0, camera, parentMatrix, false, textureUnit);
  renderer.pipelines.postBatch(src);
};
var _default = WebGLRenderer;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/render/CanvasRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// copy from Phaser.GameObjects.Text

var CanvasRenderer = function (renderer, src, camera, parentMatrix) {
  if (src.dirty) {
    src.updateTexture();
    src.dirty = false;
  }
  if (src.width === 0 || src.height === 0) {
    return;
  }
  camera.addToRenderList(src);
  renderer.batchSprite(src, src.frame, camera, parentMatrix);
};
var _default = CanvasRenderer;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/render/Render.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _WebGLRenderer = _interopRequireDefault(require("./WebGLRenderer.js"));
var _CanvasRenderer = _interopRequireDefault(require("./CanvasRenderer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  renderWebGL: _WebGLRenderer.default,
  renderCanvas: _CanvasRenderer.default
};
exports.default = _default;
},{"./WebGLRenderer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/render/WebGLRenderer.js","./CanvasRenderer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/render/CanvasRenderer.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/CanvasMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Color = Phaser.Display.Color;
var _default = {
  clear() {
    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.dirty = true;
    return this;
  },
  fill(color) {
    this.context.fillStyle = color;
    this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
    this.dirty = true;
    return this;
  },
  drawFrame(key, frame, x, y, width, height) {
    var textureFrame = this.scene.sys.textures.getFrame(key, frame);
    if (!textureFrame) {
      return this;
    }
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (width === undefined) {
      width = textureFrame.cutWidth;
    }
    if (height === undefined) {
      height = textureFrame.cutHeight;
    }
    this.context.drawImage(textureFrame.source.image, textureFrame.cutX, textureFrame.cutY, textureFrame.cutWidth, textureFrame.cutHeight, x, y, width, height);
    this.dirty = true;
    return this;
  },
  getDataURL(type, encoderOptions) {
    return this.canvas.toDataURL(type, encoderOptions);
  },
  getPixel(x, y, out) {
    if (out === undefined) {
      out = new Color();
    }
    var rgb = this.context.getImageData(x, y, 1, 1);
    out.setTo(rgb.data[0], rgb.data[1], rgb.data[2], rgb.data[3]);
    return out;
  },
  setPixel(x, y, r, g, b, a) {
    if (typeof r !== 'number') {
      var color = r;
      r = color.red;
      g = color.green;
      b = color.blue;
      a = color.alpha;
    }
    if (a === undefined) {
      a = r !== 0 || g !== 0 || b !== 0 ? 255 : 0;
    }
    var imgData = this.context.createImageData(1, 1);
    imgData.data[0] = r;
    imgData.data[1] = g;
    imgData.data[2] = b;
    imgData.data[3] = a;
    this.context.putImageData(imgData, x, y);
    this.dirty = true;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/texture/CopyCanvasToTexture.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var CopyCanvasToTexture = function (scene, srcCanvas, key, x, y, width, height) {
  var textures = scene.sys.textures;
  var renderer = scene.renderer;
  if (x === undefined) {
    x = 0;
  }
  if (y === undefined) {
    y = 0;
  }
  if (width === undefined) {
    width = srcCanvas.width;
  }
  if (height === undefined) {
    height = srcCanvas.height;
  }
  var texture;
  if (textures.exists(key)) {
    texture = textures.get(key);
  } else {
    texture = textures.createCanvas(key, width, height);
  }
  var destCanvas = texture.getSourceImage();
  if (destCanvas.width !== width) {
    destCanvas.width = width;
  }
  if (destCanvas.height !== height) {
    destCanvas.height = height;
  }
  var destCtx = destCanvas.getContext('2d');
  destCtx.clearRect(0, 0, width, height);
  destCtx.drawImage(srcCanvas, x, y, width, height);
  if (renderer.gl && texture) {
    renderer.canvasToTexture(destCanvas, texture.source[0].glTexture, true, 0);
  }
};
var _default = CopyCanvasToTexture;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/TextureMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CopyCanvasToTexture = _interopRequireDefault(require("../../../utils/texture/CopyCanvasToTexture.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  updateTexture(callback, scope) {
    if (callback) {
      if (scope) {
        callback.call(scope, this.canvas, this.context);
      } else {
        callback(this.canvas, this.context);
      }
    }
    if (this.canvas.width !== this.frame.width || this.canvas.height !== this.frame.height) {
      this.frame.setSize(this.canvas.width, this.canvas.height);
    }
    if (this.renderer.gl) {
      this.frame.source.glTexture = this.renderer.canvasToTexture(this.canvas, this.frame.source.glTexture, true);
      this.frame.glTexture = this.frame.source.glTexture;
    }
    this.dirty = false;
    var input = this.input;
    if (input && !input.customHitArea) {
      input.hitArea.width = this.width;
      input.hitArea.height = this.height;
    }
    return this;
  },
  generateTexture(key, x, y, width, height) {
    var srcCanvas = this.canvas;
    if (width === undefined) {
      width = srcCanvas.width;
    } else {
      width *= this.resolution;
    }
    if (height === undefined) {
      height = srcCanvas.height;
    } else {
      height *= this.resolution;
    }
    (0, _CopyCanvasToTexture.default)(this.scene, srcCanvas, key, x, y, width, height);
    return this;
  },
  loadTexture(key, frame) {
    var textureFrame = this.scene.sys.textures.getFrame(key, frame);
    if (!textureFrame) {
      return this;
    }
    if (this.width !== textureFrame.cutWidth || this.height !== textureFrame.cutHeight) {
      this.setSize(textureFrame.cutWidth, textureFrame.cutHeight);
    } else {
      this.clear();
    }
    this.drawFrame(key, frame);
    this.dirty = true;
    return this;
  }
};
exports.default = _default;
},{"../../../utils/texture/CopyCanvasToTexture.js":"node_modules/phaser3-rex-plugins/plugins/utils/texture/CopyCanvasToTexture.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/Canvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Render = _interopRequireDefault(require("./render/Render.js"));
var _CanvasMethods = _interopRequireDefault(require("./CanvasMethods.js"));
var _TextureMethods = _interopRequireDefault(require("./TextureMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const CanvasPool = Phaser.Display.Canvas.CanvasPool;
const GameObject = Phaser.GameObjects.GameObject;
class Canvas extends GameObject {
  constructor(scene, x, y, width, height) {
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (width === undefined) {
      width = 1;
    }
    if (height === undefined) {
      height = 1;
    }
    super(scene, 'rexCanvas');
    this.renderer = scene.sys.game.renderer;
    this.resolution = 1;
    this._width = width;
    this._height = height;
    width = Math.max(Math.ceil(width * this.resolution), 1);
    height = Math.max(Math.ceil(height * this.resolution), 1);
    this.canvas = CanvasPool.create(this, width, height);
    this.context = this.canvas.getContext('2d');
    this.dirty = false;
    this.setPosition(x, y);
    this.setOrigin(0.5, 0.5);
    this.initPipeline();
    this._crop = this.resetCropObject();

    //  Create a Texture for this Text object
    this.texture = scene.sys.textures.addCanvas(null, this.canvas, true);

    //  Get the frame
    this.frame = this.texture.get();

    //  Set the resolution
    this.frame.source.resolution = this.resolution;
    if (this.renderer && this.renderer.gl) {
      //  Clear the default 1x1 glTexture, as we override it later
      this.renderer.deleteTexture(this.frame.source.glTexture);
      this.frame.source.glTexture = null;
    }
    this.dirty = true;
  }
  preDestroy() {
    CanvasPool.remove(this.canvas);
    this.texture.destroy();
    this.canvas = null;
    this.context = null;
  }
  get width() {
    return this._width;
  }
  set width(value) {
    this.setSize(value, this._height);
  }
  get height() {
    return this._height;
  }
  set height(value) {
    this.setSize(this._width, value);
  }
  setCanvasSize(width, height) {
    if (this._width === width && this._height === height) {
      return this;
    }
    this._width = width;
    this._height = height;
    this.updateDisplayOrigin();
    width = Math.max(Math.ceil(width * this.resolution), 1);
    height = Math.max(Math.ceil(height * this.resolution), 1);
    this.canvas.width = width;
    this.canvas.height = height;
    this.frame.setSize(width, height);
    this.dirty = true;
    return this;
  }

  // setSize might be override
  setSize(width, height) {
    this.setCanvasSize(width, height);
    return this;
  }
  get displayWidth() {
    return this.scaleX * this._width;
  }
  set displayWidth(value) {
    this.scaleX = value / this._width;
  }
  get displayHeight() {
    return this.scaleY * this._height;
  }
  set displayHeight(value) {
    this.scaleY = value / this._height;
  }
  setDisplaySize(width, height) {
    this.displayWidth = width;
    this.displayHeight = height;
    return this;
  }
  getCanvas(readOnly) {
    if (!readOnly) {
      this.dirty = true;
    }
    return this.canvas;
  }
  getContext(readOnly) {
    if (!readOnly) {
      this.dirty = true;
    }
    return this.context;
  }
  needRedraw() {
    this.dirty = true;
    return this;
  }
  resize(width, height) {
    this.setSize(width, height);
    return this;
  }
}
const Components = Phaser.GameObjects.Components;
Phaser.Class.mixin(Canvas, [Components.Alpha, Components.BlendMode, Components.Crop, Components.Depth, Components.Flip,
// Components.FX,  // Open for 3.60
Components.GetBounds, Components.Mask, Components.Origin, Components.Pipeline, Components.ScrollFactor, Components.Tint, Components.Transform, Components.Visible, _Render.default, _CanvasMethods.default, _TextureMethods.default]);
var _default = Canvas;
exports.default = _default;
},{"./render/Render.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/render/Render.js","./CanvasMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/CanvasMethods.js","./TextureMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/TextureMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/canvas/GetStyle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Pad = Phaser.Utils.String.Pad;
var GetStyle = function (style, canvas, context) {
  if (style == null) {
    return style;
  }
  switch (typeof style) {
    case 'string':
      return style;
    case 'number':
      return `#${Pad(Math.floor(style).toString(16), 6, '0', 1)}`;
    case 'function':
      return style(canvas, context);
    case 'object':
      if (style.hasOwnProperty('r')) {
        if (style.hasOwnProperty('a')) {
          // rgba
          return `rgba(${style.r},${style.g},${style.b},${style.a})`;
        } else {
          // rgb
          return `rgb(${style.r},${style.g},${style.b})`;
        }
      } else if (style.hasOwnProperty('h')) {
        if (style.hasOwnProperty('a')) {
          // hsla
          return `hsla(${style.h},${style.s},${style.l},${style.a})`;
        } else {
          // hsl
          return `hsl(${style.h},${style.s},${style.l})`;
        }
      } else {
        return style; // Not a valid input
      }

    default:
      return style;
  }
};
var _default = GetStyle;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/canvas/AddRoundRectanglePath.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RoundRectangle = _interopRequireDefault(require("../../geom/roundrectangle/RoundRectangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DegToRad = Phaser.Math.DegToRad;
var AddRoundRectanglePath = function (context, x, y, width, height, radiusConfig, iteration) {
  var geom = new _RoundRectangle.default(x, y, width, height, radiusConfig),
    minWidth = geom.minWidth,
    minHeight = geom.minHeight,
    scaleRX = width >= minWidth ? 1 : width / minWidth,
    scaleRY = height >= minHeight ? 1 : height / minHeight;
  var cornerRadius = geom.cornerRadius;
  var radius, radiusX, radiusY, centerX, centerY;
  context.save();
  context.beginPath();
  context.translate(x, y);

  // Top-left
  radius = cornerRadius.tl;
  if (IsArcCorner(radius)) {
    radiusX = radius.x * scaleRX;
    radiusY = radius.y * scaleRY;
    if (IsConvexArc(radius)) {
      centerX = radiusX;
      centerY = radiusY;
      ArcTo(context, centerX, centerY, radiusX, radiusY, 180, 270, false, iteration);
    } else {
      centerX = 0;
      centerY = 0;
      ArcTo(context, centerX, centerY, radiusX, radiusY, 90, 0, true, iteration);
    }
  } else {
    context.lineTo(0, 0);
  }

  // Top-right
  radius = cornerRadius.tr;
  if (IsArcCorner(radius)) {
    radiusX = radius.x * scaleRX;
    radiusY = radius.y * scaleRY;
    if (IsConvexArc(radius)) {
      centerX = width - radiusX;
      centerY = radiusY;
      ArcTo(context, centerX, centerY, radiusX, radiusY, 270, 360, false, iteration);
    } else {
      centerX = width;
      centerY = 0;
      ArcTo(context, centerX, centerY, radiusX, radiusY, 180, 90, true, iteration);
    }
  } else {
    context.lineTo(width, 0);
  }

  // Bottom-right
  radius = cornerRadius.br;
  if (IsArcCorner(radius)) {
    radiusX = radius.x * scaleRX;
    radiusY = radius.y * scaleRY;
    if (IsConvexArc(radius)) {
      centerX = width - radiusX;
      centerY = height - radiusY;
      ArcTo(context, centerX, centerY, radiusX, radiusY, 0, 90, false, iteration);
    } else {
      centerX = width;
      centerY = height;
      ArcTo(context, centerX, centerY, radiusX, radiusY, 270, 180, true, iteration);
    }
  } else {
    context.lineTo(width, height);
  }

  // Bottom-left
  radius = cornerRadius.bl;
  if (IsArcCorner(radius)) {
    radiusX = radius.x * scaleRX;
    radiusY = radius.y * scaleRY;
    if (IsConvexArc(radius)) {
      centerX = radiusX;
      centerY = height - radiusY;
      ArcTo(context, centerX, centerY, radiusX, radiusY, 90, 180, false, iteration);
    } else {
      centerX = 0;
      centerY = height;
      ArcTo(context, centerX, centerY, radiusX, radiusY, 360, 270, true, iteration);
    }
  } else {
    context.lineTo(0, height);
  }
  context.closePath();
  context.restore();
};
var IsConvexArc = function (radius) {
  return !radius.hasOwnProperty('convex') ||
  // radius does not have convex property
  radius.convex;
};
var IsArcCorner = function (radius) {
  return radius.x > 0 && radius.y > 0;
};
var ArcTo = function (context, centerX, centerY, radiusX, radiusY, startAngle, endAngle, antiClockWise, iteration) {
  // startAngle, endAngle: 0 ~ 360
  if (antiClockWise && endAngle > startAngle) {
    endAngle -= 360;
  } else if (!antiClockWise && endAngle < startAngle) {
    endAngle += 360;
  }
  startAngle = DegToRad(startAngle);
  endAngle = DegToRad(endAngle);
  if (iteration == null) {
    // undefined, or null
    context.ellipse(centerX, centerY, radiusX, radiusY, 0, startAngle, endAngle, antiClockWise);
  } else {
    iteration += 1;
    var x, y, angle;
    var step = (endAngle - startAngle) / iteration;
    for (var i = 0; i <= iteration; i++) {
      angle = startAngle + step * i;
      x = centerX + radiusX * Math.cos(angle);
      y = centerY + radiusY * Math.sin(angle);
      context.lineTo(x, y);
    }
  }
};
var _default = AddRoundRectanglePath;
exports.default = _default;
},{"../../geom/roundrectangle/RoundRectangle.js":"node_modules/phaser3-rex-plugins/plugins/geom/roundrectangle/RoundRectangle.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/canvas/DrawRoundRectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddRoundRectanglePath = _interopRequireDefault(require("./AddRoundRectanglePath.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DrawRoundRectangle = function (canvas, context, x, y, width, height, radiusConfig, fillStyle, strokeStyle, lineWidth, fillColor2, isHorizontalGradient, iteration) {
  (0, _AddRoundRectanglePath.default)(context, x, y, width, height, radiusConfig, iteration);
  if (fillStyle != null) {
    if (fillColor2 != null) {
      var grd;
      if (isHorizontalGradient) {
        grd = context.createLinearGradient(0, 0, width, 0);
      } else {
        grd = context.createLinearGradient(0, 0, 0, height);
      }
      grd.addColorStop(0, fillStyle);
      grd.addColorStop(1, fillColor2);
      fillStyle = grd;
    }
    context.fillStyle = fillStyle;
    context.fill();
  }
  if (strokeStyle != null && lineWidth > 0) {
    context.strokeStyle = strokeStyle;
    context.lineWidth = lineWidth;
    context.stroke();
  }
};
var _default = DrawRoundRectangle;
exports.default = _default;
},{"./AddRoundRectanglePath.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/AddRoundRectanglePath.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/utils/DrawRoundRectangleBackground.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DrawRoundRectangle = _interopRequireDefault(require("../../../utils/canvas/DrawRoundRectangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DrawRoundRectangleBackground = function (canvasObject, color, strokeColor, strokeLineWidth, radius, color2, isHorizontalGradient, iteration) {
  if (color == null && strokeColor == null) {
    return;
  }
  var width = canvasObject.canvas.width,
    height = canvasObject.canvas.height;
  if (strokeColor == null) {
    strokeLineWidth = 0;
  }
  var x = strokeLineWidth / 2;
  width = Math.max(1, width - strokeLineWidth); // Min width is 1
  height = Math.max(1, height - strokeLineWidth); // Min height is 1
  (0, _DrawRoundRectangle.default)(canvasObject.canvas, canvasObject.context, x, x, width, height, radius, color, strokeColor, strokeLineWidth, color2, isHorizontalGradient, iteration);
};
var _default = DrawRoundRectangleBackground;
exports.default = _default;
},{"../../../utils/canvas/DrawRoundRectangle.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/DrawRoundRectangle.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/roundrectangle/DrawContent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DrawRoundRectangleBackground = _interopRequireDefault(require("../utils/DrawRoundRectangleBackground.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DrawContent = function () {
  (0, _DrawRoundRectangleBackground.default)(this, this.fillStyle, this.strokeStyle, this.lineWidth, this.radius, this.fillColor2, this.isHorizontalGradient, this.iteration);
};
var _default = DrawContent;
exports.default = _default;
},{"../utils/DrawRoundRectangleBackground.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/utils/DrawRoundRectangleBackground.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/roundrectangle/RoundRectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Canvas = _interopRequireDefault(require("../canvasbase/Canvas.js"));
var _GetStyle = _interopRequireDefault(require("../../../utils/canvas/GetStyle.js"));
var _DrawContent = _interopRequireDefault(require("./DrawContent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class RoundRectangle extends _Canvas.default {
  constructor(scene, x, y, width, height, radiusConfig, fillStyle, strokeStyle, lineWidth, fillColor2, isHorizontalGradient) {
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (width === undefined) {
      width = 1;
    }
    if (height === undefined) {
      height = width;
    }
    if (radiusConfig === undefined) {
      radiusConfig = 0;
    }
    super(scene, x, y, width, height);
    this.type = 'rexRoundRectangleCanvas';
    var radius = GetValue(radiusConfig, 'radius', radiusConfig);
    var iteration = GetValue(radiusConfig, 'iteration', undefined);
    this.setRadius(radius);
    this.setIteration(iteration);
    this.setFillStyle(fillStyle, fillColor2, isHorizontalGradient);
    this.setStrokeStyle(strokeStyle, lineWidth);
  }
  get radius() {
    return this._radius;
  }
  set radius(value) {
    this.dirty |= this._radius != value;
    this._radius = value;
  }
  setRadius(radius) {
    this.radius = radius;
    return this;
  }
  get iteration() {
    return this._iteration;
  }
  set iteration(value) {
    this.dirty |= this._iteration != value;
    this._iteration = value;
  }
  setIteration(iteration) {
    this.iteration = iteration;
    return this;
  }
  get fillStyle() {
    return this._fillStyle;
  }
  set fillStyle(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.dirty |= this._fillStyle != value;
    this._fillStyle = value;
  }
  get fillColor2() {
    return this._fillColor2;
  }
  set fillColor2(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.dirty |= this._fillColor2 != value;
    this._fillColor2 = value;
  }
  get isHorizontalGradient() {
    return this._isHorizontalGradient;
  }
  set isHorizontalGradient(value) {
    this.dirty |= this._isHorizontalGradient != value;
    this._isHorizontalGradient = value;
  }
  setFillStyle(fillStyle, fillColor2, isHorizontalGradient) {
    if (isHorizontalGradient === undefined) {
      isHorizontalGradient = true;
    }
    this.fillStyle = fillStyle;
    this.fillColor2 = fillColor2;
    this.isHorizontalGradient = isHorizontalGradient;
    return this;
  }
  get strokeStyle() {
    return this._strokeStyle;
  }
  set strokeStyle(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.dirty |= this._strokeStyle != value;
    this._strokeStyle = value;
  }
  get lineWidth() {
    return this._lineWidth;
  }
  set lineWidth(value) {
    this.dirty |= this._lineWidth != value;
    this._lineWidth = value;
  }
  setStrokeStyle(strokeStyle, lineWidth) {
    this.strokeStyle = strokeStyle;
    this.lineWidth = lineWidth;
    return this;
  }
  updateTexture() {
    this.clear();
    _DrawContent.default.call(this);
    super.updateTexture();
    return this;
  }
}
var _default = RoundRectangle;
exports.default = _default;
},{"../canvasbase/Canvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/Canvas.js","../../../utils/canvas/GetStyle.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/GetStyle.js","./DrawContent.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/roundrectangle/DrawContent.js"}],"node_modules/phaser3-rex-plugins/plugins/roundrectanglecanvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RoundRectangle = _interopRequireDefault(require("./gameobjects/canvas/roundrectangle/RoundRectangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _RoundRectangle.default;
exports.default = _default;
},{"./gameobjects/canvas/roundrectangle/RoundRectangle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/roundrectangle/RoundRectangle.js"}],"node_modules/phaser3-rex-plugins/templates/ui/roundrectanglecanvas/RoundRectangleCanvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _roundrectanglecanvas = _interopRequireDefault(require("../../../plugins/roundrectanglecanvas.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _roundrectanglecanvas.default;
exports.default = _default;
},{"../../../plugins/roundrectanglecanvas.js":"node_modules/phaser3-rex-plugins/plugins/roundrectanglecanvas.js"}],"node_modules/phaser3-rex-plugins/templates/ui/roundrectanglecanvas/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RoundRectangleCanvas = _interopRequireDefault(require("./RoundRectangleCanvas.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('roundRectangleCanvas', function (x, y, width, height, radius, fillStyle, strokeStyle, lineWidth, fillColor2, isHorizontalGradient) {
  var gameObject = new _RoundRectangleCanvas.default(this.scene, x, y, width, height, radius, fillStyle, strokeStyle, lineWidth, fillColor2, isHorizontalGradient);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.RoundRectangleCanvas', _RoundRectangleCanvas.default);
var _default = _RoundRectangleCanvas.default;
exports.default = _default;
},{"./RoundRectangleCanvas.js":"node_modules/phaser3-rex-plugins/templates/ui/roundrectanglecanvas/RoundRectangleCanvas.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/render/WebGLRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

var Utils = Phaser.Renderer.WebGL.Utils;

/**
 * Renders this Game Object with the WebGL Renderer to the given Camera.
 * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.
 * This method should not be called directly. It is a utility function of the Render module.
 *
 * @method Phaser.GameObjects.Text#renderWebGL
 * @since 3.0.0
 * @private
 *
 * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.
 * @param {Phaser.GameObjects.Text} src - The Game Object being rendered in this call.
 * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.
 * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.
 * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested
 */
var WebGLRenderer = function (renderer, src, camera, parentMatrix) {
  if (src.width === 0 || src.height === 0) {
    return;
  }
  camera.addToRenderList(src);
  var frame = src.frame;
  var width = frame.width;
  var height = frame.height;
  var getTint = Utils.getTintAppendFloatAlpha;
  var pipeline = renderer.pipelines.set(src.pipeline, src);
  var textureUnit = pipeline.setTexture2D(frame.glTexture, src);
  renderer.pipelines.preBatch(src);
  pipeline.batchTexture(src, frame.glTexture, width, height, src.x, src.y, width / src.style.resolution, height / src.style.resolution, src.scaleX, src.scaleY, src.rotation, src.flipX, src.flipY, src.scrollFactorX, src.scrollFactorY, src.displayOriginX, src.displayOriginY, 0, 0, width, height, getTint(src.tintTopLeft, camera.alpha * src._alphaTL), getTint(src.tintTopRight, camera.alpha * src._alphaTR), getTint(src.tintBottomLeft, camera.alpha * src._alphaBL), getTint(src.tintBottomRight, camera.alpha * src._alphaBR), src.tintFill, 0, 0, camera, parentMatrix, false, textureUnit);
  renderer.pipelines.postBatch(src);
};
var _default = WebGLRenderer;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/render/CanvasRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

/**
 * Renders this Game Object with the Canvas Renderer to the given Camera.
 * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.
 * This method should not be called directly. It is a utility function of the Render module.
 *
 * @method Phaser.GameObjects.Text#renderCanvas
 * @since 3.0.0
 * @private
 *
 * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.
 * @param {Phaser.GameObjects.Text} src - The Game Object being rendered in this call.
 * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.
 * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.
 * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested
 */
var CanvasRenderer = function (renderer, src, camera, parentMatrix) {
  if (src.width === 0 || src.height === 0) {
    return;
  }
  camera.addToRenderList(src);
  renderer.batchSprite(src, src.frame, camera, parentMatrix);
};
var _default = CanvasRenderer;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/render/Render.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _WebGLRenderer = _interopRequireDefault(require("./WebGLRenderer.js"));
var _CanvasRenderer = _interopRequireDefault(require("./CanvasRenderer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  renderWebGL: _WebGLRenderer.default,
  renderCanvas: _CanvasRenderer.default
};
exports.default = _default;
},{"./WebGLRenderer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/render/WebGLRenderer.js","./CanvasRenderer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/render/CanvasRenderer.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/textstyle/MeasureTextMargins.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const CanvasPool = Phaser.Display.Canvas.CanvasPool;
var MeasureTextMargins = function (textStyle, testString, out) {
  if (out === undefined) {
    out = {};
  }
  var canvas = CanvasPool.create(this);
  var context = canvas.getContext('2d');
  textStyle.syncFont(canvas, context);
  var metrics = context.measureText(testString);
  var width = Math.ceil(metrics.width * textStyle.baselineX);
  var baseline = width;
  var height = 2 * baseline;
  baseline = baseline * textStyle.baselineY | 0;
  canvas.width = width;
  canvas.height = height;
  context.fillStyle = '#f00';
  context.fillRect(0, 0, width, height);
  context.font = textStyle._font;
  context.textBaseline = 'alphabetic';
  context.fillStyle = '#000';
  context.fillText(textStyle.testString, 0, baseline);
  out.left = 0;
  if (width === 0 || height === 0 || !context.getImageData(0, 0, width, height)) {
    CanvasPool.remove(canvas);
    return out;
  }
  var imagedata = context.getImageData(0, 0, width, height).data;
  var stop = false;
  for (var x = 0; x < width; x++) {
    for (var y = 0; y < height; y++) {
      var idx = (y * width + x) * 4;
      if (imagedata[idx] !== 255) {
        out.left = x;
        stop = true;
        break;
      }
    }
    if (stop) {
      break;
    }
  }
  CanvasPool.remove(canvas);
  return out;
};
var _default = MeasureTextMargins;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/TextBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Render = _interopRequireDefault(require("./render/Render.js"));
var _MeasureTextMargins = _interopRequireDefault(require("./textstyle/MeasureTextMargins.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GameObject = Phaser.GameObjects.GameObject;
class TextBase extends GameObject {
  setStyle(style) {
    return this.style.setStyle(style);
  }
  setFont(font) {
    return this.style.setFont(font);
  }
  setFontFamily(family) {
    return this.style.setFontFamily(family);
  }
  setFontSize(size) {
    return this.style.setFontSize(size);
  }
  setFontStyle(style) {
    return this.style.setFontStyle(style);
  }
  setTestString(string) {
    return this.style.setTestString(string);
  }
  setFixedSize(width, height) {
    return this.style.setFixedSize(width, height);
  }
  setBackgroundColor(color, color2, isHorizontalGradient) {
    return this.style.setBackgroundColor(color, color2, isHorizontalGradient);
  }
  setBackgroundStrokeColor(color, lineWidth) {
    return this.style.setBackgroundStrokeColor(color, lineWidth);
  }
  setBackgroundCornerRadius(radius, iteration) {
    return this.style.setBackgroundCornerRadius(radius, iteration);
  }
  setFill(color) {
    return this.style.setFill(color);
  }
  setColor(color) {
    return this.style.setColor(color);
  }
  setStroke(color, thickness) {
    return this.style.setStroke(color, thickness);
  }
  setShadow(x, y, color, blur, shadowStroke, shadowFill) {
    return this.style.setShadow(x, y, color, blur, shadowStroke, shadowFill);
  }
  setShadowOffset(x, y) {
    return this.style.setShadowOffset(x, y);
  }
  setShadowColor(color) {
    return this.style.setShadowColor(color);
  }
  setShadowBlur(blur) {
    return this.style.setShadowBlur(blur);
  }
  setShadowStroke(enabled) {
    return this.style.setShadowStroke(enabled);
  }
  setShadowFill(enabled) {
    return this.style.setShadowFill(enabled);
  }
  setWrapMode(mode) {
    return this.style.setWrapMode(mode);
  }
  setWrapWidth(width) {
    return this.style.setWrapWidth(width);
  }

  // Align with built-in text game object
  setWordWrapWidth(width) {
    return this.style.setWrapWidth(width);
  }
  setAlign(align) {
    return this.style.setHAlign(align);
  }
  setHAlign(align) {
    return this.style.setHAlign(align);
  }
  setVAlign(align) {
    return this.style.setVAlign(align);
  }
  setLineSpacing(value) {
    return this.style.setLineSpacing(value);
  }
  set lineSpacing(value) {
    this.setLineSpacing(value);
  }
  get lineSpacing() {
    return this.style.lineSpacing;
  }
  setXOffset(value) {
    return this.style.setXOffset(value);
  }
  setMaxLines(max) {
    return this.style.setMaxLines(max);
  }
  setResolution(value) {
    return this.style.setResolution(value);
  }
  getTextMetrics() {
    return this.style.getTextMetrics();
  }
  setTextMetrics(metrics, font) {
    return this.style.setTextMetrics(metrics, font);
  }
  measureTextMargins(testString, out) {
    return (0, _MeasureTextMargins.default)(this.style, testString, out);
  }
}
const Components = Phaser.GameObjects.Components;
Phaser.Class.mixin(TextBase, [Components.Alpha, Components.BlendMode, Components.ComputedSize, Components.Crop, Components.Depth, Components.Flip,
// Components.FX,  // Open for 3.60
Components.GetBounds, Components.Mask, Components.Origin, Components.Pipeline, Components.ScrollFactor, Components.Tint, Components.Transform, Components.Visible, _Render.default]);
var _default = TextBase;
exports.default = _default;
},{"./render/Render.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/render/Render.js","./textstyle/MeasureTextMargins.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/textstyle/MeasureTextMargins.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/textstyle/PropertyMap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetStyle = _interopRequireDefault(require("../../../utils/canvas/GetStyle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//  Key: [ Object Key, Default Value, postCallback ]

var PropertyMap = {
  // background
  backgroundColor: ['backgroundColor', null, _GetStyle.default],
  backgroundColor2: ['backgroundColor2', null, _GetStyle.default],
  backgroundHorizontalGradient: ['backgroundHorizontalGradient', true, null],
  backgroundStrokeColor: ['backgroundStrokeColor', null, _GetStyle.default],
  backgroundStrokeLineWidth: ['backgroundStrokeLineWidth', 2, null],
  backgroundCornerRadius: ['backgroundCornerRadius', 0, null],
  backgroundCornerIteration: ['backgroundCornerIteration', null, null],
  // font
  fontFamily: ['fontFamily', 'Courier', null],
  fontSize: ['fontSize', '16px', null],
  fontStyle: ['fontStyle', '', null],
  color: ['color', '#fff', _GetStyle.default],
  stroke: ['stroke', '#fff', _GetStyle.default],
  strokeThickness: ['strokeThickness', 0, null],
  shadowOffsetX: ['shadow.offsetX', 0, null],
  shadowOffsetY: ['shadow.offsetY', 0, null],
  shadowColor: ['shadow.color', '#000', _GetStyle.default],
  shadowBlur: ['shadow.blur', 0, null],
  shadowStroke: ['shadow.stroke', false, null],
  shadowFill: ['shadow.fill', false, null],
  // underline
  underlineColor: ['underline.color', '#000', _GetStyle.default],
  underlineThickness: ['underline.thickness', 0, null],
  underlineOffset: ['underline.offset', 0, null],
  // align
  halign: ['halign', 'left', null],
  valign: ['valign', 'top', null],
  // size
  maxLines: ['maxLines', 0, null],
  fixedWidth: ['fixedWidth', 0, null],
  fixedHeight: ['fixedHeight', 0, null],
  resolution: ['resolution', 0, null],
  lineSpacing: ['lineSpacing', 0, null],
  xOffset: ['xOffset', 0, null],
  rtl: ['rtl', false, null],
  testString: ['testString', '|MÃ‰qgy', null],
  baselineX: ['baselineX', 1.2, null],
  baselineY: ['baselineY', 1.4, null],
  // wrap
  wrapMode: ['wrap.mode', 0, null],
  wrapWidth: ['wrap.width', 0, null],
  wrapCallback: ['wrap.callback', null],
  wrapCallbackScope: ['wrap.callbackScope', null]
};
var _default = PropertyMap;
exports.default = _default;
},{"../../../utils/canvas/GetStyle.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/GetStyle.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/textstyle/MeasureText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2018 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

const CanvasPool = Phaser.Display.Canvas.CanvasPool;

/**
 * Calculates the ascent, descent and fontSize of a given font style.
 *
 * @function Phaser.GameObjects.MeasureText
 * @since 3.0.0
 *
 * @param {Phaser.GameObjects.Text.TextStyle} textStyle - The TextStyle object to measure.
 *
 * @return {object} An object containing the ascent, descent and fontSize of the TextStyle.
 */
var MeasureText = function (textStyle) {
  // @property {HTMLCanvasElement} canvas - The canvas element that the text is rendered.
  var canvas = CanvasPool.create(this);

  // @property {HTMLCanvasElement} context - The context of the canvas element that the text is rendered to.
  var context = canvas.getContext('2d');
  textStyle.syncFont(canvas, context);
  var metrics = context.measureText(textStyle.testString);
  if ('actualBoundingBoxAscent' in metrics) {
    var ascent = metrics.actualBoundingBoxAscent;
    var descent = metrics.actualBoundingBoxDescent;
    var output = {
      ascent: ascent,
      descent: descent,
      fontSize: ascent + descent
    };
    CanvasPool.remove(canvas);
    return output;
  }
  var width = Math.ceil(metrics.width * textStyle.baselineX);
  var baseline = width;
  var height = 2 * baseline;
  baseline = baseline * textStyle.baselineY | 0;
  canvas.width = width;
  canvas.height = height;
  context.fillStyle = '#f00';
  context.fillRect(0, 0, width, height);
  context.font = textStyle._font;
  context.textBaseline = 'alphabetic';
  context.fillStyle = '#000';
  context.fillText(textStyle.testString, 0, baseline);
  var output = {
    ascent: 0,
    descent: 0,
    fontSize: 0
  };
  if (!context.getImageData(0, 0, width, height)) {
    output.ascent = baseline;
    output.descent = baseline + 6;
    output.fontSize = output.ascent + output.descent;
    CanvasPool.remove(canvas);
    return output;
  }
  var imagedata = context.getImageData(0, 0, width, height).data;
  var pixels = imagedata.length;
  var line = width * 4;
  var i;
  var j;
  var idx = 0;
  var stop = false;

  // ascent. scan from top to bottom until we find a non red pixel
  for (i = 0; i < baseline; i++) {
    for (j = 0; j < line; j += 4) {
      if (imagedata[idx + j] !== 255) {
        stop = true;
        break;
      }
    }
    if (!stop) {
      idx += line;
    } else {
      break;
    }
  }
  output.ascent = baseline - i;
  idx = pixels - line;
  stop = false;

  // descent. scan from bottom to top until we find a non red pixel
  for (i = height; i > baseline; i--) {
    for (j = 0; j < line; j += 4) {
      if (imagedata[idx + j] !== 255) {
        stop = true;
        break;
      }
    }
    if (!stop) {
      idx -= line;
    } else {
      break;
    }
  }
  output.descent = i - baseline;
  output.fontSize = output.ascent + output.descent;
  CanvasPool.remove(canvas);
  return output;
};
var _default = MeasureText;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/const.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var CONST = {
  // new line mode
  NO_NEWLINE: 0,
  RAW_NEWLINE: 1,
  WRAPPED_NEWLINE: 2,
  // wrap mode
  NO_WRAP: 0,
  WORD_WRAP: 1,
  CHAR_WRAP: 2,
  // split lines
  SPLITREGEXP: /(?:\r\n|\r|\n)/
};
var _default = CONST;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/textstyle/TextStyle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PropertyMap = _interopRequireDefault(require("./PropertyMap.js"));
var _MeasureText = _interopRequireDefault(require("./MeasureText.js"));
var _const = _interopRequireDefault(require("../const.js"));
var _GetStyle = _interopRequireDefault(require("../../../utils/canvas/GetStyle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const GetValue = Phaser.Utils.Objects.GetValue;
class TextStyle {
  constructor(text, style, propertyMap) {
    this.parent = text;
    // parent.updateText()
    // parent.width, parent.height

    if (propertyMap === undefined) {
      propertyMap = _PropertyMap.default;
    }
    this.propertyMap = propertyMap;
    this.backgroundColor;
    this.backgroundColor2;
    this.backgroundHorizontalGradient;
    this.backgroundStrokeColor;
    this.backgroundStrokeLineWidth;
    this.backgroundCornerRadius;
    this.backgroundCornerIteration;
    this.fontFamily;
    this.fontSize;
    this.fontStyle;
    this.color;
    this.stroke;
    this.strokeThickness;
    this.shadowOffsetX;
    this.shadowOffsetY;
    this.shadowColor;
    this.shadowBlur;
    this.shadowStroke;
    this.shadowFill;
    this.underlineColor;
    this.underlineThickness;
    this.underlineOffset;
    this.halign;
    this.valign;
    this.maxLines;
    this.fixedWidth;
    this.fixedHeight;
    this.resolution;
    this.lineSpacing;
    this.xOffset;
    this.rtl;
    this.testString;
    this.baselineX;
    this.baselineY;
    this.wrapMode;
    this.wrapWidth;
    this.wrapCallback;
    this.wrapCallbackScope;
    this._font;

    //  Set to defaults + user style
    this.setStyle(style, false, true);
  }
  get isWrapFitMode() {
    return this.fixedWidth > 0 && this.wrapMode !== _const.default.NO_WRAP && this.wrapWidth === 0;
  }
  setStyle(style, updateText, setDefaults) {
    if (updateText === undefined) {
      updateText = true;
    }
    if (setDefaults === undefined) {
      setDefaults = false;
    }
    if (style && style.hasOwnProperty('wrap')) {
      var wrap = style.wrap;
      if (wrap.hasOwnProperty('mode')) {
        var mode = wrap.mode;
        if (typeof mode === 'string') {
          wrap.mode = WRAPMODE[mode];
        }
      } else {
        if (wrap.hasOwnProperty('width')) {
          wrap.mode = 1;
        }
      }
    }

    // default halign of RTL is 'right'
    if (style && style.rtl && setDefaults && !style.hasOwnProperty('halign')) {
      style.halign = 'right';
    }

    //  Avoid type mutation
    if (style && style.hasOwnProperty('fontSize') && typeof style.fontSize === 'number') {
      style.fontSize = style.fontSize.toString() + 'px';
    }
    var propertyMap = this.propertyMap;
    for (var key in propertyMap) {
      var prop = propertyMap[key]; // [ Object Key, Default Value, preCallback ]
      var objKey = prop[0];
      var defaultValue = setDefaults ? prop[1] : this[key];
      var postCallback = prop[2];
      if (key === 'wrapCallback' || key === 'wrapCallbackScope') {
        // Callback & scope should be set without processing the values
        this[key] = GetValue(style, objKey, defaultValue);
      } else {
        var value = GetAdvancedValue(style, objKey, defaultValue);
        if (postCallback) {
          value = postCallback(value);
        }
        this[key] = value;
      }
    }

    //  Allow for 'font' override
    var font = GetValue(style, 'font', null);
    if (font === null) {
      this._font = this.fontStyle + ' ' + this.fontSize + ' ' + this.fontFamily;
    } else {
      this._font = font;
    }

    //  Allow for 'fill' to be used in place of 'color'
    var fill = GetValue(style, 'fill', null);
    if (fill !== null) {
      this.color = (0, _GetStyle.default)(fill);
    }
    var metrics = GetValue(style, 'metrics', false);

    //  Provide optional TextMetrics in the style object to avoid the canvas look-up / scanning
    //  Doing this is reset if you then change the font of this TextStyle after creation
    if (metrics) {
      this.metrics = {
        ascent: GetValue(metrics, 'ascent', 0),
        descent: GetValue(metrics, 'descent', 0),
        fontSize: GetValue(metrics, 'fontSize', 0)
      };
    } else if (updateText || !this.metrics) {
      this.metrics = (0, _MeasureText.default)(this);
    }
    if (updateText) {
      return this.parent.updateText();
    } else {
      return this.parent;
    }
  }
  syncFont(canvas, context) {
    context.font = this._font;
  }
  syncStyle(canvas, context) {
    context.textBaseline = 'alphabetic';
    context.fillStyle = this.color;
    context.strokeStyle = this.stroke;
    context.lineWidth = this.strokeThickness;
    context.lineCap = 'round';
    context.lineJoin = 'round';
  }
  syncShadow(context, enabled) {
    if (enabled) {
      context.shadowOffsetX = this.shadowOffsetX;
      context.shadowOffsetY = this.shadowOffsetY;
      context.shadowColor = this.shadowColor;
      context.shadowBlur = this.shadowBlur;
    } else {
      context.shadowOffsetX = 0;
      context.shadowOffsetY = 0;
      context.shadowColor = 0;
      context.shadowBlur = 0;
    }
  }
  update(recalculateMetrics) {
    if (recalculateMetrics) {
      this._font = `${this.fontStyle} ${this.fontSize} ${this.fontFamily}`.trim();
      this.metrics = (0, _MeasureText.default)(this);
    }
    return this.parent.updateText(recalculateMetrics);
  }
  buildFont() {
    var newFont = `${this.fontStyle} ${this.fontSize} ${this.fontFamily}`.trim();
    if (newFont !== this._font) {
      this._font = newFont;
      //this.metrics = MeasureText(this);
    }

    return this;
  }
  setFont(font) {
    if (typeof font === 'string') {
      this.fontFamily = font;
      this.fontSize = '';
      this.fontStyle = '';
    } else {
      this.fontFamily = GetValue(font, 'fontFamily', 'Courier');
      this.fontSize = GetValue(font, 'fontSize', '16px');
      this.fontStyle = GetValue(font, 'fontStyle', '');
    }
    return this.update(true);
  }
  setFontFamily(family) {
    this.fontFamily = family;
    return this.update(true);
  }
  setFontStyle(style) {
    this.fontStyle = style;
    return this.update(true);
  }
  setFontSize(size) {
    if (typeof size === 'number') {
      size = size.toString() + 'px';
    }
    this.fontSize = size;
    return this.update(true);
  }
  setTestString(string) {
    this.testString = string;
    return this.update(true);
  }
  setFixedSize(width, height) {
    this.fixedWidth = width;
    this.fixedHeight = height;
    if (width) {
      this.parent.width = width;
    }
    if (height) {
      this.parent.height = height;
    }
    return this.update(this.isWrapFitMode);
  }
  setResolution(value) {
    this.resolution = value;
    return this.update(false);
  }
  setLineSpacing(value) {
    this.lineSpacing = value;
    return this.update(false);
  }
  setXOffset(value) {
    this.xOffset = value;
    return this.update(false);
  }
  setBackgroundColor(color, color2, isHorizontalGradient) {
    if (isHorizontalGradient === undefined) {
      isHorizontalGradient = true;
    }
    this.backgroundColor = (0, _GetStyle.default)(color, this.parent.canvas, this.parent.context);
    this.backgroundColor2 = (0, _GetStyle.default)(color2, this.parent.canvas, this.parent.context);
    this.backgroundHorizontalGradient = isHorizontalGradient;
    return this.update(false);
  }
  setBackgroundStrokeColor(color, lineWidth) {
    this.backgroundStrokeColor = (0, _GetStyle.default)(color, this.parent.canvas, this.parent.context);
    this.backgroundStrokeLineWidth = lineWidth;
    return this.update(false);
  }
  setBackgroundCornerRadius(radius, iteration) {
    this.backgroundCornerRadius = radius;
    this.backgroundCornerIteration = iteration;
    return this.update(false);
  }
  setFill(color) {
    this.color = (0, _GetStyle.default)(color, this.parent.canvas, this.parent.context);
    return this.update(false);
  }
  setColor(color) {
    this.color = (0, _GetStyle.default)(color, this.parent.canvas, this.parent.context);
    return this.update(false);
  }
  setStroke(color, thickness) {
    if (color === undefined) {
      //  Reset the stroke to zero (disabling it)
      this.strokeThickness = 0;
    } else {
      if (thickness === undefined) {
        thickness = this.strokeThickness;
      }
      this.stroke = (0, _GetStyle.default)(color, this.parent.canvas, this.parent.context);
      this.strokeThickness = thickness;
    }
    return this.update(true);
  }
  setShadow(x, y, color, blur, shadowStroke, shadowFill) {
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (color === undefined) {
      color = '#000';
    }
    if (blur === undefined) {
      blur = 0;
    }
    if (shadowStroke === undefined) {
      shadowStroke = false;
    }
    if (shadowFill === undefined) {
      shadowFill = true;
    }
    this.shadowOffsetX = x;
    this.shadowOffsetY = y;
    this.shadowColor = (0, _GetStyle.default)(color, this.parent.canvas, this.parent.context);
    this.shadowBlur = blur;
    this.shadowStroke = shadowStroke;
    this.shadowFill = shadowFill;
    return this.update(false);
  }
  setShadowOffset(x, y) {
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = x;
    }
    this.shadowOffsetX = x;
    this.shadowOffsetY = y;
    return this.update(false);
  }
  setShadowColor(color) {
    if (color === undefined) {
      color = '#000';
    }
    this.shadowColor = (0, _GetStyle.default)(color, this.parent.canvas, this.parent.context);
    return this.update(false);
  }
  setShadowBlur(blur) {
    if (blur === undefined) {
      blur = 0;
    }
    this.shadowBlur = blur;
    return this.update(false);
  }
  setShadowStroke(enabled) {
    this.shadowStroke = enabled;
    return this.update(false);
  }
  setShadowFill(enabled) {
    this.shadowFill = enabled;
    return this.update(false);
  }
  setUnderline(color, thickness, offset) {
    if (color === undefined) {
      color = '#000';
    }
    if (thickness === undefined) {
      thickness = 0;
    }
    if (offset === undefined) {
      offset = 0;
    }
    this.underlineColor = (0, _GetStyle.default)(color, this.parent.canvas, this.parent.context);
    this.underlineThickness = thickness;
    this.underlineOffset = offset;
    return this.update(false);
  }
  setUnderlineColor(color) {
    if (color === undefined) {
      color = '#000';
    }
    this.underlineColor = (0, _GetStyle.default)(color, this.parent.canvas, this.parent.context);
    return this.update(false);
  }
  setUnderlineThickness(thickness) {
    if (thickness === undefined) {
      thickness = 0;
    }
    this.underlineThickness = thickness;
    return this.update(false);
  }
  setUnderlineOffset(offset) {
    if (offset === undefined) {
      offset = 0;
    }
    this.underlineOffset = offset;
    return this.update(false);
  }
  setWrapMode(mode) {
    if (typeof mode === 'string') {
      mode = WRAPMODE[mode.toLowerCase()] || 0;
    }
    this.wrapMode = mode;
    return this.update(true);
  }
  setWrapWidth(width) {
    this.wrapWidth = width;
    return this.update(false);
  }
  setAlign(halign, valign) {
    if (halign === undefined) {
      halign = 'left';
    }
    if (valign === undefined) {
      valign = 'top';
    }
    this.halign = halign;
    this.valign = valign;
    return this.update(false);
  }
  setHAlign(halign) {
    if (halign === undefined) {
      halign = 'left';
    }
    this.halign = halign;
    return this.update(false);
  }
  setVAlign(valign) {
    if (valign === undefined) {
      valign = 'top';
    }
    this.valign = valign;
    return this.update(false);
  }
  setMaxLines(max) {
    if (max === undefined) {
      max = 0;
    }
    this.maxLines = max;
    return this.update(false);
  }
  getTextMetrics() {
    var metrics = this.metrics;
    return {
      ascent: metrics.ascent,
      descent: metrics.descent,
      fontSize: metrics.fontSize
    };
  }
  setTextMetrics(metrics, font) {
    this.metrics.ascent = metrics.ascent;
    this.metrics.descent = metrics.descent;
    this.metrics.fontSize = metrics.fontSize;
    if (font) {
      if (typeof font === 'string') {
        this.fontFamily = font;
        this.fontSize = '';
        this.fontStyle = '';
      } else {
        this.fontFamily = GetValue(font, 'fontFamily', this.fontFamily);
        this.fontSize = GetValue(font, 'fontSize', this.fontSize);
        this.fontStyle = GetValue(font, 'fontStyle', this.fontStyle);
      }
    }
    return this.parent.updateText(true);
  }
  get lineHeight() {
    return this.metrics.fontSize + this.strokeThickness + this.lineSpacing;
  }
  toJSON() {
    var output = {};
    var propertyMap = this.propertyMap;
    for (var key in propertyMap) {
      output[key] = this[key];
    }
    output.metrics = this.getTextMetrics();
    return output;
  }
  destroy() {
    this.parent = undefined;
  }
}
const WRAPMODE = {
  none: _const.default.NO_WRAP,
  word: _const.default.WORD_WRAP,
  char: _const.default.CHAR_WRAP,
  character: _const.default.CHAR_WRAP
};
var _default = TextStyle;
exports.default = _default;
},{"./PropertyMap.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/textstyle/PropertyMap.js","./MeasureText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/textstyle/MeasureText.js","../const.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/const.js","../../../utils/canvas/GetStyle.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/GetStyle.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/canvastext/DrawMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DrawRoundRectangleBackground = _interopRequireDefault(require("../../../canvas/utils/DrawRoundRectangleBackground.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  draw(startX, startY, textWidth, textHeight) {
    var penManager = this.penManager;
    this.hitAreaManager.clear();
    var context = this.context;
    context.save();
    var defaultStyle = this.defaultStyle;
    this.clear();
    (0, _DrawRoundRectangleBackground.default)(this, defaultStyle.backgroundColor, defaultStyle.backgroundStrokeColor, defaultStyle.backgroundStrokeLineWidth, defaultStyle.backgroundCornerRadius, defaultStyle.backgroundColor2, defaultStyle.backgroundHorizontalGradient, defaultStyle.backgroundCornerIteration);

    // draw lines
    startX += this.startXOffset;
    startY += this.startYOffset;
    var defaultHalign = defaultStyle.halign,
      valign = defaultStyle.valign;
    var lineWidth,
      lineHeight = defaultStyle.lineHeight;
    var lines = penManager.lines;
    var totalLinesNum = lines.length,
      maxLines = defaultStyle.maxLines;
    var drawLinesNum, drawLineStartIdx, drawLineEndIdx;
    if (maxLines > 0 && totalLinesNum > maxLines) {
      drawLinesNum = maxLines;
      if (valign === 'center') {
        // center
        drawLineStartIdx = Math.floor((totalLinesNum - drawLinesNum) / 2);
      } else if (valign === 'bottom') {
        // bottom
        drawLineStartIdx = totalLinesNum - drawLinesNum;
      } else {
        drawLineStartIdx = 0;
      }
    } else {
      drawLinesNum = totalLinesNum;
      drawLineStartIdx = 0;
    }
    drawLineEndIdx = drawLineStartIdx + drawLinesNum;
    var offsetX, offsetY;
    var rtl = this.rtl,
      rtlOffset = rtl ? this.parent.width : undefined;
    if (valign === 'center') {
      // center
      offsetY = Math.max((textHeight - drawLinesNum * lineHeight) / 2, 0);
    } else if (valign === 'bottom') {
      // bottom
      offsetY = Math.max(textHeight - drawLinesNum * lineHeight - 2, 0);
    } else {
      offsetY = 0;
    }
    offsetY += startY;
    for (var lineIdx = drawLineStartIdx; lineIdx < drawLineEndIdx; lineIdx++) {
      lineWidth = penManager.getLineWidth(lineIdx);
      if (lineWidth === 0) {
        continue;
      }
      var pens = lines[lineIdx],
        penCount = pens.length;
      var halign = defaultHalign;
      // Seek if there has algin tag
      for (var penIdx = 0; penIdx < penCount; penIdx++) {
        var penAlign = pens[penIdx].prop.align;
        if (penAlign !== undefined) {
          halign = penAlign;
          break;
        }
      }
      if (halign === 'center') {
        // center
        offsetX = (textWidth - lineWidth) / 2;
      } else if (halign === 'right') {
        // right
        offsetX = !rtl ? textWidth - lineWidth : 0;
      } else {
        offsetX = !rtl ? 0 : textWidth - lineWidth;
      }
      offsetX += startX;
      for (var penIdx = 0; penIdx < penCount; penIdx++) {
        this.drawPen(pens[penIdx], offsetX, offsetY, rtlOffset);
      }
    }
    context.restore();
  },
  drawPen(pen, offsetX, offsetY, rtlOffset) {
    offsetX += pen.x;
    offsetY += pen.y + (pen.prop.y || 0);
    if (rtlOffset !== undefined) {
      offsetX = rtlOffset - offsetX;
    }
    var canvas = this.canvas;
    var context = this.context;
    context.save();
    var curStyle = this.parser.propToContextStyle(this.defaultStyle, pen.prop);
    curStyle.buildFont();
    curStyle.syncFont(canvas, context);
    curStyle.syncStyle(canvas, context);

    // Underline
    if (curStyle.underlineThickness > 0 && pen.width > 0) {
      this.drawUnderline(offsetX, offsetY, pen.width, curStyle);
    }

    // Text
    if (pen.isTextPen) {
      this.drawText(offsetX, offsetY, pen.text, curStyle);
    }

    // Image
    if (pen.isImagePen) {
      this.drawImage(offsetX, offsetY, pen.prop.img, curStyle);
    }
    context.restore();
    if (pen.hasAreaMarker && pen.width > 0) {
      var data;
      var areaKey = pen.prop.area;
      if (areaKey) {
        data = {
          key: areaKey
        };
      } else {
        var url = pen.prop.url;
        data = {
          key: `url:${url}`,
          url: url
        };
      }
      this.hitAreaManager.add(offsetX,
      // x
      offsetY - this.startYOffset,
      // y
      pen.width,
      // width
      this.defaultStyle.lineHeight,
      // height
      data);
    }
  },
  clear() {
    var canvas = this.canvas;
    this.context.clearRect(0, 0, canvas.width, canvas.height);
  },
  drawUnderline(x, y, width, style) {
    y += style.underlineOffset - style.underlineThickness / 2;
    if (this.autoRound) {
      x = Math.round(x);
      y = Math.round(y);
    }
    var context = this.context;
    var savedLineCap = context.lineCap;
    context.lineCap = 'butt';
    context.strokeStyle = style.underlineColor;
    context.lineWidth = style.underlineThickness;
    context.beginPath();
    context.moveTo(x, y);
    context.lineTo(x + width, y);
    context.stroke();
    context.lineCap = savedLineCap;
  },
  drawText(x, y, text, style) {
    if (this.autoRound) {
      x = Math.round(x);
      y = Math.round(y);
    }
    var context = this.context;
    if (style.stroke && style.stroke !== 'none' && style.strokeThickness > 0) {
      style.syncShadow(context, style.shadowStroke);
      context.strokeText(text, x, y);
    }
    if (style.color && style.color !== 'none') {
      style.syncShadow(context, style.shadowFill);
      context.fillText(text, x, y);
    }
  },
  drawImage(x, y, imgKey, style) {
    y -= this.startYOffset;
    this.parent.imageManager.draw(imgKey, this.context, x, y, this.autoRound);
  }
};
exports.default = _default;
},{"../../../canvas/utils/DrawRoundRectangleBackground.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/utils/DrawRoundRectangleBackground.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/penmanger/Pen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _const = _interopRequireDefault(require("../../../textbase/const.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const NO_NEWLINE = _const.default.NO_NEWLINE;
const RAW_NEWLINE = _const.default.RAW_NEWLINE;
class Pen {
  constructor(config) {
    this.prop = {};
    this.resetFromJSON(config);
  }
  resetFromJSON(o) {
    // (txt, x, y, width, prop, newLineMode, startIndex)
    this.text = GetValue(o, 'text', '');
    this.x = GetValue(o, 'x', 0);
    this.y = GetValue(o, 'y', 0);
    this.width = GetValue(o, 'width', 0);
    var prop = GetValue(o, 'prop', null);
    if (prop === null) {
      prop = {};
    }
    this.prop = prop;
    this.newLineMode = GetValue(o, 'newLineMode', 0);
    this.startIndex = GetValue(o, 'startIndex', 0);
  }
  get plainText() {
    var txt = this.text;
    if (this.newLineMode === RAW_NEWLINE) {
      txt += "\n";
    }
    return txt;
  }
  get wrapText() {
    var txt = this.text;
    if (this.newLineMode !== NO_NEWLINE) {
      txt += "\n";
    }
    return txt;
  }
  get rawTextLength() {
    var len = this.text.length;
    if (this.newLineMode === RAW_NEWLINE) {
      len += 1;
    }
    return len;
  }
  get endIndex() {
    return this.startIndex + this.rawTextLength;
  }
  get lastX() {
    return this.x + this.width;
  }
  get isTextPen() {
    return this.text !== '';
  }
  get isImagePen() {
    return !!this.prop.img;
  }
  get hasAreaMarker() {
    return !!this.prop.area || !!this.prop.url;
  }
}
;
var _default = Pen;
exports.default = _default;
},{"../../../textbase/const.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/const.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/object/Clone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Clear = _interopRequireDefault(require("./Clear.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Shallow Object Clone. Will not out nested objects.
 * @param {object} obj JSON object
 * @param {object} ret JSON object to return, set null to return a new object
 * @returns {object} this object
 */
var Clone = function (obj, out) {
  var objIsArray = Array.isArray(obj);
  if (out === undefined) {
    out = objIsArray ? [] : {};
  } else {
    (0, _Clear.default)(out);
  }
  if (objIsArray) {
    out.length = obj.length;
    for (var i = 0, cnt = obj.length; i < cnt; i++) {
      out[i] = obj[i];
    }
  } else {
    for (var key in obj) {
      out[key] = obj[key];
    }
  }
  return out;
};
var _default = Clone;
exports.default = _default;
},{"./Clear.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/Clear.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/penmanger/PenManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Pen = _interopRequireDefault(require("./Pen.js"));
var _const = _interopRequireDefault(require("../../../textbase/const.js"));
var _Clone = _interopRequireDefault(require("../../../../utils/object/Clone.js"));
var _NOOP = _interopRequireDefault(require("../../../../utils/object/NOOP.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetFastValue = Phaser.Utils.Objects.GetFastValue;
const NO_NEWLINE = _const.default.NO_NEWLINE;
const WRAPPED_NEWLINE = _const.default.WRAPPED_NEWLINE;
class PenManager {
  constructor(config) {
    this.pens = []; // all pens
    this.lines = []; // pens in lines [ [],[],[],.. ]
    this.maxLinesWidth = undefined;
    this.pensPool = config.pensPool; // Required
    this.linesPool = config.linesPool; // Required
    this.tagToText = GetFastValue(config, 'tagToText', _NOOP.default);
    this.tagToTextScope = GetFastValue(config, 'tagToTextScope', undefined);
  }
  destroy() {
    this.clear();
    this.tagToText = undefined;
    this.tagToTextScope = undefined;
  }
  clear() {
    for (var i = 0, len = this.lines.length; i < len; i++) {
      this.lines[i].length = 0;
    }
    this.pensPool.pushMultiple(this.pens);
    this.linesPool.pushMultiple(this.lines);
    this.maxLinesWidth = undefined;
  }
  addTextPen(text, x, y, width, prop, newLineMode) {
    var pen = this.pensPool.pop();
    if (pen == null) {
      pen = new _Pen.default();
    }
    PEN_CONFIG.text = text;
    PEN_CONFIG.x = x;
    PEN_CONFIG.y = y;
    PEN_CONFIG.width = width;
    PEN_CONFIG.prop = prop;
    PEN_CONFIG.newLineMode = newLineMode;
    pen.resetFromJSON(PEN_CONFIG);
    this.addPen(pen);
    return this;
  }
  addImagePen(x, y, width, prop) {
    this.addTextPen('', x, y, width, prop, NO_NEWLINE);
    return this;
  }
  addNewLinePen() {
    var previousPen = this.lastPen;
    var x = previousPen ? previousPen.lastX : 0;
    var y = previousPen ? previousPen.y : 0;
    var prop = previousPen ? (0, _Clone.default)(previousPen.prop) : null;
    this.addTextPen('', x, y, 0, prop, WRAPPED_NEWLINE);
    return this;
  }
  addPen(pen) {
    var previousPen = this.lastPen;
    if (previousPen == null) {
      pen.startIndex = 0;
    } else {
      pen.startIndex = previousPen.endIndex;
    }
    this.pens.push(pen);

    // maintan lines
    var line = this.lastLine;
    if (line == null) {
      line = this.linesPool.pop() || [];
      this.lines.push(line);
    }
    line.push(pen);

    // new line, add an empty line
    if (pen.newLineMode !== NO_NEWLINE) {
      line = this.linesPool.pop() || [];
      this.lines.push(line);
    }
    this.maxLinesWidth = undefined;
  }
  clone(targetPenManager) {
    if (targetPenManager == null) targetPenManager = new PenManager();
    targetPenManager.clear();
    for (var li = 0, llen = this.lines.length; li < llen; li++) {
      var pens = this.lines[li];
      for (var pi = 0, plen = pens.length; pi < plen; pi++) {
        var pen = pens[pi];
        targetPenManager.addPen(pen.text, pen.x, pen.y, pen.width, (0, _Clone.default)(pen.prop), pen.newLineMode);
      }
    }
    return targetPenManager;
  }
  get lastPen() {
    return this.pens[this.pens.length - 1];
  }
  get lastLine() {
    return this.lines[this.lines.length - 1];
  }
  getLineStartIndex(i) {
    if (i >= this.lines.length) {
      return this.getLineEndIndex(i);
    } else {
      var line = this.lines[i];
      return line && line[0] ? line[0].startIndex : 0;
    }
  }
  getLineEndIndex(i) {
    if (i >= this.lines.length) {
      i = this.lines.length - 1;
    }
    var li,
      hasLastPen = false,
      line;
    for (li = i; li >= 0; li--) {
      line = this.lines[li];
      hasLastPen = line != null && line.length > 0;
      if (hasLastPen) {
        break;
      }
    }
    if (!hasLastPen) {
      return 0;
    }
    var lastPen = line[line.length - 1];
    return lastPen.endIndex;
  }
  getLineWidth(i) {
    var line = this.lines[i];
    if (!line) {
      return 0;
    }
    var lastPen = line[line.length - 1];
    if (lastPen == null) {
      return 0;
    }
    var lineWidth = lastPen.lastX; // start from 0
    return lineWidth;
  }
  getMaxLineWidth() {
    if (this.maxLinesWidth !== undefined) {
      return this.maxLinesWidth;
    }
    var w,
      maxW = 0;
    for (var i = 0, len = this.lines.length; i < len; i++) {
      w = this.getLineWidth(i);
      if (w > maxW) {
        maxW = w;
      }
    }
    this.maxLinesWidth = maxW;
    return maxW;
  }
  getLineWidths() {
    var result = [];
    for (var i = 0, len = this.lines.length; i < len; i++) {
      result.push(this.getLineWidth(i));
    }
    return result;
  }
  get linesCount() {
    return this.lines.length;
  }
  get plainText() {
    var txt = "",
      pens = this.pens;
    for (var i = 0, len = pens.length; i < len; i++) {
      txt += pens[i].plainText;
    }
    return txt;
  }
  get rawTextLength() {
    var l = 0,
      pens = this.pens;
    for (var i = 0, len = this.pens.length; i < len; i++) {
      l += pens[i].rawTextLength;
    }
    return l;
  }
  getSliceTagText(start, end, wrap) {
    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      var lastPen = this.lastPen;
      if (lastPen == null) {
        return "";
      }
      end = lastPen.endIndex;
    }
    if (wrap === undefined) {
      wrap = false;
    }
    var txt = "",
      formatTxt,
      pen,
      penTxt,
      penStartIdx,
      penEndIdx,
      isInRange;
    var currentProp, previousProp;
    for (var i = 0, len = this.pens.length; i < len; i++) {
      pen = this.pens[i];
      penEndIdx = pen.endIndex;
      if (penEndIdx <= start) {
        continue;
      }
      pen = this.pens[i];
      penTxt = !wrap ? pen.plainText : pen.wrapText;
      currentProp = pen.prop;
      penStartIdx = pen.startIndex;
      isInRange = penStartIdx >= start && penEndIdx <= end;
      if (!isInRange) {
        penTxt = penTxt.substring(start - penStartIdx, end - penStartIdx);
      }
      if (this.tagToTextScope) {
        txt += this.tagToText.call(this.tagToTextScope, penTxt, currentProp, previousProp);
      } else {
        txt += this.tagToText(penTxt, currentProp, previousProp);
      }
      previousProp = currentProp;
      if (penEndIdx >= end) {
        break;
      }
    }
    return txt;
  }
  get length() {
    return this.lines.length;
  }
  set length(value) {
    // Only for set length to 0 (clear)
    this.clear();
  }
}
;
var PEN_CONFIG = {};
var _default = PenManager;
exports.default = _default;
},{"./Pen.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/penmanger/Pen.js","../../../textbase/const.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/const.js","../../../../utils/object/Clone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/Clone.js","../../../../utils/object/NOOP.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/NOOP.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/hitareamanager/HitAreaManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _pool = _interopRequireDefault(require("../../../../pool.js"));
var _Clear = _interopRequireDefault(require("../../../../utils/object/Clear.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Rectangle = Phaser.Geom.Rectangle;
var RectanglePool = new _pool.default();
class HitAreaManager {
  constructor() {
    this.hitAreas = [];
  }
  destroy() {
    this.clear();
  }
  clear() {
    // Reuse hitArea(rectangle) later
    for (var i = 0, cnt = this.hitAreas.length; i < cnt; i++) {
      (0, _Clear.default)(this.hitAreas[i].data);
    }
    RectanglePool.pushMultiple(this.hitAreas);
    return this;
  }
  add(x, y, width, height, data) {
    var rectangle = RectanglePool.pop();
    if (rectangle === null) {
      rectangle = new Rectangle(x, y, width, height);
    } else {
      rectangle.setTo(x, y, width, height);
    }
    rectangle.data = data;
    this.hitAreas.push(rectangle);
    return this;
  }
  getFirst(x, y) {
    for (var i = 0, cnt = this.hitAreas.length; i < cnt; i++) {
      var hitArea = this.hitAreas[i];
      if (hitArea.contains(x, y)) {
        return hitArea;
      }
    }
    return null;
  }
  getByKey(key) {
    for (var i = 0, cnt = this.hitAreas.length; i < cnt; i++) {
      var hitArea = this.hitAreas[i];
      if (hitArea.data.key === key) {
        return hitArea;
      }
    }
    return null;
  }
  drawBounds(graphics, color, parent) {
    if (color === undefined) {
      color = 0xffffff;
    }
    if (parent) {
      graphics.save().scaleCanvas(parent.scaleX, parent.scaleY).rotateCanvas(parent.rotation).translateCanvas(parent.x, parent.y);
    }
    for (var i = 0, cnt = this.hitAreas.length; i < cnt; i++) {
      var hitArea = this.hitAreas[i];
      graphics.lineStyle(1, color).strokeRect(hitArea.x, hitArea.y, hitArea.width, hitArea.height);
    }
    if (parent) {
      graphics.restore();
    }
    return this;
  }
}
var _default = HitAreaManager;
exports.default = _default;
},{"../../../../pool.js":"node_modules/phaser3-rex-plugins/plugins/pool.js","../../../../utils/object/Clear.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/Clear.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/canvastext/SetInteractive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetInteractive = function () {
  this.parent.on('pointerdown', OnAreaDown, this).on('pointerup', OnAreaUp, this).on('pointermove', OnAreaOverOut, this).on('pointerover', OnAreaOverOut, this).on('pointerout', function (pointer, event) {
    OnAreaOverOut.call(this, pointer, null, null, event);
  }, this);
};
var OnAreaDown = function (pointer, localX, localY, event) {
  var area = this.hitAreaManager.getFirst(localX, localY);
  if (area === null) {
    return;
  }
  var key = area.data.key;
  FireEvent.call(this, 'areadown', key, pointer, localX, localY, event);
  area.data.isDown = true;
};
var OnAreaUp = function (pointer, localX, localY, event) {
  var area = this.hitAreaManager.getFirst(localX, localY);
  if (area === null) {
    return;
  }
  var areaData = area.data;
  var key = areaData.key;
  FireEvent.call(this, 'areaup', key, pointer, localX, localY, event);
  if (areaData.isDown) {
    FireEvent.call(this, 'areaclick', key, pointer, localX, localY, event);
    var url = areaData.url;
    if (url) {
      window.open(url, '_blank');
    }
  }
  areaData.isDown = false;
};
var OnAreaOverOut = function (pointer, localX, localY, event) {
  if (localX === null) {
    // Case of pointerout
    if (this.lastHitAreaKey !== null) {
      FireEvent.call(this, 'areaout', this.lastHitAreaKey, pointer, localX, localY, event);
      this.hitAreaManager.getByKey(this.lastHitAreaKey).isDown = false;
      this.lastHitAreaKey = null;
    }
    return;
  }
  var area = this.hitAreaManager.getFirst(localX, localY);
  var key = area ? area.data.key : null;
  if (this.lastHitAreaKey === key) {
    return;
  }
  if (this.lastHitAreaKey !== null) {
    FireEvent.call(this, 'areaout', this.lastHitAreaKey, pointer, localX, localY, event);
    var prevHitArea = this.hitAreaManager.getByKey(this.lastHitAreaKey);
    if (this.urlTagCursorStyle && !!prevHitArea.data.url) {
      this.scene.input.manager.canvas.style.cursor = '';
    }
    prevHitArea.isDown = false;
  }
  if (key !== null) {
    FireEvent.call(this, 'areaover', key, pointer, localX, localY, event);
    if (this.urlTagCursorStyle && !!area.data.url) {
      this.scene.input.manager.canvas.style.cursor = this.urlTagCursorStyle;
    }
  }
  this.lastHitAreaKey = key;
};
var FireEvent = function (eventName, key, pointer, localX, localY, event) {
  this.parent.emit(`${eventName}-${key}`, pointer, localX, localY, event);
  this.parent.emit(eventName, key, pointer, localX, localY, event);
};
var _default = SetInteractive;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/wraptext/WrapText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _const = _interopRequireDefault(require("../../../textbase/const.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const NO_NEWLINE = _const.default.NO_NEWLINE;
const RAW_NEWLINE = _const.default.RAW_NEWLINE;
const WRAPPED_NEWLINE = _const.default.WRAPPED_NEWLINE;
const NO_WRAP = _const.default.NO_WRAP;
const WORD_WRAP = _const.default.WORD_WRAP;
const CHAR_WRAP = _const.default.CHAR_WRAP;
const splitRegExp = _const.default.SPLITREGEXP;
var WrapText = function (text, getTextWidth, wrapMode, wrapWidth, offset, wrapTextLinesPool) {
  if (wrapWidth <= 0) {
    wrapMode = NO_WRAP;
  }
  var retLines = [];
  if (!text || !text.length) {
    return retLines;
  }
  var isNoWrap = wrapMode === NO_WRAP;
  var isWordWrap = wrapMode === WORD_WRAP;
  var lines = text.split(splitRegExp),
    line,
    remainWidth,
    newLineMode;
  for (var i = 0, linesLen = lines.length; i < linesLen; i++) {
    line = lines[i];
    newLineMode = i === linesLen - 1 ? NO_NEWLINE : RAW_NEWLINE;
    if (isNoWrap) {
      var textWidth = getTextWidth(line);
      retLines.push(wrapTextLinesPool.getLine(line, textWidth, newLineMode));
      continue;
    }
    remainWidth = i === 0 ? wrapWidth - offset : wrapWidth;

    // short string testing
    if (line.length <= 100) {
      var textWidth = getTextWidth(line);
      if (textWidth <= remainWidth) {
        retLines.push(wrapTextLinesPool.getLine(line, textWidth, newLineMode));
        continue;
      }
    }
    var tokenArray, isSpaceCharacterEnd;
    if (isWordWrap) {
      // word mode
      tokenArray = line.split(' ');
      isSpaceCharacterEnd = tokenArray[tokenArray.length - 1] === '';
      if (isSpaceCharacterEnd) {
        tokenArray.length -= 1;
      }
    } else {
      tokenArray = line;
    }
    var token, tokenWidth, isLastToken;
    var lineText = '',
      lineWidth = 0;
    var currLineWidth;
    var whiteSpaceWidth = isWordWrap ? getTextWidth(' ') : undefined;
    for (var j = 0, tokenLen = tokenArray.length; j < tokenLen; j++) {
      token = tokenArray[j];
      tokenWidth = getTextWidth(token);
      isLastToken = j === tokenLen - 1;
      if (isWordWrap && (!isLastToken || isSpaceCharacterEnd)) {
        token += ' ';
        tokenWidth += whiteSpaceWidth;
      }

      // Text width of single token is larger than a line width
      if (isWordWrap && tokenWidth > wrapWidth) {
        if (lineText !== '') {
          // Has pending lineText, flush it out
          retLines.push(wrapTextLinesPool.getLine(lineText, lineWidth, WRAPPED_NEWLINE));
        } else if (j === 0 && offset > 0) {
          // No pending lineText, but has previous text. Append a newline
          retLines.push(wrapTextLinesPool.getLine('', 0, WRAPPED_NEWLINE));
        }

        // Word break
        retLines.push(...WrapText(token, getTextWidth, CHAR_WRAP, wrapWidth, 0, wrapTextLinesPool));
        // Continue at last-wordBreak-line
        var lastwordBreakLine = retLines.pop();
        lineText = lastwordBreakLine.text;
        lineWidth = lastwordBreakLine.width;
        // Free this line
        wrapTextLinesPool.freeLine(lastwordBreakLine);

        // Special case : Start at a space character, discard it
        if (lineText === ' ') {
          lineText = '';
          lineWidth = 0;
        }
        continue;
      }
      currLineWidth = lineWidth + tokenWidth;
      if (currLineWidth > remainWidth) {
        // New line
        retLines.push(wrapTextLinesPool.getLine(lineText, lineWidth, WRAPPED_NEWLINE));
        lineText = token;
        lineWidth = tokenWidth;
        remainWidth = wrapWidth;
      } else {
        // Append token, continue
        lineText += token;
        lineWidth = currLineWidth;
      }
      if (isLastToken) {
        // Flush remain text
        retLines.push(wrapTextLinesPool.getLine(lineText, lineWidth, newLineMode));
      }
    } // for token in tokenArray
  } // for each line in lines

  return retLines;
};
var _default = WrapText;
exports.default = _default;
},{"../../../textbase/const.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/const.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/canvastext/CanvasText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DrawMethods = _interopRequireDefault(require("./DrawMethods.js"));
var _PenManager = _interopRequireDefault(require("../penmanger/PenManager.js"));
var _HitAreaManager = _interopRequireDefault(require("../hitareamanager/HitAreaManager.js"));
var _SetInteractive = _interopRequireDefault(require("./SetInteractive.js"));
var _const = _interopRequireDefault(require("../../../textbase/const.js"));
var _WrapText = _interopRequireDefault(require("../wraptext/WrapText.js"));
var _Clone = _interopRequireDefault(require("../../../../utils/object/Clone.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const NO_WRAP = _const.default.NO_WRAP;
const NO_NEWLINE = _const.default.NO_NEWLINE;
class CanvasText {
  constructor(config) {
    this.parent = config.parent;
    this.scene = this.parent.scene;
    this.context = GetValue(config, 'context', null);
    this.canvas = this.context.canvas;
    this.parser = GetValue(config, 'parser', null);
    this.defaultStyle = GetValue(config, 'style', null);
    this.autoRound = true;
    this.pensPool = config.pensPool; // Required
    this.linesPool = config.linesPool; // Required
    this.wrapTextLinesPool = config.wrapTextLinesPool; // Required

    this.penManager = this.newPenManager();
    this._tmpPenManager = null;
    this.hitAreaManager = new _HitAreaManager.default();
    this.lastHitAreaKey = null;
    this.urlTagCursorStyle = null;
    var context = this.context;
    this.getTextWidth = function (text) {
      return context.measureText(text).width;
    };
  }
  destroy() {
    this.parent = undefined;
    this.scene = undefined;
    this.context = undefined;
    this.canvas = undefined;
    this.parser = undefined;
    this.defaultStyle = undefined;
    if (this.penManager) {
      this.penManager.destroy();
      this.penManager = undefined;
    }
    if (this._tmpPenManager) {
      this._tmpPenManager.destroy();
      this._tmpPenManager = undefined;
    }
    if (this.hitAreaManager) {
      this.hitAreaManager.destroy();
      this.hitAreaManager = undefined;
    }
    this.pensPool = undefined;
    this.linesPool = undefined;
    this.wrapTextLinesPool = undefined;
  }
  updatePenManager(text, wrapMode, wrapWidth, lineHeight, penManager) {
    if (penManager === undefined) {
      penManager = this.penManager;
    }
    penManager.clear();
    if (text === "") {
      return penManager;
    }
    var textStyle = this.parent.style;
    if (textStyle.isWrapFitMode) {
      var padding = this.parent.padding;
      wrapWidth = textStyle.fixedWidth - padding.left - padding.right;
    }
    var canvas = this.canvas;
    var context = this.context;
    var MeasureText = function (text) {
      return context.measureText(text).width;
    };
    var cursorX = 0,
      cursorY = 0;
    var customTextWrapCallback = textStyle.wrapCallback,
      customTextWrapCallbackScope = textStyle.wrapCallbackScope;
    var reuseLines = true;
    var plainText, curProp, curStyle;
    var match = this.parser.splitText(text),
      result,
      wrapLines,
      wrapTextLinesPool = this.wrapTextLinesPool;
    for (var i = 0, len = match.length; i < len; i++) {
      result = this.parser.tagTextToProp(match[i], curProp);
      plainText = result.plainText;
      curProp = result.prop;
      if (curProp.img) {
        // Image tag                
        var imgWidth = this.imageManager.getOuterWidth(curProp.img);
        if (wrapWidth > 0 && wrapMode !== NO_WRAP) {
          // Wrap mode
          if (wrapWidth < cursorX + imgWidth) {
            penManager.addNewLinePen();
            cursorY += lineHeight;
            cursorX = 0;
          }
        }
        penManager.addImagePen(cursorX, cursorY, imgWidth, (0, _Clone.default)(curProp));
        cursorX += imgWidth;
      } else if (plainText !== '') {
        // wrap text to lines
        // Save the current context.
        context.save();
        curStyle = this.parser.propToContextStyle(this.defaultStyle, curProp);
        curStyle.buildFont();
        curStyle.syncFont(canvas, context);
        curStyle.syncStyle(canvas, context);
        if (!customTextWrapCallback) {
          wrapLines = (0, _WrapText.default)(plainText, MeasureText, wrapMode, wrapWidth, cursorX, wrapTextLinesPool);
        } else {
          // customTextWrapCallback
          wrapLines = customTextWrapCallback.call(customTextWrapCallbackScope, plainText, MeasureText, wrapWidth, cursorX);
          if (typeof wrapLines === 'string') {
            wrapLines = wrapLines.split('\n');
          }
          var n;
          for (var j = 0, jLen = wrapLines.length; j < jLen; j++) {
            n = wrapLines[j];
            if (typeof n === 'string') {
              wrapLines[j] = wrapTextLinesPool.getLine(n, MeasureText(n), j < jLen - 1 ? 2 : 0);
            } else {
              reuseLines = false;
            }
          }
        } // customTextWrapCallback

        // add pens
        var n;
        for (var j = 0, jLen = wrapLines.length; j < jLen; j++) {
          n = wrapLines[j];
          penManager.addTextPen(n.text, cursorX, cursorY, n.width, (0, _Clone.default)(curProp), n.newLineMode);
          if (n.newLineMode !== NO_NEWLINE) {
            cursorX = 0;
            cursorY += lineHeight;
          } else {
            cursorX += n.width;
          }
        }
        if (reuseLines) {
          wrapTextLinesPool.freeLines(wrapLines);
        }
        wrapLines = null;
        context.restore();
      }
    }

    // Add strokeThinkness to last pen of each line
    for (var i = 0, len = this.lines.length; i < len; i++) {
      var line = this.lines[i];
      var lastPen = line[line.length - 1];
      if (lastPen) {
        lastPen.width += this.parser.getStrokeThinkness(this.defaultStyle, lastPen.prop);
      }
    }
    return penManager;
  }
  get startXOffset() {
    var defaultStyle = this.defaultStyle;
    return defaultStyle.strokeThickness / 2 + defaultStyle.xOffset;
  }
  get startYOffset() {
    var defaultStyle = this.defaultStyle;
    return defaultStyle.strokeThickness / 2 + defaultStyle.metrics.ascent;
  }
  get lines() {
    return this.penManager.lines;
  }
  get desplayLinesCount() {
    var linesCount = this.penManager.linesCount,
      maxLines = this.defaultStyle.maxLines;
    if (maxLines > 0 && linesCount > maxLines) {
      linesCount = maxLines;
    }
    return linesCount;
  }
  get linesWidth() {
    return Math.ceil(this.penManager.getMaxLineWidth());
  }
  get linesHeight() {
    var linesCount = this.desplayLinesCount;
    var linesHeight = this.defaultStyle.lineHeight * linesCount;
    if (linesCount > 0) {
      linesHeight -= this.defaultStyle.lineSpacing;
    }
    return linesHeight;
  }
  get imageManager() {
    return this.parent.imageManager;
  }
  get rtl() {
    return this.parent.style.rtl;
  }
  newPenManager() {
    return new _PenManager.default({
      pensPool: this.pensPool,
      linesPool: this.linesPool,
      tagToText: this.parser.propToTagText,
      tagToTextScope: this.parser
    });
  }
  get tmpPenManager() {
    if (this._tmpPenManager === null) {
      this._tmpPenManager = this.newPenManager();
    }
    return this._tmpPenManager;
  }
  getPlainText(text, start, end) {
    var plainText;
    if (text == null) {
      plainText = this.penManager.plainText;
    } else {
      var m,
        match = this.parser.splitText(text, 1); // PLAINTEXTONLY_MODE
      plainText = "";
      for (var i = 0, len = match.length; i < len; i++) {
        plainText += match[i];
      }
    }
    if (start != null || end != null) {
      if (start == null) {
        start = 0;
      }
      if (end == null) {
        end = plainText.length;
      }
      plainText = plainText.substring(start, end);
    }
    return plainText;
  }
  getPenManager(text, retPenManager) {
    if (text === undefined) {
      return this.copyPenManager(retPenManager, this.penManager);
    }
    if (retPenManager === undefined) {
      retPenManager = this.newPenManager();
    }
    var defaultStyle = this.defaultStyle;
    this.updatePenManager(text, defaultStyle.wrapMode, defaultStyle.wrapWidth, defaultStyle.lineHeight, retPenManager);
    return retPenManager;
  }
  getText(text, start, end, wrap) {
    if (text == null) {
      return this.penManager.getSliceTagText(start, end, wrap);
    }
    var penManager = this.tmpPenManager;
    var defaultStyle = this.defaultStyle;
    this.updatePenManager(text, defaultStyle.wrapMode, defaultStyle.wrapWidth, defaultStyle.lineHeight, penManager);
    return penManager.getSliceTagText(start, end, wrap);
  }
  copyPenManager(ret, src) {
    if (src === undefined) {
      src = this.penManager;
    }
    return src.copy(ret);
  }
  getTextWidth(penManager) {
    if (penManager === undefined) {
      penManager = this.penManager;
    }
    return penManager.getMaxLineWidth();
  }
  getLastPen(penManager) {
    if (penManager === undefined) {
      penManager = this.penManager;
    }
    return penManager.lastPen;
  }
}
;
var methods = {
  setInteractive: _SetInteractive.default
};
Object.assign(CanvasText.prototype, _DrawMethods.default, methods);
var _default = CanvasText;
exports.default = _default;
},{"./DrawMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/canvastext/DrawMethods.js","../penmanger/PenManager.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/penmanger/PenManager.js","../hitareamanager/HitAreaManager.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/hitareamanager/HitAreaManager.js","./SetInteractive.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/canvastext/SetInteractive.js","../../../textbase/const.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/const.js","../wraptext/WrapText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/wraptext/WrapText.js","../../../../utils/object/Clone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/Clone.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/wraptext/WrapTextLinesPool.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _pool = _interopRequireDefault(require("../../../../pool.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class WrapTextLinesPool extends _pool.default {
  freeLine(line) {
    if (!line) {
      return;
    }
    this.push(line);
    return this;
  }
  freeLines(lines) {
    if (!lines) {
      return;
    }
    this.pushMultiple(lines);
    return this;
  }
  getLine(text, width, newLineMode) {
    var l = this.pop();
    if (l === null) {
      l = {};
    }
    l.text = text;
    l.width = width;
    l.newLineMode = newLineMode;
    return l;
  }
}
var _default = WrapTextLinesPool;
exports.default = _default;
},{"../../../../pool.js":"node_modules/phaser3-rex-plugins/plugins/pool.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/texture/imagemanager/AddImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetValue = Phaser.Utils.Objects.GetValue;
var AddImage = function (key, config) {
  if (config === undefined) {
    config = {
      key: key
    };
  }
  if (!config.hasOwnProperty('key')) {
    config.key = key;
  }
  var textureKey = config.key,
    frameKey = config.frame;
  var width = config.width,
    height = config.height;
  if (width === undefined || height === undefined) {
    var frame = this.textureManager.getFrame(textureKey, frameKey);
    var frameWidth = frame ? frame.cutWidth : 0;
    var frameHeight = frame ? frame.cutHeight : 0;
    if (width === undefined && height === undefined) {
      width = frameWidth;
      height = frameHeight;
    } else if (width === undefined) {
      width = frameWidth * (height / frameHeight);
    } else if (height === undefined) {
      height = frameHeight * (width / frameWidth);
    }
  }
  this.images[key] = {
    key: textureKey,
    frame: frameKey,
    width: width,
    height: height,
    y: GetValue(config, 'y', 0),
    left: GetValue(config, 'left', 0),
    right: GetValue(config, 'right', 0)
  };
};
var _default = AddImage;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/texture/imagemanager/DrawImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var DrawImage = function (key, context, x, y, autoRound) {
  var imgData = this.get(key);
  x += imgData.left;
  y += imgData.y;
  if (autoRound) {
    x = Math.round(x);
    y = Math.round(y);
  }
  var frame = this.textureManager.getFrame(imgData.key, imgData.frame);
  context.drawImage(frame.source.image, frame.cutX, frame.cutY, frame.cutWidth, frame.cutHeight, x, y, imgData.width, imgData.height);
};
var _default = DrawImage;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/texture/imagemanager/ImageManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddImage = _interopRequireDefault(require("./AddImage.js"));
var _DrawImage = _interopRequireDefault(require("./DrawImage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class ImageManager {
  constructor(scene) {
    this.textureManager = scene.sys.textures;
    this.images = {};
  }
  destroy() {
    this.textureManager = undefined;
    this.images = undefined;
  }
  add(key, config) {
    if (typeof key === 'string') {
      _AddImage.default.call(this, key, config);
    } else if (Array.isArray(key)) {
      var data = key;
      for (var i = 0, cnt = data.length; i < cnt; i++) {
        _AddImage.default.call(this, data[i]);
      }
    } else {
      var data = key;
      for (var key in data) {
        _AddImage.default.call(this, key, data[key]);
      }
    }
    return this;
  }
  has(key) {
    return this.images.hasOwnProperty(key);
  }
  remove(key) {
    if (this.has(key)) {
      delete this.images[key];
    }
    return this;
  }
  get(key) {
    if (!this.has(key)) {
      if (this.textureManager.exists(key)) {
        this.add(key);
      }
    }
    return this.images[key];
  }
  getOuterWidth(key) {
    var data = this.get(key);
    return data ? data.width + data.left + data.right : 0;
  }
  getFrame(key) {
    var data = this.get(key);
    return data ? this.textureManager.getFrame(data.key, data.frame) : undefined;
  }
  hasTexture(key) {
    return !!this.getFrame(key);
  }
}
var methods = {
  draw: _DrawImage.default
};
Object.assign(ImageManager.prototype, methods);
var _default = ImageManager;
exports.default = _default;
},{"./AddImage.js":"node_modules/phaser3-rex-plugins/plugins/utils/texture/imagemanager/AddImage.js","./DrawImage.js":"node_modules/phaser3-rex-plugins/plugins/utils/texture/imagemanager/DrawImage.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/Text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextBase = _interopRequireDefault(require("../../textbase/TextBase.js"));
var _TextStyle = _interopRequireDefault(require("../../textbase/textstyle/TextStyle.js"));
var _CanvasText = _interopRequireDefault(require("./canvastext/CanvasText.js"));
var _pool = _interopRequireDefault(require("../../../pool.js"));
var _WrapTextLinesPool = _interopRequireDefault(require("./wraptext/WrapTextLinesPool.js"));
var _const = _interopRequireDefault(require("../../textbase/const.js"));
var _ImageManager = _interopRequireDefault(require("../../../utils/texture/imagemanager/ImageManager.js"));
var _CopyCanvasToTexture = _interopRequireDefault(require("../../../utils/texture/CopyCanvasToTexture.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const AddToDOM = Phaser.DOM.AddToDOM;
const CanvasPool = Phaser.Display.Canvas.CanvasPool;
const GameObject = Phaser.GameObjects.GameObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const RemoveFromDOM = Phaser.DOM.RemoveFromDOM;
const SPLITREGEXP = _const.default.SPLITREGEXP;

// Reuse objects can increase performance
var SharedPensPools = null;
var SharedLinesPool = null;
var SharedWrapTextLinesPool = null;
class Text extends _TextBase.default {
  constructor(scene, x, y, text, style, type, parser) {
    if (IsPlainObject(x)) {
      var config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      text = GetValue(config, 'text', '');
      style = GetValue(config, 'style');
    }
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    super(scene, type);
    this.renderer = scene.sys.game.renderer;
    this.setPosition(x, y);
    this.setOrigin(0, 0);
    this.initPipeline();
    this.canvas = CanvasPool.create(this);
    this.context = this.canvas.getContext('2d');
    this._imageManager = undefined;
    if (style) {
      // Override align
      if (style.hasOwnProperty('align')) {
        var halign = style.align;
        delete style.align;
        style.halign = halign;
      }
      // Has Stroke color but stroke thinkness, set stroke thinkness to 1
      if (style.hasOwnProperty('stroke') && !style.hasOwnProperty('strokeThickness')) {
        style.strokeThickness = 1;
      }
    }
    this.style = new _TextStyle.default(this, style);
    var imageData = GetValue(style, 'images', undefined);
    if (imageData) {
      this.addImage(imageData);
    }
    this.autoRound = true;
    this._text = undefined;
    this.padding = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    this.width = 1;
    this.height = 1;
    this.dirty = false;

    //  If resolution wasn't set, force it to 1
    if (this.style.resolution === 0) {
      this.style.resolution = 1;
    }
    this._crop = this.resetCropObject();

    //  Create a Texture for this Text object
    this.texture = scene.sys.textures.addCanvas(null, this.canvas, true);

    //  Get the frame
    this.frame = this.texture.get();

    //  Set the resolution
    this.frame.source.resolution = this.style.resolution;
    if (this.renderer.gl) {
      //  Clear the default 1x1 glTexture, as we override it later

      this.renderer.deleteTexture(this.frame.source.glTexture);
      this.frame.source.glTexture = null;
    }
    var sharedPoolMode = GetValue(style, 'sharedPool', true);
    var pensPool, linesPool, wrapTextLinesPool;
    if (sharedPoolMode) {
      // Use pools first time
      if (!SharedPensPools) {
        SharedPensPools = {};
        SharedLinesPool = new _pool.default();
        SharedWrapTextLinesPool = new _WrapTextLinesPool.default();

        // Remove cached data
        this.scene.game.events.once('destroy', function () {
          SharedPensPools = null;
          SharedLinesPool = null;
          SharedWrapTextLinesPool = null;
        });
      }
      if (!SharedPensPools.hasOwnProperty(type)) {
        SharedPensPools[type] = new _pool.default();
      }
      pensPool = SharedPensPools[type];
      linesPool = SharedLinesPool;
      wrapTextLinesPool = SharedWrapTextLinesPool;
    } else {
      pensPool = new _pool.default();
      linesPool = new _pool.default();
      wrapTextLinesPool = new _WrapTextLinesPool.default();
    }
    this.canvasText = new _CanvasText.default({
      parent: this,
      context: this.context,
      parser: parser,
      style: this.style,
      pensPool: pensPool,
      linesPool: linesPool,
      wrapTextLinesPool: wrapTextLinesPool
    });
    this.parser = parser;
    this.initRTL();
    if (style && style.padding) {
      this.setPadding(style.padding);
    }
    this.setText(text);
    this.setUrlTagCursorStyle(GetValue(style, 'urlTagCursorStyle', 'pointer'));
    if (GetValue(style, 'interactive', false)) {
      this.setInteractive();
    }
  }
  preDestroy() {
    if (this.style.rtl) {
      RemoveFromDOM(this.canvas);
    }
    this.canvasText.destroy();
    this.canvasText = undefined;
    if (this._imageManager) {
      this._imageManager.destroy();
      this._imageManager = undefined;
    }
    CanvasPool.remove(this.canvas);
    this.texture.destroy();
  }
  set text(value) {
    this.setText(value);
  }
  get text() {
    return this._text;
  }
  initRTL() {
    if (!this.style.rtl) {
      return;
    }

    //  Here is where the crazy starts.
    //
    //  Due to browser implementation issues, you cannot fillText BiDi text to a canvas
    //  that is not part of the DOM. It just completely ignores the direction property.

    this.canvas.dir = 'rtl';

    //  Experimental atm, but one day ...
    this.context.direction = 'rtl';

    //  Add it to the DOM, but hidden within the parent canvas.
    this.canvas.style.display = 'none';
    AddToDOM(this.canvas, this.scene.sys.canvas);

    //  And finally we set the x origin
    this.originX = 1;
  }
  setText(value) {
    if (value == null) {
      value = '';
    } else if (Array.isArray(value)) {
      value = value.join('\n');
    } else {
      value = value.toString();
    }
    if (value === this._text) {
      return this;
    }
    this._text = value;
    this.updateText();
    return this;
  }
  appendText(value) {
    if (value == null) {
      return this;
    }
    if (Array.isArray(value)) {
      value = value.join('\n');
    }
    this.setText(this.text + value.toString());
    return this;
  }
  setPadding(left, top, right, bottom) {
    if (typeof left === 'object') {
      var config = left;

      //  If they specify x and/or y this applies to all
      var x = GetValue(config, 'x', null);
      if (x !== null) {
        left = x;
        right = x;
      } else {
        left = GetValue(config, 'left', 0);
        right = GetValue(config, 'right', left);
      }
      var y = GetValue(config, 'y', null);
      if (y !== null) {
        top = y;
        bottom = y;
      } else {
        top = GetValue(config, 'top', 0);
        bottom = GetValue(config, 'bottom', top);
      }
    } else {
      if (left === undefined) {
        left = 0;
      }
      if (top === undefined) {
        top = left;
      }
      if (right === undefined) {
        right = left;
      }
      if (bottom === undefined) {
        bottom = top;
      }
    }
    this.padding.left = left;
    this.padding.top = top;
    this.padding.right = right;
    this.padding.bottom = bottom;
    return this.updateText(false);
  }
  updateText(runWrap) {
    if (runWrap === undefined) {
      runWrap = true;
    }
    var canvasText = this.canvasText;

    // wrap text to pens
    var style = this.style;
    if (runWrap) {
      canvasText.updatePenManager(this._text, style.wrapMode, style.wrapWidth, style.lineHeight);
    }

    // resize
    var padding = this.padding;
    var textWidth, textHeight;
    var linesWidth = Math.ceil(canvasText.linesWidth);
    if (style.fixedWidth === 0) {
      this.width = linesWidth + padding.left + padding.right;
      textWidth = linesWidth;
    } else {
      this.width = style.fixedWidth;
      textWidth = this.width - padding.left - padding.right;
      if (textWidth < linesWidth) {
        textWidth = linesWidth;
      }
    }
    if (style.fixedHeight === 0) {
      this.height = canvasText.linesHeight + padding.top + padding.bottom;
      textHeight = canvasText.linesHeight;
    } else {
      this.height = style.fixedHeight;
      textHeight = this.height - padding.top - padding.bottom;
      if (textHeight < canvasText.linesHeight) {
        textHeight = canvasText.linesHeight;
      }
    }
    var w = this.width;
    var h = this.height;
    this.updateDisplayOrigin();
    var resolution = style.resolution;
    w *= resolution;
    h *= resolution;
    w = Math.max(Math.ceil(w), 1);
    h = Math.max(Math.ceil(h), 1);
    var canvas = this.canvas;
    var context = this.context;
    if (canvas.width !== w || canvas.height !== h) {
      canvas.width = w;
      canvas.height = h;
      this.frame.setSize(w, h);
    } else {
      context.clearRect(0, 0, w, h);
    }
    context.save();
    context.scale(resolution, resolution);

    // draw
    var startX = !this.style.rtl ? padding.left : padding.right;
    var startY = padding.top;
    canvasText.draw(startX, startY, textWidth, textHeight);
    context.restore();
    if (this.renderer && this.renderer.gl) {
      this.frame.source.glTexture = this.renderer.canvasToTexture(canvas, this.frame.source.glTexture, true);
      this.frame.glTexture = this.frame.source.glTexture;
    }
    this.dirty = true;
    var input = this.input;
    if (input && !input.customHitArea) {
      input.hitArea.width = this.width;
      input.hitArea.height = this.height;
    }
    return this;
  }
  toJSON() {
    var out = Components.ToJSON(this);

    //  Extra Text data is added here

    var data = {
      autoRound: this.autoRound,
      text: this._text,
      style: this.style.toJSON(),
      resolution: this.resolution,
      padding: {
        left: this.padding.left,
        right: this.padding.right,
        top: this.padding.top,
        bottom: this.padding.bottom
      }
    };
    out.data = data;
    return out;
  }
  setInteractive(hitArea, hitAreaCallback, dropZone) {
    var isInteractived = !!this.input;
    GameObject.prototype.setInteractive.call(this, hitArea, hitAreaCallback, dropZone);
    if (!isInteractived) {
      this.canvasText.setInteractive();
    }
    return this;
  }
  setUrlTagCursorStyle(cursor) {
    this.urlTagCursorStyle = cursor;
    return this;
  }
  get urlTagCursorStyle() {
    return this.canvasText.urlTagCursorStyle;
  }
  set urlTagCursorStyle(value) {
    this.canvasText.urlTagCursorStyle = value;
  }
  getWrappedText(text, start, end) {
    text = this.canvasText.getText(text, start, end, true);
    return text.split(SPLITREGEXP);
  }
  getPlainText(text, start, end) {
    return this.canvasText.getPlainText(text, start, end);
  }
  getText(text, start, end, wrap) {
    if (wrap === undefined) {
      wrap = false;
    }
    return this.canvasText.getText(text, start, end, wrap);
  }
  getSubString(text, start, end) {
    return this.getText(text, start, end);
  }
  copyPenManager(penManager) {
    return this.canvasText.copyPenManager(penManager);
  }
  getPenManager(text, penManager) {
    return this.canvasText.getPenManager(text, penManager);
  }
  setSize(width, height) {
    return this.setFixedSize(width, height);
  }
  resize(width, height) {
    return this.setFixedSize(width, height);
  }
  get imageManager() {
    if (!this._imageManager) {
      this._imageManager = new _ImageManager.default(this.scene);
    }
    return this._imageManager;
  }
  addImage(key, config) {
    this.imageManager.add(key, config);
    return this;
  }
  drawAreaBounds(graphics, color) {
    this.canvasText.hitAreaManager.drawBounds(graphics, color, this);
    return this;
  }
  generateTexture(key, x, y, width, height) {
    var srcCanvas = this.canvas;
    if (width === undefined) {
      width = srcCanvas.width;
    } else {
      width *= this.resolution;
    }
    if (height === undefined) {
      height = srcCanvas.height;
    } else {
      height *= this.resolution;
    }
    (0, _CopyCanvasToTexture.default)(this.scene, srcCanvas, key, x, y, width, height);
    return this;
  }
}
var _default = Text;
exports.default = _default;
},{"../../textbase/TextBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/TextBase.js","../../textbase/textstyle/TextStyle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/textstyle/TextStyle.js","./canvastext/CanvasText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/canvastext/CanvasText.js","../../../pool.js":"node_modules/phaser3-rex-plugins/plugins/pool.js","./wraptext/WrapTextLinesPool.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/wraptext/WrapTextLinesPool.js","../../textbase/const.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/const.js","../../../utils/texture/imagemanager/ImageManager.js":"node_modules/phaser3-rex-plugins/plugins/utils/texture/imagemanager/ImageManager.js","../../../utils/texture/CopyCanvasToTexture.js":"node_modules/phaser3-rex-plugins/plugins/utils/texture/CopyCanvasToTexture.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/parser/tags.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STR_PARAM = exports.RE_WEIGHT_OPEN = exports.RE_WEIGHT_CLOSE = exports.RE_URL_OPEN = exports.RE_URL_CLOSE = exports.RE_UNDERLINE_OPENC = exports.RE_UNDERLINE_OPEN = exports.RE_UNDERLINE_CLOSE = exports.RE_STROKE_OPENC = exports.RE_STROKE_OPEN = exports.RE_STROKE_CLOSE = exports.RE_SPLITTEXT = exports.RE_SIZE_OPEN = exports.RE_SIZE_CLOSE = exports.RE_SHADOW_OPEN = exports.RE_SHADOW_CLOSE = exports.RE_RAW_OPEN = exports.RE_RAW_CLOSE = exports.RE_OFFSETY_OPEN = exports.RE_OFFSETY_CLOSE = exports.RE_ITALICS_OPEN = exports.RE_ITALICS_CLOSE = exports.RE_IMAGE_OPEN = exports.RE_IMAGE_CLOSE = exports.RE_ESC_OPEN = exports.RE_ESC_CLOSE = exports.RE_COLOR_OPEN = exports.RE_COLOR_CLOSE = exports.RE_BLOD_OPEN = exports.RE_BLOD_CLOSE = exports.RE_AREA_OPEN = exports.RE_AREA_CLOSE = exports.RE_ALIGN_OPEN = exports.RE_ALIGN_CLOSE = exports.NUMBER_PARAM = exports.GetOpenTagRegString = exports.GetCloseTagRegString = exports.COLOR_PARAM = void 0;
var GetOpenTagRegString = function (tagName, param) {
  if (param === undefined) {
    return `\\[${tagName}\\]`;
  } else {
    return `\\[${tagName}=(${param})\\]`;
  }
};
exports.GetOpenTagRegString = GetOpenTagRegString;
var GetCloseTagRegString = function (tagName) {
  return `\\[\/${tagName}\\]`;
};
exports.GetCloseTagRegString = GetCloseTagRegString;
const NUMBER_PARAM = '[-.0-9]+';
exports.NUMBER_PARAM = NUMBER_PARAM;
const COLOR_PARAM = '[a-z]+|#[0-9abcdef]+';
exports.COLOR_PARAM = COLOR_PARAM;
const STR_PARAM = '[^\\]]+';
exports.STR_PARAM = STR_PARAM;
const ESC = 'esc';
const ESC_OPEN = GetOpenTagRegString(ESC);
const ESC_CLOSE = GetCloseTagRegString(ESC);
const RAW = 'raw';
const RAW_OPEN = GetOpenTagRegString(RAW);
const RAW_CLOSE = GetCloseTagRegString(RAW);
const BLOD = 'b';
const BLOD_OPEN = GetOpenTagRegString(BLOD);
const BLOD_CLOSE = GetCloseTagRegString(BLOD);
const ITALICS = 'i';
const ITALICS_OPEN = GetOpenTagRegString(ITALICS);
const ITALICS_CLOSE = GetCloseTagRegString(ITALICS);
const WEIGHT = 'weight';
const WEIGHT_OPEN = GetOpenTagRegString(WEIGHT, NUMBER_PARAM);
const WEIGHT_CLOSE = GetCloseTagRegString(WEIGHT);
const SIZE = 'size';
const SIZE_OPEN = GetOpenTagRegString(SIZE, NUMBER_PARAM);
const SIZE_CLOSE = GetCloseTagRegString(SIZE);
const COLOR = 'color';
const COLOR_OPEN = GetOpenTagRegString(COLOR, COLOR_PARAM);
const COLOR_CLOSE = GetCloseTagRegString(COLOR);
const UNDERLINE = 'u';
const UNDERLINE_OPEN = GetOpenTagRegString(UNDERLINE);
const UNDERLINE_OPENC = GetOpenTagRegString(UNDERLINE, COLOR_PARAM);
const UNDERLINE_CLOSE = GetCloseTagRegString(UNDERLINE);
const SHADOW = 'shadow';
const SHADOW_OPEN = GetOpenTagRegString(SHADOW);
const SHADOW_CLOSE = GetCloseTagRegString(SHADOW);
const STROKE = 'stroke';
const STROKE_OPEN = GetOpenTagRegString(STROKE);
const STROKE_OPENC = GetOpenTagRegString(STROKE, COLOR_PARAM);
const STROKE_CLOSE = GetCloseTagRegString(STROKE);
const OFFSETY = 'y';
const OFFSETY_OPEN = GetOpenTagRegString(OFFSETY, NUMBER_PARAM);
const OFFSETY_CLOSE = GetCloseTagRegString(OFFSETY);
const IMAGE = 'img';
const IMAGE_OPEN = GetOpenTagRegString(IMAGE, STR_PARAM);
const IMAGE_CLOSE = GetCloseTagRegString(IMAGE);
const AREA = 'area';
const AREA_OPEN = GetOpenTagRegString(AREA, STR_PARAM);
const AREA_CLOSE = GetCloseTagRegString(AREA);
const URL = 'url';
const URL_OPEN = GetOpenTagRegString(URL, STR_PARAM);
const URL_CLOSE = GetCloseTagRegString(URL);
const ALIGN = 'align';
const ALIGN_OPEN = GetOpenTagRegString(ALIGN, STR_PARAM);
const ALIGN_CLOSE = GetCloseTagRegString(ALIGN);
const RE_ESC_OPEN = new RegExp(ESC_OPEN, 'i');
exports.RE_ESC_OPEN = RE_ESC_OPEN;
const RE_ESC_CLOSE = new RegExp(ESC_CLOSE, 'i');
exports.RE_ESC_CLOSE = RE_ESC_CLOSE;
const RE_RAW_OPEN = new RegExp(RAW_OPEN, 'i');
exports.RE_RAW_OPEN = RE_RAW_OPEN;
const RE_RAW_CLOSE = new RegExp(RAW_CLOSE, 'i');
exports.RE_RAW_CLOSE = RE_RAW_CLOSE;
const RE_BLOD_OPEN = new RegExp(BLOD_OPEN, 'i');
exports.RE_BLOD_OPEN = RE_BLOD_OPEN;
const RE_BLOD_CLOSE = new RegExp(BLOD_CLOSE, 'i');
exports.RE_BLOD_CLOSE = RE_BLOD_CLOSE;
const RE_ITALICS_OPEN = new RegExp(ITALICS_OPEN, 'i');
exports.RE_ITALICS_OPEN = RE_ITALICS_OPEN;
const RE_ITALICS_CLOSE = new RegExp(ITALICS_CLOSE, 'i');
exports.RE_ITALICS_CLOSE = RE_ITALICS_CLOSE;
const RE_WEIGHT_OPEN = new RegExp(WEIGHT_OPEN, 'i');
exports.RE_WEIGHT_OPEN = RE_WEIGHT_OPEN;
const RE_WEIGHT_CLOSE = new RegExp(WEIGHT_CLOSE, 'i');
exports.RE_WEIGHT_CLOSE = RE_WEIGHT_CLOSE;
const RE_SIZE_OPEN = new RegExp(SIZE_OPEN, 'i');
exports.RE_SIZE_OPEN = RE_SIZE_OPEN;
const RE_SIZE_CLOSE = new RegExp(SIZE_CLOSE, 'i');
exports.RE_SIZE_CLOSE = RE_SIZE_CLOSE;
const RE_COLOR_OPEN = new RegExp(COLOR_OPEN, 'i');
exports.RE_COLOR_OPEN = RE_COLOR_OPEN;
const RE_COLOR_CLOSE = new RegExp(COLOR_CLOSE, 'i');
exports.RE_COLOR_CLOSE = RE_COLOR_CLOSE;
const RE_UNDERLINE_OPEN = new RegExp(UNDERLINE_OPEN, 'i');
exports.RE_UNDERLINE_OPEN = RE_UNDERLINE_OPEN;
const RE_UNDERLINE_OPENC = new RegExp(UNDERLINE_OPENC, 'i');
exports.RE_UNDERLINE_OPENC = RE_UNDERLINE_OPENC;
const RE_UNDERLINE_CLOSE = new RegExp(UNDERLINE_CLOSE, 'i');
exports.RE_UNDERLINE_CLOSE = RE_UNDERLINE_CLOSE;
const RE_SHADOW_OPEN = new RegExp(SHADOW_OPEN, 'i');
exports.RE_SHADOW_OPEN = RE_SHADOW_OPEN;
const RE_SHADOW_CLOSE = new RegExp(SHADOW_CLOSE, 'i');
exports.RE_SHADOW_CLOSE = RE_SHADOW_CLOSE;
const RE_STROKE_OPEN = new RegExp(STROKE_OPEN, 'i');
exports.RE_STROKE_OPEN = RE_STROKE_OPEN;
const RE_STROKE_OPENC = new RegExp(STROKE_OPENC, 'i');
exports.RE_STROKE_OPENC = RE_STROKE_OPENC;
const RE_STROKE_CLOSE = new RegExp(STROKE_CLOSE, 'i');
exports.RE_STROKE_CLOSE = RE_STROKE_CLOSE;
const RE_OFFSETY_OPEN = new RegExp(OFFSETY_OPEN, 'i');
exports.RE_OFFSETY_OPEN = RE_OFFSETY_OPEN;
const RE_OFFSETY_CLOSE = new RegExp(OFFSETY_CLOSE, 'i');
exports.RE_OFFSETY_CLOSE = RE_OFFSETY_CLOSE;
const RE_IMAGE_OPEN = new RegExp(IMAGE_OPEN, 'i');
exports.RE_IMAGE_OPEN = RE_IMAGE_OPEN;
const RE_IMAGE_CLOSE = new RegExp(IMAGE_CLOSE, 'i');
exports.RE_IMAGE_CLOSE = RE_IMAGE_CLOSE;
const RE_AREA_OPEN = new RegExp(AREA_OPEN, 'i');
exports.RE_AREA_OPEN = RE_AREA_OPEN;
const RE_AREA_CLOSE = new RegExp(AREA_CLOSE, 'i');
exports.RE_AREA_CLOSE = RE_AREA_CLOSE;
const RE_URL_OPEN = new RegExp(URL_OPEN, 'i');
exports.RE_URL_OPEN = RE_URL_OPEN;
const RE_URL_CLOSE = new RegExp(URL_CLOSE, 'i');
exports.RE_URL_CLOSE = RE_URL_CLOSE;
const RE_ALIGN_OPEN = new RegExp(ALIGN_OPEN, 'i');
exports.RE_ALIGN_OPEN = RE_ALIGN_OPEN;
const RE_ALIGN_CLOSE = new RegExp(ALIGN_CLOSE, 'i');
exports.RE_ALIGN_CLOSE = RE_ALIGN_CLOSE;
const RE_SPLITTEXT = new RegExp([RAW_OPEN, RAW_CLOSE, ESC_OPEN, ESC_CLOSE, BLOD_OPEN, BLOD_CLOSE, ITALICS_OPEN, ITALICS_CLOSE, WEIGHT_OPEN, WEIGHT_CLOSE, SIZE_OPEN, SIZE_CLOSE, COLOR_OPEN, COLOR_CLOSE, UNDERLINE_OPEN, UNDERLINE_OPENC, UNDERLINE_CLOSE, SHADOW_OPEN, SHADOW_CLOSE, STROKE_OPEN, STROKE_OPENC, STROKE_CLOSE, OFFSETY_OPEN, OFFSETY_CLOSE, IMAGE_OPEN, IMAGE_CLOSE, AREA_OPEN, AREA_CLOSE, URL_OPEN, URL_CLOSE, ALIGN_OPEN, ALIGN_CLOSE].join('|'), 'ig');
exports.RE_SPLITTEXT = RE_SPLITTEXT;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/parser/SplitText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _tags = require("./tags.js");
var SplitText = function (text, mode) {
  var result = [];
  var charIdx = 0;
  var rawMode = false,
    escMode = false;
  while (true) {
    var regexResult = _tags.RE_SPLITTEXT.exec(text);
    if (!regexResult) {
      break;
    }
    var match = regexResult[0];
    if (escMode) {
      if (_tags.RE_ESC_CLOSE.test(match)) {
        escMode = false;
      } else {
        continue; // Skip other tags
      }
    } else if (rawMode) {
      if (_tags.RE_RAW_CLOSE.test(match)) {
        rawMode = false;
      } else {
        continue; // Skip other tags
      }
    } else {
      if (_tags.RE_ESC_OPEN.test(match)) {
        escMode = true;
      } else if (_tags.RE_RAW_OPEN.test(match)) {
        rawMode = true;
      }
    }
    var matchEnd = _tags.RE_SPLITTEXT.lastIndex;
    var matchStart = matchEnd - match.length;
    if (charIdx < matchStart) {
      var content = text.substring(charIdx, matchStart);
      result.push(content);
    }
    if (mode === undefined) {
      result.push(match);
    }
    charIdx = matchEnd;
  }
  var totalLen = text.length;
  if (charIdx < totalLen) {
    // Push remainder string
    result.push(text.substring(charIdx, totalLen));
  }
  return result; // [text,...]
};
var _default = SplitText;
exports.default = _default;
},{"./tags.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/parser/tags.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/parser/TagTextToProp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _tags = require("./tags.js");
const PROP_REMOVE = false;
const PROP_ADD = true;
var GETPROP_RESULT = {
  plainText: null,
  prevProp: null
};
var TagTextToProp = function (text, prevProp) {
  // text : result of splitText()
  if (prevProp == null) {
    prevProp = {};
  }
  var plainText = '';

  // close image tag
  if (prevProp.img) {
    UpdateProp(prevProp, PROP_REMOVE, 'img');
  }
  if (prevProp.esc) {
    if (_tags.RE_ESC_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'esc');
    } else {
      plainText = text;
    }
  } else if (prevProp.raw) {
    if (_tags.RE_RAW_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'raw');
    } else {
      plainText = text;
    }
  } else {
    if (_tags.RE_ESC_OPEN.test(text)) {
      UpdateProp(prevProp, PROP_ADD, 'esc', true);
    } else if (_tags.RE_ESC_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'esc');
    } else if (_tags.RE_RAW_OPEN.test(text)) {
      UpdateProp(prevProp, PROP_ADD, 'raw', true);
    } else if (_tags.RE_RAW_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'raw');
    } else if (_tags.RE_BLOD_OPEN.test(text)) {
      UpdateProp(prevProp, PROP_ADD, 'b', true);
    } else if (_tags.RE_BLOD_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'b');
    } else if (_tags.RE_ITALICS_OPEN.test(text)) {
      UpdateProp(prevProp, PROP_ADD, 'i', true);
    } else if (_tags.RE_ITALICS_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'i');
    } else if (_tags.RE_WEIGHT_OPEN.test(text)) {
      var innerMatch = text.match(_tags.RE_WEIGHT_OPEN);
      UpdateProp(prevProp, PROP_ADD, 'weight', innerMatch[1]);
    } else if (_tags.RE_WEIGHT_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'weight');
    } else if (_tags.RE_SIZE_OPEN.test(text)) {
      var innerMatch = text.match(_tags.RE_SIZE_OPEN);
      UpdateProp(prevProp, PROP_ADD, 'size', `${innerMatch[1]}px`);
    } else if (_tags.RE_SIZE_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'size');
    } else if (_tags.RE_COLOR_OPEN.test(text)) {
      var innerMatch = text.match(_tags.RE_COLOR_OPEN);
      UpdateProp(prevProp, PROP_ADD, 'color', innerMatch[1]);
    } else if (_tags.RE_COLOR_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'color');
    } else if (_tags.RE_UNDERLINE_OPEN.test(text)) {
      UpdateProp(prevProp, PROP_ADD, 'u', true);
    } else if (_tags.RE_UNDERLINE_OPENC.test(text)) {
      var innerMatch = text.match(_tags.RE_UNDERLINE_OPENC);
      UpdateProp(prevProp, PROP_ADD, 'u', innerMatch[1]);
    } else if (_tags.RE_UNDERLINE_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'u');
    } else if (_tags.RE_SHADOW_OPEN.test(text)) {
      UpdateProp(prevProp, PROP_ADD, 'shadow', true);
    } else if (_tags.RE_SHADOW_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'shadow');
    } else if (_tags.RE_STROKE_OPEN.test(text)) {
      UpdateProp(prevProp, PROP_ADD, 'stroke', true);
    } else if (_tags.RE_STROKE_OPENC.test(text)) {
      var innerMatch = text.match(_tags.RE_STROKE_OPENC);
      UpdateProp(prevProp, PROP_ADD, 'stroke', innerMatch[1]);
    } else if (_tags.RE_STROKE_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'stroke');
    } else if (_tags.RE_OFFSETY_OPEN.test(text)) {
      var innerMatch = text.match(_tags.RE_OFFSETY_OPEN);
      UpdateProp(prevProp, PROP_ADD, 'y', parseFloat(innerMatch[1]));
    } else if (_tags.RE_OFFSETY_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'y');
    } else if (_tags.RE_IMAGE_OPEN.test(text)) {
      var innerMatch = text.match(_tags.RE_IMAGE_OPEN);
      UpdateProp(prevProp, PROP_ADD, 'img', innerMatch[1]);
    } else if (_tags.RE_IMAGE_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'img');
    } else if (_tags.RE_AREA_OPEN.test(text)) {
      var innerMatch = text.match(_tags.RE_AREA_OPEN);
      UpdateProp(prevProp, PROP_ADD, 'area', innerMatch[1]);
    } else if (_tags.RE_AREA_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'area');
    } else if (_tags.RE_URL_OPEN.test(text)) {
      var innerMatch = text.match(_tags.RE_URL_OPEN);
      UpdateProp(prevProp, PROP_ADD, 'url', innerMatch[1]);
    } else if (_tags.RE_URL_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'url');
    } else if (_tags.RE_ALIGN_OPEN.test(text)) {
      var innerMatch = text.match(_tags.RE_ALIGN_OPEN);
      UpdateProp(prevProp, PROP_ADD, 'align', innerMatch[1]);
    } else if (_tags.RE_ALIGN_CLOSE.test(text)) {
      UpdateProp(prevProp, PROP_REMOVE, 'align');
    } else {
      plainText = text;
    }
  }
  var result = GETPROP_RESULT;
  result.plainText = plainText;
  result.prop = prevProp;
  return result;
};
var UpdateProp = function (prop, op, key, value) {
  if (op === PROP_ADD) {
    // PROP_ADD     
    prop[key] = value;
  } else {
    // PROP_REMOVE        
    if (prop.hasOwnProperty(key)) {
      delete prop[key];
    }
  }
  return prop;
};
var _default = TagTextToProp;
exports.default = _default;
},{"./tags.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/parser/tags.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/parser/PropToContextStyle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextStyle = _interopRequireDefault(require("../../../textbase/textstyle/TextStyle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PropToContextStyle = function (defaultStyle, prop) {
  var result = STYLE_RESULT;
  if (!prop.hasOwnProperty('img')) {
    result.image = null;
    if (prop.hasOwnProperty('family')) {
      result.fontFamily = prop.family;
    } else {
      result.fontFamily = defaultStyle.fontFamily;
    }
    if (prop.hasOwnProperty('size')) {
      var size = prop.size;
      if (typeof size === 'number') {
        size = `${size}px`;
      }
      result.fontSize = size;
    } else {
      result.fontSize = defaultStyle.fontSize;
    }
    result.fontStyle = GetFontStyle(prop);
    if (prop.hasOwnProperty('color')) {
      result.color = prop.color;
    } else {
      result.color = defaultStyle.color;
    }
    if (prop.hasOwnProperty('stroke')) {
      if (prop.stroke === true) {
        result.stroke = defaultStyle.stroke;
        result.strokeThickness = defaultStyle.strokeThickness;
      } else {
        result.stroke = prop.stroke;
        result.strokeThickness = defaultStyle.strokeThickness;
      }
    } else {
      result.stroke = defaultStyle.stroke;
      result.strokeThickness = 0;
    }
  } else {
    result.image = prop.img;
  }
  if (prop.hasOwnProperty('shadow')) {
    if (prop.shadow === true) {
      result.shadowColor = defaultStyle.shadowColor;
      result.shadowOffsetX = defaultStyle.shadowOffsetX;
      result.shadowOffsetY = defaultStyle.shadowOffsetY;
      result.shadowBlur = defaultStyle.shadowBlur;
      result.shadowStroke = true;
      result.shadowFill = true;
    } else {
      result.shadowColor = prop.shadow;
      result.shadowOffsetX = defaultStyle.shadowOffsetX;
      result.shadowOffsetY = defaultStyle.shadowOffsetY;
      result.shadowBlur = defaultStyle.shadowBlur;
      result.shadowStroke = true;
      result.shadowFill = true;
    }
  } else {
    result.shadowColor = '#000';
    result.shadowOffsetX = 0;
    result.shadowOffsetY = 0;
    result.shadowBlur = 0;
    result.shadowStroke = false;
    result.shadowFill = false;
  }
  if (prop.hasOwnProperty('u')) {
    if (prop.u === true) {
      result.underlineColor = defaultStyle.underlineColor;
      result.underlineThickness = defaultStyle.underlineThickness;
      result.underlineOffset = defaultStyle.underlineOffset;
    } else {
      result.underlineColor = prop.u;
      result.underlineThickness = defaultStyle.underlineThickness;
      result.underlineOffset = defaultStyle.underlineOffset;
    }
  } else {
    result.underlineColor = '#000';
    result.underlineThickness = 0;
    result.underlineOffset = 0;
  }
  return result;
};
var GetFontStyle = function (prop) {
  var isBold = prop.b;
  var weight = prop.weight;
  var isItalic = prop.i;
  if (isBold || weight || isItalic) {
    if (isItalic) {
      if (isBold) {
        return 'bold italic';
      } else if (weight) {
        return `${weight} italic`;
      } else {
        return 'italic';
      }
    } else {
      // !isItalic
      if (isBold) {
        return 'bold';
      } else {
        return weight.toString();
      }
    }
  } else {
    return '';
  }
};
var STYLE_RESULT = new _TextStyle.default();
var _default = PropToContextStyle;
exports.default = _default;
},{"../../../textbase/textstyle/TextStyle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/textstyle/TextStyle.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/parser/PropToTagText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var PropToTagText = function (text, prop, prevProp) {
  if (prevProp == null) {
    prevProp = EMPTYPROP;
  }
  var headers = [];
  for (var k in prevProp) {
    if (!prop.hasOwnProperty(k)) {
      headers.push(`[/${k}]`);
    }
  }
  for (var k in prop) {
    var value = prop[k];
    if (prevProp[k] === value) {
      continue;
    }
    switch (k) {
      case 'size':
        headers.push(`[size=${value.replace('px', '')}]`);
        break;
      case 'color':
      case 'weight':
      case 'stroke':
      case 'y':
      case 'img':
      case 'area':
      case 'url':
      case 'align':
        headers.push(`[${k}=${value}]`);
        break;
      case 'u':
        if (value === true) {
          headers.push('[u]');
        } else {
          headers.push(`[u=${value}]`);
        }
        break;
      default:
        headers.push(`[${k}]`);
        break;
    }
  }
  headers.push(text);
  return headers.join('');
};
var EMPTYPROP = {};
var _default = PropToTagText;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/parser/Parser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SplitText = _interopRequireDefault(require("./SplitText.js"));
var _TagTextToProp = _interopRequireDefault(require("./TagTextToProp.js"));
var _PropToContextStyle = _interopRequireDefault(require("./PropToContextStyle.js"));
var _PropToTagText = _interopRequireDefault(require("./PropToTagText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Parser {
  getStrokeThinkness(defaultStyle, prop) {
    var strokeThickness;
    if (prop.hasOwnProperty('stroke')) {
      strokeThickness = defaultStyle.strokeThickness;
    } else {
      strokeThickness = 0;
    }
    return strokeThickness;
  }
}
var methods = {
  splitText: _SplitText.default,
  tagTextToProp: _TagTextToProp.default,
  propToContextStyle: _PropToContextStyle.default,
  propToTagText: _PropToTagText.default
};
Object.assign(Parser.prototype, methods);
var _default = Parser;
exports.default = _default;
},{"./SplitText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/parser/SplitText.js","./TagTextToProp.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/parser/TagTextToProp.js","./PropToContextStyle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/parser/PropToContextStyle.js","./PropToTagText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/parser/PropToTagText.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/BBCodeText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Text = _interopRequireDefault(require("../textbase/Text.js"));
var _Parser = _interopRequireDefault(require("./parser/Parser.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class BBCodeText extends _Text.default {
  constructor(scene, x, y, text, style) {
    var parser = new _Parser.default(style);
    super(scene, x, y, text, style, 'rexBBCodeText', parser);
  }
}
var _default = BBCodeText;
exports.default = _default;
},{"../textbase/Text.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/Text.js","./parser/Parser.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/parser/Parser.js"}],"node_modules/phaser3-rex-plugins/plugins/bbcodetext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BBCodeText = _interopRequireDefault(require("./gameobjects/tagtext/bbcodetext/BBCodeText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _BBCodeText.default;
exports.default = _default;
},{"./gameobjects/tagtext/bbcodetext/BBCodeText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/BBCodeText.js"}],"node_modules/phaser3-rex-plugins/templates/ui/bbcodetext/BBCodeText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _bbcodetext = _interopRequireDefault(require("../../../plugins/bbcodetext.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _bbcodetext.default;
exports.default = _default;
},{"../../../plugins/bbcodetext.js":"node_modules/phaser3-rex-plugins/plugins/bbcodetext.js"}],"node_modules/phaser3-rex-plugins/templates/ui/bbcodetext/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BBCodeText = _interopRequireDefault(require("./BBCodeText.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('BBCodeText', function (x, y, text, style) {
  var gameObject = new _BBCodeText.default(this.scene, x, y, text, style);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.BBCodeText', _BBCodeText.default);
var _default = _BBCodeText.default;
exports.default = _default;
},{"./BBCodeText.js":"node_modules/phaser3-rex-plugins/templates/ui/bbcodetext/BBCodeText.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/tagtext/Parser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextStyle = _interopRequireDefault(require("../../textbase/textstyle/TextStyle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GETPROP_RESULT = {
  plainText: null,
  prevProp: null
};
var STYLE_RESULT = new _TextStyle.default();
class Parser {
  constructor(tags) {
    if (tags === undefined) {
      tags = {};
    }
    this.tags = tags;
  }
  addTag(name, prop) {
    this.tags[name] = prop;
  }
  getTag(name) {
    return this.tags[name];
  }
  splitText(text, mode) {
    var result = [];
    var charIdx = 0;
    while (true) {
      var regexResult = RE_SPLITTEXT.exec(text);
      if (!regexResult) {
        break;
      }
      var match = regexResult[0];
      var matchStart = RE_SPLITTEXT.lastIndex - match.length;
      if (charIdx < matchStart) {
        result.push(text.substring(charIdx, matchStart));
      }
      if (mode === undefined) {
        result.push(match);
      } else if (mode === 1) {
        // RAWTEXTONLY_MODE
        if (RE_CLASS_HEADER.test(match)) {
          var innerMatch = match.match(RE_CLASS);
          result.push(innerMatch[2]);
        } else if (RE_STYLE_HEADER.test(match)) {
          var innerMatch = match.match(RE_STYLE);
          result.push(innerMatch[2]);
        }
      }
      charIdx = RE_SPLITTEXT.lastIndex;
    }
    var totalLen = text.length;
    if (charIdx < totalLen) {
      // Push remainder string
      result.push(text.substring(charIdx, totalLen));
    }
    return result; // [text,...]         
  }

  tagTextToProp(text, prevProp) {
    var plainText, propOut;
    if (RE_CLASS_HEADER.test(text)) {
      var innerMatch = text.match(RE_CLASS);
      if (innerMatch != null) {
        var name = innerMatch[1];
        var tags = this.tags;
        if (tags.hasOwnProperty(name)) {
          propOut = tags[name];
        } else {
          propOut = {};
        }
        propOut._class = name;
        plainText = innerMatch[2];
      }
    } else if (RE_STYLE_HEADER.test(text)) {
      var innerMatch = text.match(RE_STYLE);
      if (innerMatch != null) {
        var style = innerMatch[1];
        propOut = StyleToProp(style);
        propOut._style = style;
        plainText = innerMatch[2];
      }
    }
    if (plainText == null) {
      plainText = text;
    }
    if (propOut == null) {
      propOut = {};
    }
    var result = GETPROP_RESULT;
    result.plainText = plainText;
    result.prop = propOut;
    return result;
  }
  propToContextStyle(defaultStyle, prop) {
    var result = STYLE_RESULT;
    if (!prop.hasOwnProperty('img')) {
      result.image = null;
      if (prop.hasOwnProperty('family') || prop.hasOwnProperty('fontFamily') || prop.hasOwnProperty('font-family')) {
        var family = prop.hasOwnProperty('family') ? prop.family : prop.hasOwnProperty('fontFamily') ? prop.fontFamily : prop['font-family'];
        result.fontFamily = family;
      } else {
        result.fontFamily = defaultStyle.fontFamily;
      }
      if (prop.hasOwnProperty('size') || prop.hasOwnProperty('fontSize') || prop.hasOwnProperty('font-size')) {
        var size = prop.hasOwnProperty('size') ? prop.size : prop.hasOwnProperty('fontSize') ? prop.fontSize : prop['font-size'];
        if (typeof size === 'number') {
          size = `${size}px`;
        }
        result.fontSize = size;
      } else {
        result.fontSize = defaultStyle.fontSize;
      }
      if (prop.hasOwnProperty('style') || prop.hasOwnProperty('fontStyle') || prop.hasOwnProperty('font-style')) {
        var fontStyle = prop.hasOwnProperty('style') ? prop.style : prop.hasOwnProperty('fontStyle') ? prop.fontStyle : prop['font-style'];
        result.fontStyle = fontStyle;
      } else {
        result.fontStyle = defaultStyle.fontStyle;
      }
      if (prop.hasOwnProperty('color') || prop.hasOwnProperty('font-color')) {
        var color = prop.hasOwnProperty('color') ? prop.color : prop['font-color'];
        result.color = color;
      } else {
        result.color = defaultStyle.color;
      }
      if (prop.hasOwnProperty('stroke')) {
        var stroke = prop.stroke; // {color, thickness}
        result.stroke = stroke.hasOwnProperty('color') ? stroke.color : defaultStyle.stroke;
        result.strokeThickness = stroke.hasOwnProperty('thickness') ? stroke.thickness : defaultStyle.strokeThickness;
      } else {
        result.stroke = defaultStyle.stroke;
        result.strokeThickness = defaultStyle.strokeThickness;
      }
    } else {
      result.image = prop.img;
    }
    if (prop.hasOwnProperty('shadow')) {
      var shadow = prop.shadow; // {color, offsetX, offsetY, blur}
      result.shadowColor = shadow.hasOwnProperty('color') ? shadow.color : defaultStyle.shadowColor;
      result.shadowOffsetX = shadow.hasOwnProperty('offsetX') ? shadow.offsetX : defaultStyle.shadowOffsetX;
      result.shadowOffsetY = shadow.hasOwnProperty('offsetY') ? shadow.offsetY : defaultStyle.shadowOffsetY;
      result.shadowBlur = shadow.hasOwnProperty('blur') ? shadow.blur : defaultStyle.shadowBlur;
      result.shadowStroke = true;
      result.shadowFill = true;
    } else {
      result.shadowColor = defaultStyle.shadowColor;
      result.shadowOffsetX = defaultStyle.shadowOffsetX;
      result.shadowOffsetY = defaultStyle.shadowOffsetY;
      result.shadowBlur = defaultStyle.shadowBlur;
      result.shadowStroke = defaultStyle.shadowStroke;
      result.shadowFill = defaultStyle.shadowFill;
    }
    if (prop.hasOwnProperty('u') || prop.hasOwnProperty('underline')) {
      var u = prop.hasOwnProperty('u') ? prop.u : prop.underline; // {color, thickness, offset}
      result.underlineColor = u.hasOwnProperty('color') ? u.color : defaultStyle.underlineColor;
      result.underlineThickness = u.hasOwnProperty('thickness') ? u.thickness : defaultStyle.underlineThickness;
      result.underlineOffset = u.hasOwnProperty('offset') ? u.offset : defaultStyle.underlineOffset;
    } else {
      result.underlineColor = defaultStyle.underlineColor;
      result.underlineThickness = defaultStyle.underlineThickness;
      result.underlineOffset = defaultStyle.underlineOffset;
    }
    return result;
  }
  getStrokeThinkness(defaultStyle, prop) {
    var strokeThinkness;
    if (prop.hasOwnProperty('stroke')) {
      var stroke = prop.stroke; // {color, thickness}           
      strokeThinkness = stroke.hasOwnProperty('thickness') ? stroke.thickness : defaultStyle.strokeThickness;
    } else {
      strokeThinkness = defaultStyle.strokeThickness;
    }
    return strokeThinkness;
  }
  propToTagText(text, prop, prevProp) {
    if (prop.hasOwnProperty('_class')) {
      // class mode
      if (text === '') {
        if (this.isTextTag(prop._class)) {
          return '';
        }
      }
      return `<class='${prop._class}'>${text}</class>`;
    } else if (prop.hasOwnProperty('_style')) {
      // class mode
      return `<style='${prop._style}'>${text}</style>`;
    } else {
      return text;
    }
  }
  destroy() {
    this.tags = undefined;
  }
  isTextTag(tagName) {
    var tag = this.tags[tagName];
    if (tag) {
      return tag.img == null;
    } else {
      // tag not found
      return false;
    }
  }
}
;
var StyleToProp = function (s) {
  s = s.split(";");
  var result = {},
    prop,
    k,
    v;
  for (var i = 0, slen = s.length; i < slen; i++) {
    prop = s[i].split(":");
    k = prop[0], v = prop[1];
    if (isEmpty(k) || isEmpty(v)) {
      continue;
    }
    switch (k) {
      case 'stroke':
        var stroke = v.split(' '); // stroke:blue 1px
        var len = stroke.length;
        v = {};
        if (len >= 1) {
          v.color = stroke[0];
        }
        if (len >= 2) {
          v.thickness = parseInt(stroke[1].replace('px', ''));
        }
        break;
      case 'shadow':
        var shadow = v.split(' '); // shadow:blue 2px 2px 2px
        var len = shadow.length;
        v = {};
        if (len >= 1) {
          v.color = shadow[0];
        }
        if (len >= 2) {
          v.offsetX = parseInt(shadow[1].replace('px', ''));
        }
        if (len >= 3) {
          v.offsetY = parseInt(shadow[2].replace('px', ''));
        }
        if (len >= 4) {
          v.blur = parseInt(shadow[3].replace('px', ''));
        }
        break;
      case 'u':
      case 'underline':
        // underline:blue 3px -1px
        var u = v.split(' ');
        var len = u.length;
        v = {};
        if (len >= 1) {
          v.color = u[0];
        }
        if (len >= 2) {
          v.thickness = parseInt(u[1].replace('px', ''));
        }
        if (len >= 3) {
          v.offset = parseInt(u[2].replace('px', ''));
        }
        break;
      case 'y':
        v = parseFloat(v);
        break;
    }
    result[k] = v;
  }
  return result;
};
var isEmpty = function (s) {
  // Remove white spaces.
  s = s.replace(RE_SPACE, '');
  return s.length === 0;
};
var RE_SPLITTEXT = /<\s*class=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/class\s*\>|<\s*style=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/style\s*\>/g;
var RE_CLASS_HEADER = /<\s*class=/i;
var RE_CLASS = /<\s*class=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/class\s*\>/;
var RE_STYLE_HEADER = /<\s*style=/i;
var RE_STYLE = /<\s*style=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/style\s*\>/;
var RE_SPACE = /^\s+|\s+$/;
var _default = Parser;
exports.default = _default;
},{"../../textbase/textstyle/TextStyle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/textbase/textstyle/TextStyle.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/tagtext/TagText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Text = _interopRequireDefault(require("../textbase/Text.js"));
var _Parser = _interopRequireDefault(require("./Parser.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class TagText extends _Text.default {
  constructor(scene, x, y, text, style) {
    var tags = GetValue(style, 'tags', undefined);
    var parser = new _Parser.default(tags);
    super(scene, x, y, text, style, 'rexTagText', parser);
  }
  addTag(name, prop) {
    this.parser.addTag(name, prop);
    return this.updateText(true);
  }
  addTags(tags) {
    for (var name in tags) {
      this.parser.addTag(name, tags[name]);
    }
    return this.updateText(true);
  }
  getTag(name) {
    return this.parser.getTag(name);
  }
  preDestroy() {
    super.preDestroy();
    this.parser.destroy();
    this.parser = undefined;
  }
}
var _default = TagText;
exports.default = _default;
},{"../textbase/Text.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/textbase/Text.js","./Parser.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/tagtext/Parser.js"}],"node_modules/phaser3-rex-plugins/plugins/tagtext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TagText = _interopRequireDefault(require("./gameobjects/tagtext/tagtext/TagText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _TagText.default;
exports.default = _default;
},{"./gameobjects/tagtext/tagtext/TagText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/tagtext/tagtext/TagText.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tagtext/TagText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _tagtext = _interopRequireDefault(require("../../../plugins/tagtext.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _tagtext.default;
exports.default = _default;
},{"../../../plugins/tagtext.js":"node_modules/phaser3-rex-plugins/plugins/tagtext.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tagtext/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TagText = _interopRequireDefault(require("./TagText.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('tagText', function (x, y, text, style) {
  var gameObject = new _TagText.default(this.scene, x, y, text, style);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.TagText', _TagText.default);
var _default = _TagText.default;
exports.default = _default;
},{"./TagText.js":"node_modules/phaser3-rex-plugins/templates/ui/tagtext/TagText.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/padding/PaddingMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SetPadding = exports.GetPadding = void 0;
const GetValue = Phaser.Utils.Objects.GetValue;
var GetPadding = function (padding, key) {
  if (key === undefined) {
    return padding;
  }
  return padding[key];
};
exports.GetPadding = GetPadding;
var SetPadding = function (padding, key, value) {
  if (padding === undefined) {
    padding = {};
  }
  if (key === undefined) {
    key = 0;
  }
  var keyType = typeof key;
  if (keyType === 'string') {
    padding[key] = value;
  } else if (keyType === 'number') {
    padding.left = key;
    padding.right = key;
    padding.top = key;
    padding.bottom = key;
  } else {
    padding.left = GetValue(key, 'left', 0);
    padding.right = GetValue(key, 'right', 0);
    padding.top = GetValue(key, 'top', 0);
    padding.bottom = GetValue(key, 'bottom', 0);
  }
  return padding;
};
exports.SetPadding = SetPadding;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Base.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DataMethods = _interopRequireDefault(require("../../../../utils/data/DataMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Base {
  constructor(parent, type) {
    this.setParent(parent);
    this.type = type;
    this.renderable = false;
    this.reset().setActive();
  }
  destroy() {
    this.parent.removeChild(this);
  }
  setParent(parent) {
    this.parent = parent;
    return this;
  }
  get scene() {
    return this.parent.scene;
  }
  get canvas() {
    return this.parent ? this.parent.canvas : null;
  }
  get context() {
    return this.parent ? this.parent.context : null;
  }
  setDirty(dirty) {
    if (dirty && this.parent) {
      this.parent.dirty = true;
    }
    return this;
  }
  get active() {
    return this._active;
  }
  set active(value) {
    this.setDirty(this._active != value);
    this._active = value;
  }
  setActive(active) {
    if (active === undefined) {
      active = true;
    }
    this.active = active;
    return this;
  }
  modifyPorperties(o) {
    return this;
  }

  // Override
  onFree() {
    this.reset().setParent();
  }

  // Override
  reset() {
    return this;
  }

  // Override
  render() {}

  // Override
  contains(x, y) {
    return false;
  }
}
Object.assign(Base.prototype, _DataMethods.default);
var _default = Base;
exports.default = _default;
},{"../../../../utils/data/DataMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/data/DataMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/RenderMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  // Override
  renderContent() {},
  // Override
  render() {
    if (!this.willRender) {
      return this;
    }
    var context = this.context;
    context.save();
    context.globalAlpha = this.alpha;
    if (this.toLocalPosition) {
      var x = this.drawX,
        y = this.drawY;
      if (this.autoRound) {
        x = Math.round(x);
        y = Math.round(y);
      }
      context.translate(x, y);
      context.scale(this.scaleX, this.scaleY);
      context.rotate(this.rotation);
    }
    if (this.drawBelowCallback) {
      this.drawBelowCallback(this);
    }
    this.renderContent();
    if (this.drawAboveCallback) {
      this.drawAboveCallback(this);
    }
    context.restore();
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/utils/transform/CanvasPositionToBobPosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const RotateAround = Phaser.Math.RotateAround;
var CanvasPositionToBobPosition = function (canvasX, canvasY, bob, out) {
  if (out === undefined) {
    out = {};
  } else if (out === true) {
    if (globPoint === undefined) {
      globPoint = {};
    }
    out = globPoint;
  }
  out.x = (canvasX - bob.drawX) / bob.scaleX;
  out.y = (canvasY - bob.drawY) / bob.scaleY;
  if (bob.rotation !== 0) {
    RotateAround(out, 0, 0, -bob.rotation);
  }
  return out;
};
var globPoint;
var _default = CanvasPositionToBobPosition;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/Contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CanvasPositionToBobPosition = _interopRequireDefault(require("../../methods/utils/transform/CanvasPositionToBobPosition.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Rectangle = Phaser.Geom.Rectangle;
var Contains = function (canvasX, canvasY) {
  if (this.width === 0 || this.height === 0) {
    return false;
  }
  var bobPosition = (0, _CanvasPositionToBobPosition.default)(canvasX, canvasY, this, true);
  return GetBounds(this).contains(bobPosition.x, bobPosition.y);
};
var GetBounds = function (bob) {
  if (globBounds === undefined) {
    globBounds = new Rectangle();
  }
  var x = bob.drawTLX,
    y = bob.drawTLY;
  globBounds.setTo(x, y, bob.drawTRX - x, bob.drawBLY - y);
  return globBounds;
};
var globBounds;
var _default = Contains;
exports.default = _default;
},{"../../methods/utils/transform/CanvasPositionToBobPosition.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/utils/transform/CanvasPositionToBobPosition.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/utils/transform/BobPositionToCanvasPosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const RotateAround = Phaser.Math.RotateAround;
var BobPositionToCanvasPosition = function (bob, bobX, bobY, out) {
  if (out === undefined) {
    out = {};
  } else if (out === true) {
    if (globPoint === undefined) {
      globPoint = {};
    }
    out = globPoint;
  }
  out.x = bobX;
  out.y = bobY;
  if (bob.rotation !== 0) {
    RotateAround(out, 0, 0, bob.rotation);
  }
  out.x = out.x * bob.scaleX + bob.drawX;
  out.y = out.y * bob.scaleY + bob.drawY;
  return out;
};
var globPoint;
var _default = BobPositionToCanvasPosition;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/position/GameObjectLocalXYToWorldXY.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const TransformMatrix = Phaser.GameObjects.Components.TransformMatrix;
var GameObjectLocalXYToWorldXY = function (gameObject, localX, localY, out) {
  if (out === undefined) {
    out = {};
  } else if (out === true) {
    out = globOut;
  }
  var px = localX - gameObject.width * gameObject.originX;
  var py = localY - gameObject.height * gameObject.originY;
  if (tempMatrix === undefined) {
    tempMatrix = new TransformMatrix();
    parentMatrix = new TransformMatrix();
  }
  if (gameObject.parentContainer) {
    gameObject.getWorldTransformMatrix(tempMatrix, parentMatrix);
  } else {
    tempMatrix.applyITRS(gameObject.x, gameObject.y, gameObject.rotation, gameObject.scaleX, gameObject.scaleY);
  }
  tempMatrix.transformPoint(px, py, out);
  return out;
};
var tempMatrix, parentMatrix;
var globOut = {};
var _default = GameObjectLocalXYToWorldXY;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/utils/transform/BobPositionToWorldPosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BobPositionToCanvasPosition = _interopRequireDefault(require("./BobPositionToCanvasPosition.js"));
var _GameObjectLocalXYToWorldXY = _interopRequireDefault(require("../../../../../../utils/position/GameObjectLocalXYToWorldXY.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var BobPositionToWorldPosition = function (dynamicText, bob, bobX, bobY, out) {
  var localXY = (0, _BobPositionToCanvasPosition.default)(bob, bobX, bobY, true);
  var worldXY = (0, _GameObjectLocalXYToWorldXY.default)(dynamicText, localXY.x, localXY.y, out);
  return worldXY;
};
var _default = BobPositionToWorldPosition;
exports.default = _default;
},{"./BobPositionToCanvasPosition.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/utils/transform/BobPositionToCanvasPosition.js","../../../../../../utils/position/GameObjectLocalXYToWorldXY.js":"node_modules/phaser3-rex-plugins/plugins/utils/position/GameObjectLocalXYToWorldXY.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/utils/transform/GetBobWorldPosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BobPositionToWorldPosition = _interopRequireDefault(require("./BobPositionToWorldPosition.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetBobWorldPosition = function (dynamicText, bob, offsetX, offsetY, out) {
  if (typeof offsetX !== 'number') {
    out = offsetX;
    offsetX = 0;
    offsetY = 0;
  }
  var bobX = bob.drawCenterX + offsetX;
  var bobY = bob.drawCenterY + offsetY;
  return (0, _BobPositionToWorldPosition.default)(dynamicText, bob, bobX, bobY, out);
};
var _default = GetBobWorldPosition;
exports.default = _default;
},{"./BobPositionToWorldPosition.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/utils/transform/BobPositionToWorldPosition.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/GetWorldPosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetBobWorldPosition = _interopRequireDefault(require("../../methods/utils/transform/GetBobWorldPosition.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetWorldPosition = function (offsetX, offsetY, out) {
  return (0, _GetBobWorldPosition.default)(this.parent, this, offsetX, offsetY, out);
};
var _default = GetWorldPosition;
exports.default = _default;
},{"../../methods/utils/transform/GetBobWorldPosition.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/utils/transform/GetBobWorldPosition.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RenderMethods = _interopRequireDefault(require("./RenderMethods.js"));
var _Contains = _interopRequireDefault(require("./Contains.js"));
var _GetWorldPosition = _interopRequireDefault(require("./GetWorldPosition.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {
  contains: _Contains.default,
  getWorldPosition: _GetWorldPosition.default
};
Object.assign(Methods, _RenderMethods.default);
var _default = Methods;
exports.default = _default;
},{"./RenderMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/RenderMethods.js","./Contains.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/Contains.js","./GetWorldPosition.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/GetWorldPosition.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/RenderBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Base = _interopRequireDefault(require("../Base.js"));
var _Methods = _interopRequireDefault(require("./Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DegToRad = Phaser.Math.DegToRad;
const RadToDeg = Phaser.Math.RadToDeg;
const GetValue = Phaser.Utils.Objects.GetValue;
class RenderBase extends _Base.default {
  constructor(parent, type) {
    super(parent, type);
    this.renderable = true;
    this.toLocalPosition = true;
    this.originX = 0;
    this.offsetX = 0; // Override
    this.offsetY = 0; // Override
  }

  get visible() {
    return this._visible;
  }
  set visible(value) {
    this.setDirty(this._visible != value);
    this._visible = value;
  }
  setVisible(visible) {
    if (visible === undefined) {
      visible = true;
    }
    this.visible = visible;
    return this;
  }
  get alpha() {
    return this._alpha;
  }
  set alpha(value) {
    this.setDirty(this._alpha != value);
    this._alpha = value;
  }
  setAlpha(alpha) {
    this.alpha = alpha;
    return this;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this.setDirty(this._x != value);
    this._x = value;
  }
  setX(x) {
    this.x = x;
    return this;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this.setDirty(this._y != value);
    this._y = value;
  }
  setY(y) {
    this.y = y;
    return this;
  }
  setPosition(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }
  setInitialPosition(x, y) {
    this.x0 = x;
    this.y0 = y;
    return this;
  }
  get rotation() {
    return this._rotation;
  }
  set rotation(value) {
    this.setDirty(this._rotation != value);
    this._rotation = value;
  }
  setRotation(rotation) {
    this.rotation = rotation;
    return this;
  }
  get angle() {
    return RadToDeg(this._rotation);
  }
  set angle(value) {
    this.rotation = DegToRad(value);
  }
  setAngle(angle) {
    this.angle = angle;
    return this;
  }
  get scaleX() {
    return this._scaleX;
  }
  set scaleX(value) {
    this.setDirty(this._scaleX !== value);
    this._scaleX = value;
  }
  setScaleX(scaleX) {
    this.scaleX = scaleX;
    return this;
  }

  // Override
  get width() {
    return 0;
  }

  // Override
  set width(value) {}
  setWidth(width, keepAspectRatio) {
    if (keepAspectRatio === undefined) {
      keepAspectRatio = false;
    }
    this.width = width;
    if (keepAspectRatio) {
      this.scaleY = this.scaleX;
    }
    return this;
  }
  get leftSpace() {
    return this._leftSpace;
  }
  set leftSpace(value) {
    this.setDirty(this._leftSpace !== value);
    this._leftSpace = value;
  }
  setLeftSpace(value) {
    this.leftSpace = value;
    return this;
  }
  get rightSpace() {
    return this._rightSpace;
  }
  set rightSpace(value) {
    this.setDirty(this._rightSpace !== value);
    this._rightSpace = value;
  }
  setRightSpace(value) {
    this.rightSpace = value;
    return this;
  }
  get outerWidth() {
    return this.width + this.leftSpace + this.rightSpace;
  }
  get scaleY() {
    return this._scaleY;
  }
  set scaleY(value) {
    this.setDirty(this._scaleY !== value);
    this._scaleY = value;
  }
  setScaleY(scaleY) {
    this.scaleY = scaleY;
    return this;
  }

  // Override
  get height() {
    return 0;
  }

  // Override
  set height(value) {}
  setHeight(height, keepAspectRatio) {
    if (keepAspectRatio === undefined) {
      keepAspectRatio = false;
    }
    this.height = height;
    if (keepAspectRatio) {
      this.scaleX = this.scaleY;
    }
    return this;
  }
  setScale(scaleX, scaleY) {
    if (scaleY === undefined) {
      scaleY = scaleX;
    }
    this.scaleX = scaleX;
    this.scaleY = scaleY;
    return this;
  }
  setOrigin(x) {
    this.originX = x;
    return this;
  }
  setAlign(align) {
    this.align = align;
    return this;
  }
  modifyPorperties(o) {
    if (!o) {
      return this;
    }
    if (o.hasOwnProperty('x')) {
      this.setX(o.x);
    }
    if (o.hasOwnProperty('y')) {
      this.setY(o.y);
    }
    if (o.hasOwnProperty('rotation')) {
      this.setRotation(o.rotation);
    } else if (o.hasOwnProperty('angle')) {
      this.setAngle(o.angle);
    }
    if (o.hasOwnProperty('alpha')) {
      this.setAlpha(o.alpha);
    }

    // ScaleX, ScaleY
    var width = GetValue(o, 'width', undefined);
    var height = GetValue(o, 'height', undefined);
    var scaleX = GetValue(o, 'scaleX', undefined);
    var scaleY = GetValue(o, 'scaleY', undefined);
    if (width !== undefined) {
      if (height === undefined && scaleY === undefined) {
        this.setWidth(width, true);
      } else {
        this.setWidth(width);
      }
    } else if (scaleX !== undefined) {
      this.setScaleX(scaleX);
    }
    if (height !== undefined) {
      if (width === undefined && scaleX === undefined) {
        this.setHeight(height, true);
      } else {
        this.setHeight(height);
      }
    } else if (scaleY !== undefined) {
      this.setScaleY(scaleY);
    }
    if (o.hasOwnProperty('leftSpace')) {
      this.setLeftSpace(o.leftSpace);
    }
    if (o.hasOwnProperty('rightSpace')) {
      this.setRightSpace(o.rightSpace);
    }
    if (o.hasOwnProperty('align')) {
      this.setAlign(o.align);
    }
    return this;
  }
  setDrawBelowCallback(callback) {
    this.drawBelowCallback = callback;
    return this;
  }
  setDrawAboveCallback(callback) {
    this.drawAboveCallback = callback;
    return this;
  }
  reset() {
    this.setVisible().setAlpha(1).setPosition(0, 0).setRotation(0).setScale(1, 1).setLeftSpace(0).setRightSpace(0).setOrigin(0).setAlign().setDrawBelowCallback().setDrawAboveCallback();
    return this;
  }

  // Override
  get willRender() {
    return this.visible && this.alpha > 0;
  }
  get drawX() {
    return this.x + this.leftSpace + this.offsetX - this.originX * this.width;
  }
  get drawY() {
    return this.y + this.offsetY;
  }

  // Override
  get drawTLX() {
    return 0;
  }
  get drawTLY() {
    return 0;
  }
  get drawBLX() {
    return 0;
  }
  get drawBLY() {
    return 0;
  }
  get drawTRX() {
    return 0;
  }
  get drawTRY() {
    return 0;
  }
  get drawBRX() {
    return 0;
  }
  get drawBRY() {
    return 0;
  }
  get drawCenterX() {
    return (this.drawTRX + this.drawTLX) / 2;
  }
  get drawCenterY() {
    return (this.drawBLY + this.drawTLY) / 2;
  }
}
Object.assign(RenderBase.prototype, _Methods.default);
var _default = RenderBase;
exports.default = _default;
},{"../Base.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Base.js","./Methods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/Methods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/utils/GetProperty.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetProperty = function (name, config, defaultConfig) {
  if (config.hasOwnProperty(name)) {
    return config[name];
  } else {
    return defaultConfig[name];
  }
};
var _default = GetProperty;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/background/Background.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RenderBase = _interopRequireDefault(require("../renderbase/RenderBase.js"));
var _GetStyle = _interopRequireDefault(require("../../../../../utils/canvas/GetStyle.js"));
var _GetProperty = _interopRequireDefault(require("../utils/GetProperty.js"));
var _DrawRoundRectangleBackground = _interopRequireDefault(require("../../../../canvas/utils/DrawRoundRectangleBackground.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Background extends _RenderBase.default {
  constructor(parent, config) {
    super(parent, 'background');
    this.setColor(GetValue(config, 'color', null), GetValue(config, 'color2', null), GetValue(config, 'horizontalGradient', true));
    this.setStroke(GetValue(config, 'stroke', null), GetValue(config, 'strokeThickness', 2));
    this.setCornerRadius(GetValue(config, 'cornerRadius', 0), GetValue(config, 'cornerIteration', null));
  }
  set color(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.setDirty(this._color != value);
    this._color = value;
  }
  get color() {
    return this._color;
  }
  set color2(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.setDirty(this._color2 != value);
    this._color2 = value;
  }
  get color2() {
    return this._color2;
  }
  set horizontalGradient(value) {
    this.setDirty(this._horizontalGradient != value);
    this._horizontalGradient = value;
  }
  get horizontalGradient() {
    return this._horizontalGradient;
  }
  setColor(color, color2, isHorizontalGradient) {
    if (isHorizontalGradient === undefined) {
      isHorizontalGradient = true;
    }
    this.color = color;
    this.color2 = color2;
    this.horizontalGradient = isHorizontalGradient;
    return this;
  }
  set stroke(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.setDirty(this._stroke != value);
    this._stroke = value;
  }
  get stroke() {
    return this._stroke;
  }
  set strokeThickness(value) {
    this.setDirty(this._strokeThickness != value);
    this._strokeThickness = value;
  }
  get strokeThickness() {
    return this._strokeThickness;
  }
  setStroke(color, lineWidth) {
    if (color != null) {
      if (lineWidth === undefined) {
        lineWidth = 2;
      }
    }
    this.stroke = color;
    this.strokeThickness = lineWidth;
    return this;
  }
  set cornerRadius(value) {
    this.setDirty(this._cornerRadius != value);
    this._cornerRadius = value;
  }
  get cornerRadius() {
    return this._cornerRadius;
  }
  set cornerIteration(value) {
    this.setDirty(this._cornerIteration != value);
    this._cornerIteration = value;
  }
  get cornerIteration() {
    return this._cornerIteration;
  }
  modifyStyle(o) {
    if (o.hasOwnProperty('color')) {
      this.setColor(o.color, (0, _GetProperty.default)('color2', o, this), (0, _GetProperty.default)('horizontalGradient', o, this));
    }
    if (o.hasOwnProperty('stroke')) {
      this.setStroke(o.stroke, (0, _GetProperty.default)('strokeThickness', o, this));
    }
    if (o.hasOwnProperty('cornerRadius')) {
      this.setCornerRadius(o.cornerRadius, (0, _GetProperty.default)('cornerIteration', o, this));
    }
    return this;
  }
  modifyPorperties(o) {
    super.modifyPorperties(o);
    this.modifyStyle(o);
    return this;
  }
  setCornerRadius(radius, iteration) {
    this.cornerRadius = radius;
    this.cornerIteration = iteration;
    return this;
  }
  renderContent() {
    (0, _DrawRoundRectangleBackground.default)(this.parent, this.color, this.stroke, this.strokeThickness, this.cornerRadius, this.color2, this.horizontalGradient, this.cornerIteration);
  }
}
var _default = Background;
exports.default = _default;
},{"../renderbase/RenderBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/RenderBase.js","../../../../../utils/canvas/GetStyle.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/GetStyle.js","../utils/GetProperty.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/utils/GetProperty.js","../../../../canvas/utils/DrawRoundRectangleBackground.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/utils/DrawRoundRectangleBackground.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/innerbounds/InnerBounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RenderBase = _interopRequireDefault(require("../renderbase/RenderBase.js"));
var _GetStyle = _interopRequireDefault(require("../../../../../utils/canvas/GetStyle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class InnerBounds extends _RenderBase.default {
  constructor(parent, config) {
    super(parent, 'innerbounds');
    this.setColor(GetValue(config, 'color', null), GetValue(config, 'color2', null), GetValue(config, 'horizontalGradient', true));
    this.setStroke(GetValue(config, 'stroke', null), GetValue(config, 'strokeThickness', 2));
  }
  set color(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.setDirty(this._color != value);
    this._color = value;
  }
  get color() {
    return this._color;
  }
  set color2(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.setDirty(this._color2 != value);
    this._color2 = value;
  }
  get color2() {
    return this._color2;
  }
  set horizontalGradient(value) {
    this.setDirty(this._horizontalGradient != value);
    this._horizontalGradient = value;
  }
  get horizontalGradient() {
    return this._horizontalGradient;
  }
  setColor(color, color2, isHorizontalGradient) {
    if (isHorizontalGradient === undefined) {
      isHorizontalGradient = true;
    }
    this.color = color;
    this.color2 = color2;
    this.horizontalGradient = isHorizontalGradient;
    return this;
  }
  set stroke(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.setDirty(this._stroke != value);
    this._stroke = value;
  }
  get stroke() {
    return this._stroke;
  }
  set strokeThickness(value) {
    this.setDirty(this._strokeThickness != value);
    this._strokeThickness = value;
  }
  get strokeThickness() {
    return this._strokeThickness;
  }
  setStroke(color, lineWidth) {
    if (color != null) {
      if (lineWidth === undefined) {
        lineWidth = 2;
      }
    }
    this.stroke = color;
    this.strokeThickness = lineWidth;
    return this;
  }
  modifyPorperties(o) {
    super.modifyPorperties(o);
    if (o.hasOwnProperty('color')) {
      this.setColor(o.color, GetValue(o, 'color2', null), GetValue(o, 'horizontalGradient', true));
    }
    if (o.hasOwnProperty('stroke')) {
      this.setStroke(o.stroke, GetValue(o, 'strokeThickness', 2));
    }
  }
  renderContent() {
    var padding = this.parent.padding;
    var x = padding.left,
      y = padding.top,
      width = this.parent.width - padding.left - padding.right,
      height = this.parent.height - padding.top - padding.bottom;
    var context = this.context;
    if (this.color != null) {
      var fillStyle;
      if (this.color2 != null) {
        var grd;
        if (this.horizontalGradient) {
          grd = context.createLinearGradient(0, 0, width, 0);
        } else {
          grd = context.createLinearGradient(0, 0, 0, height);
        }
        grd.addColorStop(0, this.color);
        grd.addColorStop(1, this.color2);
        fillStyle = grd;
      } else {
        fillStyle = this.color;
      }
      context.fillStyle = fillStyle;
      context.fillRect(x, y, width, height);
    }
    if (this.stroke != null && this.strokeThickness > 0) {
      context.strokeStyle = this.stroke;
      context.lineWidth = this.strokeThickness;
      context.strokeRect(x, y, width, height);
    }
  }
}
var _default = InnerBounds;
exports.default = _default;
},{"../renderbase/RenderBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/RenderBase.js","../../../../../utils/canvas/GetStyle.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/GetStyle.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/char/TextStyle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetStyle = _interopRequireDefault(require("../../../../../utils/canvas/GetStyle.js"));
var _GetProperty = _interopRequireDefault(require("../utils/GetProperty.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class TextStyle {
  constructor(parent, config) {
    this.parent = parent;
    this.set(config);
  }
  toJSON() {
    return {
      bold: this.bold,
      italic: this.italic,
      fontSize: this.fontSize,
      fontFamily: this.fontFamily,
      color: this.color,
      stroke: this.stroke,
      strokeThickness: this.strokeThickness,
      shaodwColor: this.shadowColor,
      shadowBlur: this.shadowBlur,
      shadowOffsetX: this.shadowOffsetX,
      shadowOffsetY: this.shadowOffsetY,
      offsetX: this.offsetX,
      offsetY: this.offsetY,
      leftSpace: this.leftSpace,
      rightSpace: this.rightSpace,
      backgroundHeight: this.backgroundHeight,
      backgroundBottomY: this.backgroundBottomY,
      align: this.align
    };
  }
  set(o) {
    this.setBold(GetValue(o, 'bold', false));
    this.setItalic(GetValue(o, 'italic', false));
    this.setFontSize(GetValue(o, 'fontSize', '16px'));
    this.setFontFamily(GetValue(o, 'fontFamily', 'Courier'));
    this.setColor(GetValue(o, 'color', '#fff'));
    this.setStrokeStyle(GetValue(o, 'stroke', null), GetValue(o, 'strokeThickness', 0));
    this.setShadow(GetValue(o, 'shadowColor', null), GetValue(o, 'shadowOffsetX', 0), GetValue(o, 'shadowOffsetY', 0), GetValue(o, 'shadowBlur', 0));
    this.setOffset(GetValue(o, 'offsetX', 0), GetValue(o, 'offsetY', 0));
    this.setSpace(GetValue(o, 'leftSpace', 0), GetValue(o, 'rightSpace', 0));
    this.setAlign(GetValue(o, 'align', undefined));
    this.setBackgroundColor(GetValue(o, 'backgroundColor', null));
    this.setBackgroundHeight(GetValue(o, 'backgroundHeight', undefined));
    this.setBackgroundBottomY(GetValue(o, 'backgroundBottomY', undefined));
    return this;
  }
  modify(o) {
    if (o.hasOwnProperty('bold')) {
      this.setBold(o.bold);
    }
    if (o.hasOwnProperty('italic')) {
      this.setItalic(o.italic);
    }
    if (o.hasOwnProperty('fontSize')) {
      this.setFontSize(o.fontSize);
    }
    if (o.hasOwnProperty('fontFamily')) {
      this.setFontFamily(o.fontFamily);
    }
    if (o.hasOwnProperty('color')) {
      this.setColor(o.color);
    }
    if (o.hasOwnProperty('stroke') || o.hasOwnProperty('strokeThickness')) {
      this.setStrokeStyle((0, _GetProperty.default)('stroke', o, this), (0, _GetProperty.default)('strokeThickness', o, this));
    }
    if (o.hasOwnProperty('shadowColor')) {
      this.setShadowColor(o.shadowColor);
    }
    if (o.hasOwnProperty('shadowOffsetX') || o.hasOwnProperty('shadowOffsetY')) {
      this.setShadowOffset((0, _GetProperty.default)('shadowOffsetX', o, this), (0, _GetProperty.default)('shadowOffsetY', o, this));
    }
    if (o.hasOwnProperty('shadowBlur')) {
      this.setShadowBlur(o.shaodwBlur);
    }
    if (o.hasOwnProperty('offsetX')) {
      this.setOffsetX(o.offsetX);
    }
    if (o.hasOwnProperty('offsetY')) {
      this.setOffsetY(o.offsetY);
    }
    if (o.hasOwnProperty('leftSpace')) {
      this.setLeftSpace(o.leftSpace);
    }
    if (o.hasOwnProperty('rightSpace')) {
      this.setRightSpace(o.rightSpace);
    }
    if (o.hasOwnProperty('align')) {
      this.setAlign(o.align);
    }
    if (o.hasOwnProperty('backgroundColor')) {
      this.setBackgroundColor(o.backgroundColor);
    }
    if (o.hasOwnProperty('backgroundHeight')) {
      this.setBackgroundHeight(o.backgroundHeight);
    }
    if (o.hasOwnProperty('backgroundBottomY')) {
      this.setBackgroundBottomY(o.backgroundBottomY);
    }
    return this;
  }
  setUpdateTextFlag() {
    if (this.parent) {
      this.parent.updateTextFlag = true;
    }
    return this;
  }
  clone() {
    return new TextStyle(null, this.toJSON());
  }
  copyFrom(sourceTextStyle) {
    this.set(sourceTextStyle.toJSON());
    return this;
  }
  copyTo(targetTextStyle) {
    targetTextStyle.set(this.toJSON());
    return this;
  }
  setBold(value) {
    if (value === undefined) {
      value = true;
    }
    this.bold = value;
    this.setUpdateTextFlag();
    return this;
  }
  setItalic(value) {
    if (value === undefined) {
      value = true;
    }
    this.italic = value;
    this.setUpdateTextFlag();
    return this;
  }
  get fontStyle() {
    if (this.bold && this.italic) {
      return 'bold italic';
    } else if (this.bold) {
      return 'bold';
    } else if (this.italic) {
      return 'italic';
    } else {
      return '';
    }
  }
  setFontSize(fontSize) {
    if (typeof fontSize === 'number') {
      fontSize = `${fontSize}px`;
    }
    this.fontSize = fontSize;
    this.setUpdateTextFlag();
    return this;
  }
  setFontFamily(fontFamily) {
    this.fontFamily = fontFamily;
    this.setUpdateTextFlag();
    return this;
  }
  get font() {
    return `${this.fontStyle} ${this.fontSize} ${this.fontFamily}`;
  }
  setColor(color) {
    this.color = (0, _GetStyle.default)(color);
    return this;
  }
  get hasFill() {
    return this.color != null;
  }
  setStrokeStyle(stroke, strokeThickness) {
    this.stroke = (0, _GetStyle.default)(stroke);
    if (strokeThickness !== undefined) {
      this.strokeThickness = strokeThickness;
    }
    return this;
  }
  setStrokeThickness(strokeThickness) {
    this.strokeThickness = strokeThickness;
    return this;
  }
  get hasStroke() {
    return this.stroke != null && this.strokeThickness > 0;
  }
  setShadowColor(color) {
    this.shadowColor = (0, _GetStyle.default)(color);
    return this;
  }
  setShadowOffset(offsetX, offsetY) {
    if (offsetX === undefined) {
      offsetX = 0;
    }
    if (offsetY === undefined) {
      offsetY = 0;
    }
    this.shadowOffsetX = offsetX;
    this.shadowOffsetY = offsetY;
    return this;
  }
  setShadowBlur(blur) {
    if (blur === undefined) {
      blur = 0;
    }
    this.shaodwBlur = blur;
    return this;
  }
  setShadow(color, offsetX, offsetY, blur) {
    this.setShadowColor(color).setShadowOffset(offsetX, offsetY).setShadowBlur(blur);
    return this;
  }
  setBackgroundColor(color) {
    this.backgroundColor = (0, _GetStyle.default)(color);
    return this;
  }
  get hasBackgroundColor() {
    return this.backgroundColor != null;
  }
  setBackgroundHeight(height) {
    this.backgroundHeight = height;
    return this;
  }
  setBackgroundBottomY(y) {
    this.backgroundBottomY = y;
    return this;
  }
  setOffsetX(offsetX) {
    if (offsetX === undefined) {
      offsetX = 0;
    }
    this.offsetX = offsetX;
    return this;
  }
  setOffsetY(offsetY) {
    if (offsetY === undefined) {
      offsetY = 0;
    }
    this.offsetY = offsetY;
    return this;
  }
  setOffset(offsetX, offsetY) {
    this.setOffsetX(offsetX).setOffsetY(offsetY);
    return this;
  }
  setLeftSpace(space) {
    if (space === undefined) {
      space = 0;
    }
    this.leftSpace = space;
    return this;
  }
  setRightSpace(space) {
    if (space === undefined) {
      space = 0;
    }
    this.rightSpace = space;
    return this;
  }
  setSpace(leftSpace, rightSpace) {
    this.setLeftSpace(leftSpace).setRightSpace(rightSpace);
    return this;
  }
  setAlign(align) {
    this.align = align;
    return this;
  }
  syncFont(context) {
    context.font = this.font;
    return this;
  }
  syncStyle(context) {
    context.textBaseline = 'alphabetic';
    var hasFill = this.hasFill;
    var hasStroke = this.hasStroke;
    context.fillStyle = hasFill ? this.color : '#000';
    context.strokeStyle = hasStroke ? this.stroke : '#000';
    context.lineWidth = hasStroke ? this.strokeThickness : 0;
    context.lineCap = 'round';
    context.lineJoin = 'round';
    return this;
  }
  syncShadow(context) {
    if (context.shadowColor != null) {
      context.shadowColor = this.shadowColor;
      context.shadowOffsetX = this.shadowOffsetX;
      context.shadowOffsetY = this.shadowOffsetY;
      context.shadowBlur = this.shadowBlur;
    } else {
      context.shadowColor = 0;
      context.shadowOffsetX = 0;
      context.shadowOffsetY = 0;
      context.shadowBlur = 0;
    }
  }
  getTextMetrics(context, text) {
    this.syncFont(context).syncStyle(context);
    return context.measureText(text);
  }
}
var _default = TextStyle;
exports.default = _default;
},{"../../../../../utils/canvas/GetStyle.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/GetStyle.js","../utils/GetProperty.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/utils/GetProperty.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetFixedSize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetFixedSize = function (width, height) {
  if (width === undefined) {
    width = 0;
  }
  if (height === undefined) {
    height = 0;
  }
  var dirty = this.fixedWidth !== width || this.fixedHeight !== height;
  if (!dirty) {
    return this;
  }
  this.fixedWidth = width;
  this.fixedHeight = height;
  this.dirty = true;
  this.setCanvasSize(width > 0 ? width : this.width, height > 0 ? height : this.height);
  return this;
};
var _default = SetFixedSize;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetPadding.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PaddingMethods = require("../../../../utils/padding/PaddingMethods.js");
var SetPadding = function (key, value) {
  var padding = this.padding;
  var paddingLeft = padding.left,
    paddingRight = padding.right,
    paddingTop = padding.top,
    paddingBottom = padding.bottom;
  (0, _PaddingMethods.SetPadding)(padding, key, value);
  this.dirty = this.dirty || paddingLeft != padding.left || paddingRight != padding.right || paddingTop != padding.top || paddingBottom != padding.bottom;
  return this;
};
var _default = SetPadding;
exports.default = _default;
},{"../../../../utils/padding/PaddingMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/padding/PaddingMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetPadding.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PaddingMethods = require("../../../../utils/padding/PaddingMethods.js");
var GetPadding = function (key) {
  return (0, _PaddingMethods.GetPadding)(this.padding, key);
};
var _default = GetPadding;
exports.default = _default;
},{"../../../../utils/padding/PaddingMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/padding/PaddingMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ModifyTextStyle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ModifyTextStyle = function (style) {
  this.textStyle.modify(style);
  return this;
};
var _default = ModifyTextStyle;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ModifyDefaultTextStyle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ModifyDefaultTextStyle = function (style) {
  this.defaultTextStyle.modify(style);
  return this;
};
var _default = ModifyDefaultTextStyle;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ResetTextStyle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ResetTextStyle = function () {
  this.textStyle.copyFrom(this.defaultTextStyle);
  return this;
};
var _default = ResetTextStyle;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetTestString.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetTestString = function (testString) {
  this.testString = testString;
  return this;
};
var _default = SetTestString;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RemoveChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const RemoveItem = Phaser.Utils.Array.Remove;
var RemoveChild = function (child) {
  this.poolManager.free(child);
  RemoveItem(this.children, child);
  this.lastAppendedChildren.length = 0;
  this.lastOverChild = null;
  this.dirty = true;
  return this;
};
var _default = RemoveChild;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RemoveChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RemoveChildren = function () {
  this.poolManager.freeMultiple(this.children);
  this.children.length = 0;
  this.lastAppendedChildren.length = 0;
  this.lastOverChild = null;
  this.dirty = true;
  return this;
};
var _default = RemoveChildren;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/PopChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const RemoveItem = Phaser.Utils.Array.Remove;
var PopChild = function (child) {
  RemoveItem(this.children, child);
  this.lastAppendedChildren.length = 0;
  this.lastOverChild = null;
  this.dirty = true;
  return this;
};
var _default = PopChild;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ClearContent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ClearContent = function () {
  this.setText();
  return this;
};
var _default = ClearContent;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AddChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// const RemoveItem = Phaser.Utils.Array.Remove;

var AddChild = function (child, index) {
  var areChildren = Array.isArray(child);

  // Remove existed child(s)
  // RemoveItem(this.children, child);

  if (index === undefined || index === this.children.length) {
    if (areChildren) {
      this.children.push(...child);
    } else {
      this.children.push(child);
    }
  } else {
    if (areChildren) {
      this.children.splice(index, 0, ...child);
    } else {
      this.children.splice(index, 0, child);
    }
  }
  this.lastAppendedChildren.length = 0;
  if (areChildren) {
    this.lastAppendedChildren.push(...child);
  } else {
    this.lastAppendedChildren.push(child);
  }
  return this;
};
var _default = AddChild;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpaceTypeName = exports.IsSpaceChar = exports.IsPageBreakChar = exports.IsNewLineChar = exports.IsCommand = exports.IsChar = exports.ImageTypeName = exports.DrawerTypeName = exports.CmdTypeName = exports.CharTypeName = void 0;
const CharTypeName = 'text';
exports.CharTypeName = CharTypeName;
const ImageTypeName = 'image';
exports.ImageTypeName = ImageTypeName;
const DrawerTypeName = 'drawer';
exports.DrawerTypeName = DrawerTypeName;
const SpaceTypeName = 'space';
exports.SpaceTypeName = SpaceTypeName;
const CmdTypeName = 'command';
exports.CmdTypeName = CmdTypeName;
var IsNewLineChar = function (bob) {
  return bob.type === CharTypeName && bob.text === '\n';
};
exports.IsNewLineChar = IsNewLineChar;
var IsPageBreakChar = function (bob) {
  return bob.type === CharTypeName && bob.text === '\f';
};
exports.IsPageBreakChar = IsPageBreakChar;
var IsSpaceChar = function (bob) {
  return bob.type === CharTypeName && bob.text === ' ';
};
exports.IsSpaceChar = IsSpaceChar;
var IsChar = function (bob) {
  return bob.type === CharTypeName;
};
exports.IsChar = IsChar;
var IsCommand = function (bob) {
  return bob.type === CmdTypeName;
};
exports.IsCommand = IsCommand;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/char/CharData.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RenderBase = _interopRequireDefault(require("../renderbase/RenderBase.js"));
var _Types = require("../Types.js");
var _TextStyle = _interopRequireDefault(require("./TextStyle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class CharData extends _RenderBase.default {
  constructor(parent, text, style) {
    super(parent, _Types.CharTypeName);
    this.updateTextFlag = false;
    this.style = new _TextStyle.default(this, style);
    this.setText(text);
  }
  get autoRound() {
    return this.parent.autoRound;
  }
  get offsetX() {
    return this.style.offsetX;
  }
  set offsetX(value) {
    if (this.style) {
      this.style.offsetX = value;
    }
  }
  get offsetY() {
    return this.style.offsetY;
  }
  set offsetY(value) {
    if (this.style) {
      this.style.offsetY = value;
    }
  }
  get leftSpace() {
    return this.style.leftSpace * this.scaleX;
  }
  set leftSpace(value) {
    if (this.style) {
      this.style.leftSpace = value;
    }
    super.leftSpace = value;
  }
  get rightSpace() {
    return this.style.rightSpace * this.scaleX;
  }
  set rightSpace(value) {
    if (this.style) {
      this.style.rightSpace = value;
    }
    super.rightSpace = value;
  }
  get align() {
    return this.style.align;
  }
  set align(value) {
    if (this.style) {
      this.style.align = value;
    }
  }
  modifyStyle(style) {
    this.setDirty(true);
    this.style.modify(style);
    if (this.updateTextFlag) {
      this.updateTextSize();
    }
    return this;
  }
  modifyPorperties(o) {
    if (!o) {
      return this;
    }
    this.modifyStyle(o);
    super.modifyPorperties(o);
    return this;
  }
  setText(text) {
    this.setDirty(this.text != text);
    this.text = text;
    this.updateTextSize();
    return this;
  }
  updateTextSize() {
    var text = this.text;
    // Is new-line, page-break, or empty character
    if (text === '\n' || text === '\f' || text === '') {
      this.textWidth = 0;
      this.textHeight = 0;
      this.ascent = 0;
      this.descent = 0;
    } else {
      var metrics = this.style.getTextMetrics(this.context, this.text);
      this.textWidth = metrics.width;
      var ascent, descent;
      if ('actualBoundingBoxAscent' in metrics) {
        ascent = metrics.actualBoundingBoxAscent;
        descent = metrics.actualBoundingBoxDescent;
      } else {
        ascent = 0;
        descent = 0;
      }
      this.textHeight = ascent + descent;
      this.ascent = ascent;
      this.descent = descent;
    }
    this.updateTextFlag = false;
    return this;
  }
  get width() {
    return this.textWidth * this.scaleX;
  }
  set width(value) {
    if (this.textWidth > 0) {
      this.scaleX = value / this.textWidth;
    } else {
      this.scaleX = 1;
    }
  }
  get height() {
    return this.textHeight * this.scaleY;
  }
  set height(value) {
    if (this.textHeight > 0) {
      this.scaleY = value / this.textHeight;
    } else {
      this.scaleY = 1;
    }
  }
  get willRender() {
    var text = this.text;
    if (text === '\n' || text === '\f') {
      return false;
    }
    return super.willRender;
  }
  renderContent() {
    var context = this.context;
    var textStyle = this.style;
    if (textStyle.hasBackgroundColor) {
      context.fillStyle = textStyle.backgroundColor;
      var x = this.drawTLX;
      var width = this.drawTRX - x;
      var bottomY = textStyle.backgroundBottomY;
      if (bottomY == null) {
        bottomY = this.drawBLY;
      }
      var height = textStyle.backgroundHeight;
      if (height == null) {
        height = bottomY - this.drawTLY;
      }
      var y = bottomY - height;
      context.fillRect(x, y, width, height);
    }
    var hasFill = textStyle.hasFill,
      hasStroke = textStyle.hasStroke;
    if (!hasFill && !hasStroke) {
      return;
    }
    textStyle.syncFont(context).syncStyle(context);
    // textBaseline = 'alphabetic'

    if (hasStroke) {
      textStyle.syncShadow(context);
      context.strokeText(this.text, 0, 0);
    }
    if (hasFill) {
      textStyle.syncShadow(context);
      context.fillText(this.text, 0, 0);
    }
  }
  get drawTLX() {
    return -this.leftSpace;
  }
  get drawTLY() {
    return -this.ascent;
  }
  get drawBLX() {
    return -this.leftSpace;
  }
  get drawBLY() {
    return this.descent;
  }
  get drawTRX() {
    return this.textWidth + this.rightSpace;
  }
  get drawTRY() {
    return -this.ascent;
  }
  get drawBRX() {
    return this.textWidth + this.rightSpace;
  }
  get drawBRY() {
    return this.descent;
  }
}
var _default = CharData;
exports.default = _default;
},{"../renderbase/RenderBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/RenderBase.js","../Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js","./TextStyle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/char/TextStyle.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/CreateCharChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CharData = _interopRequireDefault(require("../bob/char/CharData.js"));
var _Types = require("../bob/Types.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateCharChild = function (text, style) {
  if (style) {
    this.textStyle.modify(style);
  }
  var child = this.poolManager.allocate(_Types.CharTypeName);
  if (child === null) {
    child = new _CharData.default(this,
    // parent
    text,
    // text
    this.textStyle) // style
    ;
  } else {
    child.setParent(this).setActive().modifyStyle(this.textStyle).setText(text);
  }
  return child;
};
var _default = CreateCharChild;
exports.default = _default;
},{"../bob/char/CharData.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/char/CharData.js","../bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/CreateCharChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CharData = _interopRequireDefault(require("../bob/char/CharData.js"));
var _Types = require("../bob/Types.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateCharChildren = function (text, style) {
  if (style) {
    this.textStyle.modify(style);
  }
  var children = [];
  for (var i = 0, cnt = text.length; i < cnt; i++) {
    var char = text.charAt(i);
    var child = this.poolManager.allocate(_Types.CharTypeName);
    if (child === null) {
      child = new _CharData.default(this,
      // parent
      char,
      // text
      this.textStyle) // style
      ;
    } else {
      child.setParent(this).setActive().modifyStyle(this.textStyle).setText(char);
    }
    // child.modifyPorperties(properties);  // Warning: Will modify text-style twice

    children.push(child);
  }
  return children;
};
var _default = CreateCharChildren;
exports.default = _default;
},{"../bob/char/CharData.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/char/CharData.js","../bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var AppendText = function (text, style) {
  var children = this.createCharChildren(text, style);
  this.addChild(children);
  return this;
};
var _default = AppendText;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendText = _interopRequireDefault(require("./AppendText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var SetText = function (text, style) {
  if (text === undefined) {
    text = '';
  }
  this.removeChildren();
  _AppendText.default.call(this, text, style); // this.appendText might be override

  this.dirty = true;
  return this;
};
var _default = SetText;
exports.default = _default;
},{"./AppendText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendText.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/InsertText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var InsertText = function (index, text, style) {
  var children = this.createCharChildren(text, style);
  index = this.getCharChildIndex(index, true);
  this.addChild(children, index);
  return this;
};
var _default = InsertText;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RemoveText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RemoveText = function (index, length) {
  if (length === undefined) {
    length = 1;
  }
  for (var i = 0; i < length; i++) {
    var childIndex = this.getCharChildIndex(index, true);
    if (childIndex === undefined) {
      break;
    }
    this.removeChild(this.children[childIndex]);
  }
  return this;
};
var _default = RemoveText;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetText = function (activeOnly) {
  var text = '';
  this.forEachCharChild(function (child) {
    text += child.text;
  }, undefined, activeOnly);
  return text;
};
var _default = GetText;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/image/ImageData.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RenderBase = _interopRequireDefault(require("../renderbase/RenderBase.js"));
var _Types = require("../Types.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class ImageData extends _RenderBase.default {
  constructor(parent, key, frame) {
    super(parent, _Types.ImageTypeName);
    this.setTexture(key, frame);
  }
  get frameWidth() {
    return this.frameObj ? this.frameObj.cutWidth : 0;
  }
  get frameHeight() {
    return this.frameObj ? this.frameObj.cutHeight : 0;
  }
  get offsetY() {
    return -this.height;
  }
  set offsetY(value) {}
  get key() {
    return this._key;
  }
  set key(value) {
    this.setDirty(this._key != value);
    this._key = value;
  }
  get frame() {
    return this._frame;
  }
  set frame(value) {
    this.setDirty(this._frame != value);
    this._frame = value;
  }
  setTexture(key, frame) {
    this.key = key;
    this.frame = frame;
    this.frameObj = this.scene.sys.textures.getFrame(key, frame);
    return this;
  }
  get width() {
    return this.frameWidth * this.scaleX;
  }
  set width(value) {
    this.setDirty(this.width !== value);
    this.scaleX = value / this.frameWidth;
  }
  get height() {
    return this.frameHeight * this.scaleY;
  }
  set height(value) {
    this.setDirty(this.height !== value);
    this.scaleY = value / this.frameHeight;
  }
  setHeight(height, keepAspectRatio) {
    if (keepAspectRatio === undefined) {
      keepAspectRatio = false;
    }
    this.height = height;
    if (keepAspectRatio) {
      this.scaleX = this.scaleY;
    }
    return this;
  }
  renderContent() {
    var context = this.context;
    var frame = this.frameObj;
    var width = this.frameWidth,
      height = this.frameHeight;
    context.drawImage(frame.source.image,
    // image
    frame.cutX, frame.cutY, width, height, 0, 0, width, height);
  }
  get drawTLX() {
    return -this.leftSpace;
  }
  get drawTLY() {
    return 0;
  }
  get drawBLX() {
    return -this.leftSpace;
  }
  get drawBLY() {
    return this.frameHeight;
  }
  get drawTRX() {
    return this.frameWidth + this.rightSpace;
  }
  get drawTRY() {
    return 0;
  }
  get drawBRX() {
    return this.frameWidth + this.rightSpace;
  }
  get drawBRY() {
    return this.frameHeight;
  }
}
var _default = ImageData;
exports.default = _default;
},{"../renderbase/RenderBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/RenderBase.js","../Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/CreateImageChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ImageData = _interopRequireDefault(require("../bob/image/ImageData.js"));
var _Types = require("../bob/Types.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateImageChild = function (key, frame, properties) {
  var child = this.poolManager.allocate(_Types.ImageTypeName);
  if (child === null) {
    child = new _ImageData.default(this,
    // parent
    key, frame);
  } else {
    child.setParent(this).setActive().setTexture(key, frame);
  }
  child.modifyPorperties(properties);
  return child;
};
var _default = CreateImageChild;
exports.default = _default;
},{"../bob/image/ImageData.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/image/ImageData.js","../bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var AppendImage = function (key, frame, properties) {
  var child = this.createImageChild(key, frame, properties);
  this.addChild(child);
  return this;
};
var _default = AppendImage;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/drawer/Drawer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RenderBase = _interopRequireDefault(require("../renderbase/RenderBase.js"));
var _Types = require("../Types.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Drawer extends _RenderBase.default {
  constructor(parent, renderCallback, width, height) {
    super(parent, _Types.DrawerTypeName);
    this.setRenderCallback(renderCallback);
    this.setDrawerSize(width, height);
  }
  setRenderCallback(callback) {
    if (callback) {
      this.renderContent = callback.bind(this);
    } else {
      delete this.renderContent;
    }
    return this;
  }
  setDrawerSize(width, height) {
    // Whole canvas
    if (width === true) {
      this.toLocalPosition = false;
      width = undefined;
      height = undefined;
    } else {
      this.toLocalPosition = true;
    }
    if (width === undefined) {
      width = 0;
    }
    if (height === undefined) {
      height = width;
    }
    this.drawerWidth = width;
    this.drawerHeight = height;
    return this;
  }
  onFree() {
    super.onFree();
    this.setRenderCallback();
  }
  get width() {
    return this.drawerWidth * this.scaleX;
  }
  set width(value) {
    this.setDirty(this.width !== value);
    this.scaleX = this.drawerWidth > 0 ? value / this.drawerWidth : 1;
  }
  get height() {
    return this.drawerHeight * this.scaleY;
  }
  set height(value) {
    this.setDirty(this.height !== value);
    this.scaleY = this.drawerHeight > 0 ? value / this.drawerHeight : 1;
  }
  get offsetY() {
    return -this.height;
  }
  set offsetY(value) {}
  get drawTLX() {
    return -this.leftSpace;
  }
  get drawTLY() {
    return 0;
  }
  get drawBLX() {
    return -this.leftSpace;
  }
  get drawBLY() {
    return this.drawerHeight;
  }
  get drawTRX() {
    return this.drawerWidth + this.rightSpace;
  }
  get drawTRY() {
    return 0;
  }
  get drawBRX() {
    return this.drawerWidth + this.rightSpace;
  }
  get drawBRY() {
    return this.drawerHeight;
  }
}
var _default = Drawer;
exports.default = _default;
},{"../renderbase/RenderBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/RenderBase.js","../Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/CreateDrawerChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Drawer = _interopRequireDefault(require("../bob/drawer/Drawer.js"));
var _Types = require("../bob/Types.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateDrawerChild = function (renderCallback, width, height) {
  var child = this.poolManager.allocate(_Types.DrawerTypeName);
  if (child === null) {
    child = new _Drawer.default(this,
    // parent
    renderCallback, width, height);
  } else {
    child.setParent(this).setActive().setRenderCallback(renderCallback).setDrawerSize(width, height);
  }
  return child;
};
var _default = CreateDrawerChild;
exports.default = _default;
},{"../bob/drawer/Drawer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/drawer/Drawer.js","../bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendDrawer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var AppendDrawer = function (renderCallback, width, height) {
  var child = this.createDrawerChild(renderCallback, width, height);
  this.addChild(child);
  return this;
};
var _default = AppendDrawer;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/space/Space.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RenderBase = _interopRequireDefault(require("../renderbase/RenderBase.js"));
var _Types = require("../Types.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Space extends _RenderBase.default {
  constructor(parent, width) {
    super(parent, _Types.SpaceTypeName);
    this.setSpaceWidth(width);
  }
  get width() {
    return this.spaceWidth * this.scaleX;
  }
  set width(value) {
    if (this.spaceWidth > 0) {
      this.scaleX = value / this.spaceWidth;
    } else {
      this.scaleX = 1;
    }
  }
  setSpaceWidth(width) {
    this.spaceWidth = width;
    return this;
  }
}
var _default = Space;
exports.default = _default;
},{"../renderbase/RenderBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/renderbase/RenderBase.js","../Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/CreateSpaceChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Space = _interopRequireDefault(require("../bob/space/Space.js"));
var _Types = require("../bob/Types.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateSpaceChild = function (width) {
  var child = this.poolManager.allocate(_Types.SpaceTypeName);
  if (child === null) {
    child = new _Space.default(this,
    // parent
    width);
  } else {
    child.setParent(this).setActive().setSpaceWidth(width);
  }
  return child;
};
var _default = CreateSpaceChild;
exports.default = _default;
},{"../bob/space/Space.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/space/Space.js","../bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendSpace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var AppendSpace = function (width) {
  var child = this.createSpaceChild(width);
  this.addChild(child);
  return this;
};
var _default = AppendSpace;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/command/Command.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Base = _interopRequireDefault(require("../Base.js"));
var _Types = require("../Types.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Command extends _Base.default {
  constructor(parent, name, callback, param, scope) {
    super(parent, _Types.CmdTypeName);
    this.setName(name).setParameter(param).setCallback(callback, scope);
  }
  setName(name) {
    this.name = name;
    return this;
  }
  setParameter(param) {
    this.param = param;
    return this;
  }
  setCallback(callback, scope) {
    this.callback = callback;
    this.scope = scope;
    return this;
  }
  exec() {
    var result;
    if (this.scope) {
      result = this.callback.call(this.scope, this.param, this.name);
    } else {
      result = this.callback(this.param, this.name);
    }
    return result;
  }
  onFree() {
    super.onFree();
    this.setName().setCallback().setParameter();
  }
}
var _default = Command;
exports.default = _default;
},{"../Base.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Base.js","../Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/CreateCommandChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Types = require("../bob/Types.js");
var _Command = _interopRequireDefault(require("../bob/command/Command.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateCommandChild = function (name, callback, param, scope) {
  var child = this.poolManager.allocate(_Types.CmdTypeName);
  if (child === null) {
    child = new _Command.default(this,
    // parent
    name, callback, param, scope);
  } else {
    child.setParent(this).setActive().setName(name).setCallback(callback, scope).setParameter(param);
  }
  return child;
};
var _default = CreateCommandChild;
exports.default = _default;
},{"../bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js","../bob/command/Command.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/command/Command.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var AppendCommand = function (name, callback, param, scope) {
  var child = this.createCommandChild(name, callback, param, scope);
  this.addChild(child);
  return this;
};
var _default = AppendCommand;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetWrapConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DeepClone = _interopRequireDefault(require("../../../../utils/object/DeepClone.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var SetWrapConfig = function (config) {
  if (config === undefined) {
    config = {};
  } else if (typeof config === 'object') {
    config = (0, _DeepClone.default)(config);
  }
  this.wrapConfig = config;
  return this;
};
var _default = SetWrapConfig;
exports.default = _default;
},{"../../../../utils/object/DeepClone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/runwordwrap/GetWord.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Types = require("../../../bob/Types.js");
var GetWord = function (children, startIndex, charMode, result) {
  if (result === undefined) {
    result = {
      word: [],
      width: 0
    };
  }
  result.word.length = 0;
  var endIndex = children.length;
  var currentIndex = startIndex;
  var word = result.word,
    wordWidth = 0;
  while (currentIndex < endIndex) {
    var child = children[currentIndex];
    // Can't render (command child), put into output directly
    if (!child.renderable) {
      word.push(child);
      currentIndex++;
      continue;
    }
    var text = child.type === _Types.CharTypeName ? child.text : null;
    if (text !== null && text !== ' ' && text !== '\n' && text !== '\f') {
      word.push(child);
      wordWidth += child.outerWidth;
      currentIndex++;
      // Continue
    } else {
      // Get image child, a space, a new-line, or page-break
      if (currentIndex === startIndex) {
        // Single child
        word.push(child);
        wordWidth += child.outerWidth;
      }
      break;
    }
    if (charMode) {
      // Word only contains 1 character
      break;
    }
  }
  result.width = wordWidth;
  return result;
};
var _default = GetWord;
exports.default = _default;
},{"../../../bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/GetChildrenAlign.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildrenAlign = function (children) {
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (child.align !== undefined) {
      return child.align;
    }
  }
  return undefined;
};
var _default = GetChildrenAlign;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/OffsetChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OffsetChildren = function (children, offsetX, offsetY) {
  if (offsetX === 0 && offsetY === 0) {
    return;
  }
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (!child.renderable) {
      continue;
    }
    child.x += offsetX;
    child.y += offsetY;
  }
};
var _default = OffsetChildren;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/runwordwrap/AlignLines.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetChildrenAlign = _interopRequireDefault(require("../GetChildrenAlign.js"));
var _OffsetChildren = _interopRequireDefault(require("../OffsetChildren.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var AlignLines = function (result, width, height) {
  var hAlign = result.hAlign,
    vAlign = result.vAlign;
  var offsetX, offsetY;
  var linesHeight = result.linesHeight;
  switch (vAlign) {
    case 1: // center
    case 'center':
      offsetY = (height - linesHeight) / 2;
      break;
    case 2: // bottom
    case 'bottom':
      offsetY = height - linesHeight;
      break;
    default:
      offsetY = 0;
      break;
  }
  var lines = result.lines;
  for (var li = 0, lcnt = lines.length; li < lcnt; li++) {
    var line = lines[li];
    var lineWidth = line.width,
      children = line.children;
    var lineHAlign = (0, _GetChildrenAlign.default)(children);
    if (lineHAlign === undefined) {
      lineHAlign = hAlign;
    }
    switch (lineHAlign) {
      case 1: // center
      case 'center':
        offsetX = (width - lineWidth) / 2;
        break;
      case 2: // right
      case 'right':
        offsetX = width - lineWidth;
        break;
      default:
        offsetX = 0;
        break;
    }
    (0, _OffsetChildren.default)(children, offsetX, offsetY);
  }
};
var _default = AlignLines;
exports.default = _default;
},{"../GetChildrenAlign.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/GetChildrenAlign.js","../OffsetChildren.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/OffsetChildren.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/runwordwrap/GetDefaultTextHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetDefaultTextHeight = function () {
  var metrics = this.defaultTextStyle.getTextMetrics(this.context, this.testString);
  var ascent, descent;
  if ('actualBoundingBoxAscent' in metrics) {
    ascent = metrics.actualBoundingBoxAscent;
    descent = metrics.actualBoundingBoxDescent;
  } else {
    ascent = 0;
    descent = 0;
  }
  Result.ascent = ascent;
  Result.descent = descent;
  Result.height = ascent + descent;
  return Result;
};
var Result = {};
var _default = GetDefaultTextHeight;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/runwordwrap/RunWordWrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PaddingMethods = require("../../../../../../utils/padding/PaddingMethods.js");
var _GetWord = _interopRequireDefault(require("./GetWord.js"));
var _AlignLines = _interopRequireDefault(require("./AlignLines.js"));
var _Types = require("../../../bob/Types.js");
var _GetDefaultTextHeight = _interopRequireDefault(require("./GetDefaultTextHeight.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var RunWordWrap = function (config) {
  // Parse parameters
  var startIndex = GetValue(config, 'start', 0);
  (0, _PaddingMethods.SetPadding)(this.wrapPadding, GetValue(config, 'padding', 0));
  var paddingVertical = this.padding.top + this.padding.bottom + this.wrapPadding.top + this.wrapPadding.bottom;
  var paddingHorizontal = this.padding.left + this.padding.right + this.wrapPadding.left + this.wrapPadding.right;

  // Get lineHeight, maxLines
  var lineHeight = GetValue(config, 'lineHeight');
  var ascent = GetValue(config, 'ascent', lineHeight);
  var maxLines;
  if (lineHeight === undefined) {
    // Calculate lineHeight
    var useDefaultTextHeight = GetValue(config, 'useDefaultTextHeight', false);
    maxLines = GetValue(config, 'maxLines', 0);
    if (this.fixedHeight > 0 && !useDefaultTextHeight) {
      var innerHeight = this.fixedHeight - paddingVertical;
      if (maxLines > 0) {
        // Calculate lineHeight via maxLines, in fixedHeight mode
        lineHeight = innerHeight / maxLines;
      } else {
        var textHeightResult = _GetDefaultTextHeight.default.call(this);
        lineHeight = textHeightResult.height;
        ascent = textHeightResult.ascent;
        // Calculate maxLines via (ascent, lineHeight), in fixedHeight mode
        maxLines = Math.floor((innerHeight - ascent) / lineHeight);
      }
    } else {
      var textHeightResult = _GetDefaultTextHeight.default.call(this);
      lineHeight = textHeightResult.height;
      ascent = textHeightResult.ascent;
    }
  } else {
    // Calculate maxLines
    if (this.fixedHeight > 0) {
      // Calculate maxLines via lineHeight, in fixedHeight mode
      maxLines = GetValue(config, 'maxLines');
      if (maxLines === undefined) {
        var innerHeight = this.fixedHeight - paddingVertical;
        maxLines = Math.floor(innerHeight / lineHeight);
      }
    } else {
      maxLines = GetValue(config, 'maxLines', 0); // Default is show all lines
    }
  }

  // If ascent is undefined, assign to lineHeight
  if (ascent === undefined) {
    ascent = lineHeight;
  }
  var showAllLines = maxLines === 0;

  // Get wrapWidth
  var wrapWidth = GetValue(config, 'wrapWidth', undefined);
  if (wrapWidth === undefined) {
    if (this.fixedWidth > 0) {
      wrapWidth = this.fixedWidth - paddingHorizontal;
    } else {
      wrapWidth = Infinity; // No word-wrap
    }
  }

  var letterSpacing = GetValue(config, 'letterSpacing', 0);
  var hAlign = GetValue(config, 'hAlign', 0);
  var vAlign = GetValue(config, 'vAlign', 0);
  var charWrap = GetValue(config, 'charWrap', false);
  var result = {
    callback: 'runWordWrap',
    start: startIndex,
    // Next start index
    isLastPage: false,
    // Is last page
    padding: this.wrapPadding,
    ascent: ascent,
    lineHeight: lineHeight,
    maxLines: maxLines,
    wrapWidth: wrapWidth,
    letterSpacing: letterSpacing,
    hAlign: hAlign,
    vAlign: vAlign,
    charWrap: charWrap,
    children: [],
    // Word-wrap result
    lines: [],
    // Word-wrap result in lines
    maxLineWidth: 0,
    linesHeight: 0
  };

  // Set all children to inactive
  var children = this.children;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    children[i].setActive(false);
  }

  // Layout children
  wrapWidth += letterSpacing;
  var startX = this.padding.left + this.wrapPadding.left,
    startY = this.padding.top + this.wrapPadding.top + ascent,
    // Start(baseline) from ascent, not 0
    x = startX,
    y = startY;
  var remainderWidth = wrapWidth,
    childIndex = startIndex,
    lastChildIndex = children.length;
  var resultChildren = result.children;
  var resultLines = result.lines,
    lastLine = [],
    lastLineWidth = 0,
    maxLineWidth = 0;
  var wordResult;
  while (childIndex < lastChildIndex) {
    wordResult = (0, _GetWord.default)(children, childIndex, charWrap, wordResult);
    var word = wordResult.word;
    var charCnt = word.length;
    var wordWidth = wordResult.width + charCnt * letterSpacing;
    childIndex += charCnt;
    // Next line
    var isNewLineChar = (0, _Types.IsNewLineChar)(word[0]);
    var isPageBreakChar = (0, _Types.IsPageBreakChar)(word[0]);
    var isControlChar = isNewLineChar || isPageBreakChar;
    if (remainderWidth < wordWidth || isControlChar) {
      // Add to result
      if (isControlChar) {
        var char = word[0];
        char.setActive().setPosition(x, y);
        resultChildren.push(char);
        lastLine.push(char);
      }

      // Move cursor
      x = startX;
      y += lineHeight;
      remainderWidth = wrapWidth;
      resultLines.push({
        children: lastLine,
        width: lastLineWidth
      });
      maxLineWidth = Math.max(maxLineWidth, lastLineWidth);
      lastLineWidth = 0;
      lastLine = [];
      var isPageEnd = isPageBreakChar || !showAllLines && resultLines.length === maxLines; // Exceed maxLines
      if (isPageEnd) {
        break;
      } else if (isControlChar) {
        // Already add to result
        continue;
      }
    }
    remainderWidth -= wordWidth;
    lastLineWidth += wordWidth;
    for (var i = 0, cnt = word.length; i < cnt; i++) {
      var child = word[i];
      child.setActive();
      resultChildren.push(child);
      lastLine.push(child);
      if (child.renderable) {
        child.setPosition(x, y);
        x += child.outerWidth + letterSpacing;
      }
    }
  }
  if (lastLine.length > 0) {
    resultLines.push({
      children: lastLine,
      width: lastLineWidth
    });
    maxLineWidth = Math.max(maxLineWidth, lastLineWidth);
  }
  result.start += resultChildren.length;
  result.isLastPage = result.start === lastChildIndex;
  result.maxLineWidth = maxLineWidth;
  result.linesHeight = resultLines.length * lineHeight;

  // Calculate size of game object
  var width = this.fixedWidth > 0 ? this.fixedWidth : result.maxLineWidth + paddingHorizontal;
  var height = this.fixedHeight > 0 ? this.fixedHeight : result.linesHeight + paddingVertical;

  // Size might be changed after wrapping
  var innerWidth = width - paddingHorizontal;
  var innerHeight = height - paddingVertical;
  (0, _AlignLines.default)(result, innerWidth, innerHeight);

  // Resize
  this.setCanvasSize(width, height);

  // Set initial position
  for (var i = 0, cnt = resultChildren.length; i < cnt; i++) {
    var child = resultChildren[i];
    if (!child.renderable) {
      continue;
    }
    child.x0 = child.x;
    child.y0 = child.y;
  }
  return result;
};
var _default = RunWordWrap;
exports.default = _default;
},{"../../../../../../utils/padding/PaddingMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/padding/PaddingMethods.js","./GetWord.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/runwordwrap/GetWord.js","./AlignLines.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/runwordwrap/AlignLines.js","../../../bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js","./GetDefaultTextHeight.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/runwordwrap/GetDefaultTextHeight.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RunWordWrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RunWordWrap = _interopRequireDefault(require("./wrap/runwordwrap/RunWordWrap.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Merge = Phaser.Utils.Objects.Merge;
var RunWordWrap = function (config) {
  if (config === undefined) {
    config = {};
  }
  return _RunWordWrap.default.call(this, Merge(config, this.wrapConfig));
};
var _default = RunWordWrap;
exports.default = _default;
},{"./wrap/runwordwrap/RunWordWrap.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/runwordwrap/RunWordWrap.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/runverticalwrap/AlignLines.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetChildrenAlign = _interopRequireDefault(require("../GetChildrenAlign.js"));
var _OffsetChildren = _interopRequireDefault(require("../OffsetChildren.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var AlignLines = function (result, width, height) {
  var hAlign = result.hAlign,
    vAlign = result.vAlign;
  var offsetX, offsetY;
  var rtl = result.rtl;
  var lines = result.lines,
    lineWidth = result.lineWidth,
    linesWidth = result.linesWidth;
  switch (hAlign) {
    case 1: // center
    case 'center':
      offsetX = (width - linesWidth) / 2;
      break;
    case 2: // right
    case 'right':
      offsetX = width - linesWidth;
      break;
    default:
      // left
      offsetX = 0;
      break;
  }
  if (rtl) {
    offsetX += lineWidth;
  }
  for (var li = 0, lcnt = lines.length; li < lcnt; li++) {
    var line = lines[rtl ? lcnt - li - 1 : li];
    var children = line.children;
    var lineHeight = line.height;
    var lineVAlign = (0, _GetChildrenAlign.default)(children);
    if (lineVAlign === undefined) {
      lineVAlign = vAlign;
    }
    switch (lineVAlign) {
      case 1: // center
      case 'center':
        offsetY = (height - lineHeight) / 2;
        break;
      case 2: // bottom
      case 'bottom':
        offsetY = height - lineHeight;
        break;
      default:
        // top
        offsetY = 0;
        break;
    }
    (0, _OffsetChildren.default)(children, offsetX, offsetY);
    offsetX += lineWidth;
  }
};
var _default = AlignLines;
exports.default = _default;
},{"../GetChildrenAlign.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/GetChildrenAlign.js","../OffsetChildren.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/OffsetChildren.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/runverticalwrap/RunVerticalWrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PaddingMethods = require("../../../../../../utils/padding/PaddingMethods.js");
var _AlignLines = _interopRequireDefault(require("./AlignLines.js"));
var _Types = require("../../../bob/Types.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var RunVerticalWrap = function (config) {
  // Parse parameters
  var startIndex = GetValue(config, 'start', 0);
  (0, _PaddingMethods.SetPadding)(this.wrapPadding, GetValue(config, 'padding', 0));
  var paddingVertical = this.padding.top + this.padding.bottom + this.wrapPadding.top + this.wrapPadding.bottom;
  var paddingHorizontal = this.padding.left + this.padding.right + this.wrapPadding.left + this.wrapPadding.right;
  var lineWidth = GetValue(config, 'lineWidth', undefined);
  var maxLines;
  if (lineWidth === undefined) {
    // Calculate lineWidth via maxLines, in fixedWidth mode
    maxLines = GetValue(config, 'maxLines', 0);
    if (this.fixedWidth > 0) {
      var innerWidth = this.fixedWidth - paddingHorizontal;
      lineWidth = innerWidth / maxLines;
    } else {
      lineWidth = 0;
    }
  } else {
    if (this.fixedWidth > 0) {
      // Calculate maxLines via lineWidth, in fixedWidth mode
      maxLines = GetValue(config, 'maxLines', undefined);
      if (maxLines === undefined) {
        var innerWidth = this.fixedWidth - paddingHorizontal;
        maxLines = Math.floor(innerWidth / lineWidth) + 1;
      }
    } else {
      maxLines = GetValue(config, 'maxLines', 0); // Default is show all lines
    }
  }

  var showAllLines = maxLines === 0;

  // Get fixedChildHeight
  var fixedChildHeight = GetValue(config, 'fixedChildHeight', undefined);
  if (fixedChildHeight === undefined) {
    var charPerLine = GetValue(config, 'charPerLine', undefined);
    if (charPerLine !== undefined) {
      var innerHeight = this.fixedHeight - paddingVertical;
      fixedChildHeight = Math.floor(innerHeight / charPerLine);
    } else {
      // Use char.heigh as fixedChildHeight
    }
  }

  // Get wrapHeight
  var wrapHeight = GetValue(config, 'wrapHeight', undefined);
  if (wrapHeight === undefined) {
    if (this.fixedHeight > 0) {
      wrapHeight = this.fixedHeight - paddingVertical;
    } else {
      wrapHeight = Infinity; // No word-wrap
    }
  }

  var letterSpacing = GetValue(config, 'letterSpacing', 0);
  var rtl = GetValue(config, 'rtl', true);
  var hAlign = GetValue(config, 'hAlign', rtl ? 2 : 0);
  var vAlign = GetValue(config, 'vAlign', 0);
  var result = {
    callback: 'runVerticalWrap',
    start: startIndex,
    // Next start index
    isLastPage: false,
    // Is last page
    padding: this.wrapPadding,
    lineWidth: lineWidth,
    maxLines: maxLines,
    fixedChildHeight: fixedChildHeight,
    wrapHeight: wrapHeight,
    letterSpacing: letterSpacing,
    hAlign: hAlign,
    vAlign: vAlign,
    rtl: rtl,
    children: [],
    // Word-wrap result
    lines: [],
    // Word-wrap result in lines
    maxLineHeight: 0,
    linesWidth: 0
  };

  // Set all children to active
  var children = this.children;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    children[i].setActive(false);
  }

  // Layout children
  wrapHeight += letterSpacing;
  var startX = this.padding.left + this.wrapPadding.left,
    // Reset x of each character in AlignLines method
    startY = this.padding.top + this.wrapPadding.top,
    x = startX,
    y = startY;
  var remainderHeight = wrapHeight,
    childIndex = startIndex,
    lastChildIndex = children.length;
  var resultChildren = result.children;
  var resultLines = result.lines,
    lastLine = [],
    lastLineHeight = 0,
    maxLineHeight = 0;
  while (childIndex < lastChildIndex) {
    // Append non-typeable child directly
    var char = children[childIndex];
    childIndex++;
    if (!child.renderable) {
      char.setActive();
      resultChildren.push(char);
      lastLine.push(char);
      continue;
    }
    var childHeight = (fixedChildHeight !== undefined ? fixedChildHeight : char.height) + letterSpacing;
    // Next line
    var isNewLineChar = (0, _Types.IsNewLineChar)(char);
    var isPageBreakChar = (0, _Types.IsPageBreakChar)(char);
    var isControlChar = isNewLineChar || isPageBreakChar;
    if (remainderHeight < childHeight || isControlChar) {
      // Add to result
      if (isNewLineChar) {
        char.setActive().setPosition(x, y).setOrigin(0.5);
        resultChildren.push(char);
        lastLine.push(char);
      }

      // Move cursor
      x = startX;
      y = startY;
      remainderHeight = wrapHeight;
      resultLines.push({
        children: lastLine,
        height: lastLineHeight
      });
      maxLineHeight = Math.max(maxLineHeight, lastLineHeight);
      lastLineHeight = 0;
      lastLine = [];
      var isPageEnd = isPageBreakChar || !showAllLines && resultLines.length === maxLines; // Exceed maxLines
      if (isPageEnd) {
        break;
      } else if (isControlChar) {
        // Already add to result                
        continue;
      }
    }
    remainderHeight -= childHeight;
    lastLineHeight += childHeight;
    char.setActive().setPosition(x, y).setOrigin(0.5);
    resultChildren.push(char);
    lastLine.push(char);
    y += childHeight;
  }
  if (lastLine.length > 0) {
    resultLines.push({
      children: lastLine,
      height: lastLineHeight
    });
    maxLineHeight = Math.max(maxLineHeight, lastLineHeight);
  }
  result.start += resultChildren.length;
  result.isLastPage = result.start === lastChildIndex;
  result.maxLineHeight = maxLineHeight;
  result.linesWidth = resultLines.length * lineWidth;

  // Calculate size of game object
  var width = this.fixedWidth > 0 ? this.fixedWidth : result.linesWidth + paddingHorizontal;
  var height = this.fixedHeight > 0 ? this.fixedHeight : result.maxLineHeight + paddingVertical;

  // Size might be changed after wrapping
  var innerWidth = width - paddingHorizontal;
  var innerHeight = height - paddingVertical;
  (0, _AlignLines.default)(result, innerWidth, innerHeight);

  // Resize
  this.setCanvasSize(width, height);

  // Set initial position
  for (var i = 0, cnt = resultChildren.length; i < cnt; i++) {
    var child = resultChildren[i];
    if (!child.renderable) {
      continue;
    }
    child.x0 = child.x;
    child.y0 = child.y;
  }
  return result;
};
var _default = RunVerticalWrap;
exports.default = _default;
},{"../../../../../../utils/padding/PaddingMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/padding/PaddingMethods.js","./AlignLines.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/runverticalwrap/AlignLines.js","../../../bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RunVerticalWrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RunVerticalWrap = _interopRequireDefault(require("./wrap/runverticalwrap/RunVerticalWrap.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Merge = Phaser.Utils.Objects.Merge;
var RunVerticalWrap = function (config) {
  if (config === undefined) {
    config = {};
  }
  return _RunVerticalWrap.default.call(this, Merge(config, this.wrapConfig));
};
var _default = RunVerticalWrap;
exports.default = _default;
},{"./wrap/runverticalwrap/RunVerticalWrap.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/wrap/runverticalwrap/RunVerticalWrap.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RunWrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetValue = Phaser.Utils.Objects.GetValue;
var RunWrap = function (config) {
  var wrapCallback = GetValue(this.wrapConfig, 'callback');
  if (!wrapCallback) {
    wrapCallback = GetValue(config, 'callback', this.runWordWrap);
  }
  if (typeof wrapCallback === 'string') {
    wrapCallback = this[wrapCallback];
  }
  return wrapCallback.call(this, config);
};
var _default = RunWrap;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetAlignMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setVAlign(align) {
    this.wrapConfig.vAlign = align;
    return this;
  },
  setHAlign(align) {
    this.wrapConfig.hAlign = align;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RenderContent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RenderContent = function () {
  this.clear();
  this.setCanvasSize(this.width, this.height);
  if (this.background.active) {
    this.background.render();
  }
  var child;
  for (var i = 0, cnt = this.children.length; i < cnt; i++) {
    child = this.children[i];
    if (child.active) {
      child.render();
    }
  }
  if (this.innerBounds.active) {
    this.innerBounds.render();
  }
};
var _default = RenderContent;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ForEachChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ForEachChild = function (callback, scope, activeOnly) {
  if (activeOnly === undefined) {
    activeOnly = true;
  }
  var children = this.children;
  var childIndex = 0;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (activeOnly && !child.active) {
      continue;
    }
    var isBreak;
    if (scope) {
      isBreak = callback.call(this, child, childIndex, children);
    } else {
      isBreak = callback(child, childIndex, children);
    }
    childIndex++;
    if (isBreak) {
      break;
    }
  }
  return this;
};
var _default = ForEachChild;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ForEachRenderableChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ForEachRenderableChild = function (callback, scope, activeOnly) {
  if (activeOnly === undefined) {
    activeOnly = true;
  }
  var children = this.children;
  var childIndex = 0;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (activeOnly && !child.active) {
      continue;
    }
    if (child.renderable && !child.removed) {
      var isBreak;
      if (scope) {
        isBreak = callback.call(this, child, childIndex, children);
      } else {
        isBreak = callback(child, childIndex, children);
      }
      childIndex++;
      if (isBreak) {
        break;
      }
    }
  }
  return this;
};
var _default = ForEachRenderableChild;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ForEachCharChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Types = require("../bob/Types.js");
var ForEachCharChild = function (callback, scope, activeOnly) {
  if (activeOnly === undefined) {
    activeOnly = true;
  }
  var children = this.children;
  var charIndex = 0;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (activeOnly && !child.active) {
      continue;
    }
    if ((0, _Types.IsChar)(child) && !child.removed) {
      var isBreak;
      if (scope) {
        isBreak = callback.call(this, child, charIndex, children);
      } else {
        isBreak = callback(child, charIndex, children);
      }
      charIndex++;
      if (isBreak) {
        break;
      }
    }
  }
  return this;
};
var _default = ForEachCharChild;
exports.default = _default;
},{"../bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildren = function () {
  return this.children;
};
var _default = GetChildren;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetActiveChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetAll = Phaser.Utils.Array.GetAll;
var GetActiveChildren = function () {
  return GetAll(this.children, 'active', true);
};
var _default = GetActiveChildren;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetCharChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetCharChildren = function (activeOnly, out) {
  if (out === undefined) {
    out = [];
  }
  this.forEachCharChild(function (child) {
    out.push(child);
  }, undefined, activeOnly);
  return out;
};
var _default = GetCharChildren;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetLastAppendedChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetLastAppendedChildren = function () {
  return this.lastAppendedChildren;
};
var _default = GetLastAppendedChildren;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/utils/transform/GetBobCenterPosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BobPositionToCanvasPosition = _interopRequireDefault(require("./BobPositionToCanvasPosition.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetBobCenterPosition = function (bob, offsetX, offsetY, out) {
  if (typeof offsetX !== 'number') {
    out = offsetX;
    offsetX = 0;
    offsetY = 0;
  }
  var bobX = bob.drawCenterX + offsetX;
  var bobY = bob.drawCenterY + offsetY;
  return (0, _BobPositionToCanvasPosition.default)(bob, bobX, bobY, out);
};
var _default = GetBobCenterPosition;
exports.default = _default;
},{"./BobPositionToCanvasPosition.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/utils/transform/BobPositionToCanvasPosition.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetNearestChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetBobCenterPosition = _interopRequireDefault(require("./utils/transform/GetBobCenterPosition"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetDistance = Phaser.Math.Distance.BetweenPointsSquared;
var GetNearestChild = function (canvasX, canvasY) {
  var pointA = {
    x: canvasX,
    y: canvasY
  };
  var minDistance = Infinity;
  var nearestChild = null;
  this.forEachRenderableChild(function (child) {
    var distance = GetDistance(pointA, (0, _GetBobCenterPosition.default)(child, true));
    if (minDistance > distance) {
      minDistance = distance;
      nearestChild = child;
    }
  });
  return nearestChild;
};
var _default = GetNearestChild;
exports.default = _default;
},{"./utils/transform/GetBobCenterPosition":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/utils/transform/GetBobCenterPosition.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetCharWorldPosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetBobWorldPosition = _interopRequireDefault(require("./utils/transform/GetBobWorldPosition.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetCharWorldPosition = function (child, offsetX, offsetY, out) {
  if (typeof child === 'number') {
    child = this.getCharChild(child, true);
  }
  return (0, _GetBobWorldPosition.default)(this, child, offsetX, offsetY, out);
};
var _default = GetCharWorldPosition;
exports.default = _default;
},{"./utils/transform/GetBobWorldPosition.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/utils/transform/GetBobWorldPosition.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetToMinSize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetToMinSize = function () {
  var children = this.children;
  var maxX = 0,
    maxY = 0;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (!child.renderable || !child.active || !child.visible) {
      continue;
    }
    var x0 = child.x0 !== undefined ? child.x0 : child.x;
    var y0 = child.y0 !== undefined ? child.y0 : child.y;
    maxX = Math.max(maxX, x0);
    maxY = Math.max(maxY, y0);
  }
  var width = maxX + this.padding.left + this.padding.right + this.wrapPadding.left + this.wrapPadding.right;
  var height = maxY + this.padding.top + this.padding.bottom + this.wrapPadding.top + this.wrapPadding.bottom;

  // Ignore fixedWidth, and fixedHeight
  if (this.width !== width || this.height !== height) {
    this.dirty = true;
    this.setCanvasSize(width, height);
  }
  return this;
};
var _default = SetToMinSize;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetCharChildIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Types = require("../bob/Types.js");
var GetCharChildIndex = function (charIndex, activeOnly) {
  if (activeOnly === undefined) {
    activeOnly = true;
  }
  var children = this.children;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (activeOnly && !child.active) {
      continue;
    }
    if ((0, _Types.IsChar)(child) && !child.removed) {
      if (charIndex === 0) {
        return i;
      } else {
        charIndex--;
      }
    }
  }
  return undefined;
};
var _default = GetCharChildIndex;
exports.default = _default;
},{"../bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetCharChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Types = require("../bob/Types.js");
var GetCharChild = function (charIndex, activeOnly) {
  if (activeOnly === undefined) {
    activeOnly = true;
  }
  var children = this.children;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (activeOnly && !child.active) {
      continue;
    }
    if ((0, _Types.IsChar)(child) && !child.removed) {
      if (charIndex === 0) {
        return child;
      } else {
        charIndex--;
      }
    }
  }
  return undefined;
};
var _default = GetCharChild;
exports.default = _default;
},{"../bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetCharIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Types = require("../bob/Types.js");
var GetCharIndex = function (childIndex, activeOnly) {
  if (typeof childIndex !== 'number') {
    childIndex = this.children.indexOf(childIndex);
    if (childIndex < 0) {
      return null;
    }
  }
  if (activeOnly === undefined) {
    activeOnly = true;
  }
  var children = this.children;
  if (childIndex >= children.length) {
    childIndex = children.length;
  }
  var charIndex = 0;
  for (var i = 0; i < childIndex; i++) {
    var child = children[i];
    if (activeOnly && !child.active) {
      continue;
    }
    if ((0, _Types.IsChar)(child) && !child.removed) {
      charIndex++;
    }
  }
  return charIndex;
};
var _default = GetCharIndex;
exports.default = _default;
},{"../bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/input/SetChildrenInteractiveEnable.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetChildrenInteractiveEnable = function (enable) {
  if (enable === undefined) {
    enable = true;
  }
  if (this.childrenInteractiveEnable !== enable) {
    this.lastOverChild = null;
  }
  this.childrenInteractiveEnable = enable;
  return this;
};
var _default = SetChildrenInteractiveEnable;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/input/GetFirstChildContains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetFirstChildContains = function (children, x, y) {
  var children = children;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (!child.active || !child.renderable) {
      continue;
    }
    if (child.contains(x, y)) {
      return child;
    }
  }
  return null;
};
var _default = GetFirstChildContains;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/input/SetChildrenInteractive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetFirstChildContains = _interopRequireDefault(require("./GetFirstChildContains.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var SetChildrenInteractive = function () {
  this.on('pointerdown', OnPointerDown, this).on('pointerdown', OnPointerUp, this).on('pointermove', OnPointOverOut, this).on('pointerover', OnPointOverOut, this).on('pointerout', function (pointer, event) {
    OnPointOverOut.call(this, pointer, null, null, event);
  }, this);
  return this;
};
var OnPointerDown = function (pointer, localX, localY, event) {
  if (!this.childrenInteractiveEnable) {
    return;
  }
  var child = (0, _GetFirstChildContains.default)(this.children, localX, localY);
  if (!child) {
    return;
  }
  this.emit('child.pointerdown', child, pointer, localX, localY, event);
};
var OnPointerUp = function (pointer, localX, localY, event) {
  if (!this.childrenInteractiveEnable) {
    return;
  }
  var child = (0, _GetFirstChildContains.default)(this.children, localX, localY);
  if (!child) {
    return;
  }
  this.emit('child.pointerup', child, pointer, localX, localY, event);
};
var OnPointOverOut = function (pointer, localX, localY, event) {
  if (!this.childrenInteractiveEnable) {
    return;
  }
  if (localX === null) {
    // Case of pointerout
    if (this.lastOverChild !== null) {
      this.emit('child.pointerout', this.lastOverChild, pointer, localX, localY, event);
      this.lastOverChild = null;
    }
    return;
  }
  var child = (0, _GetFirstChildContains.default)(this.children, localX, localY);
  if (child === this.lastOverChild) {
    return;
  }
  if (this.lastOverChild !== null) {
    this.emit('child.pointerout', this.lastOverChild, pointer, localX, localY, event);
  }
  if (child !== null) {
    this.emit('child.pointerover', child, pointer, localX, localY, event);
  }
  this.lastOverChild = child;
};
var _default = SetChildrenInteractive;
exports.default = _default;
},{"./GetFirstChildContains.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/input/GetFirstChildContains.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/input/SetInteractive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SetChildrenInteractive = _interopRequireDefault(require("./SetChildrenInteractive.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GameObject = Phaser.GameObjects.GameObject;
var SetInteractive = function (hitArea, hitAreaCallback, dropZone) {
  var isInteractived = !!this.input;
  GameObject.prototype.setInteractive.call(this, hitArea, hitAreaCallback, dropZone);
  if (!isInteractived) {
    _SetChildrenInteractive.default.call(this);
  }
  return this;
};
var _default = SetInteractive;
exports.default = _default;
},{"./SetChildrenInteractive.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/input/SetChildrenInteractive.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/MoveChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const BringToTop = Phaser.Utils.Array.BringToTop;
const SendToBack = Phaser.Utils.Array.SendToBack;
const MoveUp = Phaser.Utils.Array.MoveUp;
const MoveDown = Phaser.Utils.Array.MoveDown;
const MoveAbove = Phaser.Utils.Array.MoveAbove;
const MoveBelow = Phaser.Utils.Array.MoveBelow;
var _default = {
  moveChildToFist(child) {
    SendToBack(this.children, child);
    return this;
  },
  moveChildToLast(child) {
    BringToTop(this.children, child);
    return this;
  },
  movechildUp(child) {
    MoveUp(this.children, child);
    return this;
  },
  movechildDown(child) {
    MoveDown(this.children, child);
    return this;
  },
  movechildAbove(child, baseChild) {
    MoveAbove(this.children, child, baseChild);
    return this;
  },
  movechildBelow(child, baseChild) {
    MoveBelow(this.children, child, baseChild);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/BackgroundMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setBackgroundColor(color, color2, isHorizontalGradient) {
    this.background.setColor(color, color2, isHorizontalGradient);
    return this;
  },
  setBackgroundStroke(color, lineWidth) {
    this.background.setStroke(color, lineWidth);
    return this;
  },
  setBackgroundCornerRadius(radius, iteration) {
    this.background.setCornerRadius(radius, iteration);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/InnerBoundsMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setInnerBoundsColor(color, color2, isHorizontalGradient) {
    this.innerBounds.setColor(color, color2, isHorizontalGradient);
    return this;
  },
  setInnerBoundsStroke(color, lineWidth) {
    this.innerBounds.setStroke(color, lineWidth);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SetFixedSize = _interopRequireDefault(require("./SetFixedSize.js"));
var _SetPadding = _interopRequireDefault(require("./SetPadding.js"));
var _GetPadding = _interopRequireDefault(require("./GetPadding.js"));
var _ModifyTextStyle = _interopRequireDefault(require("./ModifyTextStyle.js"));
var _ModifyDefaultTextStyle = _interopRequireDefault(require("./ModifyDefaultTextStyle.js"));
var _ResetTextStyle = _interopRequireDefault(require("./ResetTextStyle.js"));
var _SetTestString = _interopRequireDefault(require("./SetTestString.js"));
var _RemoveChild = _interopRequireDefault(require("./RemoveChild.js"));
var _RemoveChildren = _interopRequireDefault(require("./RemoveChildren.js"));
var _PopChild = _interopRequireDefault(require("./PopChild.js"));
var _ClearContent = _interopRequireDefault(require("./ClearContent.js"));
var _AddChild = _interopRequireDefault(require("./AddChild.js"));
var _CreateCharChild = _interopRequireDefault(require("./CreateCharChild.js"));
var _CreateCharChildren = _interopRequireDefault(require("./CreateCharChildren.js"));
var _SetText = _interopRequireDefault(require("./SetText.js"));
var _AppendText = _interopRequireDefault(require("./AppendText.js"));
var _InsertText = _interopRequireDefault(require("./InsertText.js"));
var _RemoveText = _interopRequireDefault(require("./RemoveText.js"));
var _GetText = _interopRequireDefault(require("./GetText.js"));
var _CreateImageChild = _interopRequireDefault(require("./CreateImageChild.js"));
var _AppendImage = _interopRequireDefault(require("./AppendImage.js"));
var _CreateDrawerChild = _interopRequireDefault(require("./CreateDrawerChild.js"));
var _AppendDrawer = _interopRequireDefault(require("./AppendDrawer.js"));
var _CreateSpaceChild = _interopRequireDefault(require("./CreateSpaceChild.js"));
var _AppendSpace = _interopRequireDefault(require("./AppendSpace.js"));
var _CreateCommandChild = _interopRequireDefault(require("./CreateCommandChild.js"));
var _AppendCommand = _interopRequireDefault(require("./AppendCommand.js"));
var _SetWrapConfig = _interopRequireDefault(require("./SetWrapConfig.js"));
var _RunWordWrap = _interopRequireDefault(require("./RunWordWrap.js"));
var _RunVerticalWrap = _interopRequireDefault(require("./RunVerticalWrap.js"));
var _RunWrap = _interopRequireDefault(require("./RunWrap.js"));
var _SetAlignMethods = _interopRequireDefault(require("./SetAlignMethods.js"));
var _RenderContent = _interopRequireDefault(require("./RenderContent.js"));
var _ForEachChild = _interopRequireDefault(require("./ForEachChild.js"));
var _ForEachRenderableChild = _interopRequireDefault(require("./ForEachRenderableChild.js"));
var _ForEachCharChild = _interopRequireDefault(require("./ForEachCharChild.js"));
var _GetChildren = _interopRequireDefault(require("./GetChildren.js"));
var _GetActiveChildren = _interopRequireDefault(require("./GetActiveChildren.js"));
var _GetCharChildren = _interopRequireDefault(require("./GetCharChildren.js"));
var _GetLastAppendedChildren = _interopRequireDefault(require("./GetLastAppendedChildren.js"));
var _GetNearestChild = _interopRequireDefault(require("./GetNearestChild.js"));
var _GetCharWorldPosition = _interopRequireDefault(require("./GetCharWorldPosition.js"));
var _SetToMinSize = _interopRequireDefault(require("./SetToMinSize.js"));
var _GetCharChildIndex = _interopRequireDefault(require("./GetCharChildIndex.js"));
var _GetCharChild = _interopRequireDefault(require("./GetCharChild.js"));
var _GetCharIndex = _interopRequireDefault(require("./GetCharIndex.js"));
var _SetChildrenInteractiveEnable = _interopRequireDefault(require("./input/SetChildrenInteractiveEnable.js"));
var _SetInteractive = _interopRequireDefault(require("./input/SetInteractive.js"));
var _MoveChildMethods = _interopRequireDefault(require("./MoveChildMethods.js"));
var _BackgroundMethods = _interopRequireDefault(require("./BackgroundMethods.js"));
var _InnerBoundsMethods = _interopRequireDefault(require("./InnerBoundsMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {
  setFixedSize: _SetFixedSize.default,
  setPadding: _SetPadding.default,
  getPadding: _GetPadding.default,
  modifyTextStyle: _ModifyTextStyle.default,
  modifyDefaultTextStyle: _ModifyDefaultTextStyle.default,
  resetTextStyle: _ResetTextStyle.default,
  setTestString: _SetTestString.default,
  removeChild: _RemoveChild.default,
  removeChildren: _RemoveChildren.default,
  popChild: _PopChild.default,
  clearContent: _ClearContent.default,
  addChild: _AddChild.default,
  createCharChild: _CreateCharChild.default,
  createCharChildren: _CreateCharChildren.default,
  setText: _SetText.default,
  appendText: _AppendText.default,
  insertText: _InsertText.default,
  removeText: _RemoveText.default,
  getText: _GetText.default,
  createImageChild: _CreateImageChild.default,
  appendImage: _AppendImage.default,
  createDrawerChild: _CreateDrawerChild.default,
  appendDrawer: _AppendDrawer.default,
  createSpaceChild: _CreateSpaceChild.default,
  appendSpace: _AppendSpace.default,
  createCommandChild: _CreateCommandChild.default,
  appendCommand: _AppendCommand.default,
  setWrapConfig: _SetWrapConfig.default,
  runWordWrap: _RunWordWrap.default,
  runVerticalWrap: _RunVerticalWrap.default,
  runWrap: _RunWrap.default,
  renderContent: _RenderContent.default,
  forEachChild: _ForEachChild.default,
  forEachRenderableChild: _ForEachRenderableChild.default,
  forEachCharChild: _ForEachCharChild.default,
  getChildren: _GetChildren.default,
  getActiveChildren: _GetActiveChildren.default,
  getCharChildren: _GetCharChildren.default,
  getLastAppendedChildren: _GetLastAppendedChildren.default,
  getNearestChild: _GetNearestChild.default,
  getCharWorldPosition: _GetCharWorldPosition.default,
  setToMinSize: _SetToMinSize.default,
  getCharChildIndex: _GetCharChildIndex.default,
  getCharChild: _GetCharChild.default,
  getCharIndex: _GetCharIndex.default,
  setChildrenInteractiveEnable: _SetChildrenInteractiveEnable.default,
  setInteractive: _SetInteractive.default
};
Object.assign(Methods, _MoveChildMethods.default, _BackgroundMethods.default, _InnerBoundsMethods.default, _SetAlignMethods.default);
var _default = Methods;
exports.default = _default;
},{"./SetFixedSize.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetFixedSize.js","./SetPadding.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetPadding.js","./GetPadding.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetPadding.js","./ModifyTextStyle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ModifyTextStyle.js","./ModifyDefaultTextStyle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ModifyDefaultTextStyle.js","./ResetTextStyle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ResetTextStyle.js","./SetTestString.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetTestString.js","./RemoveChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RemoveChild.js","./RemoveChildren.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RemoveChildren.js","./PopChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/PopChild.js","./ClearContent.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ClearContent.js","./AddChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AddChild.js","./CreateCharChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/CreateCharChild.js","./CreateCharChildren.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/CreateCharChildren.js","./SetText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetText.js","./AppendText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendText.js","./InsertText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/InsertText.js","./RemoveText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RemoveText.js","./GetText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetText.js","./CreateImageChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/CreateImageChild.js","./AppendImage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendImage.js","./CreateDrawerChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/CreateDrawerChild.js","./AppendDrawer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendDrawer.js","./CreateSpaceChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/CreateSpaceChild.js","./AppendSpace.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendSpace.js","./CreateCommandChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/CreateCommandChild.js","./AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js","./SetWrapConfig.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetWrapConfig.js","./RunWordWrap.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RunWordWrap.js","./RunVerticalWrap.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RunVerticalWrap.js","./RunWrap.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RunWrap.js","./SetAlignMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetAlignMethods.js","./RenderContent.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/RenderContent.js","./ForEachChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ForEachChild.js","./ForEachRenderableChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ForEachRenderableChild.js","./ForEachCharChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/ForEachCharChild.js","./GetChildren.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetChildren.js","./GetActiveChildren.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetActiveChildren.js","./GetCharChildren.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetCharChildren.js","./GetLastAppendedChildren.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetLastAppendedChildren.js","./GetNearestChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetNearestChild.js","./GetCharWorldPosition.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetCharWorldPosition.js","./SetToMinSize.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/SetToMinSize.js","./GetCharChildIndex.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetCharChildIndex.js","./GetCharChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetCharChild.js","./GetCharIndex.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/GetCharIndex.js","./input/SetChildrenInteractiveEnable.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/input/SetChildrenInteractiveEnable.js","./input/SetInteractive.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/input/SetInteractive.js","./MoveChildMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/MoveChildMethods.js","./BackgroundMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/BackgroundMethods.js","./InnerBoundsMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/InnerBoundsMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/poolmanager/PoolManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _pool = _interopRequireDefault(require("../../../../pool.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetFastValue = Phaser.Utils.Objects.GetFastValue;
var Pools = {};
class PoolManager {
  constructor(config) {
    this.pools = GetFastValue(config, 'pools', Pools);
  }
  free(bob) {
    if (!this.pools) {
      return this;
    }
    var bobType = bob.type;
    if (!this.pools.hasOwnProperty(bobType)) {
      this.pools[bobType] = new _pool.default();
    }
    this.pools[bobType].push(bob);
    bob.onFree();
    return this;
  }
  freeMultiple(arr) {
    if (!this.pools) {
      return this;
    }
    for (var i = 0, cnt = arr.length; i < cnt; i++) {
      this.free(arr[i]);
    }
    return this;
  }
  allocate(bobType) {
    if (!this.pools || !this.pools.hasOwnProperty(bobType)) {
      return null;
    }
    return this.pools[bobType].pop();
  }
}
var _default = PoolManager;
exports.default = _default;
},{"../../../../pool.js":"node_modules/phaser3-rex-plugins/plugins/pool.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/DynamicText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Canvas = _interopRequireDefault(require("../../canvas/canvasbase/Canvas.js"));
var _PaddingMethods = require("../../../utils/padding/PaddingMethods");
var _Background = _interopRequireDefault(require("./bob/background/Background.js"));
var _InnerBounds = _interopRequireDefault(require("./bob/innerbounds/InnerBounds.js"));
var _TextStyle = _interopRequireDefault(require("./bob/char/TextStyle.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods"));
var _PoolManager = _interopRequireDefault(require("./poolmanager/PoolManager.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class DynamicText extends _Canvas.default {
  constructor(scene, x, y, fixedWidth, fixedHeight, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      fixedWidth = GetValue(config, 'width', 0);
      fixedHeight = GetValue(config, 'height', 0);
    } else if (IsPlainObject(fixedWidth)) {
      config = fixedWidth;
      fixedWidth = GetValue(config, 'width', 0);
      fixedHeight = GetValue(config, 'height', 0);
    }
    var width = fixedWidth === 0 ? 1 : fixedWidth;
    var height = fixedHeight === 0 ? 1 : fixedHeight;
    super(scene, x, y, width, height);
    this.type = 'rexDynamicText';
    this.autoRound = true;
    this.padding = (0, _PaddingMethods.SetPadding)();
    this.wrapPadding = (0, _PaddingMethods.SetPadding)();
    var textStyleConfig = GetValue(config, 'style', undefined);
    this.defaultTextStyle = new _TextStyle.default(null, textStyleConfig);
    this.textStyle = this.defaultTextStyle.clone();
    this.setTestString(GetValue(config, 'testString', '|MÉqgy'));
    this.background = new _Background.default(this, GetValue(config, 'background', undefined));
    this.innerBounds = new _InnerBounds.default(this, GetValue(config, 'innerBounds', undefined));
    this.children = [];
    this.lastAppendedChildren = [];
    this.lastOverChild = null;
    this.poolManager = new _PoolManager.default(config);
    this.setFixedSize(fixedWidth, fixedHeight);
    this.setPadding(GetValue(config, 'padding', 0));
    this.setWrapConfig(GetValue(config, 'wrap', undefined));
    this.setChildrenInteractiveEnable(GetValue(config, 'childrenInteractive', false));
    var text = GetValue(config, 'text', undefined);
    if (text) {
      this.setText(text);
    }
  }
  updateTexture() {
    this.renderContent();
    super.updateTexture();
    return this;
  }
  get text() {
    return this.getText(true);
  }
  set text(value) {
    this.setText(value);
  }
  setSize(width, height) {
    this.setFixedSize(width, height);
    return this;
  }
}
Object.assign(DynamicText.prototype, _Methods.default);
var _default = DynamicText;
exports.default = _default;
},{"../../canvas/canvasbase/Canvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/Canvas.js","../../../utils/padding/PaddingMethods":"node_modules/phaser3-rex-plugins/plugins/utils/padding/PaddingMethods.js","./bob/background/Background.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/background/Background.js","./bob/innerbounds/InnerBounds.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/innerbounds/InnerBounds.js","./bob/char/TextStyle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/char/TextStyle.js","./methods/Methods":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/Methods.js","./poolmanager/PoolManager.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/poolmanager/PoolManager.js"}],"node_modules/phaser3-rex-plugins/plugins/dynamictext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DynamicText = _interopRequireDefault(require("./gameobjects/dynamictext/dynamictext/DynamicText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _DynamicText.default;
exports.default = _default;
},{"./gameobjects/dynamictext/dynamictext/DynamicText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/DynamicText.js"}],"node_modules/phaser3-rex-plugins/templates/ui/dynamictext/DynamicText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _dynamictext = _interopRequireDefault(require("../../../plugins/dynamictext.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _dynamictext.default;
exports.default = _default;
},{"../../../plugins/dynamictext.js":"node_modules/phaser3-rex-plugins/plugins/dynamictext.js"}],"node_modules/phaser3-rex-plugins/templates/ui/dynamictext/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DynamicText = _interopRequireDefault(require("./DynamicText.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('dynamicText', function (x, y, width, height, config) {
  var gameObject = new _DynamicText.default(this.scene, x, y, width, height, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.DynamicText', _DynamicText.default);
var _default = _DynamicText.default;
exports.default = _default;
},{"./DynamicText.js":"node_modules/phaser3-rex-plugins/templates/ui/dynamictext/DynamicText.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/system/IsSceneObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const SceneClass = Phaser.Scene;
var IsSceneObject = function (object) {
  return object instanceof SceneClass;
};
var _default = IsSceneObject;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/system/GetSoundManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsSceneObject = _interopRequireDefault(require("./IsSceneObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetSoundManager = function (game) {
  if ((0, _IsSceneObject.default)(game)) {
    return game.sys.sound;
  }
  return game.sound;
};
var _default = GetSoundManager;
exports.default = _default;
},{"./IsSceneObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsSceneObject.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/eventemitter/EventEmitterMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setEventEmitter(eventEmitter, EventEmitterClass) {
    if (EventEmitterClass === undefined) {
      EventEmitterClass = Phaser.Events.EventEmitter; // Use built-in EventEmitter class by default
    }

    this._privateEE = eventEmitter === true || eventEmitter === undefined;
    this._eventEmitter = this._privateEE ? new EventEmitterClass() : eventEmitter;
    return this;
  },
  destroyEventEmitter() {
    if (this._eventEmitter && this._privateEE) {
      this._eventEmitter.shutdown();
    }
    return this;
  },
  getEventEmitter() {
    return this._eventEmitter;
  },
  on: function () {
    if (this._eventEmitter) {
      this._eventEmitter.on.apply(this._eventEmitter, arguments);
    }
    return this;
  },
  once: function () {
    if (this._eventEmitter) {
      this._eventEmitter.once.apply(this._eventEmitter, arguments);
    }
    return this;
  },
  off: function () {
    if (this._eventEmitter) {
      this._eventEmitter.off.apply(this._eventEmitter, arguments);
    }
    return this;
  },
  emit: function (event) {
    if (this._eventEmitter && event) {
      this._eventEmitter.emit.apply(this._eventEmitter, arguments);
    }
    return this;
  },
  addListener: function () {
    if (this._eventEmitter) {
      this._eventEmitter.addListener.apply(this._eventEmitter, arguments);
    }
    return this;
  },
  removeListener: function () {
    if (this._eventEmitter) {
      this._eventEmitter.removeListener.apply(this._eventEmitter, arguments);
    }
    return this;
  },
  removeAllListeners: function () {
    if (this._eventEmitter) {
      this._eventEmitter.removeAllListeners.apply(this._eventEmitter, arguments);
    }
    return this;
  },
  listenerCount: function () {
    if (this._eventEmitter) {
      return this._eventEmitter.listenerCount.apply(this._eventEmitter, arguments);
    }
    return 0;
  },
  listeners: function () {
    if (this._eventEmitter) {
      return this._eventEmitter.listeners.apply(this._eventEmitter, arguments);
    }
    return [];
  },
  eventNames: function () {
    if (this._eventEmitter) {
      return this._eventEmitter.eventNames.apply(this._eventEmitter, arguments);
    }
    return [];
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/system/GetSceneObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsSceneObject = _interopRequireDefault(require("./IsSceneObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetSceneObject = function (object) {
  if (object == null || typeof object !== 'object') {
    return null;
  } else if ((0, _IsSceneObject.default)(object)) {
    // object = scene
    return object;
  } else if (object.scene && (0, _IsSceneObject.default)(object.scene)) {
    // object = game object
    return object.scene;
  } else if (object.parent && object.parent.scene && (0, _IsSceneObject.default)(object.parent.scene)) {
    // parent = bob object
    return object.parent.scene;
  } else {
    return null;
  }
};
var _default = GetSceneObject;
exports.default = _default;
},{"./IsSceneObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsSceneObject.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/system/IsGame.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GameClass = Phaser.Game;
var IsGame = function (object) {
  return object instanceof GameClass;
};
var _default = IsGame;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/system/GetGame.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsGame = _interopRequireDefault(require("./IsGame.js"));
var _IsSceneObject = _interopRequireDefault(require("./IsSceneObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetGame = function (object) {
  if (object == null || typeof object !== 'object') {
    return null;
  } else if ((0, _IsGame.default)(object)) {
    return object;
  } else if ((0, _IsGame.default)(object.game)) {
    return object.game;
  } else if ((0, _IsSceneObject.default)(object)) {
    // object = scene object
    return object.sys.game;
  } else if ((0, _IsSceneObject.default)(object.scene)) {
    // object = game object
    return object.scene.sys.game;
  }
};
var _default = GetGame;
exports.default = _default;
},{"./IsGame.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsGame.js","./IsSceneObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsSceneObject.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EventEmitterMethods = _interopRequireDefault(require("../eventemitter/EventEmitterMethods.js"));
var _GetSceneObject = _interopRequireDefault(require("../system/GetSceneObject.js"));
var _GetGame = _interopRequireDefault(require("../system/GetGame.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class ComponentBase {
  constructor(parent, config) {
    this.setParent(parent); // gameObject, scene, or game

    this.isShutdown = false;

    // Event emitter, default is private event emitter
    this.setEventEmitter(GetValue(config, 'eventEmitter', true));

    // Register callback of parent destroy event, also see `shutdown` method
    if (this.parent) {
      if (this.parent === this.scene) {
        // parent is a scene
        this.scene.sys.events.once('shutdown', this.onEnvDestroy, this);
      } else if (this.parent === this.game) {
        // parent is game
        this.game.events.once('shutdown', this.onEnvDestroy, this);
      } else if (this.parent.once) {
        // parent is game object or something else
        this.parent.once('destroy', this.onParentDestroy, this);
      }

      // bob object does not have event emitter
    }
  }

  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }

    // parent might not be shutdown yet
    if (this.parent) {
      if (this.parent === this.scene) {
        // parent is a scene
        this.scene.sys.events.off('shutdown', this.onEnvDestroy, this);
      } else if (this.parent === this.game) {
        // parent is game
        this.game.events.off('shutdown', this.onEnvDestroy, this);
      } else if (this.parent.once) {
        // parent is game object or something else
        this.parent.off('destroy', this.onParentDestroy, this);
      }

      // bob object does not have event emitter
    }

    this.destroyEventEmitter();
    this.parent = undefined;
    this.scene = undefined;
    this.game = undefined;
    this.isShutdown = true;
  }
  destroy(fromScene) {
    this.shutdown(fromScene);
  }
  onEnvDestroy() {
    this.destroy(true);
  }
  onParentDestroy(parent, fromScene) {
    this.destroy(fromScene);
  }
  setParent(parent) {
    this.parent = parent; // gameObject, scene, or game

    this.scene = (0, _GetSceneObject.default)(parent);
    this.game = (0, _GetGame.default)(parent);
    return this;
  }
}
;
Object.assign(ComponentBase.prototype, _EventEmitterMethods.default);
var _default = ComponentBase;
exports.default = _default;
},{"../eventemitter/EventEmitterMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/eventemitter/EventEmitterMethods.js","../system/GetSceneObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetSceneObject.js","../system/GetGame.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetGame.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/TickTask.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("./ComponentBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class TickTask extends _ComponentBase.default {
  constructor(parent, config) {
    super(parent, config);
    this._isRunning = false;
    this.isPaused = false;
    this.tickingState = false;
    this.setTickingMode(GetValue(config, 'tickingMode', 1));
    // boot() later
  }

  // override
  boot() {
    if (this.tickingMode === 2 && !this.tickingState) {
      this.startTicking();
    }
  }

  // override
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }
    this.stop();
    if (this.tickingState) {
      this.stopTicking();
    }
    super.shutdown(fromScene);
  }
  setTickingMode(mode) {
    if (typeof mode === 'string') {
      mode = TICKINGMODE[mode];
    }
    this.tickingMode = mode;
  }

  // override
  startTicking() {
    this.tickingState = true;
  }

  // override
  stopTicking() {
    this.tickingState = false;
  }
  get isRunning() {
    return this._isRunning;
  }
  set isRunning(value) {
    if (this._isRunning === value) {
      return;
    }
    this._isRunning = value;
    if (this.tickingMode === 1 && value != this.tickingState) {
      if (value) {
        this.startTicking();
      } else {
        this.stopTicking();
      }
    }
  }
  start() {
    this.isPaused = false;
    this.isRunning = true;
    return this;
  }
  pause() {
    // Only can ba paused in running state
    if (this.isRunning) {
      this.isPaused = true;
      this.isRunning = false;
    }
    return this;
  }
  resume() {
    // Only can ba resumed in paused state (paused from running state)
    if (this.isPaused) {
      this.isRunning = true;
    }
    return this;
  }
  stop() {
    this.isPaused = false;
    this.isRunning = false;
    return this;
  }
  complete() {
    this.isPaused = false;
    this.isRunning = false;
    this.emit('complete', this.parent, this);
  }
}
const TICKINGMODE = {
  'no': 0,
  'lazy': 1,
  'always': 2
};
var _default = TickTask;
exports.default = _default;
},{"./ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/SceneUpdateTickTask.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TickTask = _interopRequireDefault(require("./TickTask.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class SceneUpdateTickTask extends _TickTask.default {
  constructor(parent, config) {
    super(parent, config);

    // scene update : update, preupdate, postupdate, prerender, render
    // game update : step, poststep, 

    // If this.scene is not available, use game's 'step' event
    var defaultEventName = this.scene ? 'update' : 'step';
    this.tickEventName = GetValue(config, 'tickEventName', defaultEventName);
    this.isSceneTicker = !IsGameUpdateEvent(this.tickEventName);
  }
  startTicking() {
    super.startTicking();
    if (this.isSceneTicker) {
      this.scene.sys.events.on(this.tickEventName, this.update, this);
    } else {
      this.game.events.on(this.tickEventName, this.update, this);
    }
  }
  stopTicking() {
    super.stopTicking();
    if (this.isSceneTicker && this.scene) {
      // Scene might be destoryed
      this.scene.sys.events.off(this.tickEventName, this.update, this);
    } else if (this.game) {
      this.game.events.off(this.tickEventName, this.update, this);
    }
  }

  // update(time, delta) {
  //     
  // }
}

var IsGameUpdateEvent = function (eventName) {
  return eventName === 'step' || eventName === 'poststep';
};
var _default = SceneUpdateTickTask;
exports.default = _default;
},{"./TickTask.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/TickTask.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/timerticktask/Timer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetValue = Phaser.Utils.Objects.GetValue;
const Clamp = Phaser.Math.Clamp;
class Timer {
  constructor(config) {
    this.resetFromJSON(config);
  }
  resetFromJSON(o) {
    this.state = GetValue(o, 'state', IDLE);
    this.timeScale = GetValue(o, 'timeScale', 1);
    this.delay = GetValue(o, 'delay', 0);
    this.repeat = GetValue(o, 'repeat', 0);
    this.repeatCounter = GetValue(o, 'repeatCounter', 0);
    this.repeatDelay = GetValue(o, 'repeatDelay', 0);
    this.duration = GetValue(o, 'duration', 0);
    this.nowTime = GetValue(o, 'nowTime', 0);
    this.justRestart = GetValue(o, 'justRestart', false);
  }
  toJSON() {
    return {
      state: this.state,
      timeScale: this.timeScale,
      delay: this.delay,
      repeat: this.repeat,
      repeatCounter: this.repeatCounter,
      repeatDelay: this.repeatDelay,
      duration: this.duration,
      nowTime: this.nowTime,
      justRestart: this.justRestart
    };
  }
  destroy() {}
  setTimeScale(timeScale) {
    this.timeScale = timeScale;
    return this;
  }
  setDelay(delay) {
    if (delay === undefined) {
      delay = 0;
    }
    this.delay = delay;
    return this;
  }
  setDuration(duration) {
    this.duration = duration;
    return this;
  }
  setRepeat(repeat) {
    this.repeat = repeat;
    return this;
  }
  setRepeatInfinity() {
    this.repeat = -1;
    return this;
  }
  setRepeatDelay(repeatDelay) {
    this.repeatDelay = repeatDelay;
    return this;
  }
  start() {
    this.nowTime = this.delay > 0 ? -this.delay : 0;
    this.state = this.nowTime >= 0 ? COUNTDOWN : DELAY;
    this.repeatCounter = 0;
    return this;
  }
  stop() {
    this.state = IDLE;
    return this;
  }
  update(time, delta) {
    if (this.state === IDLE || this.state === DONE || delta === 0 || this.timeScale === 0) {
      return;
    }
    this.nowTime += delta * this.timeScale;
    this.justRestart = false;
    if (this.nowTime >= this.duration) {
      if (this.repeat === -1 || this.repeatCounter < this.repeat) {
        this.repeatCounter++;
        this.justRestart = true;
        this.nowTime -= this.duration;
        if (this.repeatDelay > 0) {
          this.nowTime -= this.repeatDelay;
          this.state = REPEATDELAY;
        }
      } else {
        this.nowTime = this.duration;
        this.state = DONE;
      }
    } else if (this.nowTime >= 0) {
      this.state = COUNTDOWN;
    }
  }
  get t() {
    var t;
    switch (this.state) {
      case IDLE:
      case DELAY:
      case REPEATDELAY:
        t = 0;
        break;
      case COUNTDOWN:
        t = this.nowTime / this.duration;
        break;
      case DONE:
        t = 1;
        break;
    }
    return Clamp(t, 0, 1);
  }
  set t(value) {
    value = Clamp(value, -1, 1);
    if (value < 0) {
      this.state = DELAY;
      this.nowTime = -this.delay * value;
    } else {
      this.state = COUNTDOWN;
      this.nowTime = this.duration * value;
      if (value === 1 && this.repeat !== 0) {
        this.repeatCounter++;
      }
    }
  }
  setT(t) {
    this.t = t;
    return this;
  }
  get isIdle() {
    return this.state === IDLE;
  }
  get isDelay() {
    return this.state === DELAY;
  }
  get isCountDown() {
    return this.state === COUNTDOWN;
  }
  get isRunning() {
    return this.state === DELAY || this.state === COUNTDOWN;
  }
  get isDone() {
    return this.state === DONE;
  }
  get isOddIteration() {
    return (this.repeatCounter & 1) === 1;
  }
  get isEvenIteration() {
    return (this.repeatCounter & 1) === 0;
  }
}
const IDLE = 0;
const DELAY = 1;
const COUNTDOWN = 2;
const REPEATDELAY = 3;
const DONE = -1;
var _default = Timer;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/timerticktask/TimerTask.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SceneUpdateTickTask = _interopRequireDefault(require("../SceneUpdateTickTask.js"));
var _Timer = _interopRequireDefault(require("./Timer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class TimerTickTask extends _SceneUpdateTickTask.default {
  constructor(parent, config) {
    super(parent, config);
    this.timer = new _Timer.default();
    // boot() later 
  }

  // override
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }
    super.shutdown(fromScene);
    this.timer.destroy();
    this.timer = undefined;
  }
  start() {
    this.timer.start();
    super.start();
    return this;
  }
  stop() {
    this.timer.stop();
    super.stop();
    return this;
  }
  complete() {
    this.timer.stop();
    super.complete();
    return this;
  }
}
var _default = TimerTickTask;
exports.default = _default;
},{"../SceneUpdateTickTask.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/SceneUpdateTickTask.js","./Timer.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/timerticktask/Timer.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/tweentask/EaseValueTaskBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TimerTask = _interopRequireDefault(require("../timerticktask/TimerTask.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const GetEaseFunction = Phaser.Tweens.Builders.GetEaseFunction;
class EaseValueTaskBase extends _TimerTask.default {
  resetFromJSON(o) {
    this.timer.resetFromJSON(GetValue(o, 'timer'));
    this.setEnable(GetValue(o, 'enable', true));
    this.setTarget(GetValue(o, 'target', this.parent));
    this.setDelay(GetAdvancedValue(o, 'delay', 0));
    this.setDuration(GetAdvancedValue(o, 'duration', 1000));
    this.setEase(GetValue(o, 'ease', 'Linear'));
    this.setRepeat(GetValue(o, 'repeat', 0));
    return this;
  }
  setEnable(e) {
    if (e == undefined) {
      e = true;
    }
    this.enable = e;
    return this;
  }
  setTarget(target) {
    if (target === undefined) {
      target = this.parent;
    }
    this.target = target;
    return this;
  }
  setDelay(time) {
    this.delay = time;
    // Assign `this.timer.setRepeat(repeat)` manually
    return this;
  }
  setDuration(time) {
    this.duration = time;
    return this;
  }
  setRepeat(repeat) {
    this.repeat = repeat;
    // Assign `this.timer.setRepeat(repeat)` manually
    return this;
  }
  setRepeatDelay(repeatDelay) {
    this.repeatDelay = repeatDelay;
    // Assign `this.timer.setRepeatDelay(repeatDelay)` manually
    return this;
  }
  setEase(ease) {
    if (ease === undefined) {
      ease = 'Linear';
    }
    this.ease = ease;
    this.easeFn = GetEaseFunction(ease);
    return this;
  }

  // Override
  start() {
    // Ignore start if timer is running, i.e. in DELAY, o RUN state
    if (this.timer.isRunning) {
      return this;
    }
    super.start();
    return this;
  }
  restart() {
    this.timer.stop();
    this.start.apply(this, arguments);
    return this;
  }
  stop(toEnd) {
    if (toEnd === undefined) {
      toEnd = false;
    }
    super.stop();
    if (toEnd) {
      this.timer.setT(1);
      this.updateGameObject(this.target, this.timer);
      this.complete();
    }
    return this;
  }
  update(time, delta) {
    if (!this.isRunning || !this.enable || !this.parent.active) {
      return this;
    }
    var target = this.target,
      timer = this.timer;
    timer.update(time, delta);

    // isDelay, isCountDown, isDone
    if (!timer.isDelay) {
      this.updateGameObject(target, timer);
    }
    this.emit('update', target, this);
    if (timer.isDone) {
      this.complete();
    }
    return this;
  }

  // Override
  updateGameObject(target, timer) {}
}
var _default = EaseValueTaskBase;
exports.default = _default;
},{"../timerticktask/TimerTask.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/timerticktask/TimerTask.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/system/IsSoundObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const SoundObjectClass = Phaser.Sound.BaseSound;
var IsSoundObject = function (object) {
  return object instanceof SoundObjectClass;
};
var _default = IsSoundObject;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/audio/fade/Fade.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseValueTaskBase = _interopRequireDefault(require("../../utils/componentbase/tweentask/EaseValueTaskBase.js"));
var _IsSoundObject = _interopRequireDefault(require("../../utils/system/IsSoundObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const Linear = Phaser.Math.Linear;
class Fade extends _EaseValueTaskBase.default {
  constructor(scene, sound, config) {
    if ((0, _IsSoundObject.default)(scene)) {
      config = sound;
      sound = scene;
      scene = undefined;
    }
    sound.active = true;
    sound.scene = scene;
    sound.game = sound.manager.game;
    super(sound, config);
    // this.parent = parent
    // this.timer

    this.volume = {};
    this.resetFromJSON(config);
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this.setMode(GetValue(o, 'mode', 0));
    this.setEnable(GetValue(o, 'enable', true));
    this.setVolumeRange(GetAdvancedValue(o, 'volume.start', this.parent.volume), GetAdvancedValue(o, 'volume.end', 0));
    return this;
  }
  setMode(m) {
    if (typeof m === 'string') {
      m = MODE[m];
    }
    this.mode = m;
    return this;
  }
  setVolumeRange(start, end) {
    this.volume.start = start;
    this.volume.end = end;
    return this;
  }
  start() {
    if (this.timer.isRunning) {
      return this;
    }
    this.parent.setVolume(this.volume.start);
    this.timer.setDelay(this.delay).setDuration(this.duration);
    super.start();
    return this;
  }
  updateGameObject(parent, timer) {
    parent.volume = Linear(this.volume.start, this.volume.end, timer.t);
  }
  complete() {
    super.complete();
    switch (this.mode) {
      case 1:
        this.parent.stop();
        break;
      case 2:
        this.parent.destroy();
        break;
    }
    return this;
  }
}
const MODE = {
  stop: 1,
  destroy: 2
};
var _default = Fade;
exports.default = _default;
},{"../../utils/componentbase/tweentask/EaseValueTaskBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/tweentask/EaseValueTaskBase.js","../../utils/system/IsSoundObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsSoundObject.js"}],"node_modules/phaser3-rex-plugins/plugins/audio/fade/FadeIn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Fade = _interopRequireDefault(require("./Fade.js"));
var _IsSoundObject = _interopRequireDefault(require("../../utils/system/IsSoundObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var FadeIn = function (scene, sound, duration, endVolume, startVolume) {
  if ((0, _IsSoundObject.default)(scene)) {
    startVolume = endVolume;
    endVolume = duration;
    duration = sound;
    sound = scene;
    scene = undefined;
  }
  if (endVolume === undefined) {
    endVolume = 1;
  }
  if (startVolume === undefined) {
    startVolume = 0;
  }
  var config = {
    mode: 0,
    volume: {
      start: startVolume,
      end: endVolume
    },
    duration: duration
  };

  // create sound instance by key
  if (typeof sound === 'string') {
    sound = scene.sys.sound.add(sound);
  }
  var fade;
  if (sound.hasOwnProperty('_fade')) {
    fade = sound._fade;
    fade.stop().resetFromJSON(config);
  } else {
    fade = new _Fade.default(scene, sound, config);
    sound._fade = fade;
  }
  fade.start();
  if (!sound.isPlaying) {
    sound.setVolume(startVolume).play();
  }
  return sound;
};
var _default = FadeIn;
exports.default = _default;
},{"./Fade.js":"node_modules/phaser3-rex-plugins/plugins/audio/fade/Fade.js","../../utils/system/IsSoundObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsSoundObject.js"}],"node_modules/phaser3-rex-plugins/plugins/audio/fade/FadeOut.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Fade = _interopRequireDefault(require("./Fade.js"));
var _IsSoundObject = _interopRequireDefault(require("../../utils/system/IsSoundObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var FadeOut = function (scene, sound, duration, destroy) {
  if ((0, _IsSoundObject.default)(scene)) {
    destroy = duration;
    duration = sound;
    sound = scene;
    scene = undefined;
  }
  if (destroy === undefined) {
    destroy = true;
  }
  var config = {
    mode: destroy ? 2 : 1,
    // 1: stop, 2: destroy
    volume: {
      start: sound.volume,
      end: 0
    },
    duration: duration
  };
  var fade;
  if (sound.hasOwnProperty('_fade')) {
    fade = sound._fade;
    fade.stop().resetFromJSON(config);
  } else {
    fade = new _Fade.default(scene, sound, config);
    sound._fade = fade;
  }
  fade.start();
  if (!sound.isPlaying) {
    sound.play();
  }
  return sound;
};
var _default = FadeOut;
exports.default = _default;
},{"./Fade.js":"node_modules/phaser3-rex-plugins/plugins/audio/fade/Fade.js","../../utils/system/IsSoundObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsSoundObject.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/audio/soundmanager/methods/BackgroundMusicMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FadeIn = _interopRequireDefault(require("../../../../audio/fade/FadeIn.js"));
var _FadeOut = _interopRequireDefault(require("../../../../audio/fade/FadeOut.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  setBackgroundMusicLoopValue(value) {
    this.backgroundMusicLoopValue = value;
    return this;
  },
  setBackgroundMusicFadeTime(time) {
    this.backgroundMusicFadeTime = time;
    return this;
  },
  getBackgroundMusic() {
    return this.backgroundMusic;
  },
  // Internal method
  setCurrentBackgroundMusic(music) {
    this.backgroundMusic = music;
    if (music) {
      music.setLoop(this.backgroundMusicLoopValue);
      music.once('complete', function () {
        if (this.backgroundMusic === music) {
          this.backgroundMusic.destroy();
          this.backgroundMusic = undefined;
        }
      }, this).once('destroy', function () {
        if (this.backgroundMusic === music) {
          this.backgroundMusic = undefined;
        }
      }, this);
      if (!music.isPlaying) {
        music.play();
      }
    }
    return this;
  },
  playBackgroundMusic(key) {
    // Don't re-play the same background music
    if (this.backgroundMusic && this.backgroundMusic.key === key) {
      return this;
    }
    this.stopBackgroundMusic(); // Stop previous background music

    this.setCurrentBackgroundMusic(this.sound.add(key));
    if (this.backgroundMusicFadeTime > 0) {
      this.fadeInBackgroundMusic(this.backgroundMusicFadeTime);
    }
    return this;
  },
  pauseBackgroundMusic() {
    if (this.backgroundMusic) {
      this.backgroundMusic.pause();
    }
    return this;
  },
  resumeBackgroundMusic() {
    if (this.backgroundMusic) {
      this.backgroundMusic.resume();
    }
    return this;
  },
  stopBackgroundMusic() {
    if (this.backgroundMusic) {
      if (this.backgroundMusicFadeTime > 0) {
        this.fadeOutBackgroundMusic(this.backgroundMusicFadeTime, true);
      } else {
        this.backgroundMusic.stop();
        this.backgroundMusic.destroy();
        this.backgroundMusic = undefined;
      }
    }
    return this;
  },
  fadeInBackgroundMusic(time) {
    if (this.backgroundMusic) {
      (0, _FadeIn.default)(this.backgroundMusic, time, this.backgroundMusicVolume, 0);
    }
    return this;
  },
  fadeOutBackgroundMusic(time, isStopped) {
    if (this.backgroundMusic) {
      (0, _FadeOut.default)(this.backgroundMusic, time, isStopped);
    }
    return this;
  },
  crossFadeBackgroundMusic(key, time) {
    var backgroundMusicFadeTimeSave = this.backgroundMusicFadeTime;
    this.backgroundMusicFadeTime = 0;
    this.fadeOutBackgroundMusic(time, true).playBackgroundMusic(key).fadeInBackgroundMusic(time);
    this.backgroundMusicFadeTime = backgroundMusicFadeTimeSave;
    return this;
  },
  setBackgroundMusicVolume(volume) {
    this.backgroundMusicVolume = volume;
    return this;
  }
};
exports.default = _default;
},{"../../../../audio/fade/FadeIn.js":"node_modules/phaser3-rex-plugins/plugins/audio/fade/FadeIn.js","../../../../audio/fade/FadeOut.js":"node_modules/phaser3-rex-plugins/plugins/audio/fade/FadeOut.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/audio/soundmanager/methods/BackgroundMusic2Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FadeIn = _interopRequireDefault(require("../../../../audio/fade/FadeIn.js"));
var _FadeOut = _interopRequireDefault(require("../../../../audio/fade/FadeOut.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  setBackgroundMusic2LoopValue(value) {
    this.backgroundMusic2LoopValue = value;
    return this;
  },
  setBackgroundMusic2FadeTime(time) {
    this.backgroundMusic2FadeTime = time;
    return this;
  },
  getBackgroundMusic2() {
    return this.backgroundMusic2;
  },
  // Internal method
  setCurrentBackgroundMusic2(music) {
    this.backgroundMusic2 = music;
    if (music) {
      music.setLoop(this.backgroundMusic2LoopValue);
      music.once('complete', function () {
        if (this.backgroundMusic2 === music) {
          this.backgroundMusic2.destroy();
          this.backgroundMusic2 = undefined;
        }
      }, this).once('destroy', function () {
        if (this.backgroundMusic2 === music) {
          this.backgroundMusic2 = undefined;
        }
      }, this);
      if (!music.isPlaying) {
        music.play();
      }
    }
    return this;
  },
  playBackgroundMusic2(key) {
    // Don't re-play the same background music
    if (this.backgroundMusic2 && this.backgroundMusic2.key === key) {
      return this;
    }
    this.stopBackgroundMusic2(); // Stop previous background music

    this.setCurrentBackgroundMusic2(this.sound.add(key));
    if (this.backgroundMusic2FadeTime > 0) {
      this.fadeInBackgroundMusic2(this.backgroundMusic2FadeTime);
    }
    return this;
  },
  pauseBackgroundMusic2() {
    if (this.backgroundMusic2) {
      this.backgroundMusic2.pause();
    }
    return this;
  },
  resumeBackgroundMusic2() {
    if (this.backgroundMusic2) {
      this.backgroundMusic2.resume();
    }
    return this;
  },
  stopBackgroundMusic2() {
    if (this.backgroundMusic2) {
      if (this.backgroundMusic2FadeTime > 0) {
        this.fadeOutBackgroundMusic2(this.backgroundMusic2FadeTime, true);
      } else {
        this.backgroundMusic2.stop();
        this.backgroundMusic2.destroy();
        this.backgroundMusic2 = undefined;
      }
    }
    return this;
  },
  fadeInBackgroundMusic2(time) {
    if (this.backgroundMusic2) {
      (0, _FadeIn.default)(this.backgroundMusic2, time, this.backgroundMusic2Volume, 0);
    }
    return this;
  },
  fadeOutBackgroundMusic2(time, isStopped) {
    if (this.backgroundMusic2) {
      (0, _FadeOut.default)(this.backgroundMusic2, time, isStopped);
    }
    return this;
  },
  crossFadeBackgroundMusic2(key, time) {
    var backgroundMusic2FadeTimeSave = this.backgroundMusic2FadeTime;
    this.backgroundMusic2FadeTime = 0;
    this.fadeOutBackgroundMusic2(time, true).playBackgroundMusic2(key).fadeInBackgroundMusic2(time);
    this.backgroundMusic2FadeTime = backgroundMusic2FadeTimeSave;
    return this;
  },
  setBackgroundMusic2Volume(volume) {
    this.backgroundMusic2Volume = volume;
    return this;
  }
};
exports.default = _default;
},{"../../../../audio/fade/FadeIn.js":"node_modules/phaser3-rex-plugins/plugins/audio/fade/FadeIn.js","../../../../audio/fade/FadeOut.js":"node_modules/phaser3-rex-plugins/plugins/audio/fade/FadeOut.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/audio/soundmanager/methods/SoundEffectsMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FadeIn = _interopRequireDefault(require("../../../../audio/fade/FadeIn.js"));
var _FadeOut = _interopRequireDefault(require("../../../../audio/fade/FadeOut.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const RemoveItem = Phaser.Utils.Array.Remove;
var _default = {
  getSoundEffects() {
    return this.soundEffects;
  },
  getLastSoundEffect() {
    return this.soundEffects[this.soundEffects.length - 1];
  },
  playSoundEffect(key) {
    var soundEffect = this.sound.add(key);
    soundEffect.setVolume(this.soundEffectsVolume);
    this.soundEffects.push(soundEffect);
    soundEffect.once('complete', function () {
      soundEffect.destroy();

      // SoundManager has been destroyed
      if (!this.sound) {
        return;
      }
      RemoveItem(this.soundEffects, soundEffect);
    }, this).once('destroy', function () {
      // SoundManager has been destroyed
      if (!this.sound) {
        return;
      }
      RemoveItem(this.soundEffects, soundEffect);
    }, this).play();
    return this;
  },
  fadeInSoundEffect(time) {
    var soundEffect = this.getLastSoundEffect();
    if (soundEffect) {
      (0, _FadeIn.default)(soundEffect, time, this.soundEffectsVolume, 0);
    }
    return this;
  },
  fadeOutSoundEffect(time, isStopped) {
    var soundEffect = this.getLastSoundEffect();
    if (soundEffect) {
      (0, _FadeOut.default)(soundEffect, time, isStopped);
    }
    return this;
  },
  fadeOutAllSoundEffects(time, isStopped) {
    for (var i = this.soundEffects.length - 1; i >= 0; i--) {
      (0, _FadeOut.default)(this.soundEffects[i], time, isStopped);
    }
    return this;
  },
  setSoundEffectVolume(volume, lastSoundEffect) {
    if (lastSoundEffect === undefined) {
      lastSoundEffect = false;
    }
    if (lastSoundEffect) {
      // Set volume of last sound effect
      var soundEffect = this.getLastSoundEffect();
      if (soundEffect) {
        soundEffect.setVolume(volume);
      }
    } else {
      // Set volume of all sound effects
      this.soundEffectsVolume = volume;
    }
    return this;
  }
};
exports.default = _default;
},{"../../../../audio/fade/FadeIn.js":"node_modules/phaser3-rex-plugins/plugins/audio/fade/FadeIn.js","../../../../audio/fade/FadeOut.js":"node_modules/phaser3-rex-plugins/plugins/audio/fade/FadeOut.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/audio/soundmanager/methods/SoundEffects2Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FadeIn = _interopRequireDefault(require("../../../../audio/fade/FadeIn.js"));
var _FadeOut = _interopRequireDefault(require("../../../../audio/fade/FadeOut.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const RemoveItem = Phaser.Utils.Array.Remove;
var _default = {
  getSoundEffects2() {
    return this.soundEffects2;
  },
  getLastSoundEffect2() {
    return this.soundEffects2[this.soundEffects2.length - 1];
  },
  playSoundEffect2(key) {
    var soundEffect = this.sound.add(key);
    soundEffect.setVolume(this.soundEffects2Volume);
    this.soundEffects2.push(soundEffect);
    soundEffect.once('complete', function () {
      soundEffect.destroy();

      // SoundManager has been destroyed
      if (!this.sound) {
        return;
      }
      RemoveItem(this.soundEffects2, soundEffect);
    }, this).once('destroy', function () {
      // SoundManager has been destroyed
      if (!this.sound) {
        return;
      }
      RemoveItem(this.soundEffects2, soundEffect);
    }, this).play();
    return this;
  },
  fadeInSoundEffect2(time) {
    var soundEffect = this.getLastSoundEffect2();
    if (soundEffect) {
      (0, _FadeIn.default)(soundEffect, time, this.soundEffects2Volume, 0);
    }
    return this;
  },
  fadeOutSoundEffect2(time, isStopped) {
    var soundEffect = this.getLastSoundEffect2();
    if (soundEffect) {
      (0, _FadeOut.default)(soundEffect, time, isStopped);
    }
    return this;
  },
  fadeOutAllSoundEffects2(time, isStopped) {
    for (var i = this.soundEffects2.length - 1; i >= 0; i--) {
      (0, _FadeOut.default)(this.soundEffects2[i], time, isStopped);
    }
    return this;
  },
  setSoundEffect2Volume(volume, lastSoundEffect) {
    if (lastSoundEffect === undefined) {
      lastSoundEffect = false;
    }
    if (lastSoundEffect) {
      // Set volume of last sound effect
      var soundEffect = this.getLastSoundEffect2();
      if (soundEffect) {
        soundEffect.setVolume(volume);
      }
    } else {
      // Set volume of all sound effects
      this.soundEffects2Volume = volume;
    }
    return this;
  }
};
exports.default = _default;
},{"../../../../audio/fade/FadeIn.js":"node_modules/phaser3-rex-plugins/plugins/audio/fade/FadeIn.js","../../../../audio/fade/FadeOut.js":"node_modules/phaser3-rex-plugins/plugins/audio/fade/FadeOut.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/audio/soundmanager/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BackgroundMusicMethods = _interopRequireDefault(require("./BackgroundMusicMethods.js"));
var _BackgroundMusic2Methods = _interopRequireDefault(require("./BackgroundMusic2Methods.js"));
var _SoundEffectsMethods = _interopRequireDefault(require("./SoundEffectsMethods.js"));
var _SoundEffects2Methods = _interopRequireDefault(require("./SoundEffects2Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {};
Object.assign(Methods, _BackgroundMusicMethods.default, _BackgroundMusic2Methods.default, _SoundEffectsMethods.default, _SoundEffects2Methods.default);
var _default = Methods;
exports.default = _default;
},{"./BackgroundMusicMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/audio/soundmanager/methods/BackgroundMusicMethods.js","./BackgroundMusic2Methods.js":"node_modules/phaser3-rex-plugins/plugins/utils/audio/soundmanager/methods/BackgroundMusic2Methods.js","./SoundEffectsMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/audio/soundmanager/methods/SoundEffectsMethods.js","./SoundEffects2Methods.js":"node_modules/phaser3-rex-plugins/plugins/utils/audio/soundmanager/methods/SoundEffects2Methods.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/audio/soundmanager/SoundManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetSoundManager = _interopRequireDefault(require("../../../utils/system/GetSoundManager.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class SoundManager {
  constructor(game, config) {
    this.sound = (0, _GetSoundManager.default)(game);

    // Background music will be (fade out)destroyed when play next one.
    this.backgroundMusic = undefined;
    this._backgroundMusicVolume = GetValue(config, 'bgm.volume', 1);
    this.setBackgroundMusicLoopValue(GetValue(config, 'bgm.loop', true));
    this.setBackgroundMusicFadeTime(GetValue(config, 'bgm.fade', 500));
    this.backgroundMusic2 = undefined;
    this._backgroundMusic2Volume = GetValue(config, 'bgm2.volume', 1);
    this.setBackgroundMusic2LoopValue(GetValue(config, 'bgm2.loop', true));
    this.setBackgroundMusic2FadeTime(GetValue(config, 'bgm2.fade', 500));

    // Sound effect will be destroyed when completed
    this.soundEffects = [];
    this._soundEffectsVolume = GetValue(config, 'soundEffect.volume', 1);
    this.soundEffects2 = [];
    this._soundEffects2Volume = GetValue(config, 'soundEffect2.volume', 1);
    var initialBackgroundMusic = GetValue(config, 'bgm.initial', undefined);
    if (initialBackgroundMusic) {
      this.setCurrentBackgroundMusic(initialBackgroundMusic);
    }
    var initialBackgroundMusic2 = GetValue(config, 'bgm2.initial', undefined);
    if (initialBackgroundMusic2) {
      this.setCurrentBackgroundMusic2(initialBackgroundMusic2);
    }
  }
  destroy() {
    if (this.backgroundMusic) {
      this.backgroundMusic.destroy();
    }
    this.backgroundMusic = undefined;
    if (this.backgroundMusic2) {
      this.backgroundMusic2.destroy();
    }
    this.backgroundMusic2 = undefined;
    if (this.soundEffects.length) {
      for (var i = this.soundEffects.length - 1; i >= 0; i--) {
        this.soundEffects[i].destroy();
      }
    }
    this.soundEffects.length = 0;
    if (this.soundEffects2.length) {
      for (var i = this.soundEffects2.length - 1; i >= 0; i--) {
        this.soundEffects2[i].destroy();
      }
    }
    this.soundEffects2.length = 0;
    this.sound = undefined;
    return this;
  }
  get backgroundMusicVolume() {
    return this._backgroundMusicVolume;
  }
  set backgroundMusicVolume(value) {
    this._backgroundMusicVolume = value;
    if (this.backgroundMusic) {
      this.backgroundMusic.setVolume(value);
    }
  }
  get backgroundMusic2Volume() {
    return this._backgroundMusic2Volume;
  }
  set backgroundMusic2Volume(value) {
    this._backgroundMusic2Volume = value;
    if (this.backgroundMusic2) {
      this.backgroundMusic2.setVolume(value);
    }
  }
  get soundEffectsVolume() {
    return this._soundEffectsVolume;
  }
  set soundEffectsVolume(value) {
    this._soundEffectsVolume = value;
    var soundEffects = this.soundEffects;
    for (var i = 0, cnt = soundEffects.length; i < cnt; i++) {
      soundEffects[i].setVolume(value);
    }
  }
}
Object.assign(SoundManager.prototype, _Methods.default);
var _default = SoundManager;
exports.default = _default;
},{"../../../utils/system/GetSoundManager.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetSoundManager.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/utils/audio/soundmanager/methods/Methods.js"}],"node_modules/phaser3-rex-plugins/plugins/time/clock/BaseClock.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TickTask = _interopRequireDefault(require("../../utils/componentbase/TickTask.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class BaseClock extends _TickTask.default {
  constructor(parent, config) {
    super(parent, config);
    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    this.isRunning = GetValue(o, 'isRunning', false);
    this.timeScale = GetValue(o, 'timeScale', 1);
    this.now = GetValue(o, 'now', 0);
    return this;
  }
  toJSON() {
    return {
      isRunning: this.isRunning,
      timeScale: this.timeScale,
      now: this.now,
      tickingMode: this.tickingMode
    };
  }

  // Override
  // startTicking() { }

  // Override
  // stopTicking() {}

  start(startAt) {
    if (startAt === undefined) {
      startAt = 0;
    }
    this.delta = 0;
    this.now = startAt;
    super.start();
    return this;
  }
  seek(time) {
    this.now = time;
    return this;
  }
  setTimeScale(value) {
    this.timeScale = value;
    return this;
  }
  tick(delta) {
    delta *= this.timeScale;
    this.now += delta;
    this.delta = delta;
    this.emit('update', this.now, this.delta);
    return this;
  }
}
var _default = BaseClock;
exports.default = _default;
},{"../../utils/componentbase/TickTask.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/TickTask.js"}],"node_modules/phaser3-rex-plugins/plugins/time/clock/Clock.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseClock = _interopRequireDefault(require("./BaseClock.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Clock extends _BaseClock.default {
  startTicking() {
    super.startTicking();
    this.scene.sys.events.on('update', this.update, this);
  }
  stopTicking() {
    super.stopTicking();
    if (this.scene) {
      // Scene might be destoryed
      this.scene.sys.events.off('update', this.update, this);
    }
  }
  update(time, delta) {
    if (!this.isRunning || this.timeScale === 0) {
      return this;
    }
    this.tick(delta);
    return this;
  }
}
var _default = Clock;
exports.default = _default;
},{"./BaseClock.js":"node_modules/phaser3-rex-plugins/plugins/time/clock/BaseClock.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/math/Yoyo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Yoyo = function (t, threshold) {
  if (threshold === undefined) {
    threshold = 0.5;
  }
  if (t <= threshold) {
    t = t / threshold;
  } else {
    t = 1 - (t - threshold) / (1 - threshold);
  }
  return t;
};
var _default = Yoyo;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/time/progresses/Timer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Yoyo = _interopRequireDefault(require("../../utils/math/Yoyo.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Clamp = Phaser.Math.Clamp;
class Timer {
  constructor(timeline, config) {
    this.setTimeline(timeline).reset(config);
  }
  setTimeline(timeline) {
    this.timeline = timeline;
    return this;
  }
  setName(name) {
    this.name = name;
    return this;
  }
  setCallbacks(target, onStart, onProgress, onComplete) {
    this.target = target;
    this.onStart = onStart;
    this.onProgress = onProgress;
    this.onComplete = onComplete;
    return this;
  }
  setDuration(duration, yoyo) {
    if (yoyo === undefined) {
      yoyo = false;
    }
    this.duration = duration;
    this.remainder = duration;
    this.t = 0;
    this.yoyo = yoyo;
    return this;
  }
  setPaused(state) {
    this.isPaused = state;
    return this;
  }
  pause() {
    this.isPaused = true;
    return this;
  }
  resume() {
    this.isPaused = false;
    return this;
  }
  setRemoved(state) {
    this.removed = state;
    return this;
  }
  remove() {
    this.removed = true;
    return this;
  }
  seek(t) {
    this.remainder = this.duration * (1 - t);
    return this;
  }
  reset(o) {
    this.setName(o.name).setDuration(o.duration, o.yoyo).setCallbacks(o.target, o.onStart, o.onProgress, o.onComplete).setPaused(false).setRemoved(false);
    return this;
  }
  onFree() {
    this.setTimeline().setCallbacks();
  }
  getProgress() {
    var value = 1 - this.remainder / this.duration;
    value = Clamp(value, 0, 1);
    if (this.yoyo) {
      value = (0, _Yoyo.default)(value);
    }
    return value;
  }
  setProgress(value) {
    value = Clamp(value, 0, 1);
    this.remainder = this.duration * (1 - value);
  }
  runCallback(callback) {
    if (!callback) {
      return;
    }
    callback(this.target, this.t, this);
  }
  update(time, delta) {
    if (this.removed) {
      return true;
    } else if (this.isPaused) {
      return false;
    }
    this.remainder -= delta;
    this.t = this.getProgress();
    this.runCallback(this.onProgress);
    var isCompleted = this.remainder <= 0;
    if (isCompleted) {
      this.runCallback(this.onComplete);
    }
    return isCompleted;
  }
}
var _default = Timer;
exports.default = _default;
},{"../../utils/math/Yoyo.js":"node_modules/phaser3-rex-plugins/plugins/utils/math/Yoyo.js"}],"node_modules/phaser3-rex-plugins/plugins/time/progresses/TimerPool.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _pool = _interopRequireDefault(require("../../pool.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class TimerPool extends _pool.default {
  allocate() {
    return this.pop();
  }
  free(timer) {
    timer.onFree();
    this.push(timer);
  }
  freeMultiple(arr) {
    for (var i = 0, cnt = arr.length; i < cnt; i++) {
      this.free(arr[i]);
    }
    return this;
  }
}
var _default = TimerPool;
exports.default = _default;
},{"../../pool.js":"node_modules/phaser3-rex-plugins/plugins/pool.js"}],"node_modules/phaser3-rex-plugins/plugins/time/progresses/Timeline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Clock = _interopRequireDefault(require("../clock/Clock.js"));
var _Timer = _interopRequireDefault(require("./Timer.js"));
var _TimerPool = _interopRequireDefault(require("./TimerPool.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const TimerPool = new _TimerPool.default();
class Timeline extends _Clock.default {
  constructor(parent, config) {
    super(parent, config);
    this.addedTimers = [];
    this.timers = [];
    this.timerPool = GetValue(config, 'pool', TimerPool);
  }
  shutdown() {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }
    this.timerPool.freeMultiple(this.addedTimers).freeMultiple(this.timers);
    this.timerPool = undefined;
    this.addedTimers = undefined;
    this.timers = undefined;
    super.shutdown();
  }
  addTimer(config) {
    var timer = this.timerPool.allocate();
    if (!timer) {
      timer = new _Timer.default(this, config);
    } else {
      timer.setTimeline(this).reset(config);
    }
    this.addedTimers.push(timer);
    timer.runCallback(timer.onStart);
    if (!this.isRunning) {
      this.start();
    }
    return timer;
  }
  delayCall(delay, callback, args, scope) {
    var timer = this.addTimer({
      duration: delay,
      onComplete: function (target, t, timer) {
        if (args === undefined) {
          args = [];
        }
        args.push(timer);
        callback.apply(scope, args);
      }
    });
    return timer;
  }
  getTimers(name) {
    var timers = [];
    var timerQueues = [this.addedTimers, this.timers];
    for (var ti = 0, tcnt = timerQueues.length; ti < tcnt; ti++) {
      var timerQueue = timerQueues[ti];
      for (var i = 0, cnt = timerQueue.length; i < cnt; i++) {
        var timer = timerQueue[i];
        if (timer.name === name) {
          timers.push(timer);
        }
      }
    }
    return timers;
  }
  update(time, delta) {
    super.update(time, delta);
    if (!this.isRunning) {
      return;
    }
    this.timers.push(...this.addedTimers);
    this.addedTimers.length = 0;
    var pendingTimers = [];
    for (var i = 0, cnt = this.timers.length; i < cnt; i++) {
      var timer = this.timers[i];
      var isStopped = timer.update(this.now, this.delta);
      if (isStopped) {
        this.timerPool.free(timer); // Free timer
      } else {
        pendingTimers.push(timer); // Add to timer queue
      }
    }

    this.timers = pendingTimers;
    if (this.timers.length === 0 && this.addedTimers.length === 0) {
      this.complete(); // Emit 'complete' event
    }
  }
}
var _default = Timeline;
exports.default = _default;
},{"../clock/Clock.js":"node_modules/phaser3-rex-plugins/plugins/time/clock/Clock.js","./Timer.js":"node_modules/phaser3-rex-plugins/plugins/time/progresses/Timer.js","./TimerPool.js":"node_modules/phaser3-rex-plugins/plugins/time/progresses/TimerPool.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/managers/InitManagers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SoundManager = _interopRequireDefault(require("../audio/soundmanager/SoundManager.js"));
var _Timeline = _interopRequireDefault(require("../../time/progresses/Timeline.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var InitManagers = function (scene, config) {
  var soundManagerConfig = GetValue(config, 'sounds');
  if (soundManagerConfig !== false) {
    this.soundManager = new _SoundManager.default(scene, soundManagerConfig);
  }
  this.gameObjectManagers = {};
  this.timeline = new _Timeline.default(this);
  this.managersScene = scene;
  return this;
};
var _default = InitManagers;
exports.default = _default;
},{"../audio/soundmanager/SoundManager.js":"node_modules/phaser3-rex-plugins/plugins/utils/audio/soundmanager/SoundManager.js","../../time/progresses/Timeline.js":"node_modules/phaser3-rex-plugins/plugins/time/progresses/Timeline.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/managers/SetTimeScale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetTimeScale = function (value) {
  this.timeline.timeScale = value;
  for (var name in this.gameObjectManagers) {
    this.gameObjectManagers[name].setTimeScale(value);
  }
  return this;
};
var _default = SetTimeScale;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/managers/GetTimeScale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetTimeScale = function () {
  return this.timeline.timeScale;
};
var _default = GetTimeScale;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/managers/DestroyManagers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var DestroyManagers = function (fromScene) {
  if (this.soundManager) {
    this.soundManager.destroy();
  }
  this.soundManager = undefined;
  for (var name in this.gameObjectManagers) {
    this.gameObjectManagers[name].destroy(fromScene);
    delete this.gameObjectManagers[name];
  }
  if (this.timeline) {
    this.timeline.destroy();
  }
  this.timeline = undefined;
  this.managersScene = undefined;
};
var _default = DestroyManagers;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/bobbase/PropertyMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  hasProperty(property) {
    var gameObject = this.gameObject;
    if (gameObject.hasOwnProperty(property)) {
      return true;
    } else {
      var value = gameObject[property];
      return value !== undefined;
    }
  },
  getProperty(property) {
    return this.gameObject[property];
  },
  setProperty(property, value) {
    this.gameObject[property] = value;
    return this;
  },
  easeProperty(property, value, duration, ease, repeat, isYoyo, onComplete) {
    var tweenTasks = this.tweens;
    var tweenTask = tweenTasks[property];
    if (tweenTask) {
      tweenTask.remove();
    }
    var gameObject = this.gameObject;
    var config = {
      targets: gameObject,
      duration: duration,
      ease: ease,
      repeat: repeat,
      yoyo: isYoyo,
      onComplete: function () {
        tweenTasks[property].remove();
        tweenTasks[property] = null;
        if (onComplete) {
          onComplete(gameObject, property);
        }
      },
      onCompleteScope: this
    };
    config[property] = value;
    tweenTask = this.scene.tweens.add(config);
    tweenTask.timeScale = this.timeScale;
    tweenTasks[property] = tweenTask;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/bobbase/CallMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  hasMethod(methodName) {
    return typeof this.gameObject[methodName] === 'function';
  },
  call(methodName, ...parameters) {
    if (!this.hasMethod(methodName)) {
      return this;
    }
    var gameObject = this.gameObject;
    gameObject[methodName].apply(gameObject, parameters);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/bobbase/DataMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  hasData(dataKey) {
    var gameObject = this.gameObject;
    return gameObject.data ? gameObject.data.has(dataKey) : false;
  },
  getData(dataKey) {
    return this.gameObject.getData(dataKey);
  },
  setData(dataKey, value) {
    this.gameObject.setData(dataKey, value);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/bobbase/BobBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PropertyMethods = _interopRequireDefault(require("./PropertyMethods.js"));
var _CallMethods = _interopRequireDefault(require("./CallMethods.js"));
var _DataMethods = _interopRequireDefault(require("./DataMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class BobBase {
  constructor(GOManager, gameObject, name) {
    this.GOManager = GOManager;
    this.tweens = {};
    this.setGO(gameObject, name);
  }
  get scene() {
    return this.GOManager.scene;
  }
  get timeScale() {
    return this.GOManager.timeScale;
  }
  destroy() {
    this.freeGO();
    this.GOManager = undefined;
  }
  freeTweens() {
    var tweenTasks = this.tweens,
      tweenTask;
    for (var propName in tweenTasks) {
      tweenTask = tweenTasks[propName];
      if (tweenTask) {
        tweenTask.remove();
      }
      tweenTasks[propName] = null;
    }
    return this;
  }
  freeGO() {
    this.freeTweens();
    this.gameObject.destroy();
    this.gameObject = undefined;
    return this;
  }
  setGO(gameObject, name) {
    gameObject.setName(name);
    this.gameObject = gameObject;
    this.name = name;
    this.freeTweens();
    return this;
  }
  setTimeScale(timeScale) {
    var tweenTasks = this.tweens;
    for (var key in tweenTasks) {
      var tweenTask = tweenTasks[key];
      if (tweenTask) {
        tweenTask.timeScale = timeScale;
      }
    }
    return this;
  }
}
Object.assign(BobBase.prototype, _PropertyMethods.default, _CallMethods.default, _DataMethods.default);
var _default = BobBase;
exports.default = _default;
},{"./PropertyMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/bobbase/PropertyMethods.js","./CallMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/bobbase/CallMethods.js","./DataMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/bobbase/DataMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/object/IsEmpty.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var IsEmpty = function (source) {
  for (var k in source) {
    return false;
  }
  return true;
};
var _default = IsEmpty;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/FadeMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const FadeMode = {
  tint: 0,
  alpha: 1
};
var _default = {
  setGOFadeMode(fadeMode) {
    if (typeof fadeMode === 'string') {
      fadeMode = FadeMode[fadeMode];
    }
    this.fadeMode = fadeMode;
    return this;
  },
  setGOFadeTime(time) {
    this.fadeTime = time;
    return this;
  },
  hasTintFadeEffect(gameObject) {
    return (this.fadeMode === undefined || this.fadeMode === 0) && this.fadeTime > 0 && gameObject.setTint !== undefined;
  },
  hasAlphaFadeEffect(gameObject) {
    return (this.fadeMode === undefined || this.fadeMode === 1) && this.fadeTime > 0 && gameObject.setAlpha !== undefined;
  },
  fadeBob(bob, fromValue, toValue, onComplete) {
    var gameObject = bob.gameObject;
    if (this.hasTintFadeEffect(gameObject)) {
      if (fromValue !== undefined) {
        bob.setProperty('tintGray', 255 * fromValue);
      }
      bob.easeProperty('tintGray',
      // property
      Math.floor(255 * toValue),
      // to value
      this.fadeTime,
      // duration
      'Linear',
      // ease
      0,
      // repeat
      false,
      // yoyo
      onComplete // onComplete
      );
    } else if (this.hasAlphaFadeEffect(gameObject)) {
      if (fromValue !== undefined) {
        bob.setProperty('alpha', fromValue);
      }
      bob.easeProperty('alpha',
      // property
      toValue,
      // to value
      this.fadeTime,
      // duration
      'Linear',
      // ease
      0,
      // repeat
      false,
      // yoyo
      onComplete // onComplete
      );
    } else {
      if (onComplete) {
        onComplete(gameObject);
      }
    }
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/color/GetRGB.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GetR = exports.GetG = exports.GetB = void 0;
var GetR = function (colorInt) {
  return colorInt >> 16 & 0xff;
};
exports.GetR = GetR;
var GetG = function (colorInt) {
  return colorInt >> 8 & 0xff;
};
exports.GetG = GetG;
var GetB = function (colorInt) {
  return colorInt & 0xff;
};
exports.GetB = GetB;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/color/SetColor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SetRGB = exports.SetR = exports.SetG = exports.SetB = void 0;
const MaskR = ~(0xff << 16) & 0xffffff;
const MaskG = ~(0xff << 8) & 0xffffff;
const MaskB = ~0xff & 0xffffff;
var SetR = function (colorInt, r) {
  return (r & 0xff) << 16 | colorInt & MaskR;
};
exports.SetR = SetR;
var SetG = function (colorInt, g) {
  return (g & 0xff) << 8 | colorInt & MaskG;
};
exports.SetG = SetG;
var SetB = function (colorInt, b) {
  return b & 0xff | colorInt & MaskB;
};
exports.SetB = SetB;
var SetRGB = function (colorInt, r, g, b) {
  return (r & 0xff) << 16 | (g & 0xff) << 8 | b & 0xff;
};
exports.SetRGB = SetRGB;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/tintrgb/AddTintRGBProperties.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetRGB = require("../../utils/color/GetRGB.js");
var _SetColor = require("../../utils/color/SetColor.js");
var AddTintRGBProperties = function (gameObject, tintRGB) {
  // Don't attach properties again
  if (gameObject.hasOwnProperty('tintR')) {
    return gameObject;
  }
  if (tintRGB === undefined) {
    tintRGB = 0xffffff;
  }
  var tintR = (0, _GetRGB.GetR)(tintRGB);
  var tintG = (0, _GetRGB.GetG)(tintRGB);
  var tintB = (0, _GetRGB.GetB)(tintRGB);

  // Override tint property
  Object.defineProperty(gameObject, 'tint', {
    get: function () {
      return tintRGB;
    },
    set: function (value) {
      value = Math.floor(value) & 0xffffff;
      if (gameObject.setTint) {
        gameObject.setTint(value);
      }
      if (tintRGB !== value) {
        tintRGB = value;
        tintR = (0, _GetRGB.GetR)(tintRGB);
        tintG = (0, _GetRGB.GetG)(tintRGB);
        tintB = (0, _GetRGB.GetB)(tintRGB);
        // gameObject.emit('_tintchange', value, tintR, tintG, tintB);
      }
    }
  });

  Object.defineProperty(gameObject, 'tintR', {
    get: function () {
      return tintR;
    },
    set: function (value) {
      value = Math.floor(value) & 0xff;
      if (tintR !== value) {
        tintR = value;
        gameObject.tint = (0, _SetColor.SetR)(tintRGB, value);
      }
    }
  });
  Object.defineProperty(gameObject, 'tintG', {
    get: function () {
      return tintG;
    },
    set: function (value) {
      value = Math.floor(value) & 0xff;
      if (tintG !== value) {
        tintG = value;
        gameObject.tint = (0, _SetColor.SetG)(tintRGB, value);
      }
    }
  });
  Object.defineProperty(gameObject, 'tintB', {
    get: function () {
      return tintB;
    },
    set: function (value) {
      value = Math.floor(value) & 0xff;
      if (tintB !== value) {
        tintB = value;
        gameObject.tint = (0, _SetColor.SetB)(tintRGB, value);
      }
    }
  });
  Object.defineProperty(gameObject, 'tintGray', {
    get: function () {
      return Math.floor((tintR + tintG + tintB) / 3);
    },
    set: function (value) {
      value = Math.floor(value) & 0xff;
      if (tintR !== value || tintG !== value || tintB !== value) {
        tintR = value;
        tintG = value;
        tintB = value;
        gameObject.tint = (0, _SetColor.SetRGB)(tintRGB, value, value, value);
      }
    }
  });
  gameObject.tint = tintRGB;
  return gameObject;
};
var _default = AddTintRGBProperties;
exports.default = _default;
},{"../../utils/color/GetRGB.js":"node_modules/phaser3-rex-plugins/plugins/utils/color/GetRGB.js","../../utils/color/SetColor.js":"node_modules/phaser3-rex-plugins/plugins/utils/color/SetColor.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/viewportcoordinate/MonitorViewport.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const EventEmitter = Phaser.Events.EventEmitter;
var MonitorViewport = function (viewport) {
  if (viewport.events) {
    return viewport;
  }
  var events = new EventEmitter();
  var x = viewport.x;
  Object.defineProperty(viewport, 'x', {
    get: function () {
      return x;
    },
    set: function (value) {
      if (x !== value) {
        x = value;
        events.emit('update', viewport);
      }
    }
  });
  var y = viewport.y;
  Object.defineProperty(viewport, 'y', {
    get: function () {
      return y;
    },
    set: function (value) {
      if (y !== value) {
        y = value;
        events.emit('update', viewport);
      }
    }
  });
  var width = viewport.width;
  Object.defineProperty(viewport, 'width', {
    get: function () {
      return width;
    },
    set: function (value) {
      if (width !== value) {
        width = value;
        events.emit('update', viewport);
      }
    }
  });
  var height = viewport.height;
  Object.defineProperty(viewport, 'height', {
    get: function () {
      return height;
    },
    set: function (value) {
      if (height !== value) {
        height = value;
        events.emit('update', viewport);
      }
    }
  });
  viewport.events = events;
  return viewport;
};
var _default = MonitorViewport;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/viewportcoordinate/VPXYToXY.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var VPXYToXY = function (vpx, vpy, vpxOffset, vpyOffset, viewport, out) {
  if (out === undefined) {
    out = {};
  } else if (out === true) {
    out = GlobXY;
  }
  if (typeof vpxOffset !== 'number') {
    vpxOffset = 0;
    vpyOffset = 0;
  }
  out.x = viewport.x + viewport.width * vpx + vpxOffset;
  out.y = viewport.y + viewport.height * vpy + vpyOffset;
  return out;
};
var GlobXY = {};
var _default = VPXYToXY;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/viewportcoordinate/AddViewportCoordinateProperties.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MonitorViewport = _interopRequireDefault(require("./MonitorViewport.js"));
var _VPXYToXY = _interopRequireDefault(require("./VPXYToXY.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var AddViewportCoordinateProperties = function (gameObject, viewport, vpx, vpy, vpxOffset, vpyOffset, transformCallback) {
  // Don't attach properties again
  if (gameObject.hasOwnProperty('vp')) {
    return gameObject;
  }
  if (typeof vpx === 'function') {
    transformCallback = vpx;
    vpx = undefined;
  }
  if (typeof vpxOffset === 'function') {
    transformCallback = vpxOffset;
    vpxOffset = undefined;
  }
  if (vpx === undefined) {
    vpx = 0.5;
  }
  if (vpy === undefined) {
    vpy = 0.5;
  }
  if (vpxOffset === undefined) {
    vpxOffset = 0;
  }
  if (vpyOffset === undefined) {
    vpyOffset = 0;
  }
  if (transformCallback === undefined) {
    transformCallback = _VPXYToXY.default;
  }
  (0, _MonitorViewport.default)(viewport);
  var events = viewport.events;
  gameObject.vp = viewport;

  // Set position of game object when view-port changed.
  var Transform = function () {
    transformCallback(vpx, vpy, vpxOffset, vpyOffset, viewport, gameObject);
  };
  events.on('update', Transform);
  gameObject.once('destroy', function () {
    events.off('update', Transform);
    gameObject.vp = undefined;
  });
  Object.defineProperty(gameObject, 'vpx', {
    get: function () {
      return vpx;
    },
    set: function (value) {
      if (vpx !== value) {
        vpx = value;
        Transform();
      }
    }
  });
  Object.defineProperty(gameObject, 'vpy', {
    get: function () {
      return vpy;
    },
    set: function (value) {
      if (vpy !== value) {
        vpy = value;
        Transform();
      }
    }
  });
  Object.defineProperty(gameObject, 'vpxOffset', {
    get: function () {
      return vpxOffset;
    },
    set: function (value) {
      if (vpxOffset !== value) {
        vpxOffset = value;
        Transform();
      }
    }
  });
  Object.defineProperty(gameObject, 'vpyOffset', {
    get: function () {
      return vpyOffset;
    },
    set: function (value) {
      if (vpyOffset !== value) {
        vpyOffset = value;
        Transform();
      }
    }
  });
  Transform();
};
var _default = AddViewportCoordinateProperties;
exports.default = _default;
},{"./MonitorViewport.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/viewportcoordinate/MonitorViewport.js","./VPXYToXY.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/viewportcoordinate/VPXYToXY.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/AddMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddTintRGBProperties = _interopRequireDefault(require("../../../../behaviors/tintrgb/AddTintRGBProperties.js"));
var _AddViewportCoordinateProperties = _interopRequireDefault(require("../../../../behaviors/viewportcoordinate/AddViewportCoordinateProperties.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const RemoveItem = Phaser.Utils.Array.Remove;
var _default = {
  has(name) {
    return this.bobs.hasOwnProperty(name);
  },
  exists(name) {
    return this.bobs.hasOwnProperty(name);
  },
  get(name) {
    return this.bobs[name];
  },
  getGO(name) {
    var bob = this.get(name);
    return bob ? bob.gameObject : null;
  },
  addGO(name, gameObject) {
    this.remove(name, true);
    if (this.hasTintFadeEffect(gameObject)) {
      (0, _AddTintRGBProperties.default)(gameObject);
    }
    if (this.viewportCoordinateEnable) {
      (0, _AddViewportCoordinateProperties.default)(gameObject, this.viewport);
    }
    gameObject.once('destroy', function () {
      RemoveItem(this.removedGOs, gameObject);
      if (this.isEmpty) {
        this.emit('empty');
      }
    }, this);
    var bob = new this.BobClass(this, gameObject, name);
    this.bobs[name] = bob;
    return this;
  },
  add(name, ...args) {
    var callback = this.createGameObjectCallback;
    var scope = this.createGameObjectScope;
    var gameObject = callback.call(scope, this.scene, ...args);
    this.addGO(name, gameObject);
    var bob = this.get(name);
    this.fadeBob(bob, 0, 1);
    return this;
  },
  forEachGO(callback, scope) {
    for (var name in this.bobs) {
      var gameObject = this.bobs[name].gameObject;
      var stopLoop;
      if (scope) {
        stopLoop = callback.call(scope, gameObject, name, this);
      } else {
        stopLoop = callback(gameObject, name, this);
      }
      if (stopLoop) {
        break;
      }
    }
    return this;
  }
};
exports.default = _default;
},{"../../../../behaviors/tintrgb/AddTintRGBProperties.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/tintrgb/AddTintRGBProperties.js","../../../../behaviors/viewportcoordinate/AddViewportCoordinateProperties.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/viewportcoordinate/AddViewportCoordinateProperties.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/RemoveMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  remove(name, ignoreFade) {
    if (!this.has(name)) {
      return this;
    }
    var bob = this.get(name);
    delete this.bobs[name];
    this.removedGOs.push(bob.gameObject);
    if (!ignoreFade) {
      this.fadeBob(bob,
      // bob
      undefined,
      // fromValue
      0,
      // toValue
      function () {
        // onComplete
        bob.destroy();
      });
    } else {
      bob.destroy();
    }
    return this;
  },
  removeAll() {
    var bobs = this.bobs;
    for (var name in bobs) {
      this.remove(name);
    }
    return this;
  },
  clear(destroyChild) {
    if (destroyChild === undefined) {
      destroyChild = true;
    }
    var bobs = this.bobs;
    for (var name in bobs) {
      if (destroyChild) {
        bobs[name].destroy();
      }
      delete bobs[name];
    }
    this.removedGOs.length = 0;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/PropertyMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  hasProperty(name, property) {
    if (!this.has(name)) {
      return false;
    }
    return this.get(name).hasProperty(property);
  },
  getProperty(name, property) {
    if (!this.has(name)) {
      return undefined;
    }
    return this.get(name).getProperty(property);
  },
  isNumberProperty(name, property) {
    var value = this.getProperty(name, property);
    return typeof value === 'number';
  },
  setProperty(name, property, value) {
    if (!this.has(name)) {
      return this;
    }
    if (this.symbols && typeof value === 'string' && this.isNumberProperty(name, property)) {
      if (value in this.symbols) {
        value = this.symbols[value];
      } else {
        console.warn(`Can't find symbol ${value}`);
      }
    }
    this.get(name).setProperty(property, value);
    return this;
  },
  easeProperty(name, property, value, duration, ease, repeat, isYoyo, onComplete) {
    if (!this.has(name)) {
      return this;
    }
    if (duration === undefined) {
      duration = 1000;
    }
    if (ease === undefined) {
      ease = 'Linear';
    }
    if (repeat === undefined) {
      repeat = 0;
    }
    if (isYoyo === undefined) {
      isYoyo = false;
    }
    if (this.symbols && typeof value === 'string' && this.isNumberProperty(name, property)) {
      if (value in this.symbols) {
        value = this.symbols[value];
      } else {
        console.warn(`Can't find symbol ${value}`);
      }
    }
    this.get(name).easeProperty(property, value, duration, ease, repeat, isYoyo, onComplete);
    return this;
  },
  hasTweenTask(name, property) {
    if (!this.has(name)) {
      return false;
    }
    var tweenTasks = this.get(name).tweens;
    return tweenTasks.hasOwnProperty(property);
  },
  getTweenTask(name, property) {
    if (!this.has(name)) {
      return null;
    }
    var tweenTasks = this.get(name).tweens;
    var tweenTask = tweenTasks[property];
    return tweenTask ? tweenTask : null;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/CallMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  hasMethod(name, methodName) {
    if (!this.has(name)) {
      return false;
    }
    return this.get(name).hasMethod(methodName);
  },
  call(name, methodName, ...parameters) {
    if (!this.has(name)) {
      return this;
    }
    this.get(name).call(methodName, ...parameters);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/DataMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  hasData(name, dataKey) {
    if (!this.has(name)) {
      return false;
    }
    return this.get(name).hasData(dataKey);
  },
  getData(name, dataKey) {
    if (!this.has(name)) {
      return undefined;
    }
    return this.get(name).getData(dataKey);
  },
  setData(name, dataKey, value) {
    if (!this.has(name)) {
      return this;
    }
    this.get(name).setData(dataKey, value);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GetDisplayWidth = exports.GetDisplayHeight = void 0;
var GetDisplayWidth = function (gameObject) {
  if (gameObject.displayWidth !== undefined) {
    return gameObject.displayWidth;
  } else {
    return gameObject.width;
  }
};
exports.GetDisplayWidth = GetDisplayWidth;
var GetDisplayHeight = function (gameObject) {
  if (gameObject.displayHeight !== undefined) {
    return gameObject.displayHeight;
  } else {
    return gameObject.height;
  }
};
exports.GetDisplayHeight = GetDisplayHeight;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/bounds/GetBounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GetTopRight = exports.GetTopLeft = exports.GetBounds = exports.GetBottomRight = exports.GetBottomLeft = void 0;
var _GetDisplaySize = require("../size/GetDisplaySize.js");
const Rectangle = Phaser.Geom.Rectangle;
const Vector2 = Phaser.Math.Vector2;
const RotateAround = Phaser.Math.RotateAround;
var GetBounds = function (gameObject, output) {
  if (output === undefined) {
    output = new Rectangle();
  } else if (output === true) {
    if (GlobRect === undefined) {
      GlobRect = new Rectangle();
    }
    output = GlobRect;
  }
  if (gameObject.getBounds) {
    return gameObject.getBounds(output);
  }

  //  We can use the output object to temporarily store the x/y coords in:

  var TLx, TLy, TRx, TRy, BLx, BLy, BRx, BRy;

  // Instead of doing a check if parent container is
  // defined per corner we only do it once.
  if (gameObject.parentContainer) {
    var parentMatrix = gameObject.parentContainer.getBoundsTransformMatrix();
    GetTopLeft(gameObject, output);
    parentMatrix.transformPoint(output.x, output.y, output);
    TLx = output.x;
    TLy = output.y;
    GetTopRight(gameObject, output);
    parentMatrix.transformPoint(output.x, output.y, output);
    TRx = output.x;
    TRy = output.y;
    GetBottomLeft(gameObject, output);
    ;
    parentMatrix.transformPoint(output.x, output.y, output);
    BLx = output.x;
    BLy = output.y;
    GetBottomRight(gameObject, output);
    parentMatrix.transformPoint(output.x, output.y, output);
    BRx = output.x;
    BRy = output.y;
  } else {
    GetTopLeft(gameObject, output);
    TLx = output.x;
    TLy = output.y;
    GetTopRight(gameObject, output);
    ;
    TRx = output.x;
    TRy = output.y;
    GetBottomLeft(gameObject, output);
    ;
    BLx = output.x;
    BLy = output.y;
    GetBottomRight(gameObject, output);
    BRx = output.x;
    BRy = output.y;
  }
  output.x = Math.min(TLx, TRx, BLx, BRx);
  output.y = Math.min(TLy, TRy, BLy, BRy);
  output.width = Math.max(TLx, TRx, BLx, BRx) - output.x;
  output.height = Math.max(TLy, TRy, BLy, BRy) - output.y;
  return output;
};
exports.GetBounds = GetBounds;
var GlobRect = undefined;
var GetTopLeft = function (gameObject, output, includeParent) {
  if (output === undefined) {
    output = new Vector2();
  } else if (output === true) {
    if (GlobVector === undefined) {
      GlobVector = new Vector2();
    }
    output = GlobVector;
  }
  if (gameObject.getTopLeft) {
    return gameObject.getTopLeft(output);
  }
  output.x = gameObject.x - (0, _GetDisplaySize.GetDisplayWidth)(gameObject) * gameObject.originX;
  output.y = gameObject.y - (0, _GetDisplaySize.GetDisplayHeight)(gameObject) * gameObject.originY;
  return PrepareBoundsOutput(gameObject, output, includeParent);
};
exports.GetTopLeft = GetTopLeft;
var GetTopRight = function (gameObject, output, includeParent) {
  if (output === undefined) {
    output = new Vector2();
  } else if (output === true) {
    if (GlobVector === undefined) {
      GlobVector = new Vector2();
    }
    output = GlobVector;
  }
  if (gameObject.getTopRight) {
    return gameObject.getTopRight(output);
  }
  output.x = gameObject.x - (0, _GetDisplaySize.GetDisplayWidth)(gameObject) * gameObject.originX + (0, _GetDisplaySize.GetDisplayWidth)(gameObject);
  output.y = gameObject.y - (0, _GetDisplaySize.GetDisplayHeight)(gameObject) * gameObject.originY;
  return PrepareBoundsOutput(gameObject, output, includeParent);
};
exports.GetTopRight = GetTopRight;
var GetBottomLeft = function (gameObject, output, includeParent) {
  if (output === undefined) {
    output = new Vector2();
  } else if (output === true) {
    if (GlobVector === undefined) {
      GlobVector = new Vector2();
    }
    output = GlobVector;
  }
  if (gameObject.getBottomLeft) {
    return gameObject.getBottomLeft(output);
  }
  output.x = gameObject.x - (0, _GetDisplaySize.GetDisplayWidth)(gameObject) * gameObject.originX;
  output.y = gameObject.y - (0, _GetDisplaySize.GetDisplayHeight)(gameObject) * gameObject.originY + (0, _GetDisplaySize.GetDisplayHeight)(gameObject);
  return PrepareBoundsOutput(gameObject, output, includeParent);
};
exports.GetBottomLeft = GetBottomLeft;
var GetBottomRight = function (gameObject, output, includeParent) {
  if (output === undefined) {
    output = new Vector2();
  } else if (output === true) {
    if (GlobVector === undefined) {
      GlobVector = new Vector2();
    }
    output = GlobVector;
  }
  if (gameObject.getBottomRight) {
    return gameObject.getBottomRight(output);
  }
  output.x = gameObject.x - (0, _GetDisplaySize.GetDisplayWidth)(gameObject) * gameObject.originX + (0, _GetDisplaySize.GetDisplayWidth)(gameObject);
  output.y = gameObject.y - (0, _GetDisplaySize.GetDisplayHeight)(gameObject) * gameObject.originY + (0, _GetDisplaySize.GetDisplayHeight)(gameObject);
  return PrepareBoundsOutput(gameObject, output, includeParent);
};
exports.GetBottomRight = GetBottomRight;
var GlobVector = undefined;
var PrepareBoundsOutput = function (gameObject, output, includeParent) {
  if (includeParent === undefined) {
    includeParent = false;
  }
  if (gameObject.rotation !== 0) {
    RotateAround(output, gameObject.x, gameObject.y, gameObject.rotation);
  }
  if (includeParent && gameObject.parentContainer) {
    var parentMatrix = gameObject.parentContainer.getBoundsTransformMatrix();
    parentMatrix.transformPoint(output.x, output.y, output);
  }
  return output;
};
},{"../size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/bounds/DrawBounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetBounds = require("./GetBounds.js");
const GetValue = Phaser.Utils.Objects.GetValue;
var DrawBounds = function (gameObjects, graphics, config) {
  var strokeColor, lineWidth, fillColor, fillAlpha, padding;
  if (typeof config === 'number') {
    strokeColor = config;
  } else {
    strokeColor = GetValue(config, 'color');
    lineWidth = GetValue(config, 'lineWidth');
    fillColor = GetValue(config, 'fillColor');
    fillAlpha = GetValue(config, 'fillAlpha', 1);
    padding = GetValue(config, 'padding', 0);
  }
  if (Array.isArray(gameObjects)) {
    for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
      Draw(gameObjects[i], graphics, strokeColor, lineWidth, fillColor, fillAlpha, padding);
    }
  } else {
    Draw(gameObjects, graphics, strokeColor, lineWidth, fillColor, fillAlpha, padding);
  }
};
var Draw = function (gameObject, graphics, strokeColor, lineWidth, fillColor, fillAlpha, padding) {
  var canDrawBound = gameObject.getBounds || gameObject.width !== undefined && gameObject.height !== undefined;
  if (!canDrawBound) {
    return;
  }
  if (strokeColor === undefined) {
    strokeColor = 0xffffff;
  }
  if (lineWidth === undefined) {
    lineWidth = 1;
  }
  if (fillColor === undefined) {
    fillColor = null;
  }
  ;
  if (fillAlpha === undefined) {
    fillAlpha = 1;
  }
  ;
  if (padding === undefined) {
    padding = 0;
  }
  var p0 = (0, _GetBounds.GetTopLeft)(gameObject, Points[0]);
  p0.x -= padding;
  p0.y -= padding;
  var p1 = (0, _GetBounds.GetTopRight)(gameObject, Points[1]);
  p1.x += padding;
  p1.y -= padding;
  var p2 = (0, _GetBounds.GetBottomRight)(gameObject, Points[2]);
  p2.x += padding;
  p2.y += padding;
  var p3 = (0, _GetBounds.GetBottomLeft)(gameObject, Points[3]);
  p3.x -= padding;
  p3.y += padding;
  if (fillColor !== null) {
    graphics.fillStyle(fillColor, fillAlpha).fillPoints(Points, true, true);
  }
  if (strokeColor !== null) {
    graphics.lineStyle(lineWidth, strokeColor).strokePoints(Points, true, true);
  }
};
var Points = [{
  x: 0,
  y: 0
}, {
  x: 0,
  y: 0
}, {
  x: 0,
  y: 0
}, {
  x: 0,
  y: 0
}];
var _default = DrawBounds;
exports.default = _default;
},{"./GetBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/bounds/GetBounds.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/DrawGameObjectsBounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DrawBounds = _interopRequireDefault(require("../../../bounds/DrawBounds.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DrawGameObjectsBounds = function (graphics, config) {
  this.forEachGO(function (gameObject) {
    if (gameObject.drawBounds) {
      gameObject.drawBounds(graphics, config);
    } else {
      (0, _DrawBounds.default)(gameObject, graphics, config);
    }
  });
  return this;
};
var _default = DrawGameObjectsBounds;
exports.default = _default;
},{"../../../bounds/DrawBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/bounds/DrawBounds.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FadeMethods = _interopRequireDefault(require("./FadeMethods.js"));
var _AddMethods = _interopRequireDefault(require("./AddMethods.js"));
var _RemoveMethods = _interopRequireDefault(require("./RemoveMethods.js"));
var _PropertyMethods = _interopRequireDefault(require("./PropertyMethods.js"));
var _CallMethods = _interopRequireDefault(require("./CallMethods.js"));
var _DataMethods = _interopRequireDefault(require("./DataMethods.js"));
var _DrawGameObjectsBounds = _interopRequireDefault(require("./DrawGameObjectsBounds.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {
  drawGameObjectsBounds: _DrawGameObjectsBounds.default
};
Object.assign(Methods, _FadeMethods.default, _AddMethods.default, _RemoveMethods.default, _PropertyMethods.default, _CallMethods.default, _DataMethods.default);
var _default = Methods;
exports.default = _default;
},{"./FadeMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/FadeMethods.js","./AddMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/AddMethods.js","./RemoveMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/RemoveMethods.js","./PropertyMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/PropertyMethods.js","./CallMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/CallMethods.js","./DataMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/DataMethods.js","./DrawGameObjectsBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/DrawGameObjectsBounds.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/system/IsCameraObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const CameraClass = Phaser.Cameras.Scene2D.BaseCamera;
var IsCameraObject = function (object) {
  return object instanceof CameraClass;
};
var _default = IsCameraObject;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/system/GetViewport.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsCameraObject = _interopRequireDefault(require("./IsCameraObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Rectangle = Phaser.Geom.Rectangle;
var GetViewport = function (scene, camera, out) {
  if (!(0, _IsCameraObject.default)(camera)) {
    out = camera;
    camera = undefined;
  }
  if (out === undefined) {
    out = new Rectangle();
  } else if (out === true) {
    out = globRect;
  }
  var scaleManager = scene.sys.scale;
  var baseSize = scaleManager.baseSize;
  var parentSize = scaleManager.parentSize;
  var canvasBounds = scaleManager.canvasBounds;
  var displayScale = scaleManager.displayScale;
  var x = canvasBounds.x >= 0 ? 0 : -(canvasBounds.x * displayScale.x);
  var y = canvasBounds.y >= 0 ? 0 : -(canvasBounds.y * displayScale.y);
  var width;
  if (parentSize.width >= canvasBounds.width) {
    width = baseSize.width;
  } else {
    width = baseSize.width - (canvasBounds.width - parentSize.width) * displayScale.x;
  }
  var height;
  if (parentSize.height >= canvasBounds.height) {
    height = baseSize.height;
  } else {
    height = baseSize.height - (canvasBounds.height - parentSize.height) * displayScale.y;
  }
  out.setTo(x, y, width, height);
  if (camera) {
    out.width /= camera.zoomX;
    out.height /= camera.zoomY;
    out.centerX = camera.centerX + camera.scrollX;
    out.centerY = camera.centerY + camera.scrollY;
  }
  return out;
};
var globRect = new Rectangle();
var _default = GetViewport;
exports.default = _default;
},{"./IsCameraObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsCameraObject.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/GOManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EventEmitterMethods = _interopRequireDefault(require("../../eventemitter/EventEmitterMethods.js"));
var _BobBase = _interopRequireDefault(require("./bobbase/BobBase.js"));
var _IsEmpty = _interopRequireDefault(require("../../object/IsEmpty.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
var _GetViewport = _interopRequireDefault(require("../../system/GetViewport.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class GOManager {
  constructor(scene, config) {
    this.scene = scene;
    this.BobClass = GetValue(config, 'BobClass', _BobBase.default);
    this.setCreateGameObjectCallback(GetValue(config, 'createGameObject'), GetValue(config, 'createGameObjectScope'));
    this.setEventEmitter(GetValue(config, 'eventEmitter', undefined));
    var fadeConfig = GetValue(config, 'fade', 500);
    if (typeof fadeConfig === 'number') {
      this.setGOFadeMode();
      this.setGOFadeTime(fadeConfig);
    } else {
      this.setGOFadeMode(GetValue(fadeConfig, 'mode'));
      this.setGOFadeTime(GetValue(fadeConfig, 'time', 500));
    }
    var viewportCoordinateConfig = GetValue(config, 'viewportCoordinate', false);
    if (viewportCoordinateConfig !== false) {
      this.setViewportCoordinateEnable(GetValue(config, 'enable', true));
      this.setViewport(GetValue(viewportCoordinateConfig, 'viewport'));
    } else {
      this.setViewportCoordinateEnable(false);
    }
    this.setSymbols(GetValue(config, 'symbols'));
    this.bobs = {};
    this.removedGOs = [];
    this._timeScale = 1;
  }
  destroy(fromScene) {
    this.clear(!fromScene);
    this.createGameObjectCallback = undefined;
    this.viewport = undefined;
    this.scene = undefined;
  }
  set timeScale(timeScale) {
    if (this._timeScale === timeScale) {
      return;
    }
    this._timeScale = timeScale;
    var bobs = this.bobs;
    for (var name in bobs) {
      bobs[name].setTimeScale(timeScale);
    }
  }
  get timeScale() {
    return this._timeScale;
  }
  setTimeScale(timeScale) {
    this.timeScale = timeScale;
    return this;
  }
  setCreateGameObjectCallback(callback, scope) {
    this.createGameObjectCallback = callback;
    this.createGameObjectScope = scope;
    return this;
  }
  setViewportCoordinateEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.viewportCoordinateEnable = enable;
    return this;
  }
  setViewport(viewport) {
    if (viewport === undefined) {
      viewport = (0, _GetViewport.default)(this.scene, this.scene.cameras.main);
    }
    this.viewport = viewport;
    return this;
  }
  setSymbols(symbols) {
    this.symbols = symbols;
    return this;
  }
  get isEmpty() {
    return (0, _IsEmpty.default)(this.bobs) && this.removedGOs.length === 0;
  }
}
Object.assign(GOManager.prototype, _EventEmitterMethods.default, _Methods.default);
var _default = GOManager;
exports.default = _default;
},{"../../eventemitter/EventEmitterMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/eventemitter/EventEmitterMethods.js","./bobbase/BobBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/bobbase/BobBase.js","../../object/IsEmpty.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsEmpty.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/methods/Methods.js","../../system/GetViewport.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetViewport.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/managers/GameObjectManagerMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GOManager = _interopRequireDefault(require("../gameobject/gomanager/GOManager.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  addGameObjectManager(config, GameObjectManagerClass) {
    if (config === undefined) {
      config = {};
    }
    if (GameObjectManagerClass === undefined) {
      GameObjectManagerClass = _GOManager.default;
    }
    if (!config.createGameObjectScope) {
      config.createGameObjectScope = this;
    }
    var gameobjectManager = new GameObjectManagerClass(this.managersScene, config);
    this.gameObjectManagers[config.name] = gameobjectManager;
    return this;
  },
  getGameObjectManager(name) {
    return this.gameObjectManagers[name];
  },
  getGameObjectManagerNames() {
    var names = [];
    for (var name in this.gameObjectManagers) {
      names.push(name);
    }
    return names;
  }
};
exports.default = _default;
},{"../gameobject/gomanager/GOManager.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/GOManager.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/managers/GameObjectMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  createGameObject(goType, name, ...params) {
    this.getGameObjectManager(goType).add(name, ...params);
    return this;
  },
  destroyGameObject(goType, name) {
    var gameObjectManager = this.getGameObjectManager(goType);
    if (name === undefined) {
      gameObjectManager.removeAll();
    } else {
      gameObjectManager.remove(name);
    }
    return this;
  },
  callGameObjectMethod(goType, name, methodName, ...params) {
    this.getGameObjectManager(goType).call(name, methodName, ...params);
    return this;
  },
  setGameObjectProperty(goType, name, prop, value) {
    this.getGameObjectManager(goType).setProperty(name, prop, value);
    return this;
  },
  easeGameObjectProperty(goType, name, prop, value, duration, ease, repeat, isYoyo) {
    this.getGameObjectManager(goType).easeProperty(name, prop, value, duration, ease, repeat, isYoyo);
    return this;
  },
  getGameObject(goType, name, out) {
    var gameobjectManager = this.getGameObjectManager(goType);
    if (typeof name === 'string') {
      return gameobjectManager.getGO(name);
    } else {
      var names = name;
      if (names === undefined) {
        names = gameobjectManager.bobs;
      }
      if (out === undefined) {
        out = {};
      }
      for (name in names) {
        out[name] = gameobjectManager.getGO(name);
      }
      return out;
    }
  },
  addGameObject(goType, name, gameObject) {
    var gameobjectManager = this.getGameObjectManager(goType);
    if (typeof name === 'string') {
      gameobjectManager.addGO(name, gameObject);
    } else {
      var names = name;
      for (name in names) {
        gameobjectManager.addGO(name, names[name]);
      }
    }
    return this;
  },
  drawGameObjectsBounds(goTypes, graphics, config) {
    if (goTypes instanceof Phaser.GameObjects.Graphics) {
      config = graphics;
      graphics = goTypes;
      goTypes = undefined;
    }
    if (goTypes === undefined) {
      goTypes = this.getGameObjectManagerNames();
    }
    if (!Array.isArray(goTypes)) {
      goTypes = [goTypes];
    }
    for (var i = 0, cnt = goTypes.length; i < cnt; i++) {
      this.getGameObjectManager(goTypes[i]).drawGameObjectsBounds(graphics, config);
    }
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/managers/Extend.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InitManagers = _interopRequireDefault(require("./InitManagers.js"));
var _SetTimeScale = _interopRequireDefault(require("./SetTimeScale.js"));
var _GetTimeScale = _interopRequireDefault(require("./GetTimeScale.js"));
var _DestroyManagers = _interopRequireDefault(require("./DestroyManagers.js"));
var _GameObjectManagerMethods = _interopRequireDefault(require("./GameObjectManagerMethods.js"));
var _GameObjectMethods = _interopRequireDefault(require("./GameObjectMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Extend = function (BaseClass) {
  class Managers extends BaseClass {}
  var Methods = {
    initManagers: _InitManagers.default,
    setTimeScale: _SetTimeScale.default,
    getTimeScale: _GetTimeScale.default,
    destroyManagers: _DestroyManagers.default
  };
  Object.assign(Managers.prototype, Methods, _GameObjectManagerMethods.default, _GameObjectMethods.default);
  return Managers;
};
var _default = Extend;
exports.default = _default;
},{"./InitManagers.js":"node_modules/phaser3-rex-plugins/plugins/utils/managers/InitManagers.js","./SetTimeScale.js":"node_modules/phaser3-rex-plugins/plugins/utils/managers/SetTimeScale.js","./GetTimeScale.js":"node_modules/phaser3-rex-plugins/plugins/utils/managers/GetTimeScale.js","./DestroyManagers.js":"node_modules/phaser3-rex-plugins/plugins/utils/managers/DestroyManagers.js","./GameObjectManagerMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/managers/GameObjectManagerMethods.js","./GameObjectMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/managers/GameObjectMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/string/TypeConvert.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var FLOAT = /^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i;
var HEX = /^0x[0-9A-F]+$/i;
var TypeConvert = function (s) {
  if (typeof s !== 'string') {
    return s;
  }
  if (s === '') {
    s = null;
  } else if (FLOAT.test(s)) {
    s = parseFloat(s);
  } else if (HEX.test(s)) {
    s = parseInt(s, 16);
  } else {
    if (s === 'false') {
      s = false;
    } else if (s === 'true') {
      s = true;
    }
  }
  return s;
};
var _default = TypeConvert;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/string/EscapeRegex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// https://github.com/sindresorhus/escape-string-regexp/blob/master/index.js

var EscapeRegex = function (s) {
  return s.replace(re0, '\\$&').replace(re1, '\\x2d');
};
var re0 = /[|\\{}()[\]^$+*?.]/g;
var re1 = /-/g;
var _default = EscapeRegex;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/logic/bracketparser/bracketparserbase/BracketParser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EventEmitterMethods = _interopRequireDefault(require("../../../utils/eventemitter/EventEmitterMethods.js"));
var _GetValue = _interopRequireDefault(require("../../../utils/object/GetValue.js"));
var _TypeConvert = _interopRequireDefault(require("../../../utils/string/TypeConvert.js"));
var _EscapeRegex = _interopRequireDefault(require("../../../utils/string/EscapeRegex.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class BracketParser {
  constructor(config) {
    // Event emitter
    this.setEventEmitter((0, _GetValue.default)(config, 'eventEmitter', undefined));

    // Value convert
    this.setValueConverter((0, _GetValue.default)(config, 'valueConvert', true));
    // Loop
    this.setLoopEnable((0, _GetValue.default)(config, 'loop', false));

    // Brackets and generate regex
    this.setMultipleLinesTagEnable((0, _GetValue.default)(config, 'multipleLinesTag', false));
    var delimiters = (0, _GetValue.default)(config, 'delimiters', '<>');
    this.setDelimiters(delimiters[0], delimiters[1]);

    // Translate tagName callback
    this.setTranslateTagNameCallback((0, _GetValue.default)(config, 'translateTagNameCallback'));
    this.isRunning = false;
    this.isPaused = false;
    this.skipEventFlag = false;
    this.justCompleted = false;
    this.lastTagStart = null;
    this.lastTagEnd = null;
    this.lastContent = null;
  }
  shutdown() {
    this.destroyEventEmitter();
  }
  destroy() {
    this.shutdown();
  }
  setMultipleLinesTagEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.multipleLinesTagEnable = enable;
    return this;
  }

  // Override
  setDelimiters(delimiterLeft, delimiterRight) {
    if (delimiterRight === undefined) {
      delimiterRight = delimiterLeft[1];
      delimiterLeft = delimiterLeft[0];
    }
    this.delimiterLeft = delimiterLeft;
    this.delimiterRight = delimiterRight;
    delimiterLeft = (0, _EscapeRegex.default)(this.delimiterLeft);
    delimiterRight = (0, _EscapeRegex.default)(this.delimiterRight);
    var flag = this.multipleLinesTagEnable ? 'gs' : 'gi';
    this.reSplit = RegExp(`${delimiterLeft}(.+?)${delimiterRight}`, flag);
    return this;
  }
  setTranslateTagNameCallback(callback) {
    this.translateTagNameCallback = callback;
    return this;
  }
  setValueConverter(converter) {
    if (converter === true) {
      converter = _TypeConvert.default;
    } else if (!converter) {
      converter = BypassValueConverter;
    }
    this.valueConverter = converter;
    return this;
  }
  setLoopEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.loopEnable = enable;
    return this;
  }
  setSource(source) {
    this.source = source;
    return this;
  }
  resetIndex(index) {
    if (index === undefined) {
      index = 0;
    }
    this.progressIndex = index;
    this.reSplit.lastIndex = index;
    this.lastTagStart = null;
    this.lastTagEnd = null;
    this.lastContent = null;
    this.justCompleted = false;
    this.isRunning = false;
    return this;
  }
  start(source) {
    this.setSource(source).restart();
    return this;
  }
  restart() {
    this.resetIndex().next();
  }
  next() {
    if (this.isPaused) {
      this.onResume();
    }

    // Don't re-enter this method
    if (this.isRunning) {
      return this;
    }
    this.isRunning = true;
    if (this.justCompleted) {
      this.isRunning = false;
      return this;
    }
    if (this.reSplit.lastIndex === 0) {
      this.onStart();
    }
    var text = this.source,
      lastIndex = text.length;
    this.reSplit.lastIndex = this.progressIndex;
    while (true) {
      var regexResult = this.reSplit.exec(text);
      // No tag found, complete
      if (!regexResult) {
        if (this.progressIndex < lastIndex) {
          this.onContent(text.substring(this.progressIndex, lastIndex));
          // Might pause here
          if (this.isPaused) {
            this.progressIndex = lastIndex;
            break;
          }
        }
        this.onComplete();
        this.isRunning = false;
        return;
      }
      var matchEnd = this.reSplit.lastIndex;
      var matchStart = matchEnd - regexResult[0].length;

      // Process content between previous tag and current tag            
      if (this.progressIndex < matchStart) {
        this.onContent(text.substring(this.progressIndex, matchStart));
        // Might pause here
        if (this.isPaused) {
          this.progressIndex = matchStart;
          break;
        }
      }

      // Process current tag
      this.onTag(regexResult[1]);
      this.progressIndex = matchEnd;
      // Might pause here
      if (this.isPaused) {
        break;
      }
    }
    this.isRunning = false;
    return this;
  }
  skipEvent() {
    this.skipEventFlag = true;
    return this;
  }
  pause() {
    if (!this.isPaused) {
      this.onPause();
    }
    return this;
  }
  pauseUntilEvent(eventEmitter, eventName) {
    if (this.isPaused) {
      return this;
    }
    this.pause();
    eventEmitter.once(eventName, function () {
      this.next();
    }, this);
    return this;
  }
  onContent(content) {
    this.skipEventFlag = false;
    this.emit('content', content);
    this.lastContent = content;
  }

  // Override
  onTag(tagContent) {}
  onStart() {
    this.isRunning = true;
    this.emit('start', this);
  }
  onComplete() {
    this.isRunning = false;
    this.justCompleted = true;
    this.emit('complete', this);
    if (this.loopEnable) {
      this.resetIndex();
    }
  }
  onPause() {
    this.isPaused = true;
    this.emit('pause', this);
  }
  onResume() {
    this.isPaused = false;
    this.emit('resume', this);
  }
}
const BypassValueConverter = function (s) {
  return s;
};
Object.assign(BracketParser.prototype, _EventEmitterMethods.default);
var _default = BracketParser;
exports.default = _default;
},{"../../../utils/eventemitter/EventEmitterMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/eventemitter/EventEmitterMethods.js","../../../utils/object/GetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/GetValue.js","../../../utils/string/TypeConvert.js":"node_modules/phaser3-rex-plugins/plugins/utils/string/TypeConvert.js","../../../utils/string/EscapeRegex.js":"node_modules/phaser3-rex-plugins/plugins/utils/string/EscapeRegex.js"}],"node_modules/phaser3-rex-plugins/plugins/logic/bracketparser/bracketparser/ParseValue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ParseValue = function (text, valueConverter) {
  if (text == null) {
    return [];
  }
  var values = text.split(',');
  for (var i = 0, cnt = values.length; i < cnt; i++) {
    values[i] = valueConverter(values[i]);
  }
  return values;
};
var _default = ParseValue;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/logic/bracketparser/bracketparser/BracketParser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BracketParser = _interopRequireDefault(require("../bracketparserbase/BracketParser.js"));
var _GetValue = _interopRequireDefault(require("../../../utils/object/GetValue.js"));
var _ParseValue = _interopRequireDefault(require("./ParseValue.js"));
var _EscapeRegex = _interopRequireDefault(require("../../../utils/string/EscapeRegex.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class BracketParser extends _BracketParser.default {
  constructor(config) {
    if (config === undefined) {
      config = {};
    }
    if (!config.hasOwnProperty('multipleLinesTag')) {
      config.multipleLinesTag = false;
    }
    super(config);

    // Parameters for regex
    this.setTagExpression((0, _GetValue.default)(config, 'regex.tag', undefined));
    this.setValueExpression((0, _GetValue.default)(config, 'regex.value', undefined));
    // Brackets and generate regex
    var delimiters = (0, _GetValue.default)(config, 'delimiters', '<>');
    this.setDelimiters(delimiters[0], delimiters[1]);
  }
  setTagExpression(express) {
    if (!express) {
      express = DefaultTokenExpression;
    }
    this.tagExpression = express;
    return this;
  }
  setValueExpression(express) {
    if (!express) {
      express = DefaultTokenExpression;
    }
    this.valueExpression = express;
    return this;
  }
  setDelimiters(delimiterLeft, delimiterRight) {
    super.setDelimiters(delimiterLeft, delimiterRight);
    var tag = `(${this.tagExpression})(=(${this.valueExpression}))?`;
    this.reTag = RegExp(tag, 'i');
    if (this.tagExpression !== DefaultTokenExpression || this.valueExpression !== DefaultTokenExpression) {
      var startTagExpression = `${this.tagExpression}(=${this.valueExpression})?`;
      var endTagExpression = `/${this.tagExpression}`;
      delimiterLeft = (0, _EscapeRegex.default)(this.delimiterLeft);
      delimiterRight = (0, _EscapeRegex.default)(this.delimiterRight);
      var flag = this.multipleLinesTagEnable ? 'gs' : 'gi';
      this.reSplit = RegExp(`${delimiterLeft}((${startTagExpression})|(${endTagExpression}))${delimiterRight}`, flag);
    }
    return this;
  }
  onTag(tagContent) {
    var regexResult = tagContent.match(this.reTag);
    var tagName = regexResult[1];
    var isEndTag = tagName.charAt(0) === '/';
    if (isEndTag) {
      tagName = tagName.substring(1, tagName.length);
    }
    if (this.translateTagNameCallback) {
      tagName = this.translateTagNameCallback(tagName);
    }
    this.skipEventFlag = false;
    if (!isEndTag) {
      var values = (0, _ParseValue.default)(regexResult[3], this.valueConverter);
      this.emit(`+${tagName}`, ...values);
      if (!this.skipEventFlag) {
        this.emit('+', tagName, ...values);
      }
      this.lastTagStart = tagName;
    } else {
      this.emit(`-${tagName}`);
      if (!this.skipEventFlag) {
        this.emit('-', tagName);
      }
      this.lastTagEnd = tagName;
    }
  }
}
const DefaultTokenExpression = `[^=]+`;
var _default = BracketParser;
exports.default = _default;
},{"../bracketparserbase/BracketParser.js":"node_modules/phaser3-rex-plugins/plugins/logic/bracketparser/bracketparserbase/BracketParser.js","../../../utils/object/GetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/GetValue.js","./ParseValue.js":"node_modules/phaser3-rex-plugins/plugins/logic/bracketparser/bracketparser/ParseValue.js","../../../utils/string/EscapeRegex.js":"node_modules/phaser3-rex-plugins/plugins/utils/string/EscapeRegex.js"}],"node_modules/phaser3-rex-plugins/plugins/bracketparser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BracketParser = _interopRequireDefault(require("./logic/bracketparser/bracketparser/BracketParser.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _BracketParser.default;
exports.default = _default;
},{"./logic/bracketparser/bracketparser/BracketParser.js":"node_modules/phaser3-rex-plugins/plugins/logic/bracketparser/bracketparser/BracketParser.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseColorTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnParseColorTag = function (textPlayer, parser, config) {
  var tagName = 'color';
  var defaultColor;
  parser.on('start', function () {
    defaultColor = textPlayer.textStyle.color;
  }).on(`+${tagName}`, function (color) {
    textPlayer.textStyle.setColor(color);
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    textPlayer.textStyle.setColor(defaultColor);
    parser.skipEvent();
  }).on('complete', function () {
    textPlayer.textStyle.setColor(defaultColor);
  });
};
var _default = OnParseColorTag;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseStrokeColorTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnParseStrokeColorTag = function (textPlayer, parser, config) {
  var tagName = 'stroke';
  var defaultStroke;
  parser.on('start', function () {
    defaultStroke = textPlayer.textStyle.stroke;
    textPlayer.textStyle.setStrokeStyle(null);
  }).on(`+${tagName}`, function (color) {
    if (color === undefined) {
      color = defaultStroke;
    }
    textPlayer.textStyle.setStrokeStyle(color);
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    textPlayer.textStyle.setStrokeStyle(null);
    parser.skipEvent();
  }).on('complete', function () {
    textPlayer.textStyle.setStrokeStyle(defaultStroke);
  });
};
var _default = OnParseStrokeColorTag;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseBoldTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnParseBoldTag = function (textPlayer, parser, config) {
  var tagName = 'b';
  parser.on('start', function () {
    textPlayer.textStyle.setBold(false);
  }).on(`+${tagName}`, function () {
    textPlayer.textStyle.setBold(true);
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    textPlayer.textStyle.setBold(false);
    parser.skipEvent();
  });
};
var _default = OnParseBoldTag;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseItalicTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnParseItalicTag = function (textPlayer, parser, config) {
  var tagName = 'i';
  parser.on('start', function () {
    textPlayer.textStyle.setItalic(false);
  }).on(`+${tagName}`, function () {
    textPlayer.textStyle.setItalic(true);
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    textPlayer.textStyle.setItalic(false);
    parser.skipEvent();
  });
};
var _default = OnParseItalicTag;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseFontSizeTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnParseFontSizeTag = function (textPlayer, parser, config) {
  var tagName = 'size';
  var defaultFontSize;
  parser.on('start', function () {
    defaultFontSize = textPlayer.textStyle.fontSize;
  }).on(`+${tagName}`, function (fontSize) {
    textPlayer.textStyle.setFontSize(fontSize);
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    textPlayer.textStyle.setFontSize(defaultFontSize);
    parser.skipEvent();
  }).on('complete', function () {
    textPlayer.textStyle.setFontSize(defaultFontSize);
  });
};
var _default = OnParseFontSizeTag;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseOffsetYTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnParseOffsetYTag = function (textPlayer, parser, config) {
  var tagName = 'y';
  var defaultOffsetY;
  parser.on('start', function () {
    defaultOffsetY = textPlayer.textStyle.offsetY;
    textPlayer.textStyle.setOffsetY(0);
  }).on(`+${tagName}`, function (y) {
    if (y === undefined) {
      y = defaultOffsetY;
    }
    textPlayer.textStyle.setOffsetY(y);
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    textPlayer.textStyle.setOffsetY(0);
    parser.skipEvent();
  }).on('complete', function () {
    textPlayer.textStyle.setOffsetY(0);
  });
};
var _default = OnParseOffsetYTag;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseOffsetXTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnParseOffsetXTag = function (textPlayer, parser, config) {
  var tagName = 'x';
  var defaultOffsetX;
  parser.on('start', function () {
    defaultOffsetX = textPlayer.textStyle.offsetY;
    textPlayer.textStyle.setOffsetX(0);
  }).on(`+${tagName}`, function (y) {
    if (y === undefined) {
      y = defaultOffsetX;
    }
    textPlayer.textStyle.setOffsetX(y);
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    textPlayer.textStyle.setOffsetX(0);
    parser.skipEvent();
  }).on('complete', function () {
    textPlayer.textStyle.setOffsetX(0);
  });
};
var _default = OnParseOffsetXTag;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseLeftSpaceTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnParseLeftSpaceTag = function (textPlayer, parser, config) {
  var tagName = 'left';
  var defaultLeftSpace;
  parser.on('start', function () {
    defaultLeftSpace = textPlayer.textStyle.leftSpace;
    textPlayer.textStyle.setLeftSpace(0);
  }).on(`+${tagName}`, function (space) {
    if (space === undefined) {
      space = defaultLeftSpace;
    }
    textPlayer.textStyle.setLeftSpace(space);
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    textPlayer.textStyle.setLeftSpace(0);
    parser.skipEvent();
  }).on('complete', function () {
    textPlayer.textStyle.setLeftSpace(0);
  });
};
var _default = OnParseLeftSpaceTag;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseRightSpaceTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnParseRightSpaceTag = function (textPlayer, parser, config) {
  var tagName = 'right';
  var defaultRightSpace;
  parser.on('start', function () {
    defaultRightSpace = textPlayer.textStyle.rightSpace;
    textPlayer.textStyle.setRightSpace(0);
  }).on(`+${tagName}`, function (space) {
    if (space === undefined) {
      space = defaultRightSpace;
    }
    textPlayer.textStyle.setRightSpace(space);
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    textPlayer.textStyle.setRightSpace(0);
    parser.skipEvent();
  }).on('complete', function () {
    textPlayer.textStyle.setRightSpace(0);
  });
};
var _default = OnParseRightSpaceTag;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseShadowColorTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnParseShadowColorTag = function (textPlayer, parser, config) {
  var tagName = 'shadow';
  var defaultShadowColor;
  parser.on('start', function () {
    defaultShadowColor = textPlayer.textStyle.shadowColor;
    textPlayer.textStyle.setShadowColor(null);
  }).on(`+${tagName}`, function (color) {
    if (color === undefined) {
      color = defaultShadowColor;
    }
    textPlayer.textStyle.setShadowColor(color);
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    textPlayer.textStyle.setShadowColor(null);
    parser.skipEvent();
  }).on('complete', function () {
    textPlayer.textStyle.setShadowColor(defaultShadowColor);
  });
};
var _default = OnParseShadowColorTag;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseAlignTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnParseAlignTag = function (textPlayer, parser, config) {
  var tagName = 'align';
  parser.on(`+${tagName}`, function (align) {
    textPlayer.textStyle.setAlign(align);
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    textPlayer.textStyle.setAlign();
    parser.skipEvent();
  }).on('complete', function () {
    textPlayer.textStyle.setAlign();
  });
};
var _default = OnParseAlignTag;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/image/OnParseImageTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendImage = _interopRequireDefault(require("../../../dynamictext/methods/AppendImage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseImageTag = function (textPlayer, parser, config) {
  var tagName = 'img';
  parser.on(`+${tagName}`, function (name) {
    var imgData = textPlayer.imageManager.get(name);
    _AppendImage.default.call(textPlayer, imgData.key, imgData.frame, {
      width: imgData.width,
      hieght: imgData.height,
      leftSpace: imgData.left,
      rightSpace: imgData.right
    });
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
};
var _default = OnParseImageTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendImage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendImage.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/space/OnParseSpaceTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendSpace = _interopRequireDefault(require("../../../dynamictext/methods/AppendSpace.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseImageTag = function (textPlayer, parser, config) {
  var tagName = 'space';
  parser.on(`+${tagName}`, function (width) {
    _AppendSpace.default.call(textPlayer, width);
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
};
var _default = OnParseImageTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendSpace.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendSpace.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/typing/OnParseTypingSpeedTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseTypingSpeedTag = function (textPlayer, parser, config) {
  var tagName = 'speed';
  parser.on(`+${tagName}`, function (speed) {
    AppendCommand(textPlayer, speed);
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    AppendCommand(textPlayer, undefined);
    parser.skipEvent();
  });
};
var SetTypingSpeed = function (speed) {
  this.typeWriter.setTypingSpeed(speed); // this: textPlayer
};

var AppendCommand = function (textPlayer, speed) {
  _AppendCommand.default.call(textPlayer, 'speed',
  // name
  SetTypingSpeed,
  // callback
  speed,
  // params
  textPlayer // scope
  );
};
var _default = OnParseTypingSpeedTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/soundeffect/OnParsePlaySoundEffectTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParsePlaySoundEffectTag = function (textPlayer, parser, config) {
  var tagName = 'se';
  parser.on(`+${tagName}`, function (name, fadeInTime) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    PlaySoundEffect,
    // callback
    [name, fadeInTime],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
  var tagName = 'se2';
  parser.on(`+${tagName}`, function (name, fadeInTime) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    PlaySoundEffect2,
    // callback
    [name, fadeInTime],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
};
var PlaySoundEffect = function (params) {
  if (this.skipSoundEffect) {
    return;
  }
  var name = params[0];
  var fadeInTime = params[1];
  this.soundManager.playSoundEffect(name); // this: textPlayer
  if (fadeInTime) {
    this.soundManager.fadeInSoundEffect(fadeInTime);
  }
};
var PlaySoundEffect2 = function (params) {
  if (this.skipSoundEffect) {
    return;
  }
  var name = params[0];
  var fadeInTime = params[1];
  this.soundManager.playSoundEffect2(name); // this: textPlayer
  if (fadeInTime) {
    this.soundManager.fadeInSoundEffect2(fadeInTime);
  }
};
var _default = OnParsePlaySoundEffectTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/soundeffect/OnParseFadeInSoundEffectTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseFadeInSoundEffectTag = function (textPlayer, parser, config) {
  var tagName = 'se.fadein';
  parser.on(`+${tagName}`, function (time) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    FadeInSoundEffect,
    // callback
    time,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
  var tagName = 'se2.fadein';
  parser.on(`+${tagName}`, function (time) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    FadeInSoundEffect2,
    // callback
    time,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
};
var FadeInSoundEffect = function (time) {
  // this: textPlayer
  this.soundManager.fadeInSoundEffect(time);
};
var FadeInSoundEffect2 = function (time) {
  // this: textPlayer
  this.soundManager.fadeInSoundEffect2(time);
};
var _default = OnParseFadeInSoundEffectTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/soundeffect/OnParseFadeOutSoundEffectTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseFadeOutSoundEffectTag = function (textPlayer, parser, config) {
  var tagName = 'se.fadeout';
  parser.on(`+${tagName}`, function (time, isStopped) {
    isStopped = isStopped === 'stop';
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    FadeOutSoundEffect,
    // callback
    [time, isStopped],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
  var tagName = 'se2.fadeout';
  parser.on(`+${tagName}`, function (time, isStopped) {
    isStopped = isStopped === 'stop';
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    FadeOutSoundEffect2,
    // callback
    [time, isStopped],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
};
var FadeOutSoundEffect = function (params) {
  // this: textPlayer
  this.soundManager.fadeOutSoundEffect(...params);
};
var FadeOutSoundEffect2 = function (params) {
  // this: textPlayer
  this.soundManager.fadeOutSoundEffect2(...params);
};
var _default = OnParseFadeOutSoundEffectTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/soundeffect/OnParseSetSoundEffectVolumeTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseSetSoundEffectVolumeTag = function (textPlayer, parser, config) {
  var tagName = 'se.volume';
  parser.on(`+${tagName}`, function (volume) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    SetSoundEffectVolume,
    // callback
    volume,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
  var tagName = 'se2.volume';
  parser.on(`+${tagName}`, function (volume) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    SetSoundEffectVolume2,
    // callback
    volume,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
};
var SetSoundEffectVolume = function (volume) {
  // this: textPlayer
  this.soundManager.setSoundEffectVolume(volume, true);
};
var SetSoundEffectVolume2 = function (volume) {
  // this: textPlayer
  this.soundManager.setSoundEffectVolume2(volume, true);
};
var _default = OnParseSetSoundEffectVolumeTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/backgroundmusic/OnParsePlayBackgroundMusicTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParsePlayBackgroundMusicTag = function (textPlayer, parser, config) {
  var tagName = 'bgm';
  parser.on(`+${tagName}`, function (name, fadeInTime) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    PlayBackgroundMusic,
    // callback
    [name, fadeInTime],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    _AppendCommand.default.call(textPlayer, 'bgm.stop',
    // name
    StopBackgroundMusic,
    // callback
    undefined,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
  var tagName = 'bgm2';
  parser.on(`+${tagName}`, function (name, fadeInTime) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    PlayBackgroundMusic2,
    // callback
    [name, fadeInTime],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    _AppendCommand.default.call(textPlayer, 'bgm2.stop',
    // name
    StopBackgroundMusic2,
    // callback
    undefined,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var PlayBackgroundMusic = function (params) {
  var name = params[0];
  var fadeInTime = params[1];

  // this: textPlayer
  this.soundManager.playBackgroundMusic(name);
  if (fadeInTime) {
    this.soundManager.fadeInBackgroundMusic(fadeInTime);
  }
};
var StopBackgroundMusic = function () {
  // this: textPlayer
  this.soundManager.stopBackgroundMusic();
};
var PlayBackgroundMusic2 = function (params) {
  var name = params[0];
  var fadeInTime = params[1];

  // this: textPlayer
  this.soundManager.playBackgroundMusic2(name);
  if (fadeInTime) {
    this.soundManager.fadeInBackgroundMusic2(fadeInTime);
  }
};
var StopBackgroundMusic2 = function () {
  // this: textPlayer
  this.soundManager.stopBackgroundMusic2();
};
var _default = OnParsePlayBackgroundMusicTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/backgroundmusic/OnParseFadeInBackgroundMusicTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseFadeInBackgroundMusicTag = function (textPlayer, parser, config) {
  var tagName = 'bgm.fadein';
  parser.on(`+${tagName}`, function (time) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    FadeInBackgroundMusic,
    // callback
    time,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
  var tagName = 'bgm2.fadein';
  parser.on(`+${tagName}`, function (time) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    FadeInBackgroundMusic2,
    // callback
    time,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
};
var FadeInBackgroundMusic = function (time) {
  // this: textPlayer
  this.soundManager.fadeInBackgroundMusic(time);
};
var FadeInBackgroundMusic2 = function (time) {
  // this: textPlayer
  this.soundManager.fadeInBackgroundMusic2(time);
};
var _default = OnParseFadeInBackgroundMusicTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/backgroundmusic/OnParseFadeOutBackgroundMusicTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseFadeOutBackgroundMusicTag = function (textPlayer, parser, config) {
  var tagName = 'bgm.fadeout';
  parser.on(`+${tagName}`, function (time, isStopped) {
    isStopped = isStopped === 'stop';
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    FadeOutBackgroundMusic,
    // callback
    [time, isStopped],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
  var tagName = 'bgm2.fadeout';
  parser.on(`+${tagName}`, function (time, isStopped) {
    isStopped = isStopped === 'stop';
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    FadeOutBackgroundMusic2,
    // callback
    [time, isStopped],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
};
var FadeOutBackgroundMusic = function (params) {
  // this: textPlayer
  this.soundManager.fadeOutBackgroundMusic(...params);
};
var FadeOutBackgroundMusic2 = function (params) {
  // this: textPlayer
  this.soundManager.fadeOutBackgroundMusic2(...params);
};
var _default = OnParseFadeOutBackgroundMusicTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/backgroundmusic/OnParseCrossFadeBackgroundMusicTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseCrossFadeBackgroundMusicTag = function (textPlayer, parser, config) {
  var tagName = 'bgm.cross';
  parser.on(`+${tagName}`, function (name, fadeTime) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    CrossFadeBackgroundMusic,
    // callback
    [name, fadeTime],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
  var tagName = 'bgm2.cross';
  parser.on(`+${tagName}`, function (name, fadeTime) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    CrossFadeBackgroundMusic2,
    // callback
    [name, fadeTime],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
};
var CrossFadeBackgroundMusic = function (params) {
  // this: textPlayer
  this.soundManager.crossFadeBackgroundMusic(...params);
};
var CrossFadeBackgroundMusic2 = function (params) {
  // this: textPlayer
  this.soundManager.crossFadeBackgroundMusic2(...params);
};
var _default = OnParseCrossFadeBackgroundMusicTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/backgroundmusic/OnParsePauseBackgroundMusicTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParsePauseBackgroundMusicTag = function (textPlayer, parser, config) {
  var tagName = 'bgm.pause';
  parser.on(`+${tagName}`, function () {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    PauseBackgroundMusic,
    // callback
    undefined,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    _AppendCommand.default.call(textPlayer, 'bgm.resume',
    // name
    ResumeBackgroundMusic,
    // callback
    undefined,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
  var tagName = 'bgm2.pause';
  parser.on(`+${tagName}`, function () {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    PauseBackgroundMusic2,
    // callback
    undefined,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    _AppendCommand.default.call(textPlayer, 'bgm2.resume',
    // name
    ResumeBackgroundMusic2,
    // callback
    undefined,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var PauseBackgroundMusic = function () {
  // this: textPlayer
  this.soundManager.pauseBackgroundMusic();
};
var ResumeBackgroundMusic = function () {
  // this: textPlayer
  this.soundManager.resumeBackgroundMusic();
};
var PauseBackgroundMusic2 = function () {
  // this: textPlayer
  this.soundManager.pauseBackgroundMusic2();
};
var ResumeBackgroundMusic2 = function () {
  // this: textPlayer
  this.soundManager.resumeBackgroundMusic2();
};
var _default = OnParsePauseBackgroundMusicTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseFadeInCameraTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseFadeInCameraTag = function (textPlayer, parser, config) {
  var tagName = 'camera.fadein';
  parser.on(`+${tagName}`, function (duration, red, green, blue) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    PlayFadeInEffect,
    // callback
    [duration, red, green, blue],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var PlayFadeInEffect = function (params) {
  // this: textPlayer
  this.targetCamera.fadeIn(...params);
};
var _default = OnParseFadeInCameraTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseFadeOutCameraTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseFadeOutCameraTag = function (textPlayer, parser, config) {
  var tagName = 'camera.fadeout';
  parser.on(`+${tagName}`, function (duration, red, green, blue) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    PlayFadeOutEffect,
    // callback
    [duration, red, green, blue],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var PlayFadeOutEffect = function (params) {
  // this: textPlayer
  this.targetCamera.fadeOut(...params);
};
var _default = OnParseFadeOutCameraTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseShakeCameraTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseShakeCameraTag = function (textPlayer, parser, config) {
  var tagName = 'camera.shake';
  parser.on(`+${tagName}`, function (duration, intensity) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    PlayShakeEffect,
    // callback
    [duration, intensity],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var PlayShakeEffect = function (params) {
  // this: textPlayer
  this.targetCamera.shake(...params);
};
var _default = OnParseShakeCameraTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseFlashCameraTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseFlashCameraTag = function (textPlayer, parser, config) {
  var tagName = 'camera.flash';
  parser.on(`+${tagName}`, function (duration, red, green, blue) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    PlayFlashEffect,
    // callback
    [duration, red, green, blue],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var PlayFlashEffect = function (params) {
  // this: textPlayer
  this.targetCamera.flash(...params);
};
var _default = OnParseFlashCameraTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseZoomCameraTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseZoomCameraTag = function (textPlayer, parser, config) {
  var tagName = 'camera.zoom';
  parser.on(`+${tagName}`, function (value) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    Zoom,
    // callback
    value,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`+${tagName}.to`, function (value, duration, ease) {
    _AppendCommand.default.call(textPlayer, 'camera.zoom.to',
    // name
    ZoomTo,
    // callback
    [value, duration, ease],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var Zoom = function (value) {
  // this: textPlayer
  this.targetCamera.setZoom(value);
};
var ZoomTo = function (params) {
  // this: textPlayer
  this.targetCamera.zoomTo(...params);
};
var _default = OnParseZoomCameraTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseRotateCameraTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DegToRad = Phaser.Math.DegToRad;
var OnParseRotateCameraTag = function (textPlayer, parser, config) {
  var tagName = 'camera.rotate';
  parser.on(`+${tagName}`, function (value) {
    value = DegToRad(value);
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    Rotate,
    // callback
    value,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`+${tagName}.to`, function (value, duration, ease) {
    value = DegToRad(value);
    _AppendCommand.default.call(textPlayer, 'camera.rotate.to',
    // name
    RotateTo,
    // callback
    [value, duration, ease],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var Rotate = function (value) {
  // this: textPlayer
  this.targetCamera.setRotation(value);
};
var RotateTo = function (params) {
  var value = params[0];
  var duration = params[1];
  var ease = params[2];

  // this: textPlayer
  this.targetCamera.rotateTo(value, false, duration, ease);
};
var _default = OnParseRotateCameraTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseScrollCameraTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseScrollCameraTag = function (textPlayer, parser, config) {
  var tagName = 'camera.scroll';
  parser.on(`+${tagName}`, function (x, y) {
    _AppendCommand.default.call(textPlayer, tagName,
    // name
    Scroll,
    // callback
    [x, y],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on(`+${tagName}.to`, function (x, y, duration, ease) {
    _AppendCommand.default.call(textPlayer, 'camera.scroll.to',
    // name
    ScrollTo,
    // callback
    [x, y, duration, ease],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var Scroll = function (params) {
  // this: textPlayer
  this.targetCamera.setScroll(...params);
};
var ScrollTo = function (params) {
  var x = params[0];
  var y = params[1];
  var duration = params[2];
  var ease = params[3];

  // this: textPlayer
  var camera = this.targetCamera;
  var xSave = camera.scrollX;
  var ySave = camera.scrollY;
  camera.setScroll(x, y);
  x += camera.centerX;
  y += camera.centerY;
  camera.setScroll(xSave, ySave);

  // x,y in pan() is the centerX, centerY
  camera.pan(x, y, duration, ease);
};
var _default = OnParseScrollCameraTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/wait/OnParseWaitTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseWaitTag = function (textPlayer, parser, config) {
  var tagWait = 'wait';
  var tagClick = 'click';
  parser.on(`+${tagWait}`, function (name) {
    AppendCommand(textPlayer, name);
    parser.skipEvent();
  }).on(`-${tagWait}`, function () {
    parser.skipEvent();
  }).on(`+${tagClick}`, function () {
    // Equal to [wait=click]
    AppendCommand(textPlayer, 'click');
    parser.skipEvent();
  }).on(`-${tagClick}`, function () {
    // Equal to [/wait]
    parser.skipEvent();
  });
};
var Wait = function (name) {
  this.typeWriter.wait(name); // this: textPlayer
};

var AppendCommand = function (textPlayer, name) {
  _AppendCommand.default.call(textPlayer, 'wait',
  // name
  Wait,
  // callback
  name,
  // params
  textPlayer // scope
  );
};
var _default = OnParseWaitTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/content/OnParseNewLineTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendText = _interopRequireDefault(require("../../../dynamictext/methods/AppendText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseNewLineTag = function (textPlayer, parser, config) {
  var tagName = 'r';
  parser.on(`+${tagName}`, function () {
    _AppendText.default.call(textPlayer, '\n');
    parser.skipEvent();
  }).on(`-${tagName}`, function () {
    parser.skipEvent();
  });
};
var _default = OnParseNewLineTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendText.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/content/OnParsePageBreakTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendText = _interopRequireDefault(require("../../../dynamictext/methods/AppendText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParsePageBreakTag = function (textPlayer, parser, config) {
  var tagNames = ['pagebreak', 'pb'];
  for (var i = 0, cnt = tagNames.length; i < cnt; i++) {
    var tagName = tagNames[i];
    parser.on(`+${tagName}`, function () {
      _AppendText.default.call(textPlayer, '\f');
      parser.skipEvent();
    }).on(`-${tagName}`, function () {
      parser.skipEvent();
    });
  }
};
var _default = OnParsePageBreakTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendText.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/content/OnParseContentOff.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnParseContentOff = function (textPlayer, parser, config) {
  var tagName = 'content.off';
  parser.on(`+${tagName}`, function () {
    parser.setContentOutputEnable(false);
    parser.skipEvent();
  });
};
var _default = OnParseContentOff;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/content/OnParseContentOn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnParseContentOn = function (textPlayer, parser, config) {
  var tagName = 'content.on';
  parser.on(`+${tagName}`, function () {
    parser.setContentOutputEnable();
    parser.skipEvent();
  });
};
var _default = OnParseContentOn;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/content/OnParseContent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendText = _interopRequireDefault(require("../../../dynamictext/methods/AppendText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseContent = function (textPlayer, parser, config) {
  parser.on('content', function (content) {
    if (parser.contentOutputEnable) {
      _AppendText.default.call(textPlayer, content);
    } else {
      var startTag = `+${parser.lastTagStart}`;
      textPlayer.emit(`parser.${startTag}#content`, parser, content);
    }
  });
};
var _default = OnParseContent;
exports.default = _default;
},{"../../../dynamictext/methods/AppendText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendText.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/custom/OnParseCustomTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseCustomTag = function (textPlayer, parser, config) {
  parser.on('start', function () {
    textPlayer.emit('parser.start', parser);
  }).on('+', function (tagName, ...value) {
    if (parser.skipEventFlag) {
      // Has been processed before
      return;
    }
    var startTag = `+${tagName}`;
    var param = value;
    textPlayer.emit(`parser.${startTag}`, parser, ...value, param);
    AppendCommand(textPlayer, startTag, param);
  }).on('-', function (tagName) {
    if (parser.skipEventFlag) {
      return;
    }
    var endTag = `-${tagName}`;
    var param = [];
    textPlayer.emit(`parser.${endTag}`, parser, param);
    AppendCommand(textPlayer, endTag, param);
  }).on('complete', function () {
    textPlayer.emit('parser.complete', parser);
  });
};
var FireEvent = function (param, tagName) {
  var eventName = `tag.${tagName}`;
  // this: textPlayer
  if (param == null) {
    this.emit(eventName);
  } else {
    this.emit(eventName, ...param);
  }
};
var AppendCommand = function (textPlayer, name, param) {
  _AppendCommand.default.call(textPlayer, name,
  // name
  FireEvent,
  // callback
  param,
  // params
  textPlayer // scope
  );
};
var _default = OnParseCustomTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/AddParseCallbacks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OnParseColorTag = _interopRequireDefault(require("./textstyle/OnParseColorTag.js"));
var _OnParseStrokeColorTag = _interopRequireDefault(require("./textstyle/OnParseStrokeColorTag.js"));
var _OnParseBoldTag = _interopRequireDefault(require("./textstyle/OnParseBoldTag.js"));
var _OnParseItalicTag = _interopRequireDefault(require("./textstyle/OnParseItalicTag.js"));
var _OnParseFontSizeTag = _interopRequireDefault(require("./textstyle/OnParseFontSizeTag.js"));
var _OnParseOffsetYTag = _interopRequireDefault(require("./textstyle/OnParseOffsetYTag.js"));
var _OnParseOffsetXTag = _interopRequireDefault(require("./textstyle/OnParseOffsetXTag.js"));
var _OnParseLeftSpaceTag = _interopRequireDefault(require("./textstyle/OnParseLeftSpaceTag.js"));
var _OnParseRightSpaceTag = _interopRequireDefault(require("./textstyle/OnParseRightSpaceTag.js"));
var _OnParseShadowColorTag = _interopRequireDefault(require("./textstyle/OnParseShadowColorTag.js"));
var _OnParseAlignTag = _interopRequireDefault(require("./textstyle/OnParseAlignTag.js"));
var _OnParseImageTag = _interopRequireDefault(require("./image/OnParseImageTag.js"));
var _OnParseSpaceTag = _interopRequireDefault(require("./space/OnParseSpaceTag.js"));
var _OnParseTypingSpeedTag = _interopRequireDefault(require("./typing/OnParseTypingSpeedTag.js"));
var _OnParsePlaySoundEffectTag = _interopRequireDefault(require("./soundeffect/OnParsePlaySoundEffectTag.js"));
var _OnParseFadeInSoundEffectTag = _interopRequireDefault(require("./soundeffect/OnParseFadeInSoundEffectTag.js"));
var _OnParseFadeOutSoundEffectTag = _interopRequireDefault(require("./soundeffect/OnParseFadeOutSoundEffectTag.js"));
var _OnParseSetSoundEffectVolumeTag = _interopRequireDefault(require("./soundeffect/OnParseSetSoundEffectVolumeTag.js"));
var _OnParsePlayBackgroundMusicTag = _interopRequireDefault(require("./backgroundmusic/OnParsePlayBackgroundMusicTag.js"));
var _OnParseFadeInBackgroundMusicTag = _interopRequireDefault(require("./backgroundmusic/OnParseFadeInBackgroundMusicTag.js"));
var _OnParseFadeOutBackgroundMusicTag = _interopRequireDefault(require("./backgroundmusic/OnParseFadeOutBackgroundMusicTag.js"));
var _OnParseCrossFadeBackgroundMusicTag = _interopRequireDefault(require("./backgroundmusic/OnParseCrossFadeBackgroundMusicTag.js"));
var _OnParsePauseBackgroundMusicTag = _interopRequireDefault(require("./backgroundmusic/OnParsePauseBackgroundMusicTag.js"));
var _OnParseFadeInCameraTag = _interopRequireDefault(require("./camera/OnParseFadeInCameraTag.js"));
var _OnParseFadeOutCameraTag = _interopRequireDefault(require("./camera/OnParseFadeOutCameraTag.js"));
var _OnParseShakeCameraTag = _interopRequireDefault(require("./camera/OnParseShakeCameraTag.js"));
var _OnParseFlashCameraTag = _interopRequireDefault(require("./camera/OnParseFlashCameraTag.js"));
var _OnParseZoomCameraTag = _interopRequireDefault(require("./camera/OnParseZoomCameraTag.js"));
var _OnParseRotateCameraTag = _interopRequireDefault(require("./camera/OnParseRotateCameraTag.js"));
var _OnParseScrollCameraTag = _interopRequireDefault(require("./camera/OnParseScrollCameraTag.js"));
var _OnParseWaitTag = _interopRequireDefault(require("./wait/OnParseWaitTag.js"));
var _OnParseNewLineTag = _interopRequireDefault(require("./content/OnParseNewLineTag.js"));
var _OnParsePageBreakTag = _interopRequireDefault(require("./content/OnParsePageBreakTag.js"));
var _OnParseContentOff = _interopRequireDefault(require("./content/OnParseContentOff.js"));
var _OnParseContentOn = _interopRequireDefault(require("./content/OnParseContentOn.js"));
var _OnParseContent = _interopRequireDefault(require("./content/OnParseContent.js"));
var _OnParseCustomTag = _interopRequireDefault(require("./custom/OnParseCustomTag.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ParseCallbacks = [_OnParseColorTag.default, _OnParseStrokeColorTag.default, _OnParseBoldTag.default, _OnParseItalicTag.default, _OnParseFontSizeTag.default, _OnParseShadowColorTag.default, _OnParseAlignTag.default, _OnParseOffsetYTag.default, _OnParseOffsetXTag.default, _OnParseLeftSpaceTag.default, _OnParseRightSpaceTag.default, _OnParseImageTag.default, _OnParseSpaceTag.default, _OnParseTypingSpeedTag.default, _OnParsePlaySoundEffectTag.default, _OnParseFadeInSoundEffectTag.default, _OnParseFadeOutSoundEffectTag.default, _OnParseSetSoundEffectVolumeTag.default, _OnParsePlayBackgroundMusicTag.default, _OnParseFadeInBackgroundMusicTag.default, _OnParseFadeOutBackgroundMusicTag.default, _OnParseCrossFadeBackgroundMusicTag.default, _OnParsePauseBackgroundMusicTag.default, _OnParseFadeInCameraTag.default, _OnParseFadeOutCameraTag.default, _OnParseShakeCameraTag.default, _OnParseFlashCameraTag.default, _OnParseZoomCameraTag.default, _OnParseRotateCameraTag.default, _OnParseScrollCameraTag.default, _OnParseWaitTag.default, _OnParseNewLineTag.default, _OnParsePageBreakTag.default, _OnParseContentOff.default, _OnParseContentOn.default, _OnParseContent.default, _OnParseCustomTag.default];
var AddParseCallbacks = function (textPlayer, parser, config) {
  for (var i = 0, cnt = ParseCallbacks.length; i < cnt; i++) {
    ParseCallbacks[i](textPlayer, parser, config);
  }
};
var _default = AddParseCallbacks;
exports.default = _default;
},{"./textstyle/OnParseColorTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseColorTag.js","./textstyle/OnParseStrokeColorTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseStrokeColorTag.js","./textstyle/OnParseBoldTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseBoldTag.js","./textstyle/OnParseItalicTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseItalicTag.js","./textstyle/OnParseFontSizeTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseFontSizeTag.js","./textstyle/OnParseOffsetYTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseOffsetYTag.js","./textstyle/OnParseOffsetXTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseOffsetXTag.js","./textstyle/OnParseLeftSpaceTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseLeftSpaceTag.js","./textstyle/OnParseRightSpaceTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseRightSpaceTag.js","./textstyle/OnParseShadowColorTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseShadowColorTag.js","./textstyle/OnParseAlignTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/textstyle/OnParseAlignTag.js","./image/OnParseImageTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/image/OnParseImageTag.js","./space/OnParseSpaceTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/space/OnParseSpaceTag.js","./typing/OnParseTypingSpeedTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/typing/OnParseTypingSpeedTag.js","./soundeffect/OnParsePlaySoundEffectTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/soundeffect/OnParsePlaySoundEffectTag.js","./soundeffect/OnParseFadeInSoundEffectTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/soundeffect/OnParseFadeInSoundEffectTag.js","./soundeffect/OnParseFadeOutSoundEffectTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/soundeffect/OnParseFadeOutSoundEffectTag.js","./soundeffect/OnParseSetSoundEffectVolumeTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/soundeffect/OnParseSetSoundEffectVolumeTag.js","./backgroundmusic/OnParsePlayBackgroundMusicTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/backgroundmusic/OnParsePlayBackgroundMusicTag.js","./backgroundmusic/OnParseFadeInBackgroundMusicTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/backgroundmusic/OnParseFadeInBackgroundMusicTag.js","./backgroundmusic/OnParseFadeOutBackgroundMusicTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/backgroundmusic/OnParseFadeOutBackgroundMusicTag.js","./backgroundmusic/OnParseCrossFadeBackgroundMusicTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/backgroundmusic/OnParseCrossFadeBackgroundMusicTag.js","./backgroundmusic/OnParsePauseBackgroundMusicTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/backgroundmusic/OnParsePauseBackgroundMusicTag.js","./camera/OnParseFadeInCameraTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseFadeInCameraTag.js","./camera/OnParseFadeOutCameraTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseFadeOutCameraTag.js","./camera/OnParseShakeCameraTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseShakeCameraTag.js","./camera/OnParseFlashCameraTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseFlashCameraTag.js","./camera/OnParseZoomCameraTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseZoomCameraTag.js","./camera/OnParseRotateCameraTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseRotateCameraTag.js","./camera/OnParseScrollCameraTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/camera/OnParseScrollCameraTag.js","./wait/OnParseWaitTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/wait/OnParseWaitTag.js","./content/OnParseNewLineTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/content/OnParseNewLineTag.js","./content/OnParsePageBreakTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/content/OnParsePageBreakTag.js","./content/OnParseContentOff.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/content/OnParseContentOff.js","./content/OnParseContentOn.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/content/OnParseContentOn.js","./content/OnParseContent.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/content/OnParseContent.js","./custom/OnParseCustomTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/custom/OnParseCustomTag.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/PreProcessSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/*
Skip line
- An empty line, only has space
- A comment line, start with commentLineStart ('//')
*/

var PreProcess = function (parser, source) {
  var comentLineStart = parser.commentLineStart;
  var lines = source.split('\n');
  for (var i = 0, cnt = lines.length; i < cnt; i++) {
    var line = lines[i];
    if (line === '') {
      // Do nothing
    } else if (line.trim().length === 0) {
      // An empty line, only has space
      lines[i] = '';
    } else if (comentLineStart && line.startsWith(comentLineStart)) {
      // A comment line, start with commentLineStart ('//')
      lines[i] = '';
    }
  }
  // Use [r] to put \n
  return lines.join('');
};
var _default = PreProcess;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/Parser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _bracketparser = _interopRequireDefault(require("../../../../bracketparser.js"));
var _AddParseCallbacks = _interopRequireDefault(require("./AddParseCallbacks.js"));
var _PreProcessSource = _interopRequireDefault(require("./PreProcessSource.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Parser extends _bracketparser.default {
  constructor(textPlayer, config) {
    if (config === undefined) {
      config = {};
    }
    if (!config.hasOwnProperty('delimiters')) {
      config.delimiters = '[]';
    }
    super(config);
    (0, _AddParseCallbacks.default)(textPlayer, this, config);
    this.setCommentLineStartSymbol(GetValue(config, 'comment', '//'));
    this.setContentOutputEnable();
  }
  setCommentLineStartSymbol(symbol) {
    this.commentLineStart = symbol;
    return this;
  }
  setContentOutputEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.contentOutputEnable = enable;
    return this;
  }
  start(source) {
    super.start((0, _PreProcessSource.default)(this, source));
    return this;
  }
}
var _default = Parser;
exports.default = _default;
},{"../../../../bracketparser.js":"node_modules/phaser3-rex-plugins/plugins/bracketparser.js","./AddParseCallbacks.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/AddParseCallbacks.js","./PreProcessSource.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/PreProcessSource.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/TypingSpeedMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setDefaultTypingSpeed(speed) {
    this.defaultSpeed = speed;
    return this;
  },
  setTypingSpeed(speed) {
    if (speed === undefined) {
      speed = this.defaultSpeed;
    }
    this.speed = speed;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/FadeOutPage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const PageFadeOutCompleteEvent = 'page.fadeout';
var FadeOutPage = function () {
  if (!this.fadeOutPageCallback || !this.children) {
    this.emit(PageFadeOutCompleteEvent);
    return this;
  }
  var renderableChildren = this.children.filter(function (child) {
    return child.renderable;
  });
  var waitObject = this.fadeOutPageCallback(renderableChildren, this.fadeOutPageDuration);
  if (!waitObject) {
    this.emit(PageFadeOutCompleteEvent);
  } else if (waitObject.once) {
    waitObject.once('complete', function () {
      this.emit(PageFadeOutCompleteEvent);
    }, this);
  } else if (waitObject.then) {
    var self = this;
    waitObject.then(function () {
      self.emit(PageFadeOutCompleteEvent);
    });
  } else {
    this.emit(PageFadeOutCompleteEvent);
  }
  return this;
};
var _default = FadeOutPage;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/promise/WaitEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaitEvent = exports.WaitComplete = void 0;
var WaitEvent = function (eventEmitter, eventName) {
  return new Promise(function (resolve, reject) {
    eventEmitter.once(eventName, function () {
      resolve();
    });
  });
};
exports.WaitEvent = WaitEvent;
var WaitComplete = function (eventEmitter) {
  return WaitEvent(eventEmitter, 'complete');
};
exports.WaitComplete = WaitComplete;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/Start.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _WaitEvent = require("../../../../utils/promise/WaitEvent.js");
var Start = function (children) {
  this.children = children;
  this.index = 0;
  this.isPageTyping = true;
  if (this.onTypeStart) {
    this.onTypeStart(children);
  }
  this.typing();
  return (0, _WaitEvent.WaitComplete)(this); // Promise
};
var _default = Start;
exports.default = _default;
},{"../../../../utils/promise/WaitEvent.js":"node_modules/phaser3-rex-plugins/plugins/utils/promise/WaitEvent.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/TimerTypes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypingDelayTimerType = exports.TypingAnimationTimerType = void 0;
const TypingDelayTimerType = 'delay';
exports.TypingDelayTimerType = TypingDelayTimerType;
const TypingAnimationTimerType = 'anim';
exports.TypingAnimationTimerType = TypingAnimationTimerType;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/Typing.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Types = require("../../dynamictext/bob/Types.js");
var _TimerTypes = require("./TimerTypes.js");
var Typing = function (offsetTime) {
  if (offsetTime === undefined) {
    offsetTime = 0;
  }
  var delay = 0;
  this.inTypingProcessLoop = true;
  while (this.inTypingProcessLoop) {
    var child = this.getNextChild();
    if (!child) {
      if (this.timeline.isRunning) {
        // Wait until last animationConfig is end
        this.timeline.once('complete', function () {
          this.isPageTyping = false;
          this.emit('complete');
        }, this);
      } else {
        this.isPageTyping = false;
        this.emit('complete');
      }
      break; // Leave this typing loop
    }

    if (child.renderable) {
      // Typing this char
      var animationConfig = this.animationConfig;
      if (animationConfig.duration > 0) {
        var animationTimer = this.timeline.addTimer({
          name: _TimerTypes.TypingAnimationTimerType,
          target: child,
          duration: animationConfig.duration,
          yoyo: animationConfig.yoyo,
          onStart: animationConfig.onStart,
          onProgress: animationConfig.onProgress,
          onComplete: animationConfig.onComplete
        });
        if (this.skipTypingAnimation) {
          animationTimer.seek(1);
        }
      } else {
        // No animationConfig, only invoke onStart callback
        if (animationConfig.onStart) {
          animationConfig.onStart(child, 0);
        }
      }

      // Set to min size
      if (this.minSizeEnable) {
        this.textPlayer.setToMinSize();
      }
      this.textPlayer.emit('typing', child);
      var nextChild = this.nextChild;
      if (nextChild) {
        if (this.skipSpaceEnable && (0, _Types.IsSpaceChar)(nextChild)) {
          // Don't have delay when typing a space character
        } else {
          delay += this.speed + offsetTime;
          offsetTime = 0;
          if (delay > 0) {
            // Process next character later
            this.typingTimer = this.timeline.addTimer({
              name: _TimerTypes.TypingDelayTimerType,
              target: this,
              duration: delay,
              onComplete: function (target, t, timer) {
                target.typingTimer = undefined;
                Typing.call(target, timer.remainder);
              }
            });
            break; // Leave this typing loop     
          }
        }
      }
      // Process next child
    } else if ((0, _Types.IsCommand)(child)) {
      child.exec();
      // Process next child
    }
  }

  // Set to min size
  if (this.minSizeEnable) {
    this.textPlayer.setToMinSize();
  }
  this.inTypingProcessLoop = false;
};
var _default = Typing;
exports.default = _default;
},{"../../dynamictext/bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js","./TimerTypes.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/TimerTypes.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/Pause.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Pause = function () {
  // Pause typing timer and animation progresses
  this.timeline.pause();
  return this;
};
var _default = Pause;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/Resume.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Resume = function () {
  // Resume typing timer and animation progresses
  this.timeline.resume();
  return this;
};
var _default = Resume;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/PauseTyping.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var PauseTyping = function () {
  // Already in typingPaused state
  if (this.isTypingPaused) {
    return this;
  }
  if (this.typingTimer) {
    // Pause when typing timer is counting
    this.typingTimer.pause();
    this.isTypingPaused = true;
  } else if (this.inTypingProcessLoop) {
    // Pause in loop of typing(), by tag
    this.inTypingProcessLoop = false;
    this.isTypingPaused = true;
  }
  return this;
};
var _default = PauseTyping;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/ResumeTyping.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ResumeTyping = function (offsetTime) {
  // Already not in typingPaused state
  if (!this.isTypingPaused) {
    return this;
  }
  if (offsetTime === undefined) {
    offsetTime = 0;
  }
  if (this.typingTimer) {
    // Pause when typing timer is paused
    this.isTypingPaused = false;
    this.typingTimer.resume();
    this.typingTimer.remainder += offsetTime;
  } else if (this.isTypingPaused) {
    // Resume paused by tag
    this.isTypingPaused = false;
    this.typing(offsetTime);
  }
  return this;
};
var _default = ResumeTyping;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/Events.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StopPlayEvent = exports.RemoveWaitEvents = exports.ClearEvents = void 0;
// Internal events

const RemoveWaitEvents = '_remove.wait';
exports.RemoveWaitEvents = RemoveWaitEvents;
const StopPlayEvent = '_remove.play';
exports.StopPlayEvent = StopPlayEvent;
const ClearEvents = [RemoveWaitEvents, StopPlayEvent];
exports.ClearEvents = ClearEvents;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/GetWrapCallback.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Events = require("../Events.js");
var GetWrapCallback = function (textPlayer, callback, args, scope, removeFrom) {
  return function () {
    textPlayer.emit(_Events.RemoveWaitEvents, removeFrom); // Remove all wait events
    callback.apply(scope, args);
  };
};
var _default = GetWrapCallback;
exports.default = _default;
},{"../Events.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/Events.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitCallback.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetWrapCallback = _interopRequireDefault(require("./GetWrapCallback.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var WaitCallback = function (textPlayer, postfixName, callback, args, scope) {
  var wrapCallback = (0, _GetWrapCallback.default)(textPlayer, callback, args, scope, 'custom');
  var eventName = postfixName ? `wait.${postfixName}` : 'wait';
  textPlayer.emit(eventName, wrapCallback);
};
var _default = WaitCallback;
exports.default = _default;
},{"./GetWrapCallback.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/GetWrapCallback.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitTime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetWrapCallback = _interopRequireDefault(require("./GetWrapCallback.js"));
var _Events = require("../Events.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var WaitTime = function (textPlayer, time, callback, args, scope) {
  var wrapCallback = (0, _GetWrapCallback.default)(textPlayer, callback, args, scope, 'time');
  var timer;

  // Remove all wait events
  textPlayer.once(_Events.RemoveWaitEvents, function () {
    if (timer) {
      timer.remove();
      timer = undefined;
    }
  });
  timer = textPlayer.timeline.delayCall(time, wrapCallback);
  textPlayer.emit('wait.time', time);
};
var _default = WaitTime;
exports.default = _default;
},{"./GetWrapCallback.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/GetWrapCallback.js","../Events.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/Events.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitClick.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetWrapCallback = _interopRequireDefault(require("./GetWrapCallback.js"));
var _Events = require("../Events.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var WaitClick = function (textPlayer, callback, args, scope) {
  var clickEE = textPlayer.clickEE;
  if (!clickEE) {
    return;
  }
  var wrapCallback = (0, _GetWrapCallback.default)(textPlayer, callback, args, scope, 'click');

  // Remove all wait events
  textPlayer.once(_Events.RemoveWaitEvents, function () {
    clickEE.off('pointerdown', wrapCallback, textPlayer);
  });
  clickEE.once('pointerdown', wrapCallback, textPlayer);
  textPlayer.emit('wait.click');
};
var _default = WaitClick;
exports.default = _default;
},{"./GetWrapCallback.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/GetWrapCallback.js","../Events.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/Events.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitMusic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetWrapCallback = _interopRequireDefault(require("./GetWrapCallback.js"));
var _Events = require("../Events.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var WaitMusic = function (textPlayer, music, callback, args, scope) {
  var wrapCallback = (0, _GetWrapCallback.default)(textPlayer, callback, args, scope, 'music');
  if (music) {
    // Remove all wait events
    textPlayer.once(_Events.RemoveWaitEvents, function () {
      music.off('complete', wrapCallback, textPlayer);
    });
    music.once('complete', wrapCallback, textPlayer);
  }
  textPlayer.emit('wait.music', music);
  if (!music) {
    wrapCallback();
  }
};
var _default = WaitMusic;
exports.default = _default;
},{"./GetWrapCallback.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/GetWrapCallback.js","../Events.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/Events.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitCameraEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaitCameraEffect = exports.IsWaitCameraEffect = void 0;
var _GetWrapCallback = _interopRequireDefault(require("./GetWrapCallback.js"));
var _Events = require("../Events.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var IsWaitCameraEffect = function (name) {
  switch (name) {
    case 'camera.fadein':
    case 'camera.fadeout':
    case 'camera.flash':
    case 'camera.shake':
    case 'camera.zoom':
    case 'camera.rotate':
    case 'camera.scroll':
      return true;
    default:
      return false;
  }
};
exports.IsWaitCameraEffect = IsWaitCameraEffect;
var WaitCameraEffect = function (textPlayer, effectName, callback, args, scope) {
  var wrapCallback = (0, _GetWrapCallback.default)(textPlayer, callback, args, scope, `camera.${effectName}`);
  var camera = textPlayer.targetCamera;
  var effect, completeEventName;
  switch (effectName) {
    case 'camera.fadein':
      effect = camera.fadeEffect;
      completeEventName = 'camerafadeincomplete';
      break;
    case 'camera.fadeout':
      effect = camera.fadeEffect;
      completeEventName = 'camerafadeoutcomplete';
      break;
    case 'camera.flash':
      effect = camera.flashEffect;
      completeEventName = 'cameraflashcomplete';
      break;
    case 'camera.shake':
      effect = camera.shakeEffect;
      completeEventName = 'camerashakecomplete';
      break;
    case 'camera.zoom':
      effect = camera.zoomEffect;
      completeEventName = 'camerazoomcomplete';
      break;
    case 'camera.rotate':
      effect = camera.rotateToEffect;
      completeEventName = 'camerarotatecomplete';
      break;
    case 'camera.scroll':
      effect = camera.panEffect;
      completeEventName = 'camerapancomplete';
      break;
  }
  if (!effect.isRunning) {
    textPlayer.emit('wait.camera', effectName);
    wrapCallback();
  } else {
    // Remove all wait events
    textPlayer.once(_Events.RemoveWaitEvents, function (removeFrom) {
      camera.off(completeEventName, wrapCallback, textPlayer);
    });
    camera.once(completeEventName, wrapCallback, textPlayer);
    textPlayer.emit('wait.camera', effectName);
  }
};
exports.WaitCameraEffect = WaitCameraEffect;
},{"./GetWrapCallback.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/GetWrapCallback.js","../Events.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/Events.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitKeyDown.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetWrapCallback = _interopRequireDefault(require("./GetWrapCallback.js"));
var _Events = require("../Events.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var WaitKeyDown = function (textPlayer, keyName, callback, args, scope) {
  var wrapCallback = (0, _GetWrapCallback.default)(textPlayer, callback, args, scope, 'keydown');
  var eventName = `keydown-${keyName.toUpperCase()}`;
  var keyboard = textPlayer.scene.input.keyboard;

  // Remove all wait events
  textPlayer.once(_Events.RemoveWaitEvents, function () {
    keyboard.off(eventName, wrapCallback, textPlayer);
  });
  keyboard.once(eventName, wrapCallback, textPlayer);
  textPlayer.emit('wait.keydown', keyName);
};
var _default = WaitKeyDown;
exports.default = _default;
},{"./GetWrapCallback.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/GetWrapCallback.js","../Events.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/Events.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitGameObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaitGameObject = exports.IsWaitGameObject = void 0;
var _GetWrapCallback = _interopRequireDefault(require("./GetWrapCallback.js"));
var _Events = require("../Events.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var IsWaitGameObject = function (textPlayer, name) {
  var names = name.split('.');
  return textPlayer.gameObjectManagers.hasOwnProperty(names[0]);
};
exports.IsWaitGameObject = IsWaitGameObject;
var WaitGameObject = function (textPlayer, tag, callback, args, scope) {
  var wrapCallback = (0, _GetWrapCallback.default)(textPlayer, callback, args, scope);
  var tags = tag.split('.');
  var goType = tags[0];
  var gameObjectManager = textPlayer.getGameObjectManager(goType);
  var waitEventName = `wait.${goType}`;
  switch (tags.length) {
    case 1:
      // 'goType' : wait all sprites has beeen destroyed
      if (gameObjectManager.isEmpty) {
        textPlayer.emit(waitEventName);
        wrapCallback();
      } else {
        // Remove all wait events
        textPlayer.once(_Events.RemoveWaitEvents, function (removeFrom) {
          gameObjectManager.off('empty', wrapCallback, textPlayer);
        });
        gameObjectManager.once('empty', wrapCallback, textPlayer);
        textPlayer.emit(waitEventName);
      }
      return;
    case 2:
      // 'goType.name' : wait goType.name has been destroyed
      var name = tags[1];
      if (!gameObjectManager.has(name)) {
        textPlayer.emit(waitEventName, name);
        wrapCallback();
      } else {
        var spriteData = gameObjectManager.get(name);
        var gameObject = spriteData.gameObject;
        // Remove all wait events
        textPlayer.once(_Events.RemoveWaitEvents, function () {
          gameObject.off('destroy', wrapCallback, textPlayer);
        });
        gameObject.once('destroy', wrapCallback, textPlayer);
        textPlayer.emit(waitEventName, name);
      }
      return;
    case 3:
      // 'goType.name.prop' : wait ease goType.name.prop has been completed
      var name = tags[1],
        prop = tags[2];
      var value = gameObjectManager.getProperty(name, prop);
      // Can start tween task for a number property
      if (typeof value === 'number') {
        var task = gameObjectManager.getTweenTask(name, prop);
        if (!task) {
          textPlayer.emit(waitEventName, name, prop);
          wrapCallback();
        } else {
          // Remove all wait events
          textPlayer.once(_Events.RemoveWaitEvents, function () {
            task.off('complete', wrapCallback, textPlayer);
          });
          task.once('complete', wrapCallback, textPlayer);
          textPlayer.emit(waitEventName, name, prop);
        }
        return;
      }
      var dataKey = prop;
      var matchFalseFlag = dataKey.startsWith('!');
      if (matchFalseFlag) {
        dataKey = dataKey.substring(1);
      }
      // Wait until flag is true/false
      if (gameObjectManager.hasData(name, dataKey)) {
        var gameObject = gameObjectManager.getGO(name);
        var flag = gameObject.getData(dataKey);
        var matchTrueFlag = !matchFalseFlag;
        if (flag === matchTrueFlag) {
          textPlayer.emit(waitEventName, name, prop);
          wrapCallback();
        } else {
          // Remove all wait events
          var eventName = `changedata-${dataKey}`;
          var callback = function (gameObject, value, previousValue) {
            value = !!value;
            if (value === matchTrueFlag) {
              wrapCallback.call(textPlayer);
            }
          };
          textPlayer.once(_Events.RemoveWaitEvents, function () {
            gameObject.off(eventName, callback);
          });
          gameObject.on(eventName, callback);
          textPlayer.emit(waitEventName, name, prop);
        }
        return;
      }
  }
};
exports.WaitGameObject = WaitGameObject;
},{"./GetWrapCallback.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/GetWrapCallback.js","../Events.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/Events.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitMultiple.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _WaitCallback = _interopRequireDefault(require("./WaitCallback.js"));
var _WaitTime = _interopRequireDefault(require("./WaitTime.js"));
var _WaitClick = _interopRequireDefault(require("./WaitClick.js"));
var _WaitMusic = _interopRequireDefault(require("./WaitMusic.js"));
var _WaitCameraEffect = require("./WaitCameraEffect.js");
var _WaitKeyDown = _interopRequireDefault(require("./WaitKeyDown.js"));
var _WaitGameObject = require("./WaitGameObject.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const KeyCodes = Phaser.Input.Keyboard.KeyCodes;
var WaitMultiple = function (textPlayer, names, callback, args, scope) {
  if (typeof names === 'string' && names.length > 1 && names.indexOf('|') !== -1) {
    names = names.split('|');
  } else {
    names = [names];
  }
  for (var i = 0, cnt = names.length; i < cnt; i++) {
    var name = names[i];
    if (name == null || name === 'wait') {
      // Wait event
      (0, _WaitCallback.default)(textPlayer, undefined, callback, args, scope);
    } else if (typeof name === 'number' || !isNaN(name)) {
      // A number, or a number string
      (0, _WaitTime.default)(textPlayer, parseFloat(name), callback, args, scope);
    } else if (name === 'click') {
      // 'click'
      (0, _WaitClick.default)(textPlayer, callback, args, scope);
    } else if (name === 'se') {
      var music = textPlayer.soundManager.getLastSoundEffect();
      (0, _WaitMusic.default)(textPlayer, music, callback, args, scope);
    } else if (name === 'se2') {
      var music = textPlayer.soundManager.getLastSoundEffect2();
      (0, _WaitMusic.default)(textPlayer, music, callback, args, scope);
    } else if (name === 'bgm') {
      var music = textPlayer.soundManager.getBackgroundMusic();
      (0, _WaitMusic.default)(textPlayer, music, callback, args, scope);
    } else if (name === 'bgm2') {
      var music = textPlayer.soundManager.getBackgroundMusic2();
      (0, _WaitMusic.default)(textPlayer, music, callback, args, scope);
    } else if (KeyCodes.hasOwnProperty(name.toUpperCase())) {
      (0, _WaitKeyDown.default)(textPlayer, name, callback, args, scope);
    } else if ((0, _WaitCameraEffect.IsWaitCameraEffect)(name)) {
      (0, _WaitCameraEffect.WaitCameraEffect)(textPlayer, name, callback, args, scope);
    } else if ((0, _WaitGameObject.IsWaitGameObject)(textPlayer, name)) {
      (0, _WaitGameObject.WaitGameObject)(textPlayer, name, callback, args, scope);
    } else {
      (0, _WaitCallback.default)(textPlayer, name, callback, args, scope);
    }
  }
};
var _default = WaitMultiple;
exports.default = _default;
},{"./WaitCallback.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitCallback.js","./WaitTime.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitTime.js","./WaitClick.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitClick.js","./WaitMusic.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitMusic.js","./WaitCameraEffect.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitCameraEffect.js","./WaitKeyDown.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitKeyDown.js","./WaitGameObject.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitGameObject.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/Wait.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _WaitMultiple = _interopRequireDefault(require("../methods/utils/wait/WaitMultiple.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Wait = function (name) {
  // Already in typingPaused state, or ignore any wait
  if (this.ignoreWait) {
    return this;
  }
  this.pauseTyping();
  (0, _WaitMultiple.default)(this.textPlayer, name, this.resumeTyping, [], this);
  return this;
};
var _default = Wait;
exports.default = _default;
},{"../methods/utils/wait/WaitMultiple.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitMultiple.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/SetIgnoreWait.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetIgnoreWait = function (value) {
  if (value === undefined) {
    value = true;
  }
  this.ignoreWait = value;
  return this;
};
var _default = SetIgnoreWait;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/SetSkipSpaceEnable.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetSkipSpaceEnable = function (enable) {
  if (enable === undefined) {
    enable = true;
  }
  this.skipSpaceEnable = enable;
  return this;
};
var _default = SetSkipSpaceEnable;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/SetSkipTypingAnimation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TimerTypes = require("./TimerTypes.js");
var SetSkipTypingAnimation = function (value) {
  if (value === undefined) {
    value = true;
  }
  this.skipTypingAnimation = value;
  if (value) {
    // Skip current playing typing-animation
    var timers = this.timeline.getTimers(_TimerTypes.TypingAnimationTimerType);
    for (var i = 0, cnt = timers.length; i < cnt; i++) {
      timers[i].seek(1);
    }
  }
  return this;
};
var _default = SetSkipTypingAnimation;
exports.default = _default;
},{"./TimerTypes.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/TimerTypes.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/SetSkipSoundEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetSkipSoundEffect = function (value) {
  if (value === undefined) {
    value = true;
  }
  this.skipSoundEffect = value;
  if (value) {
    var soundManager = this.textPlayer._soundManager;
    if (soundManager) {
      soundManager.fadeOutAllSoundEffects(100, true);
    }
  }
  return this;
};
var _default = SetSkipSoundEffect;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/SkipCurrentTypingDelay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SkipCurrentTypingDelay = function () {
  if (this.typingTimer) {
    this.typingTimer.seek(1);
  }
  return this;
};
var _default = SkipCurrentTypingDelay;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TypingSpeedMethods = _interopRequireDefault(require("./TypingSpeedMethods.js"));
var _FadeOutPage = _interopRequireDefault(require("./FadeOutPage.js"));
var _Start = _interopRequireDefault(require("./Start.js"));
var _Typing = _interopRequireDefault(require("./Typing.js"));
var _Pause = _interopRequireDefault(require("./Pause.js"));
var _Resume = _interopRequireDefault(require("./Resume.js"));
var _PauseTyping = _interopRequireDefault(require("./PauseTyping.js"));
var _ResumeTyping = _interopRequireDefault(require("./ResumeTyping.js"));
var _Wait = _interopRequireDefault(require("./Wait.js"));
var _SetIgnoreWait = _interopRequireDefault(require("./SetIgnoreWait.js"));
var _SetSkipSpaceEnable = _interopRequireDefault(require("./SetSkipSpaceEnable.js"));
var _SetSkipTypingAnimation = _interopRequireDefault(require("./SetSkipTypingAnimation.js"));
var _SetSkipSoundEffect = _interopRequireDefault(require("./SetSkipSoundEffect.js"));
var _SkipCurrentTypingDelay = _interopRequireDefault(require("./SkipCurrentTypingDelay.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {
  fadeOutPage: _FadeOutPage.default,
  start: _Start.default,
  typing: _Typing.default,
  pause: _Pause.default,
  resume: _Resume.default,
  pauseTyping: _PauseTyping.default,
  resumeTyping: _ResumeTyping.default,
  wait: _Wait.default,
  setIgnoreWait: _SetIgnoreWait.default,
  setSkipSpaceEnable: _SetSkipSpaceEnable.default,
  setSkipTypingAnimation: _SetSkipTypingAnimation.default,
  setSkipSoundEffect: _SetSkipSoundEffect.default,
  skipCurrentTypingDelay: _SkipCurrentTypingDelay.default
};
Object.assign(Methods, _TypingSpeedMethods.default);
var _default = Methods;
exports.default = _default;
},{"./TypingSpeedMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/TypingSpeedMethods.js","./FadeOutPage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/FadeOutPage.js","./Start.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/Start.js","./Typing.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/Typing.js","./Pause.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/Pause.js","./Resume.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/Resume.js","./PauseTyping.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/PauseTyping.js","./ResumeTyping.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/ResumeTyping.js","./Wait.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/Wait.js","./SetIgnoreWait.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/SetIgnoreWait.js","./SetSkipSpaceEnable.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/SetSkipSpaceEnable.js","./SetSkipTypingAnimation.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/SetSkipTypingAnimation.js","./SetSkipSoundEffect.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/SetSkipSoundEffect.js","./SkipCurrentTypingDelay.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/SkipCurrentTypingDelay.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/TypeWriter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EventEmitterMethods = _interopRequireDefault(require("../../../../utils/eventemitter/EventEmitterMethods.js"));
var _Methods = _interopRequireDefault(require("./Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class TypeWriter {
  constructor(textPlayer, config) {
    this.setEventEmitter();
    this.textPlayer = textPlayer;
    this.isPageTyping = false;
    this.typingTimer = undefined; // Typing delay
    this.pauseTypingTimer = undefined; // Wait time
    this.inTypingProcessLoop = false; // Used in this.typing()
    this.isTypingPaused = false; // Used in this.wait(), this.pauseTyping(), this.resumeTyping()
    this.setIgnoreWait(false);
    this.setSkipTypingAnimation(false);
    this.setTypingStartCallback(GetValue(config, 'onTypingStart', SetChildrenInvisible));
    this.setDefaultTypingSpeed(GetValue(config, 'speed', 250));
    this.setTypingSpeed();
    this.setSkipSpaceEnable(GetValue(config, 'skipSpace', false));
    this.setAnimationConfig(GetValue(config, 'animation', undefined));
    this.setMinSizeEnable(GetValue(config, 'minSizeEnable', false));
    this.setFadeOutPageCallback(GetValue(config, 'fadeOutPage'));
  }
  destroy() {
    this.destroyEventEmitter();
    this.textPlayer = undefined;
    this.typingTimer = undefined;
    this.pauseTypingTimer = undefined;
    this.onTypeStart = undefined;
    this.animationConfig = undefined;
  }
  get timeline() {
    return this.textPlayer.timeline;
  }
  setTypingStartCallback(callback) {
    this.onTypeStart = callback;
    return this;
  }
  setAnimationConfig(config) {
    if (!config) {
      config = {};
    }
    if (!config.hasOwnProperty('duration')) {
      config.duration = 0;
    }
    if (!config.hasOwnProperty('onStart')) {
      // Apply default onStart callback
      config.onStart = SetChildVisible;
    }
    this.animationConfig = config;
    return this;
  }
  setFadeOutPageCallback(callback) {
    this.fadeOutPageCallback = callback;
    return this;
  }
  setMinSizeEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.minSizeEnable = enable;
    return this;
  }
  getNextChild() {
    var child = this.nextChild;
    this.index = Math.min(this.index + 1, this.children.length); // Point to next child
    this._nextChild = undefined;
    return child;
  }
  get nextChild() {
    if (!this._nextChild) {
      this._nextChild = this.children[this.index];
    }
    return this._nextChild;
  }
}
var SetChildVisible = function (child) {
  if (child.setVisible) {
    child.setVisible();
  }
};
var SetChildrenInvisible = function (children) {
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (child.setVisible) {
      child.setVisible(false);
    }
  }
};
Object.assign(TypeWriter.prototype, _EventEmitterMethods.default, _Methods.default);
var _default = TypeWriter;
exports.default = _default;
},{"../../../../utils/eventemitter/EventEmitterMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/eventemitter/EventEmitterMethods.js","./Methods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/Methods.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/sprite/spritemanager/SpriteBob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BobBase = _interopRequireDefault(require("../../gameobject/gomanager/bobbase/BobBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class SpriteBob extends _BobBase.default {
  playAnimation(key) {
    this.gameObject.anims.timeScale = this.timeScale;
    this.gameObject.play(key);
    return this;
  }
  stopAnimation() {
    this.gameObject.stop();
    return this;
  }
  chainAnimation(keys) {
    this.gameObject.chain(keys);
    return this;
  }
  pauseAnimation() {
    this.gameObject.anims.pause();
    return this;
  }
  setTimeScale(timeScale) {
    super.setTimeScale(timeScale);
    if (this.gameObject.anims) {
      this.gameObject.anims.timeScale = timeScale;
    }
    return this;
  }
}
var _default = SpriteBob;
exports.default = _default;
},{"../../gameobject/gomanager/bobbase/BobBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/bobbase/BobBase.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/sprite/spritemanager/methods/AnimationMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  playAnimation(name, key) {
    if (!this.has(name)) {
      this.add(name);
    }
    this.get(name).playAnimation(key);
    return this;
  },
  stopAnimation(name) {
    if (!this.has(name)) {
      return this;
    }
    this.get(name).stopAnimation();
    return this;
  },
  chainAnimation(name, keys) {
    if (!this.has(name)) {
      return this;
    }
    this.get(name).chainAnimation(keys);
    return this;
  },
  pauseAnimation(name) {
    if (!this.has(name)) {
      return this;
    }
    this.get(name).pauseAnimation();
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/sprite/spritemanager/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AnimationMethods = _interopRequireDefault(require("./AnimationMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {};
Object.assign(Methods, _AnimationMethods.default);
var _default = Methods;
exports.default = _default;
},{"./AnimationMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/sprite/spritemanager/methods/AnimationMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/sprite/spritemanager/SpriteManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GOManager = _interopRequireDefault(require("../../gameobject/gomanager/GOManager.js"));
var _SpriteBob = _interopRequireDefault(require("./SpriteBob.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class SpriteManager extends _GOManager.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    config.BobClass = _SpriteBob.default;
    super(scene, config);
  }
  setCreateGameObjectCallback(callback, scope) {
    if (!callback || callback === 'sprite') {
      callback = CreateSprite;
    } else if (callback === 'image') {
      callback = CreateImage;
    }
    super.setCreateGameObjectCallback(callback, scope);
    return this;
  }
}
var CreateSprite = function (scene, textureKey, frameName) {
  if (typeof frameName !== 'string' && typeof frameName !== 'number') {
    frameName = undefined;
  }
  return scene.add.sprite(0, 0, textureKey, frameName);
};
var CreateImage = function (scene, textureKey, frameName) {
  if (typeof frameName !== 'string' && typeof frameName !== 'number') {
    frameName = undefined;
  }
  return scene.add.image(0, 0, textureKey, frameName);
};
Object.assign(SpriteManager.prototype, _Methods.default);
var _default = SpriteManager;
exports.default = _default;
},{"../../gameobject/gomanager/GOManager.js":"node_modules/phaser3-rex-plugins/plugins/utils/gameobject/gomanager/GOManager.js","./SpriteBob.js":"node_modules/phaser3-rex-plugins/plugins/utils/sprite/spritemanager/SpriteBob.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/utils/sprite/spritemanager/methods/Methods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/spritemanager/OnParsePlayAnimationTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var IsPlayAnimationTag = function (tags, goType) {
  // goType.name.play
  return tags.length === 3 && tags[0] === goType && tags[2] === 'play';
};
var IsStopAnimationTag = function (tags, goType) {
  // goType.name.stop
  return tags.length === 3 && tags[0] === goType && tags[2] === 'stop';
};
var OnParsePlayAnimationTag = function (textPlayer, parser, config) {
  var goType = config.name;
  parser.on('+', function (tag, ...keys) {
    if (parser.skipEventFlag) {
      // Has been processed before
      return;
    }

    // [goType.name.play=key], or [goType.name.play=key0,key1,...]
    var tags = tag.split('.');
    var name;
    if (IsPlayAnimationTag(tags, goType)) {
      name = tags[1];
    } else {
      return;
    }
    _AppendCommand.default.call(textPlayer, `${goType}.play`,
    // name
    PlayAnimation,
    // callback
    [goType, name, keys],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on('+', function (tag) {
    if (parser.skipEventFlag) {
      // Has been processed before
      return;
    }

    // [goType.name.stop]
    var tags = tag.split('.');
    var name;
    if (IsStopAnimationTag(tags, goType)) {
      name = tags[1];
    } else {
      return;
    }
    _AppendCommand.default.call(textPlayer, `${goType}.stop`,
    // name
    StopAnimation,
    // callback
    [goType, name],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on('-', function (tag) {
    if (parser.skipEventFlag) {
      // Has been processed before
      return;
    }

    // [/goType.name.play]
    var tags = tag.split('.');
    var name;
    if (IsPlayAnimationTag(tags, goType)) {
      name = tags[1];
    } else {
      return;
    }
    _AppendCommand.default.call(textPlayer, `${goType}.stop`,
    // name
    StopAnimation,
    // callback
    [goType, name],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var PlayAnimation = function (params) {
  var goType, name, keys;
  [goType, name, keys] = params;
  var key = keys.shift();

  // this: textPlayer
  var gameObjectManager = this.getGameObjectManager(goType);
  gameObjectManager.playAnimation(name, key);
  if (keys.length > 0) {
    gameObjectManager.chainAnimation(name, keys);
  }
};
var StopAnimation = function (params) {
  var goType, args;
  [goType, ...args] = params;
  // this: textPlayer
  var gameObjectManager = this.getGameObjectManager(goType);
  gameObjectManager.stopAnimation(...args);
};
var _default = OnParsePlayAnimationTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/spritemanager/OnParsePauseAnimationTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var IsPauseAnimationTag = function (tags, goType) {
  // goType.name.pause 
  return tags.length === 3 && tags[0] === goType && tags[2] === 'pause';
};
var OnParsePauseAnimationTag = function (textPlayer, parser, config) {
  var goType = config.name;
  parser.on('+', function (tag) {
    if (parser.skipEventFlag) {
      // Has been processed before
      return;
    }

    // [goType.name.pause=key]
    var tags = tag.split('.');
    var name;
    if (IsPauseAnimationTag(tags, goType)) {
      name = tags[1];
    } else {
      return;
    }
    _AppendCommand.default.call(textPlayer, `${goType}.pause`,
    // name
    PauseAnimation,
    // callback
    [goType, name],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var PauseAnimation = function (params) {
  var goType, args;
  [goType, ...args] = params;
  // this: textPlayer
  var gameObjectManager = this.getGameObjectManager(goType);
  gameObjectManager.pauseAnimation(...args);
};
var _default = OnParsePauseAnimationTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/spritemanager/OnParseChainAnimationTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var IsChainAnimationTag = function (tags, goType) {
  // goType.name.chain 
  return tags.length === 3 && tags[0] === goType && tags[2] === 'chain';
};
var OnParseChainAnimationTag = function (textPlayer, parser, config) {
  var goType = config.name;
  parser.on('+', function (tag) {
    if (parser.skipEventFlag) {
      // Has been processed before
      return;
    }

    // [goType.name.chain=key]
    var tags = tag.split('.');
    var name;
    if (IsChainAnimationTag(tags, goType)) {
      name = tags[1];
    } else {
      return;
    }
    var keys = Array.prototype.slice.call(arguments, 1);
    _AppendCommand.default.call(textPlayer, `${goType}.chain`,
    // name
    ChainAnimation,
    // callback
    [goType, name, keys],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var ChainAnimation = function (params) {
  var goType, args;
  [goType, ...args] = params;
  // this: textPlayer
  var gameObjectManager = this.getGameObjectManager(goType);
  gameObjectManager.chainAnimation(...args);
};
var _default = OnParseChainAnimationTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/spritemanager/AddSpriteManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SpriteManager = _interopRequireDefault(require("../../../../../utils/sprite/spritemanager/SpriteManager.js"));
var _OnParsePlayAnimationTag = _interopRequireDefault(require("./OnParsePlayAnimationTag.js"));
var _OnParsePauseAnimationTag = _interopRequireDefault(require("./OnParsePauseAnimationTag.js"));
var _OnParseChainAnimationTag = _interopRequireDefault(require("./OnParseChainAnimationTag.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ParseCallbacks = [_OnParsePlayAnimationTag.default, _OnParsePauseAnimationTag.default, _OnParseChainAnimationTag.default];
var AddSpriteManager = function (config) {
  if (config === undefined) {
    config = {};
  }
  config.name = 'sprite';
  config.parseCallbacks = ParseCallbacks;
  this.addGameObjectManager(config, _SpriteManager.default);
};
var _default = AddSpriteManager;
exports.default = _default;
},{"../../../../../utils/sprite/spritemanager/SpriteManager.js":"node_modules/phaser3-rex-plugins/plugins/utils/sprite/spritemanager/SpriteManager.js","./OnParsePlayAnimationTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/spritemanager/OnParsePlayAnimationTag.js","./OnParsePauseAnimationTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/spritemanager/OnParsePauseAnimationTag.js","./OnParseChainAnimationTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/spritemanager/OnParseChainAnimationTag.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/gameobjectmanager/OnParseAddGameObjectTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var IsAddGameObjectTag = function (tags, goType) {
  // goType.name
  return tags.length === 2 && tags[0] === goType;
};
var OnParseAddGameObjectTag = function (textPlayer, parser, config) {
  var goType = config.name;
  parser.on('+', function (tag, ...args) {
    if (parser.skipEventFlag) {
      // Has been processed before
      return;
    }

    // [goType.name=key,frame], or [goType.name]
    var tags = tag.split('.');
    var name;
    if (IsAddGameObjectTag(tags, goType)) {
      name = tags[1];
    } else {
      return;
    }
    _AppendCommand.default.call(textPlayer, `${goType}.add`,
    // name
    AddGameObject,
    // callback
    [goType, name, ...args],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  }).on('-', function (tag) {
    if (parser.skipEventFlag) {
      // Has been processed before
      return;
    }

    // [/goType.name]
    var tags = tag.split('.');
    var name;
    if (IsAddGameObjectTag(tags, goType)) {
      name = tags[1];
    } else {
      return;
    }
    _AppendCommand.default.call(textPlayer, `${goType}.remove`,
    // name
    RemoveGameObject,
    // callback
    [goType, name],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var AddGameObject = function (params) {
  var goType, args;
  [goType, ...args] = params;
  // this: textPlayer
  var gameObjectManager = this.getGameObjectManager(goType);
  gameObjectManager.add(...args);
};
var RemoveGameObject = function (params) {
  var goType, args;
  [goType, ...args] = params;
  // this: textPlayer
  var gameObjectManager = this.getGameObjectManager(goType);
  gameObjectManager.remove(...args);
};
var _default = OnParseAddGameObjectTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/gameobjectmanager/OnParseRemoveAllGameObjectsTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnParseRemoveAllGameObjectsTag = function (textPlayer, parser, config) {
  var goType = config.name;
  parser.on('-', function (tag) {
    if (parser.skipEventFlag) {
      // Has been processed before
      return;
    }

    // [/goType]
    if (tag === goType) {} else {
      return;
    }
    _AppendCommand.default.call(textPlayer, `${goType}.removeall`,
    // name
    RemoveAllSprites,
    // callback
    goType,
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var RemoveAllSprites = function (goType) {
  // this: textPlayer
  var gameObjectManager = this.getGameObjectManager(goType);
  gameObjectManager.removeAll();
};
var _default = OnParseRemoveAllGameObjectsTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/gameobjectmanager/OnParseCallGameObjectMethodTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var IsPropTag = function (tags, goType) {
  // goType.name.prop
  return tags.length === 3 && tags[0] === goType;
};
var OnParseCallGameObjectMethodTag = function (textPlayer, parser, config) {
  var goType = config.name;
  parser.on(`+`, function (tag, ...parameters) {
    if (parser.skipEventFlag) {
      // Has been processed before
      return;
    }

    // [goType.name.methodName=value0,value1,value2...]
    // [goType.name.prop=value]
    var tags = tag.split('.');
    var name, prop;
    if (IsPropTag(tags, goType)) {
      name = tags[1];
      prop = tags[2];
    } else {
      return;
    }
    _AppendCommand.default.call(textPlayer, `${goType}.call`,
    // name
    CallMethod,
    // callback
    [goType, name, prop, ...parameters],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var CallMethod = function (params) {
  var goType, name, prop, args;
  [goType, name, prop, ...args] = params;
  // this: textPlayer

  var eventName = `${goType}.${prop}`;
  this.emit(eventName, name, ...args);
  if (this.listenerCount(eventName) > 0) {
    return;
  }
  var gameObjectManager = this.getGameObjectManager(goType);
  if (gameObjectManager.hasMethod(name, prop)) {
    // Is method
    gameObjectManager.call(name, prop, ...args);
  } else {
    // Is property
    gameObjectManager.setProperty(name, prop, args[0]);
  }
};
var _default = OnParseCallGameObjectMethodTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/gameobjectmanager/OnParseEaseGameObjectPropertyTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AppendCommand = _interopRequireDefault(require("../../../dynamictext/methods/AppendCommand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var EaseMode = {
  to: true,
  yoyo: true,
  from: true,
  toLeft: true,
  toRight: true,
  toUp: true,
  toDown: true,
  yoyoLeft: true,
  yoyoRight: true,
  yoyoUp: true,
  yoyoDown: true,
  fromLeft: true,
  fromRight: true,
  fromUp: true,
  fromDown: true
};
var IsEasePropertyTag = function (tags, goType) {
  // goType.name.prop.to
  return tags.length === 4 && tags[0] === goType && EaseMode[tags[3]];
};
var OnParseEaseGameObjectPropertyTag = function (textPlayer, parser, config) {
  var goType = config.name;
  var gameObjectManager = textPlayer.getGameObjectManager(goType);
  parser.on(`+`, function (tag, value, duration, ease, repeat) {
    if (parser.skipEventFlag) {
      // Has been processed before
      return;
    }

    // [goType.name.prop.to=value,duration]
    // [goType.name.prop.to=value,duration,ease,repeat]
    // [goType.name.prop.to=value,duration,repeat]
    var tags = tag.split('.');
    var name, property, easeMode;
    if (IsEasePropertyTag(tags, goType)) {
      name = tags[1];
      property = tags[2];
      easeMode = tags[3];
    } else {
      return;
    }
    if (typeof ease === 'number') {
      repeat = ease;
      ease = undefined;
    }
    _AppendCommand.default.call(textPlayer, `${goType}.ease`,
    // name
    EaseProperty,
    // callback
    [goType, name, property, value, duration, ease, repeat, easeMode],
    // params
    textPlayer // scope
    );

    parser.skipEvent();
  });
};
var EaseProperty = function (params) {
  var goType, name, property, value, duration, ease, repeat, easeMode;
  [goType, name, property, value, duration, ease, repeat, easeMode] = params;
  // this: textPlayer
  var gameObjectManager = this.getGameObjectManager(goType);
  var currentValue = gameObjectManager.getProperty(name, property);
  // Only can tween number property
  if (typeof currentValue !== 'number') {
    return;
  }
  if (easeMode.endsWith('Left') || easeMode.endsWith('Up')) {
    if (easeMode.startsWith('to') || easeMode.startsWith('yoyo')) {
      value = currentValue - value;
    } else if (easeMode.startsWith('from')) {
      gameObjectManager.setProperty(name, property, currentValue - value);
      value = currentValue;
    }
  } else if (easeMode.endsWith('Right') || easeMode.endsWith('Down')) {
    if (easeMode.startsWith('to') || easeMode.startsWith('yoyo')) {
      value = currentValue + value;
    } else if (easeMode.startsWith('from')) {
      gameObjectManager.setProperty(name, property, currentValue + value);
      value = currentValue;
    }
  } else if (easeMode === 'from') {
    gameObjectManager.setProperty(name, property, value);
    value = currentValue;
  }
  var isYoyo = easeMode.startsWith('yoyo');
  gameObjectManager.easeProperty(name, property, value, duration, ease, repeat, isYoyo);
};
var _default = OnParseEaseGameObjectPropertyTag;
exports.default = _default;
},{"../../../dynamictext/methods/AppendCommand.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AppendCommand.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/gameobjectmanager/GameObjectManagerMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GameObjectManagerMethods = _interopRequireDefault(require("../../../../../utils/managers/GameObjectManagerMethods.js"));
var _OnParseAddGameObjectTag = _interopRequireDefault(require("./OnParseAddGameObjectTag.js"));
var _OnParseRemoveAllGameObjectsTag = _interopRequireDefault(require("./OnParseRemoveAllGameObjectsTag.js"));
var _OnParseCallGameObjectMethodTag = _interopRequireDefault(require("./OnParseCallGameObjectMethodTag.js"));
var _OnParseEaseGameObjectPropertyTag = _interopRequireDefault(require("./OnParseEaseGameObjectPropertyTag.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ParseCallbacks = [_OnParseAddGameObjectTag.default, _OnParseRemoveAllGameObjectsTag.default, _OnParseCallGameObjectMethodTag.default, _OnParseEaseGameObjectPropertyTag.default];
const AddGameObjectManager = _GameObjectManagerMethods.default.addGameObjectManager;
var _default = {
  addGameObjectManager(config, GameObjectManagerClass) {
    if (config === undefined) {
      config = {};
    }
    var name = config.name;
    if (!name) {
      console.warn(`Parameter 'name' is required in TextPlayer.addGameObjectManager(config) method`);
    }
    AddGameObjectManager.call(this, config, GameObjectManagerClass);

    // Register parse callbacks
    var customParseCallbacks = config.parseCallbacks;
    if (!customParseCallbacks) {
      customParseCallbacks = ParseCallbacks;
    } else {
      customParseCallbacks = [...customParseCallbacks,
      // customParseCallbacks have higher priority
      ...ParseCallbacks];
    }
    for (var i = 0, cnt = customParseCallbacks.length; i < cnt; i++) {
      customParseCallbacks[i](this, this.parser, config);
    }
    return this;
  }
};
exports.default = _default;
},{"../../../../../utils/managers/GameObjectManagerMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/managers/GameObjectManagerMethods.js","./OnParseAddGameObjectTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/gameobjectmanager/OnParseAddGameObjectTag.js","./OnParseRemoveAllGameObjectsTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/gameobjectmanager/OnParseRemoveAllGameObjectsTag.js","./OnParseCallGameObjectMethodTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/gameobjectmanager/OnParseCallGameObjectMethodTag.js","./OnParseEaseGameObjectPropertyTag.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/gameobjectmanager/OnParseEaseGameObjectPropertyTag.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/SetClickTarget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsSceneObject = _interopRequireDefault(require("../../../../utils/system/IsSceneObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var SetClickTarget = function (target) {
  this.clickTarget = target;
  if (!target) {
    this.clickEE = null;
  } else if ((0, _IsSceneObject.default)(target)) {
    this.clickEE = target.input;
  } else {
    // Assume that target is a gameObject
    this.clickEE = target.setInteractive();
  }
  return this;
};
var _default = SetClickTarget;
exports.default = _default;
},{"../../../../utils/system/IsSceneObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsSceneObject.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/SetTargetCamera.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetTargetCamera = function (camera) {
  this.targetCamera = camera;
  return this;
};
var _default = SetTargetCamera;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/SetNextPageInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetWrapCallback = _interopRequireDefault(require("./utils/wait/GetWrapCallback.js"));
var _WaitMultiple = _interopRequireDefault(require("./utils/wait/WaitMultiple.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var SetNextPageInput = function (input) {
  var textPlayer = this;
  if (!input) {
    this.nextPageInput = null;
  } else if (typeof input === 'function') {
    this.nextPageInput = function (callback, args, scope) {
      var wrapCallback = (0, _GetWrapCallback.default)(textPlayer, callback, args, scope);
      input.call(textPlayer, wrapCallback);
    };
  } else {
    this.nextPageInput = function (callback, args, scope) {
      (0, _WaitMultiple.default)(textPlayer, input, callback, args, scope);
    };
  }
};
var _default = SetNextPageInput;
exports.default = _default;
},{"./utils/wait/GetWrapCallback.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/GetWrapCallback.js","./utils/wait/WaitMultiple.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/wait/WaitMultiple.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/AddImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var AddImage = function (key, config) {
  this.imageManager.add(key, config);
  return this;
};
var _default = AddImage;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/PlayMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _WaitEvent = require("../../../../utils/promise/WaitEvent.js");
var _default = {
  play(content) {
    if (this.isPlaying) {
      return this;
    }
    this.removeChildren();
    this.parser.start(content); // Parse bbcode-content

    this.isPlaying = true;
    this.once('complete', function () {
      this.isPlaying = false;
    }, this);
    this.lastWrapResult = undefined;
    this.typingNextPage();
    return this;
  },
  playPromise(content) {
    var promise = (0, _WaitEvent.WaitComplete)(this);
    this.play(content);
    return promise;
  }
};
exports.default = _default;
},{"../../../../utils/promise/WaitEvent.js":"node_modules/phaser3-rex-plugins/plugins/utils/promise/WaitEvent.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/TypingNextPage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Events = require("./utils/Events.js");
const GetValue = Phaser.Utils.Objects.GetValue;
var TypingNextPage = function () {
  if (!this.isPlaying || this.isPageTyping) {
    return this;
  }
  this.typeWriter.once('page.fadeout', _TypingNextPage, this).fadeOutPage();
  return this;
};
var _TypingNextPage = function () {
  var result = this.runWrap(this.lastWrapResult);
  this.lastWrapResult = result;
  this.emit('page.start');
  var OnTypingPageComplete = function () {
    this.emit(_Events.StopPlayEvent); // Clear registed StopPlayEvent
    if (result.isLastPage) {
      this.emit('complete');
    } else {
      this.emit('page.complete');
      if (this.ignoreNextPageInput) {
        TypingNextPage.call(this);
      } else if (this.nextPageInput) {
        this.nextPageInput(TypingNextPage, [], this);
      } else {
        // Stop here, don't typing next page.
      }
    }
  };

  // Remove event when typing pages has been canceled
  this.once(_Events.StopPlayEvent, function () {
    this.typeWriter.off('complete', OnTypingPageComplete, this);
  });
  this.typeWriter.once('complete', OnTypingPageComplete, this).start(result.children);
};
var _default = TypingNextPage;
exports.default = _default;
},{"./utils/Events.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/Events.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/PauseMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  pause() {
    // Pause typing, typing timer and animation progresses
    this.timeline.pause();
    return this;
  },
  pauseTyping() {
    // Pause typing
    this.typeWriter.pauseTyping();
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/ResumeMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  resume() {
    // Resume typing timer, animation progresses and typing
    this.timeline.resume();
    return this;
  },
  resumeTyping(offsetTime) {
    // Resume typing
    this.typeWriter.resumeTyping(offsetTime);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/Wait.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Wait = function (name) {
  this.typeWriter.wait(name);
  return this;
};
var _default = Wait;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/TypingSpeedMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setDefaultTypingSpeed(speed) {
    this.defaultTypingSpeed = speed;
    return this;
  },
  setTypingSpeed(speed) {
    this.typingSpeed = speed;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/SetIgnoreWait.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetIgnoreWait = function (value) {
  this.typeWriter.setIgnoreWait(value);
  return this;
};
var _default = SetIgnoreWait;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/SetIgnoreNextPageInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetIgnoreNextPageInput = function (enable) {
  if (enable === undefined) {
    enable = true;
  }
  this.ignoreNextPageInput = enable;
  return this;
};
var _default = SetIgnoreNextPageInput;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/ShowPage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ShowPage = function () {
  // Only can work after playing, and before processing last child
  if (!this.isPlaying || !this.isPageTyping) {
    return this;
  }

  // Save parameters
  var typingSpeedSave = this.typeWriter.speed;
  var ignoreWaitSave = this.typeWriter.ignoreWait;
  var skipTypingAnimationSave = this.typeWriter.skipTypingAnimation;
  var skipSoundEffectSave = this.typeWriter.skipSoundEffect;
  this.typeWriter.once('complete', function () {
    // Recover parameters
    this.typeWriter.setTypingSpeed(typingSpeedSave).setIgnoreWait(ignoreWaitSave).setSkipTypingAnimation(skipTypingAnimationSave).setSkipSoundEffect(skipSoundEffectSave);
  }, this).setTypingSpeed(0).skipCurrentTypingDelay().setIgnoreWait(true).setSkipTypingAnimation(true).setSkipSoundEffect(true);
  return this;
};
var _default = ShowPage;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/spritemanager/SpriteMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  getSprite(name) {
    return this.getGameObject('sprite', name);
  },
  addSprite(name, gameObject) {
    this.addGameObject('sprite', name, gameObject);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/ContentMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setContentOutputEnable(enable) {
    this.parser.setContentOutputEnable(enable);
    return this;
  },
  setContentCallback(callback, scope) {
    this.contentCallback = callback;
    this.contentCallbackScope = scope;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GameObjectManagerMethods = _interopRequireDefault(require("./gameobjectmanager/GameObjectManagerMethods.js"));
var _SetClickTarget = _interopRequireDefault(require("./SetClickTarget.js"));
var _SetTargetCamera = _interopRequireDefault(require("./SetTargetCamera.js"));
var _SetNextPageInput = _interopRequireDefault(require("./SetNextPageInput.js"));
var _AddImage = _interopRequireDefault(require("./AddImage.js"));
var _PlayMethods = _interopRequireDefault(require("./PlayMethods.js"));
var _TypingNextPage = _interopRequireDefault(require("./TypingNextPage.js"));
var _PauseMethods = _interopRequireDefault(require("./PauseMethods.js"));
var _ResumeMethods = _interopRequireDefault(require("./ResumeMethods.js"));
var _Wait = _interopRequireDefault(require("./Wait.js"));
var _TypingSpeedMethods = _interopRequireDefault(require("./TypingSpeedMethods.js"));
var _SetIgnoreWait = _interopRequireDefault(require("./SetIgnoreWait.js"));
var _SetIgnoreNextPageInput = _interopRequireDefault(require("./SetIgnoreNextPageInput.js"));
var _ShowPage = _interopRequireDefault(require("./ShowPage.js"));
var _SpriteMethods = _interopRequireDefault(require("./spritemanager/SpriteMethods.js"));
var _ContentMethods = _interopRequireDefault(require("./ContentMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {
  setClickTarget: _SetClickTarget.default,
  setTargetCamera: _SetTargetCamera.default,
  setNextPageInput: _SetNextPageInput.default,
  addImage: _AddImage.default,
  typingNextPage: _TypingNextPage.default,
  wait: _Wait.default,
  setIgnoreWait: _SetIgnoreWait.default,
  setIgnoreNextPageInput: _SetIgnoreNextPageInput.default,
  showPage: _ShowPage.default
};
Object.assign(Methods, _GameObjectManagerMethods.default, _PlayMethods.default, _PauseMethods.default, _ResumeMethods.default, _TypingSpeedMethods.default, _SpriteMethods.default, _ContentMethods.default);
var _default = Methods;
exports.default = _default;
},{"./gameobjectmanager/GameObjectManagerMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/gameobjectmanager/GameObjectManagerMethods.js","./SetClickTarget.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/SetClickTarget.js","./SetTargetCamera.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/SetTargetCamera.js","./SetNextPageInput.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/SetNextPageInput.js","./AddImage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/AddImage.js","./PlayMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/PlayMethods.js","./TypingNextPage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/TypingNextPage.js","./PauseMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/PauseMethods.js","./ResumeMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/ResumeMethods.js","./Wait.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/Wait.js","./TypingSpeedMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/TypingSpeedMethods.js","./SetIgnoreWait.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/SetIgnoreWait.js","./SetIgnoreNextPageInput.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/SetIgnoreNextPageInput.js","./ShowPage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/ShowPage.js","./spritemanager/SpriteMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/spritemanager/SpriteMethods.js","./ContentMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/ContentMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/ClearEvents.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Events = require("./Events.js");
var ClearEvents = function (textPlayer) {
  for (var i = 0, cnt = _Events.ClearEvents.length; i < cnt; i++) {
    textPlayer.emit(_Events.ClearEvents[i]);
  }
};
var _default = ClearEvents;
exports.default = _default;
},{"./Events.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/Events.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/TextPlayer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Extend = _interopRequireDefault(require("../../../utils/managers/Extend.js"));
var _DynamicText = _interopRequireDefault(require("../dynamictext/DynamicText.js"));
var _Parser = _interopRequireDefault(require("./parser/Parser.js"));
var _TypeWriter = _interopRequireDefault(require("./typewriter/TypeWriter.js"));
var _ImageManager = _interopRequireDefault(require("../../../utils/texture/imagemanager/ImageManager.js"));
var _AddSpriteManager = _interopRequireDefault(require("./methods/spritemanager/AddSpriteManager.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
var _ClearEvents = _interopRequireDefault(require("./methods/utils/ClearEvents.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class TextPlayer extends (0, _Extend.default)(_DynamicText.default) {
  constructor(scene, x, y, fixedWidth, fixedHeight, config) {
    if (IsPlainObject(x)) {
      config = x;
    } else if (IsPlainObject(fixedWidth)) {
      config = fixedWidth;
    }
    if (config === undefined) {
      config = {};
    }

    // Don't set text in DynamicText's constructor
    var content = config.text;
    delete config.text;
    super(scene, x, y, fixedWidth, fixedHeight, config);
    this.type = 'rexTextPlayer';
    this.parser = new _Parser.default(this, GetValue(config, 'parser', undefined));
    this.typeWriter = new _TypeWriter.default(this, GetValue(config, 'typing', undefined));
    this._imageManager = undefined;
    var imageData = GetValue(config, 'images', undefined);
    if (imageData) {
      this.addImage(imageData);
    }
    this.setTargetCamera(GetValue(config, 'camera', this.scene.sys.cameras.main));
    this.initManagers(scene, config);
    var spriteManagerConfig = GetValue(config, 'sprites');
    if (spriteManagerConfig !== false && spriteManagerConfig !== null) {
      _AddSpriteManager.default.call(this, spriteManagerConfig);
    }
    this.setIgnoreNextPageInput(GetValue(config, 'ignoreNextPageInput', false));
    this.setClickTarget(GetValue(config, 'clickTarget', this)); // this.clickEE
    this.setNextPageInput(GetValue(config, 'nextPageInput', null));
    this.isPlaying = false;
    if (content) {
      this.play(content);
    }
  }
  get imageManager() {
    if (this._imageManager === undefined) {
      this._imageManager = new _ImageManager.default(this.scene);
    }
    return this._imageManager;
  }
  get spriteManager() {
    return this.getGameObjectManager('sprite');
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    (0, _ClearEvents.default)(this);
    this.parser.destroy();
    this.parser = undefined;
    this.typeWriter.destroy(fromScene);
    this.typeWriter = undefined;
    if (this._imageManager) {
      this._imageManager.destroy(fromScene);
    }
    this._imageManager = undefined;
    this.targetCamera = undefined;
    this.clickEE = undefined;
    this.destroyManagers(fromScene);
    super.destroy(fromScene);
  }
  get isPageTyping() {
    return this.typeWriter.isPageTyping;
  }
  set defaultTypingSpeed(speed) {
    this.typeWriter.setDefaultTypingSpeed(speed);
  }
  get defaultTypingSpeed() {
    return this.typeWriter.defaultTypingSpeed;
  }
  set typingSpeed(speed) {
    this.typeWriter.setTypingSpeed(speed);
  }
  get typingSpeed() {
    return this.typeWriter.speed;
  }
  set timeScale(value) {
    this.setTimeScale(value);
  }
  get timeScale() {
    return this.getTimeScale();
  }
}
Object.assign(TextPlayer.prototype, _Methods.default);
var _default = TextPlayer;
exports.default = _default;
},{"../../../utils/managers/Extend.js":"node_modules/phaser3-rex-plugins/plugins/utils/managers/Extend.js","../dynamictext/DynamicText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/DynamicText.js","./parser/Parser.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/parser/Parser.js","./typewriter/TypeWriter.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/typewriter/TypeWriter.js","../../../utils/texture/imagemanager/ImageManager.js":"node_modules/phaser3-rex-plugins/plugins/utils/texture/imagemanager/ImageManager.js","./methods/spritemanager/AddSpriteManager.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/spritemanager/AddSpriteManager.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/Methods.js","./methods/utils/ClearEvents.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/methods/utils/ClearEvents.js"}],"node_modules/phaser3-rex-plugins/plugins/textplayer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextPlayer = _interopRequireDefault(require("./gameobjects/dynamictext/textplayer/TextPlayer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _TextPlayer.default;
exports.default = _default;
},{"./gameobjects/dynamictext/textplayer/TextPlayer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/textplayer/TextPlayer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textplayer/TextPlayer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _textplayer = _interopRequireDefault(require("../../../plugins/textplayer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _textplayer.default;
exports.default = _default;
},{"../../../plugins/textplayer.js":"node_modules/phaser3-rex-plugins/plugins/textplayer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textplayer/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextPlayer = _interopRequireDefault(require("./TextPlayer.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('textPlayer', function (x, y, width, height, config) {
  var gameObject = new _TextPlayer.default(this.scene, x, y, width, height, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.TextPlayer', _TextPlayer.default);
var _default = _TextPlayer.default;
exports.default = _default;
},{"./TextPlayer.js":"node_modules/phaser3-rex-plugins/templates/ui/textplayer/TextPlayer.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/InputTextProperties.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyleProperties = exports.ElementProperties = void 0;
const ElementProperties = {
  maxLength: ['maxLength', undefined],
  minLength: ['minLength', undefined],
  readOnly: ['readOnly', false]
};
exports.ElementProperties = ElementProperties;
const StyleProperties = {
  direction: ['direction', undefined]
};
exports.StyleProperties = StyleProperties;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/object/CopyProperty.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var CopyProperty = function (from, to, key) {
  if (typeof key === 'string') {
    if (from.hasOwnProperty(key)) {
      to[key] = from[key];
    }
  } else {
    var keys = key;
    if (Array.isArray(keys)) {
      for (var i = 0, cnt = keys.length; i < cnt; i++) {
        CopyProperty(from, to, keys[i]);
      }
    } else {
      for (var key in keys) {
        CopyProperty(from, to, key);
      }
    }
  }
};
var _default = CopyProperty;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/CopyElementConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputTextProperties = require("./InputTextProperties.js");
var _CopyProperty = _interopRequireDefault(require("../../../utils/object/CopyProperty.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CopyElementConfig = function (from) {
  if (from === undefined) {
    from = {};
  }
  var to = {};
  (0, _CopyProperty.default)(from, to, 'inputType');
  (0, _CopyProperty.default)(from, to, 'type');
  (0, _CopyProperty.default)(from, to, 'style');
  (0, _CopyProperty.default)(from, to, _InputTextProperties.StyleProperties);
  (0, _CopyProperty.default)(from, to, _InputTextProperties.ElementProperties);
  return to;
};
var _default = CopyElementConfig;
exports.default = _default;
},{"./InputTextProperties.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/InputTextProperties.js","../../../utils/object/CopyProperty.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/CopyProperty.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/input/IsPointerInHitArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var IsPointerInHitArea = function (gameObject, pointer, preTest, postTest) {
  if (pointer) {
    if (preTest && !preTest(gameObject, pointer)) {
      return false;
    }
    if (!HitTest(gameObject, pointer)) {
      return false;
    }
    if (postTest && !postTest(gameObject, pointer)) {
      return false;
    }
    return true;
  } else {
    var inputManager = gameObject.scene.input.manager;
    var pointersTotal = inputManager.pointersTotal;
    var pointers = inputManager.pointers,
      pointer;
    for (var i = 0; i < pointersTotal; i++) {
      pointer = pointers[i];
      if (preTest && !preTest(gameObject, pointer)) {
        continue;
      }
      if (!HitTest(gameObject, pointer)) {
        continue;
      }
      if (postTest && !postTest(gameObject, pointer)) {
        continue;
      }
      return true;
    }
    return false;
  }
};
var HitTest = function (gameObject, pointer) {
  var scene = gameObject.scene;
  var cameras = scene.input.cameras.getCamerasBelowPointer(pointer);
  var inputManager = scene.input.manager;
  var gameObjects = [gameObject];
  var output;
  for (var i = 0, len = cameras.length; i < len; i++) {
    output = inputManager.hitTest(pointer, gameObjects, cameras[i]);
    if (output.length > 0) {
      return true;
    }
  }
  return false;
};
var _default = IsPointerInHitArea;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/LastOpenedEditor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SetLastOpenedEditor = exports.CloseLastOpenEditor = void 0;
var LastOpenedEditor = undefined;
var SetLastOpenedEditor = function (editor) {
  if (editor === LastOpenedEditor) {
    return;
  }
  if (LastOpenedEditor !== undefined) {
    LastOpenedEditor.close();
  }
  LastOpenedEditor = editor;
};
exports.SetLastOpenedEditor = SetLastOpenedEditor;
var CloseLastOpenEditor = function (editor) {
  if (editor !== LastOpenedEditor) {
    return;
  }

  // Don't call `LastOpenedEditor.close()`
  LastOpenedEditor = undefined;
};
exports.CloseLastOpenEditor = CloseLastOpenEditor;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/SetProperties.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetValue = Phaser.Utils.Objects.GetValue;
var SetProperties = function (properties, config, out) {
  if (out === undefined) {
    out = {};
  }
  var property, value;
  for (var key in properties) {
    property = properties[key]; // [propName, defaultValue]
    value = GetValue(config, key, property[1]);
    if (value !== undefined) {
      out[property[0]] = value;
    }
  }
  return out;
};
var _default = SetProperties;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/StopPropagationTouchEvents.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var StopPropagationTouchEvents = function (element) {
  // Don't propagate touch/mouse events to parent(game canvas)
  element.addEventListener('touchstart', callback, false);
  element.addEventListener('touchmove', callback, false);
  element.addEventListener('touchend', callback, false);
  element.addEventListener('mousedown', callback, false);
  element.addEventListener('mouseup', callback, false);
  element.addEventListener('mousemove', callback, false);
};
var callback = function (e) {
  e.stopPropagation();
};
var _default = StopPropagationTouchEvents;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/CreateElement.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputTextProperties = require("./InputTextProperties.js");
var _SetProperties = _interopRequireDefault(require("../../../gameobjects/dom/utils/SetProperties.js"));
var _StopPropagationTouchEvents = _interopRequireDefault(require("../../../gameobjects/dom/utils/StopPropagationTouchEvents.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateElement = function (parent, config) {
  var element;
  var textType = GetValue(config, 'inputType', undefined);
  if (textType === undefined) {
    textType = GetValue(config, 'type', 'text');
  }
  if (textType === 'textarea') {
    element = document.createElement('textarea');
    element.style.resize = 'none';
  } else {
    element = document.createElement('input');
    element.type = textType;
  }
  var style = GetValue(config, 'style', undefined);
  // Apply other style properties
  var elementStyle = element.style;
  (0, _SetProperties.default)(_InputTextProperties.StyleProperties, style, elementStyle);
  // Set style
  elementStyle.position = 'absolute';
  elementStyle.opacity = 0;
  elementStyle.pointerEvents = 'none';
  elementStyle.zIndex = 0;
  // hide native blue text cursor on iOS
  elementStyle.transform = 'scale(0)';
  (0, _SetProperties.default)(_InputTextProperties.ElementProperties, config, element);

  // Don't propagate touch/mouse events to parent(game canvas)
  (0, _StopPropagationTouchEvents.default)(element);

  // Attach element to fullscreenTarget in full screen mode
  var scaleManager = parent.scene.sys.scale;
  var parentElement = scaleManager.isFullscreen ? scaleManager.fullscreenTarget : document.body;
  parentElement.appendChild(element);
  return element;
};
var _default = CreateElement;
exports.default = _default;
},{"./InputTextProperties.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/InputTextProperties.js","../../../gameobjects/dom/utils/SetProperties.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/SetProperties.js","../../../gameobjects/dom/utils/StopPropagationTouchEvents.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/StopPropagationTouchEvents.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/Open.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _LastOpenedEditor = require("./LastOpenedEditor.js");
var _CreateElement = _interopRequireDefault(require("./CreateElement.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Open = function () {
  // Already opened
  if (this.isOpened) {
    return this;
  }
  // Read only
  if (this.readOnly) {
    return this;
  }
  (0, _LastOpenedEditor.SetLastOpenedEditor)(this);
  this.isOpened = true;
  if (!this.node) {
    // Create input text element when opening editor
    this.node = (0, _CreateElement.default)(this, this.nodeConfig);
  }
  this.setFocus();
  this.initText();
  if (this.enterCloseEnable) {
    this.scene.input.keyboard.once('keydown-ENTER', this.close, this);
  }

  // There is no cursor-position-change event, 
  // so updating cursor position every tick
  this.scene.sys.events.on('postupdate', this.updateText, this);
  this.scene.input.on('pointerdown', this.onClickOutside, this);
  if (this.onOpenCallback) {
    this.onOpenCallback(this.parent, this);
  }
  this.emit('open', this);
  return this;
};
var _default = Open;
exports.default = _default;
},{"./LastOpenedEditor.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/LastOpenedEditor.js","./CreateElement.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/CreateElement.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/RemoveElement.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RemoveElement = function (element) {
  if (!element) {
    return;
  }
  var parentElement = element.parentElement;
  if (parentElement) {
    parentElement.removeChild(element);
  }
};
var _default = RemoveElement;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/Close.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _LastOpenedEditor = require("./LastOpenedEditor.js");
var _RemoveElement = _interopRequireDefault(require("./RemoveElement.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Close = function () {
  // Already closed
  if (!this.isOpened) {
    return this;
  }
  (0, _LastOpenedEditor.CloseLastOpenEditor)(this);
  this.setBlur();
  this.isOpened = false;
  this.updateText();
  this.scene.sys.events.off('postupdate', this.updateText, this);
  this.scene.input.off('pointerdown', this.onClickOutside, this);
  if (this.onCloseCallback) {
    this.onCloseCallback(this.parent, this);
  }

  // Remove input text element when closing editor
  (0, _RemoveElement.default)(this.node);
  this.node = undefined;
  this.emit('close', this);
  return this;
};
var _default = Close;
exports.default = _default;
},{"./LastOpenedEditor.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/LastOpenedEditor.js","./RemoveElement.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/RemoveElement.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Open = _interopRequireDefault(require("./Open.js"));
var _Close = _interopRequireDefault(require("./Close.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {
  open: _Open.default,
  close: _Close.default
};
var _default = Methods;
exports.default = _default;
},{"./Open.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/Open.js","./Close.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/Close.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/HiddenTextEditBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
var _CopyElementConfig = _interopRequireDefault(require("./methods/CopyElementConfig.js"));
var _IsPointerInHitArea = _interopRequireDefault(require("../../utils/input/IsPointerInHitArea.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class HiddenTextEditBase extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject);
    // this.parent = gameObject;

    var textType = GetValue(config, 'inputType', undefined);
    if (textType === undefined) {
      textType = GetValue(config, 'type', 'text');
    }
    this.setEnterCloseEnable(GetValue(config, 'enterClose', textType !== 'textarea'));
    var onOpen = GetValue(config, 'onOpen', undefined);
    if (!onOpen) {
      onOpen = GetValue(config, 'onFocus', undefined);
    }
    this.onOpenCallback = onOpen;
    var onClose = GetValue(config, 'onClose', undefined);
    if (!onClose) {
      onClose = GetValue(config, 'onBlur', undefined);
    }
    this.onCloseCallback = onClose;
    this.onUpdateCallback = GetValue(config, 'onUpdate', undefined);
    this.isOpened = false;
    gameObject.on('pointerdown', function () {
      this.open();
    }, this).setInteractive();
    this.nodeConfig = (0, _CopyElementConfig.default)(config);
    // Create/remove input text element when opening/closing editor
    this.node = undefined;
  }
  destroy() {
    // this.parent.off('pointerdown', this.open, this);

    this.close();
    super.destroy();
  }
  onClickOutside(pointer) {
    if (!(0, _IsPointerInHitArea.default)(this.parent, pointer)) {
      this.close();
    }
  }
  setEnterCloseEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.enterCloseEnable = enable;
    return this;
  }

  // Override
  initText() {}

  // Override
  updateText() {}

  // Copy from InputText class
  get text() {
    if (!this.node) {
      return '';
    }
    return this.node.value;
  }
  set text(value) {
    if (!this.node) {
      return;
    }
    this.node.value = value;
  }
  setText(value) {
    // Override
    this.text = value;
    return this;
  }
  get maxLength() {
    return this.nodeConfig.maxLength;
  }
  set maxLength(value) {
    this.nodeConfig.maxLength = value;
    if (this.node) {
      this.node.maxLength = value;
    }
  }
  setMaxLength(value) {
    this.maxLength = value;
    return this;
  }
  get minLength() {
    return this.nodeConfig.minLength;
  }
  set minLength(value) {
    this.nodeConfig.minLength = value;
    if (this.node) {
      this.node.minLength = value;
    }
  }
  setMinLength(value) {
    this.minLength = value;
    return this;
  }
  get placeholder() {
    return this.node.placeholder;
  }
  set placeholder(value) {
    if (!this.node) {
      return;
    }
    this.node.placeholder = value;
  }
  setPlaceholder(value) {
    this.placeholder = value;
    return this;
  }
  selectText(selectionStart, selectionEnd) {
    if (!this.node) {
      return this;
    }
    if (selectionStart === undefined) {
      this.node.select();
    } else {
      this.node.setSelectionRange(selectionStart, selectionEnd);
    }
    return this;
  }
  selectAll() {
    this.selectText();
    return this;
  }
  get selectionStart() {
    if (!this.node) {
      return 0;
    }
    return this.node.selectionStart;
  }
  get selectionEnd() {
    if (!this.node) {
      return 0;
    }
    return this.node.selectionEnd;
  }
  get selectedText() {
    if (!this.node) {
      return '';
    }
    var node = this.node;
    return node.value.substring(node.selectionStart, node.selectionEnd);
  }
  get cursorPosition() {
    if (!this.node) {
      return 0;
    }
    return this.node.selectionStart;
  }
  set cursorPosition(value) {
    if (!this.node) {
      return;
    }
    this.node.setSelectionRange(value, value);
  }
  setCursorPosition(value) {
    if (value === undefined) {
      value = this.text.length;
    } else if (value < 0) {
      value = this.text.length + value;
    }
    this.cursorPosition = value;
    return this;
  }
  get tooltip() {
    if (!this.node) {
      return '';
    }
    return this.node.title;
  }
  set tooltip(value) {
    if (!this.node) {
      return this;
    }
    this.node.title = value;
  }
  setTooltip(value) {
    this.tooltip = value;
    return this;
  }
  setTextChangedCallback(callback) {
    this.onTextChanged = callback;
    return this;
  }
  get readOnly() {
    return this.nodeConfig.readOnly;
  }
  set readOnly(value) {
    this.nodeConfig.readOnly = value;
    if (this.node) {
      this.node.readOnly = value;
    }
  }
  setReadOnly(value) {
    if (value === undefined) {
      value = true;
    }
    this.readOnly = value;
    return this;
  }
  get spellCheck() {
    if (!this.node) {
      return '';
    }
    return this.node.spellcheck;
  }
  set spellCheck(value) {
    if (!this.node) {
      return;
    }
    this.node.spellcheck = value;
  }
  setSpellCheck(value) {
    this.spellCheck = value;
    return this;
  }
  get fontColor() {
    if (!this.node) {
      return undefined;
    }
    return this.node.style.color;
  }
  set fontColor(value) {
    if (!this.node) {
      return;
    }
    this.node.style.color = value;
  }
  setFontColor(value) {
    this.fontColor = value;
    return this;
  }
  setStyle(key, value) {
    if (!this.node) {
      return this;
    }
    this.node.style[key] = value;
    return this;
  }
  getStyle(key) {
    if (!this.node) {
      return undefined;
    }
    return this.node.style[key];
  }
  scrollToBottom() {
    if (!this.node) {
      return this;
    }
    this.node.scrollTop = this.node.scrollHeight;
    return this;
  }
  setEnabled(enabled) {
    if (!this.node) {
      return this;
    }
    if (enabled === undefined) {
      enabled = true;
    }
    this.node.disabled = !enabled;
    return this;
  }
  setBlur() {
    if (!this.node) {
      return this;
    }
    this.node.blur();
    return this;
  }
  setFocus() {
    if (!this.node) {
      return this;
    }
    this.node.focus();
    return this;
  }
  get isFocused() {
    return this.isOpened;
  }
}
Object.assign(HiddenTextEditBase.prototype, _Methods.default);
var _default = HiddenTextEditBase;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js","./methods/CopyElementConfig.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/CopyElementConfig.js","../../utils/input/IsPointerInHitArea.js":"node_modules/phaser3-rex-plugins/plugins/utils/input/IsPointerInHitArea.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/methods/Methods.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/defaultcallbacks/NumberInputUpdateCallback.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var NumberInputUpdateCallback = function (text, textObject, hiddenInputText) {
  text = text.replace(' ', '');
  var previousText = hiddenInputText.previousText;
  if (text === previousText) {
    return text;
  }
  if (isNaN(text)) {
    // Enter a NaN character, back to previous text
    hiddenInputText.emit('nan', text, hiddenInputText);
    text = previousText;
    var cursorPosition = hiddenInputText.cursorPosition - 1;
    hiddenInputText.setText(text);
    hiddenInputText.setCursorPosition(cursorPosition);
  } else {
    // New number text, update previous texr
    hiddenInputText.previousText = text;
  }
  return text;
};
var _default = NumberInputUpdateCallback;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/textedit/SelectRange.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OnSelectRange = function (hiddenTextEdit) {
  var textObject = hiddenTextEdit.parent;
  // var text = textObject.text;
  var selectionStart = hiddenTextEdit.isOpened ? hiddenTextEdit.selectionStart : null;
  var selectionEnd = hiddenTextEdit.isOpened ? hiddenTextEdit.selectionEnd : null;
  var prevSelectionStart = hiddenTextEdit.prevSelectionStart;
  var prevSelectionEnd = hiddenTextEdit.prevSelectionEnd;
  if (prevSelectionStart === selectionStart && prevSelectionEnd === selectionEnd) {
    return;
  }
  var min, max;
  if (prevSelectionStart === null) {
    min = selectionStart;
    max = selectionEnd;
  } else {
    min = Math.min(prevSelectionStart, selectionStart);
    max = Math.max(prevSelectionEnd, selectionEnd);
  }
  for (var i = min; i < max; i++) {
    var inPrevSelectionRange = prevSelectionStart === null ? false : i >= prevSelectionStart && i < prevSelectionEnd;
    var inSelectionRange = i >= selectionStart && i < selectionEnd;
    if (inPrevSelectionRange && inSelectionRange) {
      continue;
    }
    var child = textObject.getCharChild(i);
    if (child) {
      if (inPrevSelectionRange) {
        textObject.emit('cursorout', child, i, textObject);
      } else {
        textObject.emit('cursorin', child, i, textObject);
      }
    }
  }
  hiddenTextEdit.prevSelectionStart = selectionStart;
  hiddenTextEdit.prevSelectionEnd = selectionEnd;
};
var _default = OnSelectRange;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/textedit/MoveCursor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var MoveCursor = function (hiddenTextEdit) {
  var textObject = hiddenTextEdit.parent;
  var text = textObject.text;
  var cursorPosition = hiddenTextEdit.cursorPosition;
  if (hiddenTextEdit.prevCursorPosition === cursorPosition) {
    return;
  }
  if (hiddenTextEdit.prevCursorPosition !== null) {
    if (hiddenTextEdit.prevCursorPosition > text.length) {
      hiddenTextEdit.prevCursorPosition = null;
    }
  }
  if (hiddenTextEdit.prevCursorPosition !== null) {
    var child = textObject.getCharChild(hiddenTextEdit.prevCursorPosition);
    if (child) {
      textObject.emit('cursorout', child, hiddenTextEdit.prevCursorPosition, textObject);
    }
  }
  if (cursorPosition != null) {
    var child = textObject.getCharChild(cursorPosition);
    if (child) {
      textObject.emit('cursorin', child, cursorPosition, textObject);
    }
  }
  textObject.emit('movecursor', cursorPosition, hiddenTextEdit.prevCursorPosition, textObject);
  hiddenTextEdit.prevCursorPosition = cursorPosition;
};
var _default = MoveCursor;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/textedit/ClearSelectRange.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ClearSelectRange = function (hiddenTextEdit) {
  var prevSelectionStart = hiddenTextEdit.prevSelectionStart;
  if (prevSelectionStart === null) {
    return;
  }
  var prevSelectionEnd = hiddenTextEdit.prevSelectionEnd;
  var textObject = hiddenTextEdit.parent;
  for (var i = prevSelectionStart; i < prevSelectionEnd; i++) {
    var child = textObject.getCharChild(i);
    if (child) {
      textObject.emit('cursorout', child, i, textObject);
    }
  }
  hiddenTextEdit.prevSelectionStart = null;
  hiddenTextEdit.prevSelectionEnd = null;
};
var _default = ClearSelectRange;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/textedit/ClearCursor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ClearCursor = function (hiddenTextEdit) {
  var prevCursorPosition = hiddenTextEdit.prevCursorPosition;
  if (prevCursorPosition === null) {
    return;
  }
  var textObject = hiddenTextEdit.parent;
  var child = textObject.getCharChild(prevCursorPosition);
  if (child) {
    textObject.emit('cursorout', child, prevCursorPosition, textObject);
  }
  hiddenTextEdit.prevCursorPosition = null;
};
var _default = ClearCursor;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/textedit/HiddenTextEdit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _HiddenTextEditBase = _interopRequireDefault(require("../../../../behaviors/hiddentextedit/HiddenTextEditBase.js"));
var _NumberInputUpdateCallback = _interopRequireDefault(require("../../../../behaviors/hiddentextedit/defaultcallbacks/NumberInputUpdateCallback.js"));
var _SelectRange = _interopRequireDefault(require("./SelectRange.js"));
var _MoveCursor = _interopRequireDefault(require("./MoveCursor.js"));
var _ClearSelectRange = _interopRequireDefault(require("./ClearSelectRange.js"));
var _ClearCursor = _interopRequireDefault(require("./ClearCursor.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class HiddenTextEdit extends _HiddenTextEditBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;

    this.setSelectAllWhenFocusEnable(GetValue(config, 'selectAll', false));
    this.cursorMoveStartIndex = null;
    this.prevCursorPosition = null;
    this.prevSelectionStart = null;
    this.prevSelectionEnd = null;
    this.firstClickAfterOpen = false;
    gameObject
    // Open editor by 'pointerdown' event
    // Then set cursor position to nearest char
    .on('pointerdown', function (pointer, localX, localY, event) {
      var child = gameObject.getNearestChild(localX, localY);
      var charIndex = gameObject.getCharIndex(child);
      if (!this.selectAllWhenFocus || !this.firstClickAfterOpen) {
        this.setCursorPosition(charIndex);
      }
      this.cursorMoveStartIndex = charIndex;
      this.firstClickAfterOpen = false;
    }, this).on('pointermove', function (pointer, localX, localY, event) {
      if (!pointer.isDown) {
        return;
      }
      var child = gameObject.getNearestChild(localX, localY);
      var charIndex = gameObject.getCharIndex(child);
      if (this.cursorMoveStartIndex < charIndex) {
        this.selectText(this.cursorMoveStartIndex, charIndex + 1);
      } else {
        this.selectText(charIndex, this.cursorMoveStartIndex + 1);
      }
    }, this);
    this.on('open', function () {
      if (this.selectAllWhenFocus) {
        this.selectAll();
      }
      this.firstClickAfterOpen = true;
      gameObject.emit('open');
    }, this).on('close', function () {
      gameObject.emit('close');
    }, this);
  }
  initText() {
    var textObject = this.parent;
    this.prevCursorPosition = null;
    this.setText(textObject.text);
    return this;
  }
  updateText() {
    var textObject = this.parent;
    var text = this.text;
    if (this.onUpdateCallback) {
      var newText = this.onUpdateCallback(text, textObject, this);
      if (newText != null) {
        text = newText;
      }
    }
    if (textObject.text !== text) {
      textObject.setText(text);
      textObject.emit('textchange', text, textObject, this);
    }
    if (this.isOpened) {
      if (this.selectionStart !== this.selectionEnd) {
        (0, _ClearCursor.default)(this);
        (0, _SelectRange.default)(this);
      } else {
        (0, _ClearSelectRange.default)(this);
        (0, _MoveCursor.default)(this);
      }
    } else {
      (0, _ClearSelectRange.default)(this);
      (0, _ClearCursor.default)(this);
    }
    return this;
  }
  setNumberInput() {
    this.onUpdateCallback = _NumberInputUpdateCallback.default;
    return this;
  }
  setSelectAllWhenFocusEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.selectAllWhenFocus = enable;
    return this;
  }
}
var _default = HiddenTextEdit;
exports.default = _default;
},{"../../../../behaviors/hiddentextedit/HiddenTextEditBase.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/HiddenTextEditBase.js","../../../../behaviors/hiddentextedit/defaultcallbacks/NumberInputUpdateCallback.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/defaultcallbacks/NumberInputUpdateCallback.js","./SelectRange.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/textedit/SelectRange.js","./MoveCursor.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/textedit/MoveCursor.js","./ClearSelectRange.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/textedit/ClearSelectRange.js","./ClearCursor.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/textedit/ClearCursor.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/textedit/CreateHiddenTextEdit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _HiddenTextEdit = _interopRequireDefault(require("./HiddenTextEdit.js"));
var _CopyProperty = _interopRequireDefault(require("../../../../utils/object/CopyProperty.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const PropertiesList = ['inputType', 'onOpen', 'onFocus', 'onClose', 'onBlur', 'onUpdate', 'enterClose', 'readOnly', 'maxLength', 'minLength', 'selectAll'];
var CreateHiddenTextEdit = function (parent, parentConfig) {
  var config = GetValue(parentConfig, 'edit');
  if (config === undefined) {
    config = {};
  }
  (0, _CopyProperty.default)(parentConfig, config, PropertiesList);
  return new _HiddenTextEdit.default(parent, config);
};
var _default = CreateHiddenTextEdit;
exports.default = _default;
},{"./HiddenTextEdit.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/textedit/HiddenTextEdit.js","../../../../utils/object/CopyProperty.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/CopyProperty.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/object/HasValue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var HasValue = function (source, key) {
  if (!source || typeof source === 'number') {
    return false;
  } else if (source.hasOwnProperty(key)) {
    return true;
  } else if (key.indexOf('.') !== -1) {
    var keys = key.split('.');
    var parent = source;

    //  Use for loop here so we can break early
    for (var i = 0; i < keys.length; i++) {
      if (parent.hasOwnProperty(keys[i])) {
        parent = parent[keys[i]];
      } else {
        //  Can't go any further
        return false;
      }
    }
    return true;
  } else {
    return false;
  }
};
var _default = HasValue;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/methods/InjectDefaultConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _HasValue = _interopRequireDefault(require("../../../../utils/object/HasValue.js"));
var _SetValue = _interopRequireDefault(require("../../../../utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var InjectDefaultConfig = function (config) {
  var isSingleLineMode = !config.textArea;
  if (!(0, _HasValue.default)(config, 'wrap.vAlign')) {
    var defaultValue = isSingleLineMode ? 'center' : 'top';
    (0, _SetValue.default)(config, 'wrap.vAlign', defaultValue);
  }
  if (!(0, _HasValue.default)(config, 'wrap.charWrap')) {
    (0, _SetValue.default)(config, 'wrap.charWrap', true);
  }
  if (!(0, _HasValue.default)(config, 'wrap.maxLines')) {
    var defaultValue = isSingleLineMode ? 1 : undefined;
    (0, _SetValue.default)(config, 'wrap.maxLines', defaultValue);
  }
  if (!(0, _HasValue.default)(config, 'wrap.useDefaultTextHeight')) {
    (0, _SetValue.default)(config, 'wrap.useDefaultTextHeight', true);
  }
  if (!config.edit) {
    config.edit = {};
  }
  if (!(0, _HasValue.default)(config.edit, 'inputType')) {
    var defaultValue = isSingleLineMode ? 'text' : 'textarea';
    (0, _SetValue.default)(config.edit, 'inputType', defaultValue);
  }
  return config;
};
var _default = InjectDefaultConfig;
exports.default = _default;
},{"../../../../utils/object/HasValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/HasValue.js","../../../../utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/object/ExtractByPrefix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ExtractByPrefix = function (obj, prefix, delimiter, out) {
  if (delimiter === undefined) {
    delimiter = '.';
  }
  if (out === undefined) {
    out = {};
  }
  if (!obj) {
    return out;
  }
  if (prefix in obj) {
    return Object.assign(out, obj[prefix]);
  }
  prefix += delimiter;
  for (var key in obj) {
    if (!key.startsWith(prefix)) {
      continue;
    }
    out[key.replace(prefix, '')] = obj[key];
  }
  return out;
};
var _default = ExtractByPrefix;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/object/GetPartialData.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetPartialData = function (obj, keys, out) {
  if (out === undefined) {
    out = {};
  }
  if (Array.isArray(keys)) {
    var key;
    for (var i = 0, cnt = keys.length; i < cnt; i++) {
      key = keys[i];
      out[key] = obj[key];
    }
  } else {
    for (var key in keys) {
      out[key] = obj[key];
    }
  }
  return out;
};
var _default = GetPartialData;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/object/IsKeyValueEqual.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var IsKeyValueEqual = function (objA, objB) {
  for (var key in objA) {
    if (!(key in objB)) {
      return false;
    }
    if (objA[key] !== objB[key]) {
      return false;
    }
  }
  for (var key in objB) {
    if (!(key in objA)) {
      return false;
    }
  }
  return true;
};
var _default = IsKeyValueEqual;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/methods/RegisterCursorStyle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsEmpty = _interopRequireDefault(require("../../../../utils/object/IsEmpty.js"));
var _GetPartialData = _interopRequireDefault(require("../../../../utils/object/GetPartialData.js"));
var _IsKeyValueEqual = _interopRequireDefault(require("../../../../utils/object/IsKeyValueEqual.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var RegisterCursorStyle = function (cursorStyle) {
  if ((0, _IsEmpty.default)(cursorStyle)) {
    return;
  }
  this.setCursorStyle(cursorStyle).on('cursorin', function (child) {
    var cursorStyle = this.cursorStyle;
    var styleSave = (0, _GetPartialData.default)(child.style, cursorStyle);
    if ((0, _IsKeyValueEqual.default)(cursorStyle, styleSave)) {
      return;
    }
    child.styleSave = styleSave;
    child.modifyStyle(cursorStyle);
  }, this).on('cursorout', function (child) {
    if (!child.styleSave) {
      return;
    }
    child.modifyStyle(child.styleSave);
    child.styleSave = undefined;
  }, this);
};
var _default = RegisterCursorStyle;
exports.default = _default;
},{"../../../../utils/object/IsEmpty.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsEmpty.js","../../../../utils/object/GetPartialData.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/GetPartialData.js","../../../../utils/object/IsKeyValueEqual.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsKeyValueEqual.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/methods/RegisterFocusStyle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsEmpty = _interopRequireDefault(require("../../../../utils/object/IsEmpty.js"));
var _GetPartialData = _interopRequireDefault(require("../../../../utils/object/GetPartialData.js"));
var _IsKeyValueEqual = _interopRequireDefault(require("../../../../utils/object/IsKeyValueEqual.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var RegisterFocusStyle = function (focusStyle) {
  if ((0, _IsEmpty.default)(focusStyle)) {
    return;
  }
  this.setFocusStyle(focusStyle).on('open', function () {
    var child = this.background;
    var focusStyle = this.focusStyle;
    var styleSave = (0, _GetPartialData.default)(child, focusStyle);
    if ((0, _IsKeyValueEqual.default)(focusStyle, styleSave)) {
      return;
    }
    child.styleSave = styleSave;
    child.modifyStyle(focusStyle);
  }, this).on('close', function () {
    var child = this.background;
    if (!child.styleSave) {
      return;
    }
    child.modifyStyle(child.styleSave);
    child.styleSave = undefined;
  }, this);
};
var _default = RegisterFocusStyle;
exports.default = _default;
},{"../../../../utils/object/IsEmpty.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsEmpty.js","../../../../utils/object/GetPartialData.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/GetPartialData.js","../../../../utils/object/IsKeyValueEqual.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsKeyValueEqual.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/methods/AddLastInsertCursor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddChild = _interopRequireDefault(require("../../dynamictext/methods/AddChild.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var AddLastInsertCursor = function (textObject) {
  var child = textObject.createCharChild('|'); // Use '|' to update render size
  child.text = ''; // Render empty string ''

  // Invoke DynamicText's addChild method directly
  _AddChild.default.call(textObject, child);
  return child;
};
var _default = AddLastInsertCursor;
exports.default = _default;
},{"../../dynamictext/methods/AddChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/methods/AddChild.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/base.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Diff;
function Diff() {}
Diff.prototype = {
  diff(oldString, newString, options = {}) {
    let callback = options.callback;
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    this.options = options;
    let self = this;
    function done(value) {
      if (callback) {
        setTimeout(function () {
          callback(undefined, value);
        }, 0);
        return true;
      } else {
        return value;
      }
    }

    // Allow subclasses to massage the input prior to running
    oldString = this.castInput(oldString);
    newString = this.castInput(newString);
    oldString = this.removeEmpty(this.tokenize(oldString));
    newString = this.removeEmpty(this.tokenize(newString));
    let newLen = newString.length,
      oldLen = oldString.length;
    let editLength = 1;
    let maxEditLength = newLen + oldLen;
    if (options.maxEditLength) {
      maxEditLength = Math.min(maxEditLength, options.maxEditLength);
    }
    let bestPath = [{
      newPos: -1,
      components: []
    }];

    // Seed editLength = 0, i.e. the content starts with the same values
    let oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);
    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
      // Identity per the equality and tokenizer
      return done([{
        value: this.join(newString),
        count: newString.length
      }]);
    }

    // Main worker method. checks all permutations of a given edit length for acceptance.
    function execEditLength() {
      for (let diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {
        let basePath;
        let addPath = bestPath[diagonalPath - 1],
          removePath = bestPath[diagonalPath + 1],
          oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;
        if (addPath) {
          // No one else is going to attempt to use this value, clear it
          bestPath[diagonalPath - 1] = undefined;
        }
        let canAdd = addPath && addPath.newPos + 1 < newLen,
          canRemove = removePath && 0 <= oldPos && oldPos < oldLen;
        if (!canAdd && !canRemove) {
          // If this path is a terminal then prune
          bestPath[diagonalPath] = undefined;
          continue;
        }

        // Select the diagonal that we want to branch from. We select the prior
        // path whose position in the new string is the farthest from the origin
        // and does not pass the bounds of the diff graph
        if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
          basePath = clonePath(removePath);
          self.pushComponent(basePath.components, undefined, true);
        } else {
          basePath = addPath; // No need to clone, we've pulled it from the list
          basePath.newPos++;
          self.pushComponent(basePath.components, true, undefined);
        }
        oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);

        // If we have hit the end of both strings, then we are done
        if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
          return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));
        } else {
          // Otherwise track this path as a potential candidate and continue.
          bestPath[diagonalPath] = basePath;
        }
      }
      editLength++;
    }

    // Performs the length of edit iteration. Is a bit fugly as this has to support the
    // sync and async mode which is never fun. Loops over execEditLength until a value
    // is produced, or until the edit length exceeds options.maxEditLength (if given),
    // in which case it will return undefined.
    if (callback) {
      (function exec() {
        setTimeout(function () {
          if (editLength > maxEditLength) {
            return callback();
          }
          if (!execEditLength()) {
            exec();
          }
        }, 0);
      })();
    } else {
      while (editLength <= maxEditLength) {
        let ret = execEditLength();
        if (ret) {
          return ret;
        }
      }
    }
  },
  pushComponent(components, added, removed) {
    let last = components[components.length - 1];
    if (last && last.added === added && last.removed === removed) {
      // We need to clone here as the component clone operation is just
      // as shallow array clone
      components[components.length - 1] = {
        count: last.count + 1,
        added: added,
        removed: removed
      };
    } else {
      components.push({
        count: 1,
        added: added,
        removed: removed
      });
    }
  },
  extractCommon(basePath, newString, oldString, diagonalPath) {
    let newLen = newString.length,
      oldLen = oldString.length,
      newPos = basePath.newPos,
      oldPos = newPos - diagonalPath,
      commonCount = 0;
    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
      newPos++;
      oldPos++;
      commonCount++;
    }
    if (commonCount) {
      basePath.components.push({
        count: commonCount
      });
    }
    basePath.newPos = newPos;
    return oldPos;
  },
  equals(left, right) {
    if (this.options.comparator) {
      return this.options.comparator(left, right);
    } else {
      return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();
    }
  },
  removeEmpty(array) {
    let ret = [];
    for (let i = 0; i < array.length; i++) {
      if (array[i]) {
        ret.push(array[i]);
      }
    }
    return ret;
  },
  castInput(value) {
    return value;
  },
  tokenize(value) {
    return value.split('');
  },
  join(chars) {
    return chars.join('');
  }
};
function buildValues(diff, components, newString, oldString, useLongestToken) {
  let componentPos = 0,
    componentLen = components.length,
    newPos = 0,
    oldPos = 0;
  for (; componentPos < componentLen; componentPos++) {
    let component = components[componentPos];
    if (!component.removed) {
      if (!component.added && useLongestToken) {
        let value = newString.slice(newPos, newPos + component.count);
        value = value.map(function (value, i) {
          let oldValue = oldString[oldPos + i];
          return oldValue.length > value.length ? oldValue : value;
        });
        component.value = diff.join(value);
      } else {
        component.value = diff.join(newString.slice(newPos, newPos + component.count));
      }
      newPos += component.count;

      // Common case
      if (!component.added) {
        oldPos += component.count;
      }
    } else {
      component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));
      oldPos += component.count;

      // Reverse add and remove so removes are output first to match common convention
      // The diffing algorithm is tied to add then remove output and this is the simplest
      // route to get the desired output with minimal overhead.
      if (componentPos && components[componentPos - 1].added) {
        let tmp = components[componentPos - 1];
        components[componentPos - 1] = components[componentPos];
        components[componentPos] = tmp;
      }
    }
  }

  // Special case handle for when one terminal is ignored (i.e. whitespace).
  // For this case we merge the terminal into the prior string and drop the change.
  // This is only available for string mode.
  let lastComponent = components[componentLen - 1];
  if (componentLen > 1 && typeof lastComponent.value === 'string' && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {
    components[componentLen - 2].value += lastComponent.value;
    components.pop();
  }
  return components;
}
function clonePath(path) {
  return {
    newPos: path.newPos,
    components: path.components.slice(0)
  };
}
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/character.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.characterDiff = void 0;
exports.diffChars = diffChars;
var _base = _interopRequireDefault(require("./base"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const characterDiff = new _base.default();
exports.characterDiff = characterDiff;
function diffChars(oldStr, newStr, options) {
  return characterDiff.diff(oldStr, newStr, options);
}
},{"./base":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/base.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/util/params.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateOptions = generateOptions;
function generateOptions(options, defaults) {
  if (typeof options === 'function') {
    defaults.callback = options;
  } else if (options) {
    for (let name in options) {
      /* istanbul ignore else */
      if (options.hasOwnProperty(name)) {
        defaults[name] = options[name];
      }
    }
  }
  return defaults;
}
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/word.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diffWords = diffWords;
exports.diffWordsWithSpace = diffWordsWithSpace;
exports.wordDiff = void 0;
var _base = _interopRequireDefault(require("./base"));
var _params = require("../util/params");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode
//
// Ranges and exceptions:
// Latin-1 Supplement, 0080–00FF
//  - U+00D7  × Multiplication sign
//  - U+00F7  ÷ Division sign
// Latin Extended-A, 0100–017F
// Latin Extended-B, 0180–024F
// IPA Extensions, 0250–02AF
// Spacing Modifier Letters, 02B0–02FF
//  - U+02C7  ˇ &#711;  Caron
//  - U+02D8  ˘ &#728;  Breve
//  - U+02D9  ˙ &#729;  Dot Above
//  - U+02DA  ˚ &#730;  Ring Above
//  - U+02DB  ˛ &#731;  Ogonek
//  - U+02DC  ˜ &#732;  Small Tilde
//  - U+02DD  ˝ &#733;  Double Acute Accent
// Latin Extended Additional, 1E00–1EFF
const extendedWordChars = /^[a-zA-Z\u{C0}-\u{FF}\u{D8}-\u{F6}\u{F8}-\u{2C6}\u{2C8}-\u{2D7}\u{2DE}-\u{2FF}\u{1E00}-\u{1EFF}]+$/u;
const reWhitespace = /\S/;
const wordDiff = new _base.default();
exports.wordDiff = wordDiff;
wordDiff.equals = function (left, right) {
  if (this.options.ignoreCase) {
    left = left.toLowerCase();
    right = right.toLowerCase();
  }
  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);
};
wordDiff.tokenize = function (value) {
  // All whitespace symbols except newline group into one token, each newline - in separate token
  let tokens = value.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/);

  // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.
  for (let i = 0; i < tokens.length - 1; i++) {
    // If we have an empty string in the next field and we have only word chars before and after, merge
    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
      tokens[i] += tokens[i + 2];
      tokens.splice(i + 1, 2);
      i--;
    }
  }
  return tokens;
};
function diffWords(oldStr, newStr, options) {
  options = (0, _params.generateOptions)(options, {
    ignoreWhitespace: true
  });
  return wordDiff.diff(oldStr, newStr, options);
}
function diffWordsWithSpace(oldStr, newStr, options) {
  return wordDiff.diff(oldStr, newStr, options);
}
},{"./base":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/base.js","../util/params":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/util/params.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diffLines = diffLines;
exports.diffTrimmedLines = diffTrimmedLines;
exports.lineDiff = void 0;
var _base = _interopRequireDefault(require("./base"));
var _params = require("../util/params");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const lineDiff = new _base.default();
exports.lineDiff = lineDiff;
lineDiff.tokenize = function (value) {
  let retLines = [],
    linesAndNewlines = value.split(/(\n|\r\n)/);

  // Ignore the final empty token that occurs if the string ends with a new line
  if (!linesAndNewlines[linesAndNewlines.length - 1]) {
    linesAndNewlines.pop();
  }

  // Merge the content and line separators into single tokens
  for (let i = 0; i < linesAndNewlines.length; i++) {
    let line = linesAndNewlines[i];
    if (i % 2 && !this.options.newlineIsToken) {
      retLines[retLines.length - 1] += line;
    } else {
      if (this.options.ignoreWhitespace) {
        line = line.trim();
      }
      retLines.push(line);
    }
  }
  return retLines;
};
function diffLines(oldStr, newStr, callback) {
  return lineDiff.diff(oldStr, newStr, callback);
}
function diffTrimmedLines(oldStr, newStr, callback) {
  let options = (0, _params.generateOptions)(callback, {
    ignoreWhitespace: true
  });
  return lineDiff.diff(oldStr, newStr, options);
}
},{"./base":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/base.js","../util/params":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/util/params.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/sentence.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diffSentences = diffSentences;
exports.sentenceDiff = void 0;
var _base = _interopRequireDefault(require("./base"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const sentenceDiff = new _base.default();
exports.sentenceDiff = sentenceDiff;
sentenceDiff.tokenize = function (value) {
  return value.split(/(\S.+?[.!?])(?=\s+|$)/);
};
function diffSentences(oldStr, newStr, callback) {
  return sentenceDiff.diff(oldStr, newStr, callback);
}
},{"./base":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/base.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/css.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cssDiff = void 0;
exports.diffCss = diffCss;
var _base = _interopRequireDefault(require("./base"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const cssDiff = new _base.default();
exports.cssDiff = cssDiff;
cssDiff.tokenize = function (value) {
  return value.split(/([{}:;,]|\s+)/);
};
function diffCss(oldStr, newStr, callback) {
  return cssDiff.diff(oldStr, newStr, callback);
}
},{"./base":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/base.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/json.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.canonicalize = canonicalize;
exports.diffJson = diffJson;
exports.jsonDiff = void 0;
var _base = _interopRequireDefault(require("./base"));
var _line = require("./line");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const objectPrototypeToString = Object.prototype.toString;
const jsonDiff = new _base.default();
// Discriminate between two lines of pretty-printed, serialized JSON where one of them has a
// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:
exports.jsonDiff = jsonDiff;
jsonDiff.useLongestToken = true;
jsonDiff.tokenize = _line.lineDiff.tokenize;
jsonDiff.castInput = function (value) {
  const {
    undefinedReplacement,
    stringifyReplacer = (k, v) => typeof v === 'undefined' ? undefinedReplacement : v
  } = this.options;
  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');
};
jsonDiff.equals = function (left, right) {
  return _base.default.prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, '$1'), right.replace(/,([\r\n])/g, '$1'));
};
function diffJson(oldObj, newObj, options) {
  return jsonDiff.diff(oldObj, newObj, options);
}

// This function handles the presence of circular references by bailing out when encountering an
// object that is already on the "stack" of items being processed. Accepts an optional replacer
function canonicalize(obj, stack, replacementStack, replacer, key) {
  stack = stack || [];
  replacementStack = replacementStack || [];
  if (replacer) {
    obj = replacer(key, obj);
  }
  let i;
  for (i = 0; i < stack.length; i += 1) {
    if (stack[i] === obj) {
      return replacementStack[i];
    }
  }
  let canonicalizedObj;
  if ('[object Array]' === objectPrototypeToString.call(obj)) {
    stack.push(obj);
    canonicalizedObj = new Array(obj.length);
    replacementStack.push(canonicalizedObj);
    for (i = 0; i < obj.length; i += 1) {
      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
    }
    stack.pop();
    replacementStack.pop();
    return canonicalizedObj;
  }
  if (obj && obj.toJSON) {
    obj = obj.toJSON();
  }
  if (typeof obj === 'object' && obj !== null) {
    stack.push(obj);
    canonicalizedObj = {};
    replacementStack.push(canonicalizedObj);
    let sortedKeys = [],
      key;
    for (key in obj) {
      /* istanbul ignore else */
      if (obj.hasOwnProperty(key)) {
        sortedKeys.push(key);
      }
    }
    sortedKeys.sort();
    for (i = 0; i < sortedKeys.length; i += 1) {
      key = sortedKeys[i];
      canonicalizedObj[key] = canonicalize(obj[key], stack, replacementStack, replacer, key);
    }
    stack.pop();
    replacementStack.pop();
  } else {
    canonicalizedObj = obj;
  }
  return canonicalizedObj;
}
},{"./base":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/base.js","./line":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/line.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrayDiff = void 0;
exports.diffArrays = diffArrays;
var _base = _interopRequireDefault(require("./base"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const arrayDiff = new _base.default();
exports.arrayDiff = arrayDiff;
arrayDiff.tokenize = function (value) {
  return value.slice();
};
arrayDiff.join = arrayDiff.removeEmpty = function (value) {
  return value;
};
function diffArrays(oldArr, newArr, callback) {
  return arrayDiff.diff(oldArr, newArr, callback);
}
},{"./base":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/base.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/patch/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parsePatch = parsePatch;
function parsePatch(uniDiff, options = {}) {
  let diffstr = uniDiff.split(/\r\n|[\n\v\f\r\x85]/),
    delimiters = uniDiff.match(/\r\n|[\n\v\f\r\x85]/g) || [],
    list = [],
    i = 0;
  function parseIndex() {
    let index = {};
    list.push(index);

    // Parse diff metadata
    while (i < diffstr.length) {
      let line = diffstr[i];

      // File header found, end parsing diff metadata
      if (/^(\-\-\-|\+\+\+|@@)\s/.test(line)) {
        break;
      }

      // Diff index
      let header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line);
      if (header) {
        index.index = header[1];
      }
      i++;
    }

    // Parse file headers if they are defined. Unified diff requires them, but
    // there's no technical issues to have an isolated hunk without file header
    parseFileHeader(index);
    parseFileHeader(index);

    // Parse hunks
    index.hunks = [];
    while (i < diffstr.length) {
      let line = diffstr[i];
      if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(line)) {
        break;
      } else if (/^@@/.test(line)) {
        index.hunks.push(parseHunk());
      } else if (line && options.strict) {
        // Ignore unexpected content unless in strict mode
        throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(line));
      } else {
        i++;
      }
    }
  }

  // Parses the --- and +++ headers, if none are found, no lines
  // are consumed.
  function parseFileHeader(index) {
    const fileHeader = /^(---|\+\+\+)\s+(.*)$/.exec(diffstr[i]);
    if (fileHeader) {
      let keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';
      const data = fileHeader[2].split('\t', 2);
      let fileName = data[0].replace(/\\\\/g, '\\');
      if (/^".*"$/.test(fileName)) {
        fileName = fileName.substr(1, fileName.length - 2);
      }
      index[keyPrefix + 'FileName'] = fileName;
      index[keyPrefix + 'Header'] = (data[1] || '').trim();
      i++;
    }
  }

  // Parses a hunk
  // This assumes that we are at the start of a hunk.
  function parseHunk() {
    let chunkHeaderIndex = i,
      chunkHeaderLine = diffstr[i++],
      chunkHeader = chunkHeaderLine.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/);
    let hunk = {
      oldStart: +chunkHeader[1],
      oldLines: typeof chunkHeader[2] === 'undefined' ? 1 : +chunkHeader[2],
      newStart: +chunkHeader[3],
      newLines: typeof chunkHeader[4] === 'undefined' ? 1 : +chunkHeader[4],
      lines: [],
      linedelimiters: []
    };

    // Unified Diff Format quirk: If the chunk size is 0,
    // the first number is one lower than one would expect.
    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293
    if (hunk.oldLines === 0) {
      hunk.oldStart += 1;
    }
    if (hunk.newLines === 0) {
      hunk.newStart += 1;
    }
    let addCount = 0,
      removeCount = 0;
    for (; i < diffstr.length; i++) {
      // Lines starting with '---' could be mistaken for the "remove line" operation
      // But they could be the header for the next file. Therefore prune such cases out.
      if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {
        break;
      }
      let operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];
      if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\') {
        hunk.lines.push(diffstr[i]);
        hunk.linedelimiters.push(delimiters[i] || '\n');
        if (operation === '+') {
          addCount++;
        } else if (operation === '-') {
          removeCount++;
        } else if (operation === ' ') {
          addCount++;
          removeCount++;
        }
      } else {
        break;
      }
    }

    // Handle the empty block count case
    if (!addCount && hunk.newLines === 1) {
      hunk.newLines = 0;
    }
    if (!removeCount && hunk.oldLines === 1) {
      hunk.oldLines = 0;
    }

    // Perform optional sanity checking
    if (options.strict) {
      if (addCount !== hunk.newLines) {
        throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));
      }
      if (removeCount !== hunk.oldLines) {
        throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));
      }
    }
    return hunk;
  }
  while (i < diffstr.length) {
    parseIndex();
  }
  return list;
}
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/util/distance-iterator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
// Iterator that traverses in the range of [min, max], stepping
// by distance from a given start position. I.e. for [0, 4], with
// start of 2, this will iterate 2, 3, 1, 4, 0.
function _default(start, minLine, maxLine) {
  let wantForward = true,
    backwardExhausted = false,
    forwardExhausted = false,
    localOffset = 1;
  return function iterator() {
    if (wantForward && !forwardExhausted) {
      if (backwardExhausted) {
        localOffset++;
      } else {
        wantForward = false;
      }

      // Check if trying to fit beyond text length, and if not, check it fits
      // after offset location (or desired location on first iteration)
      if (start + localOffset <= maxLine) {
        return localOffset;
      }
      forwardExhausted = true;
    }
    if (!backwardExhausted) {
      if (!forwardExhausted) {
        wantForward = true;
      }

      // Check if trying to fit before text beginning, and if not, check it fits
      // before offset location
      if (minLine <= start - localOffset) {
        return -localOffset++;
      }
      backwardExhausted = true;
      return iterator();
    }

    // We tried to fit hunk before text beginning and beyond text length, then
    // hunk can't fit on the text. Return undefined
  };
}
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/patch/apply.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyPatch = applyPatch;
exports.applyPatches = applyPatches;
var _parse = require("./parse");
var _distanceIterator = _interopRequireDefault(require("../util/distance-iterator"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function applyPatch(source, uniDiff, options = {}) {
  if (typeof uniDiff === 'string') {
    uniDiff = (0, _parse.parsePatch)(uniDiff);
  }
  if (Array.isArray(uniDiff)) {
    if (uniDiff.length > 1) {
      throw new Error('applyPatch only works with a single input.');
    }
    uniDiff = uniDiff[0];
  }

  // Apply the diff to the input
  let lines = source.split(/\r\n|[\n\v\f\r\x85]/),
    delimiters = source.match(/\r\n|[\n\v\f\r\x85]/g) || [],
    hunks = uniDiff.hunks,
    compareLine = options.compareLine || ((lineNumber, line, operation, patchContent) => line === patchContent),
    errorCount = 0,
    fuzzFactor = options.fuzzFactor || 0,
    minLine = 0,
    offset = 0,
    removeEOFNL,
    addEOFNL;

  /**
   * Checks if the hunk exactly fits on the provided location
   */
  function hunkFits(hunk, toPos) {
    for (let j = 0; j < hunk.lines.length; j++) {
      let line = hunk.lines[j],
        operation = line.length > 0 ? line[0] : ' ',
        content = line.length > 0 ? line.substr(1) : line;
      if (operation === ' ' || operation === '-') {
        // Context sanity check
        if (!compareLine(toPos + 1, lines[toPos], operation, content)) {
          errorCount++;
          if (errorCount > fuzzFactor) {
            return false;
          }
        }
        toPos++;
      }
    }
    return true;
  }

  // Search best fit offsets for each hunk based on the previous ones
  for (let i = 0; i < hunks.length; i++) {
    let hunk = hunks[i],
      maxLine = lines.length - hunk.oldLines,
      localOffset = 0,
      toPos = offset + hunk.oldStart - 1;
    let iterator = (0, _distanceIterator.default)(toPos, minLine, maxLine);
    for (; localOffset !== undefined; localOffset = iterator()) {
      if (hunkFits(hunk, toPos + localOffset)) {
        hunk.offset = offset += localOffset;
        break;
      }
    }
    if (localOffset === undefined) {
      return false;
    }

    // Set lower text limit to end of the current hunk, so next ones don't try
    // to fit over already patched text
    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;
  }

  // Apply patch hunks
  let diffOffset = 0;
  for (let i = 0; i < hunks.length; i++) {
    let hunk = hunks[i],
      toPos = hunk.oldStart + hunk.offset + diffOffset - 1;
    diffOffset += hunk.newLines - hunk.oldLines;
    for (let j = 0; j < hunk.lines.length; j++) {
      let line = hunk.lines[j],
        operation = line.length > 0 ? line[0] : ' ',
        content = line.length > 0 ? line.substr(1) : line,
        delimiter = hunk.linedelimiters[j];
      if (operation === ' ') {
        toPos++;
      } else if (operation === '-') {
        lines.splice(toPos, 1);
        delimiters.splice(toPos, 1);
        /* istanbul ignore else */
      } else if (operation === '+') {
        lines.splice(toPos, 0, content);
        delimiters.splice(toPos, 0, delimiter);
        toPos++;
      } else if (operation === '\\') {
        let previousOperation = hunk.lines[j - 1] ? hunk.lines[j - 1][0] : null;
        if (previousOperation === '+') {
          removeEOFNL = true;
        } else if (previousOperation === '-') {
          addEOFNL = true;
        }
      }
    }
  }

  // Handle EOFNL insertion/removal
  if (removeEOFNL) {
    while (!lines[lines.length - 1]) {
      lines.pop();
      delimiters.pop();
    }
  } else if (addEOFNL) {
    lines.push('');
    delimiters.push('\n');
  }
  for (let _k = 0; _k < lines.length - 1; _k++) {
    lines[_k] = lines[_k] + delimiters[_k];
  }
  return lines.join('');
}

// Wrapper that supports multiple file patches via callbacks.
function applyPatches(uniDiff, options) {
  if (typeof uniDiff === 'string') {
    uniDiff = (0, _parse.parsePatch)(uniDiff);
  }
  let currentIndex = 0;
  function processIndex() {
    let index = uniDiff[currentIndex++];
    if (!index) {
      return options.complete();
    }
    options.loadFile(index, function (err, data) {
      if (err) {
        return options.complete(err);
      }
      let updatedContent = applyPatch(data, index, options);
      options.patched(index, updatedContent, function (err) {
        if (err) {
          return options.complete(err);
        }
        processIndex();
      });
    });
  }
  processIndex();
}
},{"./parse":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/patch/parse.js","../util/distance-iterator":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/util/distance-iterator.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/patch/create.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPatch = createPatch;
exports.createTwoFilesPatch = createTwoFilesPatch;
exports.formatPatch = formatPatch;
exports.structuredPatch = structuredPatch;
var _line = require("../diff/line");
function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
  if (!options) {
    options = {};
  }
  if (typeof options.context === 'undefined') {
    options.context = 4;
  }
  const diff = (0, _line.diffLines)(oldStr, newStr, options);
  if (!diff) {
    return;
  }
  diff.push({
    value: '',
    lines: []
  }); // Append an empty value to make cleanup easier

  function contextLines(lines) {
    return lines.map(function (entry) {
      return ' ' + entry;
    });
  }
  let hunks = [];
  let oldRangeStart = 0,
    newRangeStart = 0,
    curRange = [],
    oldLine = 1,
    newLine = 1;
  for (let i = 0; i < diff.length; i++) {
    const current = diff[i],
      lines = current.lines || current.value.replace(/\n$/, '').split('\n');
    current.lines = lines;
    if (current.added || current.removed) {
      // If we have previous context, start with that
      if (!oldRangeStart) {
        const prev = diff[i - 1];
        oldRangeStart = oldLine;
        newRangeStart = newLine;
        if (prev) {
          curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];
          oldRangeStart -= curRange.length;
          newRangeStart -= curRange.length;
        }
      }

      // Output our changes
      curRange.push(...lines.map(function (entry) {
        return (current.added ? '+' : '-') + entry;
      }));

      // Track the updated file position
      if (current.added) {
        newLine += lines.length;
      } else {
        oldLine += lines.length;
      }
    } else {
      // Identical context lines. Track line changes
      if (oldRangeStart) {
        // Close out any changes that have been output (or join overlapping)
        if (lines.length <= options.context * 2 && i < diff.length - 2) {
          // Overlapping
          curRange.push(...contextLines(lines));
        } else {
          // end the range and output
          let contextSize = Math.min(lines.length, options.context);
          curRange.push(...contextLines(lines.slice(0, contextSize)));
          let hunk = {
            oldStart: oldRangeStart,
            oldLines: oldLine - oldRangeStart + contextSize,
            newStart: newRangeStart,
            newLines: newLine - newRangeStart + contextSize,
            lines: curRange
          };
          if (i >= diff.length - 2 && lines.length <= options.context) {
            // EOF is inside this hunk
            let oldEOFNewline = /\n$/.test(oldStr);
            let newEOFNewline = /\n$/.test(newStr);
            let noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;
            if (!oldEOFNewline && noNlBeforeAdds && oldStr.length > 0) {
              // special case: old has no eol and no trailing context; no-nl can end up before adds
              // however, if the old file is empty, do not output the no-nl line
              curRange.splice(hunk.oldLines, 0, '\\ No newline at end of file');
            }
            if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {
              curRange.push('\\ No newline at end of file');
            }
          }
          hunks.push(hunk);
          oldRangeStart = 0;
          newRangeStart = 0;
          curRange = [];
        }
      }
      oldLine += lines.length;
      newLine += lines.length;
    }
  }
  return {
    oldFileName: oldFileName,
    newFileName: newFileName,
    oldHeader: oldHeader,
    newHeader: newHeader,
    hunks: hunks
  };
}
function formatPatch(diff) {
  const ret = [];
  if (diff.oldFileName == diff.newFileName) {
    ret.push('Index: ' + diff.oldFileName);
  }
  ret.push('===================================================================');
  ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\t' + diff.oldHeader));
  ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\t' + diff.newHeader));
  for (let i = 0; i < diff.hunks.length; i++) {
    const hunk = diff.hunks[i];
    // Unified Diff Format quirk: If the chunk size is 0,
    // the first number is one lower than one would expect.
    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293
    if (hunk.oldLines === 0) {
      hunk.oldStart -= 1;
    }
    if (hunk.newLines === 0) {
      hunk.newStart -= 1;
    }
    ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');
    ret.push.apply(ret, hunk.lines);
  }
  return ret.join('\n') + '\n';
}
function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
  return formatPatch(structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options));
}
function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {
  return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);
}
},{"../diff/line":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/line.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/util/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrayEqual = arrayEqual;
exports.arrayStartsWith = arrayStartsWith;
function arrayEqual(a, b) {
  if (a.length !== b.length) {
    return false;
  }
  return arrayStartsWith(a, b);
}
function arrayStartsWith(array, start) {
  if (start.length > array.length) {
    return false;
  }
  for (let i = 0; i < start.length; i++) {
    if (start[i] !== array[i]) {
      return false;
    }
  }
  return true;
}
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/patch/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calcLineCount = calcLineCount;
exports.merge = merge;
var _create = require("./create");
var _parse = require("./parse");
var _array = require("../util/array");
function calcLineCount(hunk) {
  const {
    oldLines,
    newLines
  } = calcOldNewLineCount(hunk.lines);
  if (oldLines !== undefined) {
    hunk.oldLines = oldLines;
  } else {
    delete hunk.oldLines;
  }
  if (newLines !== undefined) {
    hunk.newLines = newLines;
  } else {
    delete hunk.newLines;
  }
}
function merge(mine, theirs, base) {
  mine = loadPatch(mine, base);
  theirs = loadPatch(theirs, base);
  let ret = {};

  // For index we just let it pass through as it doesn't have any necessary meaning.
  // Leaving sanity checks on this to the API consumer that may know more about the
  // meaning in their own context.
  if (mine.index || theirs.index) {
    ret.index = mine.index || theirs.index;
  }
  if (mine.newFileName || theirs.newFileName) {
    if (!fileNameChanged(mine)) {
      // No header or no change in ours, use theirs (and ours if theirs does not exist)
      ret.oldFileName = theirs.oldFileName || mine.oldFileName;
      ret.newFileName = theirs.newFileName || mine.newFileName;
      ret.oldHeader = theirs.oldHeader || mine.oldHeader;
      ret.newHeader = theirs.newHeader || mine.newHeader;
    } else if (!fileNameChanged(theirs)) {
      // No header or no change in theirs, use ours
      ret.oldFileName = mine.oldFileName;
      ret.newFileName = mine.newFileName;
      ret.oldHeader = mine.oldHeader;
      ret.newHeader = mine.newHeader;
    } else {
      // Both changed... figure it out
      ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);
      ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);
      ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);
      ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);
    }
  }
  ret.hunks = [];
  let mineIndex = 0,
    theirsIndex = 0,
    mineOffset = 0,
    theirsOffset = 0;
  while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {
    let mineCurrent = mine.hunks[mineIndex] || {
        oldStart: Infinity
      },
      theirsCurrent = theirs.hunks[theirsIndex] || {
        oldStart: Infinity
      };
    if (hunkBefore(mineCurrent, theirsCurrent)) {
      // This patch does not overlap with any of the others, yay.
      ret.hunks.push(cloneHunk(mineCurrent, mineOffset));
      mineIndex++;
      theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;
    } else if (hunkBefore(theirsCurrent, mineCurrent)) {
      // This patch does not overlap with any of the others, yay.
      ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));
      theirsIndex++;
      mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;
    } else {
      // Overlap, merge as best we can
      let mergedHunk = {
        oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),
        oldLines: 0,
        newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),
        newLines: 0,
        lines: []
      };
      mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);
      theirsIndex++;
      mineIndex++;
      ret.hunks.push(mergedHunk);
    }
  }
  return ret;
}
function loadPatch(param, base) {
  if (typeof param === 'string') {
    if (/^@@/m.test(param) || /^Index:/m.test(param)) {
      return (0, _parse.parsePatch)(param)[0];
    }
    if (!base) {
      throw new Error('Must provide a base reference or pass in a patch');
    }
    return (0, _create.structuredPatch)(undefined, undefined, base, param);
  }
  return param;
}
function fileNameChanged(patch) {
  return patch.newFileName && patch.newFileName !== patch.oldFileName;
}
function selectField(index, mine, theirs) {
  if (mine === theirs) {
    return mine;
  } else {
    index.conflict = true;
    return {
      mine,
      theirs
    };
  }
}
function hunkBefore(test, check) {
  return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;
}
function cloneHunk(hunk, offset) {
  return {
    oldStart: hunk.oldStart,
    oldLines: hunk.oldLines,
    newStart: hunk.newStart + offset,
    newLines: hunk.newLines,
    lines: hunk.lines
  };
}
function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {
  // This will generally result in a conflicted hunk, but there are cases where the context
  // is the only overlap where we can successfully merge the content here.
  let mine = {
      offset: mineOffset,
      lines: mineLines,
      index: 0
    },
    their = {
      offset: theirOffset,
      lines: theirLines,
      index: 0
    };

  // Handle any leading content
  insertLeading(hunk, mine, their);
  insertLeading(hunk, their, mine);

  // Now in the overlap content. Scan through and select the best changes from each.
  while (mine.index < mine.lines.length && their.index < their.lines.length) {
    let mineCurrent = mine.lines[mine.index],
      theirCurrent = their.lines[their.index];
    if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {
      // Both modified ...
      mutualChange(hunk, mine, their);
    } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {
      // Mine inserted
      hunk.lines.push(...collectChange(mine));
    } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {
      // Theirs inserted
      hunk.lines.push(...collectChange(their));
    } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {
      // Mine removed or edited
      removal(hunk, mine, their);
    } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {
      // Their removed or edited
      removal(hunk, their, mine, true);
    } else if (mineCurrent === theirCurrent) {
      // Context identity
      hunk.lines.push(mineCurrent);
      mine.index++;
      their.index++;
    } else {
      // Context mismatch
      conflict(hunk, collectChange(mine), collectChange(their));
    }
  }

  // Now push anything that may be remaining
  insertTrailing(hunk, mine);
  insertTrailing(hunk, their);
  calcLineCount(hunk);
}
function mutualChange(hunk, mine, their) {
  let myChanges = collectChange(mine),
    theirChanges = collectChange(their);
  if (allRemoves(myChanges) && allRemoves(theirChanges)) {
    // Special case for remove changes that are supersets of one another
    if ((0, _array.arrayStartsWith)(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {
      hunk.lines.push(...myChanges);
      return;
    } else if ((0, _array.arrayStartsWith)(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {
      hunk.lines.push(...theirChanges);
      return;
    }
  } else if ((0, _array.arrayEqual)(myChanges, theirChanges)) {
    hunk.lines.push(...myChanges);
    return;
  }
  conflict(hunk, myChanges, theirChanges);
}
function removal(hunk, mine, their, swap) {
  let myChanges = collectChange(mine),
    theirChanges = collectContext(their, myChanges);
  if (theirChanges.merged) {
    hunk.lines.push(...theirChanges.merged);
  } else {
    conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);
  }
}
function conflict(hunk, mine, their) {
  hunk.conflict = true;
  hunk.lines.push({
    conflict: true,
    mine: mine,
    theirs: their
  });
}
function insertLeading(hunk, insert, their) {
  while (insert.offset < their.offset && insert.index < insert.lines.length) {
    let line = insert.lines[insert.index++];
    hunk.lines.push(line);
    insert.offset++;
  }
}
function insertTrailing(hunk, insert) {
  while (insert.index < insert.lines.length) {
    let line = insert.lines[insert.index++];
    hunk.lines.push(line);
  }
}
function collectChange(state) {
  let ret = [],
    operation = state.lines[state.index][0];
  while (state.index < state.lines.length) {
    let line = state.lines[state.index];

    // Group additions that are immediately after subtractions and treat them as one "atomic" modify change.
    if (operation === '-' && line[0] === '+') {
      operation = '+';
    }
    if (operation === line[0]) {
      ret.push(line);
      state.index++;
    } else {
      break;
    }
  }
  return ret;
}
function collectContext(state, matchChanges) {
  let changes = [],
    merged = [],
    matchIndex = 0,
    contextChanges = false,
    conflicted = false;
  while (matchIndex < matchChanges.length && state.index < state.lines.length) {
    let change = state.lines[state.index],
      match = matchChanges[matchIndex];

    // Once we've hit our add, then we are done
    if (match[0] === '+') {
      break;
    }
    contextChanges = contextChanges || change[0] !== ' ';
    merged.push(match);
    matchIndex++;

    // Consume any additions in the other block as a conflict to attempt
    // to pull in the remaining context after this
    if (change[0] === '+') {
      conflicted = true;
      while (change[0] === '+') {
        changes.push(change);
        change = state.lines[++state.index];
      }
    }
    if (match.substr(1) === change.substr(1)) {
      changes.push(change);
      state.index++;
    } else {
      conflicted = true;
    }
  }
  if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {
    conflicted = true;
  }
  if (conflicted) {
    return changes;
  }
  while (matchIndex < matchChanges.length) {
    merged.push(matchChanges[matchIndex++]);
  }
  return {
    merged,
    changes
  };
}
function allRemoves(changes) {
  return changes.reduce(function (prev, change) {
    return prev && change[0] === '-';
  }, true);
}
function skipRemoveSuperset(state, removeChanges, delta) {
  for (let i = 0; i < delta; i++) {
    let changeContent = removeChanges[removeChanges.length - delta + i].substr(1);
    if (state.lines[state.index + i] !== ' ' + changeContent) {
      return false;
    }
  }
  state.index += delta;
  return true;
}
function calcOldNewLineCount(lines) {
  let oldLines = 0;
  let newLines = 0;
  lines.forEach(function (line) {
    if (typeof line !== 'string') {
      let myCount = calcOldNewLineCount(line.mine);
      let theirCount = calcOldNewLineCount(line.theirs);
      if (oldLines !== undefined) {
        if (myCount.oldLines === theirCount.oldLines) {
          oldLines += myCount.oldLines;
        } else {
          oldLines = undefined;
        }
      }
      if (newLines !== undefined) {
        if (myCount.newLines === theirCount.newLines) {
          newLines += myCount.newLines;
        } else {
          newLines = undefined;
        }
      }
    } else {
      if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {
        newLines++;
      }
      if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {
        oldLines++;
      }
    }
  });
  return {
    oldLines,
    newLines
  };
}
},{"./create":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/patch/create.js","./parse":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/patch/parse.js","../util/array":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/util/array.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/convert/dmp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertChangesToDMP = convertChangesToDMP;
// See: http://code.google.com/p/google-diff-match-patch/wiki/API
function convertChangesToDMP(changes) {
  let ret = [],
    change,
    operation;
  for (let i = 0; i < changes.length; i++) {
    change = changes[i];
    if (change.added) {
      operation = 1;
    } else if (change.removed) {
      operation = -1;
    } else {
      operation = 0;
    }
    ret.push([operation, change.value]);
  }
  return ret;
}
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/convert/xml.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertChangesToXML = convertChangesToXML;
function convertChangesToXML(changes) {
  let ret = [];
  for (let i = 0; i < changes.length; i++) {
    let change = changes[i];
    if (change.added) {
      ret.push('<ins>');
    } else if (change.removed) {
      ret.push('<del>');
    }
    ret.push(escapeHTML(change.value));
    if (change.added) {
      ret.push('</ins>');
    } else if (change.removed) {
      ret.push('</del>');
    }
  }
  return ret.join('');
}
function escapeHTML(s) {
  let n = s;
  n = n.replace(/&/g, '&amp;');
  n = n.replace(/</g, '&lt;');
  n = n.replace(/>/g, '&gt;');
  n = n.replace(/"/g, '&quot;');
  return n;
}
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Diff", {
  enumerable: true,
  get: function () {
    return _base.default;
  }
});
Object.defineProperty(exports, "applyPatch", {
  enumerable: true,
  get: function () {
    return _apply.applyPatch;
  }
});
Object.defineProperty(exports, "applyPatches", {
  enumerable: true,
  get: function () {
    return _apply.applyPatches;
  }
});
Object.defineProperty(exports, "canonicalize", {
  enumerable: true,
  get: function () {
    return _json.canonicalize;
  }
});
Object.defineProperty(exports, "convertChangesToDMP", {
  enumerable: true,
  get: function () {
    return _dmp.convertChangesToDMP;
  }
});
Object.defineProperty(exports, "convertChangesToXML", {
  enumerable: true,
  get: function () {
    return _xml.convertChangesToXML;
  }
});
Object.defineProperty(exports, "createPatch", {
  enumerable: true,
  get: function () {
    return _create.createPatch;
  }
});
Object.defineProperty(exports, "createTwoFilesPatch", {
  enumerable: true,
  get: function () {
    return _create.createTwoFilesPatch;
  }
});
Object.defineProperty(exports, "diffArrays", {
  enumerable: true,
  get: function () {
    return _array.diffArrays;
  }
});
Object.defineProperty(exports, "diffChars", {
  enumerable: true,
  get: function () {
    return _character.diffChars;
  }
});
Object.defineProperty(exports, "diffCss", {
  enumerable: true,
  get: function () {
    return _css.diffCss;
  }
});
Object.defineProperty(exports, "diffJson", {
  enumerable: true,
  get: function () {
    return _json.diffJson;
  }
});
Object.defineProperty(exports, "diffLines", {
  enumerable: true,
  get: function () {
    return _line.diffLines;
  }
});
Object.defineProperty(exports, "diffSentences", {
  enumerable: true,
  get: function () {
    return _sentence.diffSentences;
  }
});
Object.defineProperty(exports, "diffTrimmedLines", {
  enumerable: true,
  get: function () {
    return _line.diffTrimmedLines;
  }
});
Object.defineProperty(exports, "diffWords", {
  enumerable: true,
  get: function () {
    return _word.diffWords;
  }
});
Object.defineProperty(exports, "diffWordsWithSpace", {
  enumerable: true,
  get: function () {
    return _word.diffWordsWithSpace;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.merge;
  }
});
Object.defineProperty(exports, "parsePatch", {
  enumerable: true,
  get: function () {
    return _parse.parsePatch;
  }
});
Object.defineProperty(exports, "structuredPatch", {
  enumerable: true,
  get: function () {
    return _create.structuredPatch;
  }
});
var _base = _interopRequireDefault(require("./diff/base"));
var _character = require("./diff/character");
var _word = require("./diff/word");
var _line = require("./diff/line");
var _sentence = require("./diff/sentence");
var _css = require("./diff/css");
var _json = require("./diff/json");
var _array = require("./diff/array");
var _apply = require("./patch/apply");
var _parse = require("./patch/parse");
var _merge = require("./patch/merge");
var _create = require("./patch/create");
var _dmp = require("./convert/dmp");
var _xml = require("./convert/xml");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./diff/base":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/base.js","./diff/character":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/character.js","./diff/word":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/word.js","./diff/line":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/line.js","./diff/sentence":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/sentence.js","./diff/css":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/css.js","./diff/json":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/json.js","./diff/array":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/diff/array.js","./patch/apply":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/patch/apply.js","./patch/parse":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/patch/parse.js","./patch/merge":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/patch/merge.js","./patch/create":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/patch/create.js","./convert/dmp":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/convert/dmp.js","./convert/xml":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/convert/xml.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/methods/SetText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = require("../../../../utils/jsdiff/index.js");
const RemoveItem = Phaser.Utils.Array.Remove;
var SetText = function (textObject, newText) {
  var text = textObject.text;
  if (newText === text) {
    return;
  }

  // textObject.setText(newText);

  // Remove lastInsertCursor directly 
  RemoveItem(textObject.children, textObject.lastInsertCursor);
  if (newText === '') {
    textObject.removeChildren();
  } else {
    var results = (0, _index.diffChars)(text, newText);
    var charIndex = 0;
    for (var i = 0, cnt = results.length; i < cnt; i++) {
      var result = results[i];
      if (result.removed) {
        // Remove character at charIndex
        textObject.removeText(charIndex, result.count);
      } else if (result.added) {
        textObject.insertText(charIndex, result.value);
        charIndex += result.count;
      } else {
        charIndex += result.count;
      }
    }
  }

  // Push back lastInsertCursor directly
  textObject.children.push(textObject.lastInsertCursor);
  textObject.runWordWrap();
};
var _default = SetText;
exports.default = _default;
},{"../../../../utils/jsdiff/index.js":"node_modules/phaser3-rex-plugins/plugins/utils/jsdiff/index.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/CanvasInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DynamicText = _interopRequireDefault(require("../dynamictext/DynamicText.js"));
var _CreateHiddenTextEdit = _interopRequireDefault(require("./textedit/CreateHiddenTextEdit.js"));
var _InjectDefaultConfig = _interopRequireDefault(require("./methods/InjectDefaultConfig.js"));
var _ExtractByPrefix = _interopRequireDefault(require("../../../utils/object/ExtractByPrefix.js"));
var _RegisterCursorStyle = _interopRequireDefault(require("./methods/RegisterCursorStyle.js"));
var _RegisterFocusStyle = _interopRequireDefault(require("./methods/RegisterFocusStyle.js"));
var _AddLastInsertCursor = _interopRequireDefault(require("./methods/AddLastInsertCursor.js"));
var _SetText = _interopRequireDefault(require("./methods/SetText.js"));
var _Types = require("../dynamictext/bob/Types.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class CanvasInput extends _DynamicText.default {
  constructor(scene, x, y, fixedWidth, fixedHeight, config) {
    if (IsPlainObject(x)) {
      config = x;
    } else if (IsPlainObject(fixedWidth)) {
      config = fixedWidth;
    }
    if (config === undefined) {
      config = {};
    }
    (0, _InjectDefaultConfig.default)(config);

    // Set text later
    var text = config.text;
    if (text) {
      delete config.text;
    }
    var focusStyle = (0, _ExtractByPrefix.default)(config.background, 'focus');
    var cursorStyle = (0, _ExtractByPrefix.default)(config.style, 'cursor');
    super(scene, x, y, fixedWidth, fixedHeight, config);
    this.type = 'rexCanvasInput';
    this._text = '';
    this.textEdit = (0, _CreateHiddenTextEdit.default)(this, config);
    if (config.focusStyle) {
      Object.assign(focusStyle, config.focusStyle);
    }
    _RegisterFocusStyle.default.call(this, focusStyle);
    if (config.cursorStyle) {
      Object.assign(cursorStyle, config.cursorStyle);
    }
    _RegisterCursorStyle.default.call(this, cursorStyle);
    var addCharCallback = config.onAddChar;
    if (addCharCallback) {
      this.on('addchar', addCharCallback);
    }
    var cursorOutCallback = config.onCursorOut;
    if (cursorOutCallback) {
      this.on('cursorout', cursorOutCallback);
    }
    var cursorInCallback = config.onCursorIn;
    if (cursorInCallback) {
      this.on('cursorin', cursorInCallback);
    }
    var moveCursorCallback = config.onMoveCursor;
    if (moveCursorCallback) {
      this.on('movecursor', moveCursorCallback);
    }
    this.setParseTextCallback(config.parseTextCallback);
    this.lastInsertCursor = (0, _AddLastInsertCursor.default)(this);
    if (text) {
      this.setText(text);
    } else {
      // Still need run word wrap for lastInsertCursor child
      this.runWordWrap();
    }
  }
  addChild(child, index) {
    super.addChild(child, index);
    if (Array.isArray(child)) {
      var children = child;
      for (var i = 0, cnt = children.length; i < cnt; i++) {
        var child = children[i];
        if ((0, _Types.IsChar)(child)) {
          this.emit('addchar', child, index + i, this);
        }
      }
    } else {
      if ((0, _Types.IsChar)(child)) {
        this.emit('addchar', child, index, this);
      }
    }
    return this;
  }
  get text() {
    return this._text;
  }
  set text(value) {
    if (value == null) {
      value = '';
    } else {
      value = value.toString();
    }
    if (this._text === value) {
      return;
    }
    (0, _SetText.default)(this, value);
    this._text = value;
  }
  setText(text) {
    this.text = text;
    return this;
  }
  appendText(text) {
    this.setText(this.text + text);
    return this;
  }
  setSize(width, height) {
    if (this.width === width && this.height === height) {
      return this;
    }
    super.setSize(width, height);

    // Run wrap again since fixedWidth and fixedHeight are changed
    this.runWrap();
    return this;
  }
  get displayText() {
    return this.text;
  }
  set displayText(value) {
    this.text = value;
  }
  setDisplayText(value) {
    this.displayText = value;
    return this;
  }
  get inputText() {
    return this.textEdit.text;
  }
  set inputText(value) {
    this.textEdit.text = value;
  }
  setInputText(value) {
    this.inputText = value;
    return this;
  }
  setParseTextCallback(callback) {
    if (!callback) {
      callback = DefaultParseTextCallback;
    }
    this.parseTextCallback = callback;
    return this;
  }
  get value() {
    return this.parseTextCallback(this.text);
  }
  set value(value) {
    this.setText(value);
  }
  getValue() {
    return this.value;
  }
  setValue(value) {
    this.value = value;
    return this;
  }
  get readOnly() {
    return this.textEdit.readOnly;
  }
  set readOnly(value) {
    this.textEdit.readOnly = value;
  }
  setReadOnly(value) {
    this.textEdit.setReadOnly(value);
    return this;
  }
  open(onCloseCallback) {
    if (onCloseCallback) {
      this.textEdit.once('close', onCloseCallback);
    }
    this.textEdit.open();
    return this;
  }
  close() {
    this.textEdit.close();
    return this;
  }
  get isOpened() {
    return this.textEdit.isOpened;
  }
  setFocusStyle(style) {
    this.focusStyle = style;
    return this;
  }
  setCursorStyle(style) {
    this.cursorStyle = style;
    return this;
  }
  setNumberInput() {
    this.textEdit.setNumberInput();
    this.parseTextCallback = Number;
    return this;
  }
  get maxLength() {
    return this.textEdit.maxLength;
  }
  set maxLength(value) {
    this.textEdit.maxLength = value;
  }
  setMaxLength(value) {
    this.maxLength = value;
    return this;
  }
  get minLength() {
    return this.textEdit.minLength;
  }
  set minLength(value) {
    this.textEdit.minLength = value;
  }
  setMinLength(value) {
    this.minLength = value;
    return this;
  }
}
var DefaultParseTextCallback = function (text) {
  return text;
};
var _default = CanvasInput;
exports.default = _default;
},{"../dynamictext/DynamicText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/DynamicText.js","./textedit/CreateHiddenTextEdit.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/textedit/CreateHiddenTextEdit.js","./methods/InjectDefaultConfig.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/methods/InjectDefaultConfig.js","../../../utils/object/ExtractByPrefix.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/ExtractByPrefix.js","./methods/RegisterCursorStyle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/methods/RegisterCursorStyle.js","./methods/RegisterFocusStyle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/methods/RegisterFocusStyle.js","./methods/AddLastInsertCursor.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/methods/AddLastInsertCursor.js","./methods/SetText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/methods/SetText.js","../dynamictext/bob/Types.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/dynamictext/bob/Types.js"}],"node_modules/phaser3-rex-plugins/plugins/canvasinput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CanvasInput = _interopRequireDefault(require("./gameobjects/dynamictext/canvasinput/CanvasInput.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _CanvasInput.default;
exports.default = _default;
},{"./gameobjects/dynamictext/canvasinput/CanvasInput.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dynamictext/canvasinput/CanvasInput.js"}],"node_modules/phaser3-rex-plugins/templates/ui/canvasinput/CanvasInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _canvasinput = _interopRequireDefault(require("../../../plugins/canvasinput.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _canvasinput.default;
exports.default = _default;
},{"../../../plugins/canvasinput.js":"node_modules/phaser3-rex-plugins/plugins/canvasinput.js"}],"node_modules/phaser3-rex-plugins/templates/ui/canvasinput/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CanvasInput = _interopRequireDefault(require("./CanvasInput.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('canvasInput', function (x, y, fixedWidth, fixedHeight, config) {
  var gameObject = new _CanvasInput.default(this.scene, x, y, fixedWidth, fixedHeight, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.CanvasInput', _CanvasInput.default);
var _default = _CanvasInput.default;
exports.default = _default;
},{"./CanvasInput.js":"node_modules/phaser3-rex-plugins/templates/ui/canvasinput/CanvasInput.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/system/GetTickDelta.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetGame = _interopRequireDefault(require("./GetGame.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetTickDelta = function (game) {
  return (0, _GetGame.default)(game).loop.delta;
};
var _default = GetTickDelta;
exports.default = _default;
},{"./GetGame.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetGame.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/HiddenTextEdit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _HiddenTextEditBase = _interopRequireDefault(require("./HiddenTextEditBase.js"));
var _NumberInputUpdateCallback = _interopRequireDefault(require("./defaultcallbacks/NumberInputUpdateCallback.js"));
var _GetTickDelta = _interopRequireDefault(require("../../utils/system/GetTickDelta.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const Wrap = Phaser.Math.Wrap;
class HiddenTextEdit extends _HiddenTextEditBase.default {
  constructor(gameObject, config) {
    if (config === undefined) {
      config = {};
    }
    if (config.onUpdate === 'number') {
      config.onUpdate = _NumberInputUpdateCallback.default;
    }
    super(gameObject, config);
    // this.parent = gameObject;

    this.setCursor(GetValue(config, 'cursor', '|'));
    this.setCursorFlashDuration(GetValue(config, 'cursorFlashDuration', 1000));
    this.cursorFlashTimer = 0;
  }
  initText() {
    this.cursorFlashTimer = 0;
    this.prevCursorPosition = undefined;
    this.setText(this.parent.text);
    this.setCursorPosition();
    return this;
  }
  updateText() {
    var textObject = this.parent;
    var text = this.text;
    if (this.onUpdateCallback) {
      var newText = this.onUpdateCallback(text, textObject, this);
      if (newText != null) {
        text = newText;
      }
    }
    if (this.isOpened && this.hasCursor) {
      // Insert Cursor
      var cursorPosition = this.cursorPosition;
      text = text.substring(0, cursorPosition) + this.cursor + text.substring(cursorPosition);
      if (this.prevCursorPosition !== cursorPosition) {
        // console.log(cursorPosition);
        this.prevCursorPosition = cursorPosition;
      }
    }
    if (textObject.text !== text) {
      textObject.setText(text);
      this.emit('textchange', text, textObject, this);
    }
    return this;
  }
  setCursor(s) {
    this._cursor = s;
    this.hasCursor = s && s !== '';
    return s;
  }
  setCursorFlashDuration(duration) {
    this.cursorFlashDuration = duration;
    return this;
  }
  get cursor() {
    if (!this._isFocused) {
      return this._cursor;
    }

    // Flash Cursor
    var cursor;
    if (this.cursorFlashTimer < this.cursorFlashDuration / 2) {
      cursor = this._cursor;
    } else {
      cursor = ' ';
    }
    var timerValue = this.cursorFlashTimer + (0, _GetTickDelta.default)(this.scene);
    this.cursorFlashTimer = Wrap(timerValue, 0, this.cursorFlashDuration);
    return cursor;
  }
}
var _default = HiddenTextEdit;
exports.default = _default;
},{"./HiddenTextEditBase.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/HiddenTextEditBase.js","./defaultcallbacks/NumberInputUpdateCallback.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/defaultcallbacks/NumberInputUpdateCallback.js","../../utils/system/GetTickDelta.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetTickDelta.js"}],"node_modules/phaser3-rex-plugins/plugins/hiddeninputtext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _HiddenTextEdit = _interopRequireDefault(require("./behaviors/hiddentextedit/HiddenTextEdit.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _HiddenTextEdit.default;
exports.default = _default;
},{"./behaviors/hiddentextedit/HiddenTextEdit.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/hiddentextedit/HiddenTextEdit.js"}],"node_modules/phaser3-rex-plugins/templates/ui/hiddenedit/HiddenEdit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _hiddeninputtext = _interopRequireDefault(require("../../../plugins/hiddeninputtext.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _hiddeninputtext.default;
exports.default = _default;
},{"../../../plugins/hiddeninputtext.js":"node_modules/phaser3-rex-plugins/plugins/hiddeninputtext.js"}],"node_modules/phaser3-rex-plugins/templates/ui/hiddenedit/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _HiddenEdit = _interopRequireDefault(require("./HiddenEdit.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('hiddenEdit', function (textObject, config) {
  var gameObject = new _HiddenEdit.default(textObject, config);
  // Note: Don't add this game object into scene
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.HiddenEdit', _HiddenEdit.default);
var _default = _HiddenEdit.default;
exports.default = _default;
},{"./HiddenEdit.js":"node_modules/phaser3-rex-plugins/templates/ui/hiddenedit/HiddenEdit.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/render/WebGLRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetCalcMatrix = Phaser.GameObjects.GetCalcMatrix;
var WebGLRenderer = function (renderer, src, camera, parentMatrix) {
  src.updateData();
  camera.addToRenderList(src);
  var pipeline = renderer.pipelines.set(src.pipeline);
  var result = GetCalcMatrix(src, camera, parentMatrix);
  var calcMatrix = pipeline.calcMatrix.copyFrom(result.calc);
  var dx = src._displayOriginX;
  var dy = src._displayOriginY;
  var alpha = camera.alpha * src.alpha;
  renderer.pipelines.preBatch(src);
  var shapes = src.geom;
  for (var i = 0, cnt = shapes.length; i < cnt; i++) {
    shapes[i].webglRender(pipeline, calcMatrix, alpha, dx, dy);
  }
  renderer.pipelines.postBatch(src);
};
var _default = WebGLRenderer;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/render/CanvasRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const SetTransform = Phaser.Renderer.Canvas.SetTransform;
var CanvasRenderer = function (renderer, src, camera, parentMatrix) {
  src.updateData();
  camera.addToRenderList(src);
  var ctx = renderer.currentContext;
  if (SetTransform(renderer, ctx, src, camera, parentMatrix)) {
    var dx = src._displayOriginX;
    var dy = src._displayOriginY;
    var shapes = src.geom;
    for (var i = 0, cnt = shapes.length; i < cnt; i++) {
      shapes[i].canvasRender(ctx, dx, dy);
    }

    //  Restore the context saved in SetTransform
    ctx.restore();
  }
};
var _default = CanvasRenderer;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/render/Render.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _WebGLRenderer = _interopRequireDefault(require("./WebGLRenderer.js"));
var _CanvasRenderer = _interopRequireDefault(require("./CanvasRenderer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  renderWebGL: _WebGLRenderer.default,
  renderCanvas: _CanvasRenderer.default
};
exports.default = _default;
},{"./WebGLRenderer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/render/WebGLRenderer.js","./CanvasRenderer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/render/CanvasRenderer.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/BaseShapes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Render = _interopRequireDefault(require("./render/Render.js"));
var _Clear = _interopRequireDefault(require("../../../utils/object/Clear.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Shape = Phaser.GameObjects.Shape;
const RemoveItem = Phaser.Utils.Array.Remove;
class BaseShapes extends Shape {
  constructor(scene, x, y, width, height) {
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (width === undefined) {
      width = 2;
    }
    if (height === undefined) {
      height = width;
    }
    super(scene, 'rexShapes', []);
    this._width = -1;
    this._height = -1;
    this.dirty = true;
    this.isSizeChanged = true;
    this.shapes = {};
    this.setPosition(x, y);
    this.setSize(width, height);
    this.updateDisplayOrigin();
  }
  get width() {
    return this._width;
  }
  set width(value) {
    this.setSize(value, this._height);
  }
  get height() {
    return this._height;
  }
  set height(value) {
    this.setSize(this._width, value);
  }
  setDirty(value) {
    if (value === undefined) {
      value = true;
    }
    this.dirty = value;
    return this;
  }
  setSize(width, height) {
    this.isSizeChanged = this.isSizeChanged || this._width !== width || this._height !== height;
    this.dirty = this.dirty || this.isSizeChanged;
    this._width = width;
    this._height = height;
    this.updateDisplayOrigin();
    var input = this.input;
    if (input && !input.customHitArea) {
      input.hitArea.width = width;
      input.hitArea.height = height;
    }
    return this;
  }
  resize(width, height) {
    this.setSize(width, height);
    return this;
  }
  get fillColor() {
    return this._fillColor;
  }
  set fillColor(value) {
    this.setFillStyle(value, this._fillAlpha);
  }
  get fillAlpha() {
    return this._fillAlpha;
  }
  set fillAlpha(value) {
    this.setFillStyle(this._fillColor, value);
  }
  setFillStyle(color, alpha) {
    if (alpha === undefined) {
      alpha = 1;
    }
    this.dirty = this.dirty || this.fillColor !== color || this.fillAlpha !== alpha;
    this._fillColor = color;
    this._fillAlpha = alpha;
    return this;
  }
  get lineWidth() {
    return this._lineWidth;
  }
  set lineWidth(value) {
    this.setStrokeStyle(value, this._strokeColor, this._strokeAlpha);
  }
  get strokeColor() {
    return this._strokeColor;
  }
  set strokeColor(value) {
    this.setStrokeStyle(this._lineWidth, value, this._strokeAlpha);
  }
  get strokeAlpha() {
    return this._strokeAlpha;
  }
  set strokeAlpha(value) {
    this.setStrokeStyle(this._lineWidth, this._strokeColor, value);
  }
  setStrokeStyle(lineWidth, color, alpha) {
    if (alpha === undefined) {
      alpha = 1;
    }
    this.dirty = this.dirty || this.lineWidth !== lineWidth || this.strokeColor !== color || this.strokeAlpha !== alpha;
    this._lineWidth = lineWidth;
    this._strokeColor = color;
    this._strokeAlpha = alpha;
    return this;
  }
  updateShapes() {}
  updateData() {
    if (!this.dirty) {
      return this;
    }
    this.updateShapes();
    var shapes = this.geom;
    for (var i = 0, cnt = shapes.length; i < cnt; i++) {
      var shape = shapes[i];
      if (shape.dirty) {
        shape.updateData();
      }
    }
    this.isSizeChanged = false;
    this.dirty = false;
    return this;
  }
  clear() {
    this.geom.length = 0;
    (0, _Clear.default)(this.shapes);
    return this;
  }
  getShape(name) {
    return this.shapes[name];
  }
  getShapes() {
    return this.geom;
  }
  addShape(shape) {
    this.geom.push(shape);
    var name = shape.name;
    if (name) {
      this.shapes[name] = shape;
    }
    this.dirty = true;
    return this;
  }
  deleteShape(name) {
    var shape = this.getShape(name);
    if (shape) {
      delete this.shapes[name];
      RemoveItem(this.geom, shape);
    }
    return this;
  }
}
Object.assign(BaseShapes.prototype, _Render.default);
var _default = BaseShapes;
exports.default = _default;
},{"./render/Render.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/render/Render.js","../../../utils/object/Clear.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/Clear.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/methods/StyleMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setBoxFillStyle(color, alpha) {
    if (alpha === undefined) {
      alpha = 1;
    }
    this.dirty = this.dirty || this.boxFillColor !== color || this.boxFillAlpha !== alpha;
    this.boxFillColor = color;
    this.boxFillAlpha = alpha;
    return this;
  },
  setUncheckedBoxFillStyle(color, alpha) {
    if (alpha === undefined) {
      alpha = 1;
    }
    this.dirty = this.dirty || this.uncheckedBoxFillColor !== color || this.uncheckedBoxFillAlpha !== alpha;
    this.uncheckedBoxFillColor = color;
    this.uncheckedBoxFillAlpha = alpha;
    return this;
  },
  setBoxStrokeStyle(lineWidth, color, alpha) {
    if (alpha === undefined) {
      alpha = 1;
    }
    this.dirty = this.dirty || this.boxLineWidth !== lineWidth || this.boxStrokeColor !== color || this.boxStrokeAlpha !== alpha;
    this.boxLineWidth = lineWidth;
    this.boxStrokeColor = color;
    this.boxStrokeAlpha = alpha;
    return this;
  },
  setUncheckedBoxStrokeStyle(lineWidth, color, alpha) {
    if (alpha === undefined) {
      alpha = 1;
    }
    this.dirty = this.dirty || this.uncheckedBoxLineWidth !== lineWidth || this.uncheckedBoxStrokeColor !== color || this.uncheckedBoxStrokeAlpha !== alpha;
    this.uncheckedBoxLineWidth = lineWidth;
    this.uncheckedBoxStrokeColor = color;
    this.uncheckedBoxStrokeAlpha = alpha;
    return this;
  },
  setCheckerStyle(color, alpha) {
    if (alpha === undefined) {
      alpha = 1;
    }
    this.dirty = this.dirty || this.checkerColor !== color || this.checkAlpha !== alpha;
    this.checkerColor = color;
    this.checkAlpha = alpha;
    return this;
  },
  setBoxShape(isCircleShape) {
    if (isCircleShape === undefined) {
      isCircleShape = false;
    }
    if (this.isCircleShape === isCircleShape) {
      return this;
    }
    this.isCircleShape = isCircleShape;
    this.isSizeChanged = true;
    this.dirty = true;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/methods/SizeMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setBoxSize(size) {
    this.dirty = this.dirty || this.boxSize !== size;
    this.boxSize = size;
    return this;
  },
  setCheckerSize(size) {
    this.dirty = this.dirty || this.checkerSize !== size;
    this.checkerSize = size;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/base/StyleMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var FillStyle = function (color, alpha) {
  if (color == null) {
    this.isFilled = false;
  } else {
    if (alpha === undefined) {
      alpha = 1;
    }
    this.isFilled = true;
    this.fillColor = color;
    this.fillAlpha = alpha;
  }
  return this;
};
var LineStyle = function (lineWidth, color, alpha) {
  if (lineWidth == null || color == null) {
    this.isStroked = false;
  } else {
    if (alpha === undefined) {
      alpha = 1;
    }
    this.isStroked = true;
    this.lineWidth = lineWidth;
    this.strokeColor = color;
    this.strokeAlpha = alpha;
  }
  return this;
};
var _default = {
  fillStyle: FillStyle,
  lineStyle: LineStyle
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/base/BaseGeom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _StyleMethods = _interopRequireDefault(require("./StyleMethods.js"));
var _DataMethods = _interopRequireDefault(require("../../../../../utils/data/DataMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class BaseGeom {
  constructor() {
    this.name = undefined;
    this.dirty = true;
    this.data = undefined;
    this.isFilled = false;
    this.fillColor = undefined;
    this.fillAlpha = 1;
    this.isStroked = false;
    this.lineWidth = 1;
    this.strokeColor = undefined;
    this.strokeAlpha = 1;
  }
  setName(name) {
    this.name = name;
    return this;
  }
  reset() {
    this.fillStyle().lineStyle();
    return this;
  }
  webglRender(pipeline, calcMatrix, alpha, dx, dy) {}
  canvasRender(ctx, dx, dy) {}
  updateData() {
    this.dirty = false;
  }
}
Object.assign(BaseGeom.prototype, _StyleMethods.default, _DataMethods.default);
var _default = BaseGeom;
exports.default = _default;
},{"./StyleMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/base/StyleMethods.js","../../../../../utils/data/DataMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/data/DataMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/PathBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseGeom = _interopRequireDefault(require("../base/BaseGeom.js"));
var _FillPathWebGL = _interopRequireDefault(require("../../../utils/render/FillPathWebGL.js"));
var _StrokePathWebGL = _interopRequireDefault(require("../../../utils/render/StrokePathWebGL.js"));
var _FillStyleCanvas = _interopRequireDefault(require("../../../utils/render/FillStyleCanvas.js"));
var _LineStyleCanvas = _interopRequireDefault(require("../../../utils/render/LineStyleCanvas.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Earcut = Phaser.Geom.Polygon.Earcut;
class PathBase extends _BaseGeom.default {
  constructor() {
    super();
    this.pathData = [];
    this.pathIndexes = [];
    this.closePath = false;
  }
  updateData() {
    this.pathIndexes = Earcut(this.pathData);
    super.updateData();
    return this;
  }
  webglRender(pipeline, calcMatrix, alpha, dx, dy) {
    if (this.isFilled) {
      (0, _FillPathWebGL.default)(pipeline, calcMatrix, this, alpha, dx, dy);
    }
    if (this.isStroked) {
      (0, _StrokePathWebGL.default)(pipeline, this, alpha, dx, dy);
    }
  }
  canvasRender(ctx, dx, dy) {
    var path = this.pathData;
    var pathLength = path.length - 1;
    var px1 = path[0] - dx;
    var py1 = path[1] - dy;
    ctx.beginPath();
    ctx.moveTo(px1, py1);
    if (!this.closePath) {
      pathLength -= 2;
    }
    for (var i = 2; i < pathLength; i += 2) {
      var px2 = path[i] - dx;
      var py2 = path[i + 1] - dy;
      ctx.lineTo(px2, py2);
    }
    if (this.closePath) {
      ctx.closePath();
    }
    if (this.isFilled) {
      (0, _FillStyleCanvas.default)(ctx, this);
      ctx.fill();
    }
    if (this.isStroked) {
      (0, _LineStyleCanvas.default)(ctx, this);
      ctx.stroke();
    }
  }
}
var _default = PathBase;
exports.default = _default;
},{"../base/BaseGeom.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/base/BaseGeom.js","../../../utils/render/FillPathWebGL.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/FillPathWebGL.js","../../../utils/render/StrokePathWebGL.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/StrokePathWebGL.js","../../../utils/render/FillStyleCanvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/FillStyleCanvas.js","../../../utils/render/LineStyleCanvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/LineStyleCanvas.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/arc/Arc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PathBase = _interopRequireDefault(require("../PathBase.js"));
var _ArcTo = _interopRequireDefault(require("../../../../../../geom/pathdata/ArcTo.js"));
var _FillStyleCanvas = _interopRequireDefault(require("../../../../utils/render/FillStyleCanvas.js"));
var _LineStyleCanvas = _interopRequireDefault(require("../../../../utils/render/LineStyleCanvas.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DegToRad = Phaser.Math.DegToRad;
class Arc extends _PathBase.default {
  constructor(x, y, radiusX, radiusY, startAngle, endAngle, anticlockwise, pie) {
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (radiusX === undefined) {
      radiusX = 0;
    }
    if (radiusY === undefined) {
      radiusY = 0;
    }
    if (startAngle === undefined) {
      startAngle = 0;
    }
    if (endAngle === undefined) {
      endAngle = 360;
    }
    if (anticlockwise === undefined) {
      anticlockwise = false;
    }
    if (pie === undefined) {
      pie = false;
    }
    super();
    this.setCenterPosition(x, y);
    this.setRadius(radiusX, radiusY);
    this.setAngle(startAngle, endAngle, anticlockwise);
    this.setPie(pie);
    this.setIterations(32);
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this.dirty = this.dirty || this._x !== value;
    this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this.dirty = this.dirty || this._y !== value;
    this._y = value;
  }
  setCenterPosition(x, y) {
    if (y === undefined) {
      y = x;
    }
    this.x = x;
    this.y = y;
    return this;
  }
  get radiusX() {
    return this._radiusX;
  }
  set radiusX(value) {
    this.dirty = this.dirty || this._radiusX !== value;
    this._radiusX = value;
  }
  get radiusY() {
    return this._radiusY;
  }
  set radiusY(value) {
    this.dirty = this.dirty || this._radiusY !== value;
    this._radiusY = value;
  }
  setRadius(radiusX, radiusY) {
    if (radiusY === undefined) {
      radiusY = radiusX;
    }
    this.radiusX = radiusX;
    this.radiusY = radiusY;
    return this;
  }
  get startAngle() {
    return this._startAngle;
  }
  set startAngle(value) {
    this.dirty = this.dirty || this._startAngle !== value;
    this._startAngle = value;
  }
  get endAngle() {
    return this._endAngle;
  }
  set endAngle(value) {
    this.dirty = this.dirty || this._endAngle !== value;
    this._endAngle = value;
  }
  get anticlockwise() {
    return this._anticlockwise;
  }
  set anticlockwise(value) {
    this.dirty = this.dirty || this._anticlockwise !== value;
    this._anticlockwise = value;
  }
  setAngle(startAngle, endAngle, anticlockwise) {
    // startAngle, endAngle in degrees
    if (anticlockwise === undefined) {
      anticlockwise = false;
    }
    this.startAngle = startAngle;
    this.endAngle = endAngle;
    this.anticlockwise = anticlockwise;
    return this;
  }
  get pie() {
    return this._pie;
  }
  set pie(value) {
    this.dirty = this.dirty || this._pie !== value;
    this._pie = value;
  }
  setPie(pie) {
    if (pie === undefined) {
      pie = true;
    }
    this.pie = pie;
    return this;
  }
  get iterations() {
    return this._iterations;
  }
  set iterations(value) {
    this.dirty = this.dirty || this._iterations !== value;
    this._iterations = value;
  }
  setIterations(iterations) {
    this.iterations = iterations;
    return this;
  }
  updateData() {
    this.pathData.length = 0;
    if (this.pie) {
      this.pathData.push(this.x, this.y);
    }
    (0, _ArcTo.default)(this.x, this.y, this.radiusX, this.radiusY, this.startAngle, this.endAngle, this.anticlockwise, this.iterations, this.pathData);
    if (this.pie) {
      this.pathData.push(this.x, this.y);
    }
    this.pathData.push(this.pathData[0], this.pathData[1]);
    super.updateData();
    return this;
  }
  canvasRender(ctx, dx, dy) {
    ctx.beginPath();
    var x = this.x - dx,
      y = this.y - dy,
      startAngle = DegToRad(this.startAngle),
      endAngle = DegToRad(this.endAngle);
    if (this.pie) {
      ctx.moveTo(x, y);
      ctx.lineTo(x + Math.cos(startAngle) * this.radiusX, y + Math.sin(startAngle) * this.radiusY);
    }
    ctx.ellipse(x, y, this.radiusX, this.radiusY, 0, startAngle, endAngle, this.anticlockwise);
    if (this.pie) {
      ctx.lineTo(x, y);
    }
    if (this.isFilled) {
      (0, _FillStyleCanvas.default)(ctx, this);
      ctx.fill();
    }
    if (this.isStroked) {
      (0, _LineStyleCanvas.default)(ctx, this);
      ctx.stroke();
    }
  }
}
var _default = Arc;
exports.default = _default;
},{"../PathBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/PathBase.js","../../../../../../geom/pathdata/ArcTo.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/ArcTo.js","../../../../utils/render/FillStyleCanvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/FillStyleCanvas.js","../../../../utils/render/LineStyleCanvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/LineStyleCanvas.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/arc/Circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Arc = _interopRequireDefault(require("./Arc.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Circle extends _Arc.default {
  constructor(x, y, radius) {
    super(x, y, radius, radius, 0, 360);
  }
}
var _default = Circle;
exports.default = _default;
},{"./Arc.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/arc/Arc.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/Curve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PathBase = _interopRequireDefault(require("./PathBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Curve extends _PathBase.default {
  constructor(curve) {
    super();
    this.setCurve(curve);
    this.setIterations(32);
  }
  get curve() {
    return this._curve;
  }
  set curve(value) {
    this.dirty = this.dirty || this._curve !== value;
    this._curve = value;
  }
  setCurve(curve) {
    this.curve = curve;
    return this;
  }
  get iterations() {
    return this._iterations;
  }
  set iterations(value) {
    this.dirty = this.dirty || this._iterations !== value;
    this._iterations = value;
  }
  setIterations(iterations) {
    this.iterations = iterations;
    return this;
  }
  updateData() {
    this.pathData.length = 0;
    var points = this.curve.getPoints(this.iterations);
    for (var i = 0, cnt = points.length; i < cnt; i++) {
      this.pathData.push(points[i].x, points[i].y);
    }
    this.pathData.push(points[0].x, points[0].y);
    super.updateData();
    return this;
  }
}
var _default = Curve;
exports.default = _default;
},{"./PathBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/PathBase.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/arc/Ellipse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Arc = _interopRequireDefault(require("./Arc.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Ellipse extends _Arc.default {
  constructor(x, y, radiusX, radiusY) {
    super(x, y, radiusX, radiusY, 0, 360);
  }
}
var _default = Ellipse;
exports.default = _default;
},{"./Arc.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/arc/Arc.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/Line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PathBase = _interopRequireDefault(require("./PathBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Line extends _PathBase.default {
  constructor(x0, y0, x1, y1) {
    if (x0 === undefined) {
      x0 = 0;
    }
    if (y0 === undefined) {
      y0 = 0;
    }
    if (x1 === undefined) {
      x1 = 0;
    }
    if (y1 === undefined) {
      y1 = 0;
    }
    super();
    this.setP0(x0, y0);
    this.setP1(x1, y1);
  }
  get x0() {
    return this._x0;
  }
  set x0(value) {
    this.dirty = this.dirty || this._x0 !== value;
    this._x0 = value;
  }
  get y0() {
    return this._y0;
  }
  set y0(value) {
    this.dirty = this.dirty || this._y0 !== value;
    this._y0 = value;
  }
  setP0(x, y) {
    this.x0 = x;
    this.y0 = y;
    return this;
  }
  get x1() {
    return this._x1;
  }
  set x1(value) {
    this.dirty = this.dirty || this._x1 !== value;
    this._x1 = value;
  }
  get y1() {
    return this._y1;
  }
  set y1(value) {
    this.dirty = this.dirty || this._y1 !== value;
    this._y1 = value;
  }
  setP1(x, y) {
    this.x1 = x;
    this.y1 = y;
    return this;
  }
  updateData() {
    this.pathData.length = 0;
    this.pathData.push(this.x0, this.y0);
    this.pathData.push(this.x1, this.y1);
    this.pathData.push(this.x0, this.y0);
    super.updateData();
    return this;
  }
}
var _default = Line;
exports.default = _default;
},{"./PathBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/PathBase.js"}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/StartAt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var StartAt = function (x, y, pathData) {
  pathData.length = 0;
  if (x != null) {
    pathData.push(x, y);
  }
  return pathData;
};
var _default = StartAt;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/QuadraticBezierTo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//import QuadraticBezierInterpolation from '../../utils/math/interpolation/QuadraticBezierInterpolation.js';

const QuadraticBezierInterpolation = Phaser.Math.Interpolation.QuadraticBezier;
var QuadraticBezierTo = function (cx, cy, x, y, iterations, pathData) {
  var pathDataCnt = pathData.length;
  var p0x = pathData[pathDataCnt - 2];
  var p0y = pathData[pathDataCnt - 1];
  for (var i = 1, last = iterations - 1; i <= last; i++) {
    var t = i / last;
    pathData.push(QuadraticBezierInterpolation(t, p0x, cx, x), QuadraticBezierInterpolation(t, p0y, cy, y));
  }
  return pathData;
};
var _default = QuadraticBezierTo;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/DuplicateLast.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var DuplicateLast = function (pathData) {
  var len = pathData.length;
  if (len < 2) {
    return pathData;
  }
  var lastX = pathData[len - 2];
  var lastY = pathData[len - 1];
  pathData.push(lastX);
  pathData.push(lastY);
  return pathData;
};
var _default = DuplicateLast;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/PathDataBuilder/AddPathMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _StartAt = _interopRequireDefault(require("../StartAt.js"));
var _LineTo = _interopRequireDefault(require("../LineTo.js"));
var _ArcTo = _interopRequireDefault(require("../ArcTo.js"));
var _QuadraticBezierTo = _interopRequireDefault(require("../QuadraticBezierTo.js"));
var _DuplicateLast = _interopRequireDefault(require("../DuplicateLast.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  clear() {
    this.start();
    return this;
  },
  start() {
    this.startAt();
    return this;
  },
  startAt(x, y) {
    this.restorePathData();
    this.accumulationLengths = undefined;
    (0, _StartAt.default)(x, y, this.pathData);
    this.firstPointX = x;
    this.firstPointY = y;
    this.lastPointX = x;
    this.lastPointY = y;
    return this;
  },
  lineTo(x, y, relative) {
    if (relative === undefined) {
      relative = false;
    }
    if (relative) {
      x += this.lastPointX;
      y += this.lastPointY;
    }
    (0, _LineTo.default)(x, y, this.pathData);
    this.lastPointX = x;
    this.lastPointY = y;
    return this;
  },
  verticalLineTo(x, relative) {
    this.lineTo(x, this.lastPointY, relative);
    return this;
  },
  horizontalLineTo(y, relative) {
    this.lineTo(this.lastPointX, y, relative);
    return this;
  },
  ellipticalArc(centerX, centerY, radiusX, radiusY, startAngle, endAngle, anticlockwise) {
    if (anticlockwise === undefined) {
      anticlockwise = false;
    }
    (0, _ArcTo.default)(centerX, centerY, radiusX, radiusY, startAngle, endAngle, anticlockwise, this.iterations, this.pathData);
    this.lastPointX = this.pathData[this.pathData.length - 2];
    this.lastPointY = this.pathData[this.pathData.length - 1];
    return this;
  },
  arc(centerX, centerY, radius, startAngle, endAngle, anticlockwise) {
    this.ellipticalArc(centerX, centerY, radius, radius, startAngle, endAngle, anticlockwise);
    return this;
  },
  quadraticBezierTo(cx, cy, x, y) {
    (0, _QuadraticBezierTo.default)(cx, cy, x, y, this.iterations, this.pathData);
    this.lastPointX = x;
    this.lastPointY = y;
    this.lastCX = cx;
    this.lastCY = cy;
    return this;
  },
  smoothQuadraticBezierTo(x, y) {
    var cx = this.lastPointX * 2 - this.lastCX;
    var cy = this.lastPointY * 2 - this.lastCY;
    this.quadraticBezierTo(cx, cy, x, y);
    return this;
  },
  cubicBezierCurveTo(cx0, cy0, cx1, cy1, x, y) {
    (0, _QuadraticBezierTo.default)(cx0, cy0, cx1, cy1, x, y, this.iterations, this.pathData);
    this.lastPointX = x;
    this.lastPointY = y;
    this.lastCX = cx1;
    this.lastCY = cy1;
    return this;
  },
  smoothCubicBezierCurveTo(cx1, cy1, x, y) {
    var cx0 = this.lastPointX * 2 - this.lastCX;
    var cy0 = this.lastPointY * 2 - this.lastCY;
    this.cubicBezierCurveTo(cx0, cy0, cx1, cy1, x, y);
    return this;
  },
  close() {
    this.closePath = true;
    return this;
  },
  end() {
    (0, _DuplicateLast.default)(this.pathData);
    return this;
  }
};
exports.default = _default;
},{"../StartAt.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/StartAt.js","../LineTo.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/LineTo.js","../ArcTo.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/ArcTo.js","../QuadraticBezierTo.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/QuadraticBezierTo.js","../DuplicateLast.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/DuplicateLast.js"}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/RotateAround.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//import PointRotateAround from '../../utils/math/RotateAround.js';

const PointRotateAround = Phaser.Math.RotateAround;
var RotateAround = function (centerX, centerY, angle, pathData) {
  var point = {
    x: 0,
    y: 0
  };
  for (var i = 0, cnt = pathData.length - 1; i < cnt; i += 2) {
    point.x = pathData[i];
    point.y = pathData[i + 1];
    PointRotateAround(point, centerX, centerY, angle);
    pathData[i] = point.x;
    pathData[i + 1] = point.y;
  }
  return pathData;
};
var _default = RotateAround;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/Scale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Scale = function (centerX, centerY, scaleX, scaleY, pathData) {
  for (var i = 0, cnt = pathData.length - 1; i < cnt; i += 2) {
    var x = pathData[i] - centerX;
    var y = pathData[i + 1] - centerY;
    x *= scaleX;
    y *= scaleY;
    pathData[i] = x + centerX;
    pathData[i + 1] = y + centerY;
  }
  return pathData;
};
var _default = Scale;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/Offset.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Offset = function (x, y, pathData) {
  for (var i = 0, cnt = pathData.length - 1; i < cnt; i += 2) {
    pathData[i] += x;
    pathData[i + 1] += y;
  }
  return pathData;
};
var _default = Offset;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/PathDataBuilder/TransformPointsMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RotateAround = _interopRequireDefault(require("../RotateAround.js"));
var _Scale = _interopRequireDefault(require("../Scale.js"));
var _Offset = _interopRequireDefault(require("../Offset.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DegToRad = Phaser.Math.DegToRad;
const PointRotateAround = Phaser.Math.RotateAround;
var _default = {
  rotateAround(centerX, centerY, angle) {
    if (this.pathData.length === 0) {
      return this;
    }
    angle = DegToRad(angle);
    (0, _RotateAround.default)(centerX, centerY, angle, this.pathData);
    var pathDataCnt = this.pathData.length;
    this.lastPointX = this.pathData[pathDataCnt - 2];
    this.lastPointY = this.pathData[pathDataCnt - 1];
    if (this.lastCX !== undefined) {
      var point = {
        x: this.lastCX,
        y: this.lastCY
      };
      PointRotateAround(point, centerX, centerY, angle);
      this.lastCX = point.x;
      this.lastCY = point.y;
    }
    return this;
  },
  scale(centerX, centerY, scaleX, scaleY) {
    if (this.pathData.length === 0) {
      return this;
    }
    (0, _Scale.default)(centerX, centerY, scaleX, scaleY, this.pathData);
    this.lastPointX = this.pathData[pathDataCnt - 2];
    this.lastPointY = this.pathData[pathDataCnt - 1];
    if (this.lastCX !== undefined) {
      var x = this.lastCX - centerX;
      var y = this.lastCY - centerY;
      x *= scaleX;
      y *= scaleY;
      this.lastCX = x + centerX;
      this.lastCY = y + centerY;
    }
    return this;
  },
  offset(x, y) {
    (0, _Offset.default)(x, y, this.pathData);
    return this;
  }
};
exports.default = _default;
},{"../RotateAround.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/RotateAround.js","../Scale.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/Scale.js","../Offset.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/Offset.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/array/Copy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Copy = function (dest, src, startIdx, endIdx) {
  if (startIdx === undefined) {
    startIdx = 0;
  }
  ;
  if (endIdx === undefined) {
    endIdx = src.length;
  }
  dest.length = endIdx - startIdx;
  for (var i = 0, len = dest.length; i < len; i++) {
    dest[i] = src[i + startIdx];
  }
  return dest;
};
var _default = Copy;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/PathDataBuilder/SavePathDataMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Copy = _interopRequireDefault(require("../../../utils/array/Copy.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  savePathData() {
    if (this.pathDataSaved) {
      return this;
    }
    this.pathDataSave = [...this.pathData];
    this.pathData.length = 0;
    this.pathDataSaved = true;
    return this;
  },
  restorePathData() {
    if (!this.pathDataSaved) {
      return this;
    }
    (0, _Copy.default)(this.pathData, this.pathDataSave);
    this.pathDataSave = undefined;
    this.pathDataSaved = false;
    return this;
  }
};
exports.default = _default;
},{"../../../utils/array/Copy.js":"node_modules/phaser3-rex-plugins/plugins/utils/array/Copy.js"}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/PathDataBuilder/PathSegmentMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DuplicateLast = _interopRequireDefault(require("../DuplicateLast"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DistanceBetween = Phaser.Math.Distance.Between;
const Wrap = Phaser.Math.Wrap;
const Linear = Phaser.Math.Linear;
var AppendFromPathSegment = function (srcPathData, accumulationLengths, startT, endT, destPathData) {
  if (endT === undefined) {
    endT = startT;
    startT = 0;
  }
  startT = WrapT(startT);
  endT = WrapT(endT);
  if (startT === endT) {
    return;
  }
  var totalPathLength = accumulationLengths[accumulationLengths.length - 1];
  var startL = totalPathLength * startT;
  var endL = totalPathLength * endT;
  if (startT < endT) {
    AddPathSegment(srcPathData, accumulationLengths, startL, endL, destPathData);
  } else {
    AddPathSegment(srcPathData, accumulationLengths, startL, totalPathLength, destPathData);
    AddPathSegment(srcPathData, accumulationLengths, 0, endL, destPathData);
  }
  (0, _DuplicateLast.default)(destPathData);
};
var AddPathSegment = function (srcPathData, accumulationLengths, startL, endL, destPathData) {
  var skipState = startL > 0;
  for (var i = 0, cnt = accumulationLengths.length; i < cnt; i++) {
    var pIdx = i * 2;
    var d = accumulationLengths[i];
    if (skipState) {
      if (d < startL) {
        continue;
      } else if (d == startL) {
        skipState = false;
      } else {
        // d > startL
        var deltaD = d - accumulationLengths[i - 1];
        var t = 1 - (d - startL) / deltaD;
        destPathData.push(GetInterpolation(srcPathData, pIdx - 2, pIdx, t));
        destPathData.push(GetInterpolation(srcPathData, pIdx - 1, pIdx + 1, t));
        skipState = false;
      }
    }
    if (d <= endL) {
      destPathData.push(srcPathData[pIdx]);
      destPathData.push(srcPathData[pIdx + 1]);
      if (d === endL) {
        break;
      }
    } else {
      // d > endL
      var deltaD = d - accumulationLengths[i - 1];
      var t = 1 - (d - endL) / deltaD;
      destPathData.push(GetInterpolation(srcPathData, pIdx - 2, pIdx, t));
      destPathData.push(GetInterpolation(srcPathData, pIdx - 1, pIdx + 1, t));
      break;
    }
  }
};
var GetInterpolation = function (pathData, i0, i1, t) {
  var p0 = pathData[i0],
    p1 = pathData[i1];
  return Linear(p0, p1, t);
};
var WrapT = function (t) {
  if (t === 0) {
    return 0;
  } else if (t % 1 === 0) {
    return 1;
  }
  return Wrap(t, 0, 1);
};
var _default = {
  updateAccumulationLengths() {
    if (this.accumulationLengths == null) {
      this.accumulationLengths = [];
    } else if (this.accumulationLengths.length === this.pathData.length / 2) {
      return this;
    }
    var accumulationLengths = this.accumulationLengths;
    var pathData = this.pathData;
    var prevX, prevY, x, y;
    var d,
      accumulationLength = 0;
    for (var i = 0, cnt = pathData.length; i < cnt; i += 2) {
      x = pathData[i];
      y = pathData[i + 1];
      d = prevX === undefined ? 0 : DistanceBetween(prevX, prevY, x, y);
      accumulationLength += d;
      accumulationLengths.push(accumulationLength);
      prevX = x;
      prevY = y;
    }
    this.totalPathLength = accumulationLength;
    return this;
  },
  setDisplayPathSegment(startT, endT) {
    if (!this.pathDataSaved) {
      this.updateAccumulationLengths();
      this.savePathData();
    }
    this.pathData.length = 0;
    AppendFromPathSegment(this.pathDataSave, this.accumulationLengths, startT, endT, this.pathData);
    return this;
  },
  appendFromPathSegment(src, startT, endT) {
    if (startT === undefined) {
      this.pathData.push(...src.pathData);
    } else {
      src.updateAccumulationLengths();
      AppendFromPathSegment(src.pathData, src.accumulationLengths, startT, endT, this.pathData);
    }
    this.firstPointX = this.pathData[0];
    this.firstPointY = this.pathData[1];
    this.lastPointX = this.pathData[this.pathData.length - 2];
    this.lastPointY = this.pathData[this.pathData.length - 1];
    return this;
  }
};
exports.default = _default;
},{"../DuplicateLast":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/DuplicateLast.js"}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/PathDataBuilder/GraphicsMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  draw(graphics, isFill, isStroke) {
    var points = this.toPoints();
    if (isFill) {
      graphics.fillPoints(points, this.closePath, this.closePath);
    }
    if (isStroke) {
      graphics.strokePoints(points, this.closePath, this.closePath);
    }
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/ToPoints.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ToPoints = function (pathData, points) {
  if (points === undefined) {
    points = [];
  }
  for (var i = 0, cnt = pathData.length - 1; i < cnt; i += 2) {
    points.push({
      x: pathData[i],
      y: pathData[i + 1]
    });
  }
  return points;
};
var _default = ToPoints;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/ToPolygon.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//import Polygon from '../../utils/geom/polygon/Polygon.js';

const Polygon = Phaser.Geom.Polygon;
var ToPolygon = function (pathData, polygon) {
  if (polygon === undefined) {
    polygon = new Polygon();
  }
  polygon.setTo(pathData);
  return polygon;
};
var _default = ToPolygon;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/PathDataBuilder/PathDataBuilder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddPathMethods = _interopRequireDefault(require("./AddPathMethods.js"));
var _TransformPointsMethods = _interopRequireDefault(require("./TransformPointsMethods.js"));
var _SavePathDataMethods = _interopRequireDefault(require("./SavePathDataMethods.js"));
var _PathSegmentMethods = _interopRequireDefault(require("./PathSegmentMethods.js"));
var _GraphicsMethods = _interopRequireDefault(require("./GraphicsMethods.js"));
var _ToPoints = _interopRequireDefault(require("../ToPoints.js"));
var _ToPolygon = _interopRequireDefault(require("../ToPolygon.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class PathDataBuilder {
  constructor(pathData) {
    if (pathData === undefined) {
      pathData = [];
    }
    this.pathData = pathData;
    this.closePath = false;
    this.setIterations(32);
    this.firstPointX = undefined;
    this.firstPointY = undefined;
    this.lastPointX = undefined;
    this.lastPointY = undefined;
    this.accumulationLengths = undefined;
  }
  setIterations(iterations) {
    this.iterations = iterations;
    return this;
  }
  toPoints() {
    return (0, _ToPoints.default)(this.pathData);
  }
  toPolygon(polygon) {
    return (0, _ToPolygon.default)(this.pathData, polygon);
  }
}
Object.assign(PathDataBuilder.prototype, _AddPathMethods.default, _TransformPointsMethods.default, _SavePathDataMethods.default, _PathSegmentMethods.default, _GraphicsMethods.default);
var _default = PathDataBuilder;
exports.default = _default;
},{"./AddPathMethods.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/PathDataBuilder/AddPathMethods.js","./TransformPointsMethods.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/PathDataBuilder/TransformPointsMethods.js","./SavePathDataMethods.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/PathDataBuilder/SavePathDataMethods.js","./PathSegmentMethods.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/PathDataBuilder/PathSegmentMethods.js","./GraphicsMethods.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/PathDataBuilder/GraphicsMethods.js","../ToPoints.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/ToPoints.js","../ToPolygon.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/ToPolygon.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/Lines.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PathBase = _interopRequireDefault(require("./PathBase.js"));
var _PathDataBuilder = _interopRequireDefault(require("../../../../../geom/pathdata/PathDataBuilder/PathDataBuilder.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Lines extends _PathBase.default {
  constructor() {
    super();
    this.builder = new _PathDataBuilder.default(this.pathData);
  }
  get iterations() {
    return this.builder.iterations;
  }
  set iterations(value) {
    this.dirty = this.dirty || this.builder.iterations !== value;
    this.builder.setIterations(value);
  }
  setIterations(iterations) {
    this.iterations = iterations;
    return this;
  }
  get lastPointX() {
    return this.builder.lastPointX;
  }
  get lastPointY() {
    return this.builder.lastPointY;
  }
  start() {
    this.builder.start();
    this.dirty = true;
    return this;
  }
  startAt(x, y) {
    this.builder.startAt(x, y);
    this.dirty = true;
    return this;
  }
  lineTo(x, y, relative) {
    this.builder.lineTo(x, y, relative);
    this.dirty = true;
    return this;
  }
  verticalLineTo(x, relative) {
    this.builder.verticalLineTo(x, relative);
    this.dirty = true;
    return this;
  }
  horizontalLineTo(y, relative) {
    this.builder.horizontalLineTo(y, relative);
    this.dirty = true;
    return this;
  }
  ellipticalArc(centerX, centerY, radiusX, radiusY, startAngle, endAngle, anticlockwise) {
    this.builder.ellipticalArc(centerX, centerY, radiusX, radiusY, startAngle, endAngle, anticlockwise);
    this.dirty = true;
    return this;
  }
  arc(centerX, centerY, radius, startAngle, endAngle, anticlockwise) {
    this.builder.arc(centerX, centerY, radius, startAngle, endAngle, anticlockwise);
    this.dirty = true;
    return this;
  }
  quadraticBezierTo(cx, cy, x, y) {
    this.builder.quadraticBezierTo(cx, cy, x, y);
    this.dirty = true;
    return this;
  }
  smoothQuadraticBezierTo(x, y) {
    this.builder.smoothQuadraticBezierTo(x, y);
    this.dirty = true;
    return this;
  }
  cubicBezierCurveTo(cx0, cy0, cx1, cy1, x, y) {
    this.builder.cubicBezierCurveTo(cx0, cy0, cx1, cy1, x, y);
    this.dirty = true;
    return this;
  }
  smoothCubicBezierCurveTo(cx1, cy1, x, y) {
    this.builder.smoothCubicBezierCurveTo(cx1, cy1, x, y);
    this.dirty = true;
    return this;
  }
  close() {
    this.builder.close();
    this.closePath = this.builder.closePath;
    this.dirty = true;
    return this;
  }
  end() {
    this.builder.end();
    this.dirty = true;
    return this;
  }
  rotateAround(centerX, centerY, angle) {
    this.builder.rotateAround(centerX, centerY, angle);
    this.dirty = true;
    return this;
  }
  scale(centerX, centerY, scaleX, scaleY) {
    this.builder.scale(centerX, centerY, scaleX, scaleY);
    this.dirty = true;
    return this;
  }
  offset(x, y) {
    this.builder.offset(x, y);
    this.dirty = true;
    return this;
  }
  toPolygon(polygon) {
    return this.builder.toPolygon(polygon);
  }
  appendPathFrom(src, startT, endT) {
    this.builder.appendFromPathSegment(src.builder, startT, endT);
    return this;
  }
  copyPathFrom(src, startT, endT) {
    this.builder.clear().appendFromPathSegment(src.builder, startT, endT);
    return this;
  }
  setDisplayPathSegment(startT, endT) {
    this.builder.setDisplayPathSegment(startT, endT);
    return this;
  }
}
var _default = Lines;
exports.default = _default;
},{"./PathBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/PathBase.js","../../../../../geom/pathdata/PathDataBuilder/PathDataBuilder.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/PathDataBuilder/PathDataBuilder.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/rectangle/Rectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseGeom = _interopRequireDefault(require("../base/BaseGeom.js"));
var _StrokePathWebGL = _interopRequireDefault(require("../../../utils/render/StrokePathWebGL.js"));
var _FillStyleCanvas = _interopRequireDefault(require("../../../utils/render/FillStyleCanvas.js"));
var _LineStyleCanvas = _interopRequireDefault(require("../../../utils/render/LineStyleCanvas.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetTint = Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha;
class Rectangle extends _BaseGeom.default {
  constructor(x, y, width, height) {
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (width === undefined) {
      width = 0;
    }
    if (height === undefined) {
      height = width;
    }
    super();
    this.pathData = [];
    this.closePath = true;
    this.setTopLeftPosition(x, y);
    this.setSize(width, height);
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this.dirty = this.dirty || this._x !== value;
    this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this.dirty = this.dirty || this._y !== value;
    this._y = value;
  }
  setTopLeftPosition(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }
  get width() {
    return this._width;
  }
  set width(value) {
    this.dirty = this.dirty || this._width !== value;
    this._width = value;
  }
  get height() {
    return this._height;
  }
  set height(value) {
    this.dirty = this.dirty || this._height !== value;
    this._height = value;
  }
  setSize(width, height) {
    this.width = width;
    this.height = height;
    return this;
  }
  get centerX() {
    return this.x + this.width / 2;
  }
  set centerX(value) {
    this.x = value - this.width / 2;
  }
  get centerY() {
    return this.y + this.height / 2;
  }
  set centerY(value) {
    this.y = value - this.height / 2;
  }
  setCenterPosition(x, y) {
    this.centerX = x;
    this.centerY = y;
    return this;
  }
  updateData() {
    this.pathData.length = 0;
    var x0 = this.x,
      x1 = x0 + this.width,
      y0 = this.y,
      y1 = y0 + this.height;
    this.pathData.push(x0, y0);
    this.pathData.push(x1, y0);
    this.pathData.push(x1, y1);
    this.pathData.push(x0, y1);
    this.pathData.push(x0, y0);
    super.updateData();
    return this;
  }
  webglRender(pipeline, calcMatrix, alpha, dx, dy) {
    if (this.isFilled) {
      var fillTint = pipeline.fillTint;
      var fillTintColor = GetTint(this.fillColor, this.fillAlpha * alpha);
      fillTint.TL = fillTintColor;
      fillTint.TR = fillTintColor;
      fillTint.BL = fillTintColor;
      fillTint.BR = fillTintColor;
      pipeline.batchFillRect(-dx + this.x, -dy + this.y, this.width, this.height);
    }
    if (this.isStroked) {
      (0, _StrokePathWebGL.default)(pipeline, this, alpha, dx, dy);
    }
  }
  canvasRender(ctx, dx, dy) {
    if (this.isFilled) {
      (0, _FillStyleCanvas.default)(ctx, this);
      ctx.fillRect(-dx, -dy, this.width, this.height);
    }
    if (this.isStroked) {
      (0, _LineStyleCanvas.default)(ctx, this);
      ctx.beginPath();
      ctx.rect(-dx, -dy, this.width, this.height);
      ctx.stroke();
    }
  }
}
var _default = Rectangle;
exports.default = _default;
},{"../base/BaseGeom.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/base/BaseGeom.js","../../../utils/render/StrokePathWebGL.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/StrokePathWebGL.js","../../../utils/render/FillStyleCanvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/FillStyleCanvas.js","../../../utils/render/LineStyleCanvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/LineStyleCanvas.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/roundrectangle/RoundRectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PathBase = _interopRequireDefault(require("../PathBase.js"));
var _ArcTo = _interopRequireDefault(require("../../../../../../geom/pathdata/ArcTo.js"));
var _LineTo = _interopRequireDefault(require("../../../../../../geom/pathdata/LineTo.js"));
var _Offset = _interopRequireDefault(require("../../../../../../geom/pathdata/Offset.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class RoundRectangle extends _PathBase.default {
  constructor(x, y, width, height, radius, iterations) {
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (width === undefined) {
      width = 0;
    }
    if (height === undefined) {
      height = width;
    }
    if (radius === undefined) {
      radius = 0;
    }
    if (iterations === undefined) {
      iterations = 6;
    }
    super();
    this.setTopLeftPosition(x, y);
    this.setSize(width, height);
    this.setRadius(radius);
    this.setIterations(iterations);
    this.closePath = true;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this.dirty = this.dirty || this._x !== value;
    this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this.dirty = this.dirty || this._y !== value;
    this._y = value;
  }
  setTopLeftPosition(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }
  get width() {
    return this._width;
  }
  set width(value) {
    this.dirty = this.dirty || this._width !== value;
    this._width = value;
  }
  get height() {
    return this._height;
  }
  set height(value) {
    this.dirty = this.dirty || this._height !== value;
    this._height = value;
  }
  setSize(width, height) {
    this.width = width;
    this.height = height;
    return this;
  }
  get centerX() {
    return this.x + this.width / 2;
  }
  set centerX(value) {
    this.x = value - this.width / 2;
  }
  get centerY() {
    return this.y + this.height / 2;
  }
  set centerY(value) {
    this.y = value - this.height / 2;
  }
  setCenterPosition(x, y) {
    this.centerX = x;
    this.centerY = y;
    return this;
  }
  get radiusTL() {
    return this._radiusTL;
  }
  set radiusTL(value) {
    var isConvex = value > 0;
    this.dirty = this.dirty || this._radiusTL !== value || this._convexTL !== isConvex;
    this._convexTL = isConvex;
    this._radiusTL = Math.abs(value);
  }
  get radiusTR() {
    return this._radiusTR;
  }
  set radiusTR(value) {
    var isConvex = value > 0;
    this.dirty = this.dirty || this._radiusTR !== value || this._convexTR !== isConvex;
    this._convexTR = isConvex;
    this._radiusTR = Math.abs(value);
  }
  get radiusBL() {
    return this._radiusBL;
  }
  set radiusBL(value) {
    var isConvex = value > 0;
    this.dirty = this.dirty || this._radiusBL !== value || this._convexBL !== isConvex;
    this._convexBL = isConvex;
    this._radiusBL = Math.abs(value);
  }
  get radiusBR() {
    return this._radiusBR;
  }
  set radiusBR(value) {
    var isConvex = value > 0;
    this.dirty = this.dirty || this._radiusBR !== value || this._convexBR !== isConvex;
    this._convexBR = isConvex;
    this._radiusBR = Math.abs(value);
  }
  get radius() {
    return Math.max(this.radiusTL, this.radiusTR, this.radiusBL, this.radiusBR);
  }
  set radius(value) {
    if (typeof value === 'number') {
      this.radiusTL = value;
      this.radiusTR = value;
      this.radiusBL = value;
      this.radiusBR = value;
    } else {
      this.radiusTL = GetValue(value, 'tl', 0);
      this.radiusTR = GetValue(value, 'tr', 0);
      this.radiusBL = GetValue(value, 'bl', 0);
      this.radiusBR = GetValue(value, 'br', 0);
    }
  }
  setRadius(radius) {
    if (radius === undefined) {
      radius = 0;
    }
    this.radius = radius;
    return this;
  }
  get iterations() {
    return this._iterations;
  }
  set iterations(value) {
    this.dirty = this.dirty || this._iterations !== value;
    this._iterations = value;
  }
  setIterations(iterations) {
    this.iterations = iterations;
    return this;
  }
  updateData() {
    var pathData = this.pathData;
    pathData.length = 0;
    var width = this.width,
      height = this.height,
      radius,
      iterations = this.iterations + 1;

    // top-left
    radius = this.radiusTL;
    if (radius > 0) {
      if (this._convexTL) {
        var centerX = radius;
        var centerY = radius;
        (0, _ArcTo.default)(centerX, centerY, radius, radius, 180, 270, false, iterations, pathData);
      } else {
        var centerX = 0;
        var centerY = 0;
        (0, _ArcTo.default)(centerX, centerY, radius, radius, 90, 0, true, iterations, pathData);
      }
    } else {
      (0, _LineTo.default)(0, 0, pathData);
    }

    // top-right
    radius = this.radiusTR;
    if (radius > 0) {
      if (this._convexTR) {
        var centerX = width - radius;
        var centerY = radius;
        (0, _ArcTo.default)(centerX, centerY, radius, radius, 270, 360, false, iterations, pathData);
      } else {
        var centerX = width;
        var centerY = 0;
        (0, _ArcTo.default)(centerX, centerY, radius, radius, 180, 90, true, iterations, pathData);
      }
    } else {
      (0, _LineTo.default)(width, 0, pathData);
    }

    // bottom-right
    radius = this.radiusBR;
    if (radius > 0) {
      if (this._convexBR) {
        var centerX = width - radius;
        var centerY = height - radius;
        (0, _ArcTo.default)(centerX, centerY, radius, radius, 0, 90, false, iterations, pathData);
      } else {
        var centerX = width;
        var centerY = height;
        (0, _ArcTo.default)(centerX, centerY, radius, radius, 270, 180, true, iterations, pathData);
      }
    } else {
      (0, _LineTo.default)(width, height, pathData);
    }

    // bottom-left
    radius = this.radiusBL;
    if (radius > 0) {
      if (this._convexBL) {
        var centerX = radius;
        var centerY = height - radius;
        (0, _ArcTo.default)(centerX, centerY, radius, radius, 90, 180, false, iterations, pathData);
      } else {
        var centerX = 0;
        var centerY = height;
        (0, _ArcTo.default)(centerX, centerY, radius, radius, 360, 270, true, iterations, pathData);
      }
    } else {
      (0, _LineTo.default)(0, height, pathData);
    }
    pathData.push(pathData[0], pathData[1]); // Repeat first point to close curve
    (0, _Offset.default)(this.x, this.y, pathData);
    super.updateData();
    return this;
  }
}
var _default = RoundRectangle;
exports.default = _default;
},{"../PathBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/PathBase.js","../../../../../../geom/pathdata/ArcTo.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/ArcTo.js","../../../../../../geom/pathdata/LineTo.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/LineTo.js","../../../../../../geom/pathdata/Offset.js":"node_modules/phaser3-rex-plugins/plugins/geom/pathdata/Offset.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/triangle/Triangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseGeom = _interopRequireDefault(require("../base/BaseGeom.js"));
var _StrokePathWebGL = _interopRequireDefault(require("../../../utils/render/StrokePathWebGL.js"));
var _FillStyleCanvas = _interopRequireDefault(require("../../../utils/render/FillStyleCanvas.js"));
var _LineStyleCanvas = _interopRequireDefault(require("../../../utils/render/LineStyleCanvas.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetTint = Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha;
class Triangle extends _BaseGeom.default {
  constructor(x0, y0, x1, y1, x2, y2) {
    if (x0 === undefined) {
      x0 = 0;
    }
    if (y0 === undefined) {
      y0 = 0;
    }
    if (x1 === undefined) {
      x1 = 0;
    }
    if (y1 === undefined) {
      y1 = 0;
    }
    if (x2 === undefined) {
      x2 = 0;
    }
    if (y2 === undefined) {
      y2 = 0;
    }
    super();
    this.pathData = [];
    this.closePath = true;
    this.setP0(x0, y0);
    this.setP1(x1, y1);
    this.setP2(x2, y2);
  }
  get x0() {
    return this._x0;
  }
  set x0(value) {
    this.dirty = this.dirty || this._x0 !== value;
    this._x0 = value;
  }
  get y0() {
    return this._y0;
  }
  set y0(value) {
    this.dirty = this.dirty || this._y0 !== value;
    this._y0 = value;
  }
  setP0(x, y) {
    this.x0 = x;
    this.y0 = y;
    return this;
  }
  get x1() {
    return this._x1;
  }
  set x1(value) {
    this.dirty = this.dirty || this._x1 !== value;
    this._x1 = value;
  }
  get y1() {
    return this._y1;
  }
  set y1(value) {
    this.dirty = this.dirty || this._y1 !== value;
    this._y1 = value;
  }
  setP1(x, y) {
    this.x1 = x;
    this.y1 = y;
    return this;
  }
  get x2() {
    return this._x2;
  }
  set x2(value) {
    this.dirty = this.dirty || this._x2 !== value;
    this._x2 = value;
  }
  get y2() {
    return this._y2;
  }
  set y2(value) {
    this.dirty = this.dirty || this._y2 !== value;
    this._y2 = value;
  }
  setP2(x, y) {
    this.dirty = this.dirty || this.x2 !== x || this.y2 !== y;
    this.x2 = x;
    this.y2 = y;
    return this;
  }
  updateData() {
    this.pathData.length = 0;
    this.pathData.push(this.x0, this.y0);
    this.pathData.push(this.x1, this.y1);
    this.pathData.push(this.x2, this.y2);
    this.pathData.push(this.x0, this.y0);
    super.updateData();
    return this;
  }
  webglRender(pipeline, calcMatrix, alpha, dx, dy) {
    if (this.isFilled) {
      var fillTintColor = GetTint(this.fillColor, this.fillAlpha * alpha);
      var x0 = this.x0 - dx;
      var y0 = this.y0 - dy;
      var x1 = this.x1 - dx;
      var y1 = this.y1 - dy;
      var x2 = this.x2 - dx;
      var y2 = this.y2 - dy;
      var tx0 = calcMatrix.getX(x0, y0);
      var ty0 = calcMatrix.getY(x0, y0);
      var tx1 = calcMatrix.getX(x1, y1);
      var ty1 = calcMatrix.getY(x1, y1);
      var tx2 = calcMatrix.getX(x2, y2);
      var ty2 = calcMatrix.getY(x2, y2);
      pipeline.batchTri(tx0, ty0, tx1, ty1, tx2, ty2, fillTintColor, fillTintColor, fillTintColor);
    }
    if (this.isStroked) {
      (0, _StrokePathWebGL.default)(pipeline, this, alpha, dx, dy);
    }
  }
  canvasRender(ctx, dx, dy) {
    var x1 = this.x1 - dx;
    var y1 = this.y1 - dy;
    var x2 = this.x2 - dx;
    var y2 = this.y2 - dy;
    var x3 = this.x3 - dx;
    var y3 = this.y3 - dy;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.lineTo(x3, y3);
    ctx.closePath();
    if (this.isFilled) {
      (0, _FillStyleCanvas.default)(ctx, this);
      ctx.fill();
    }
    if (this.isStroked) {
      (0, _LineStyleCanvas.default)(ctx, this);
      ctx.stroke();
    }
  }
}
var _default = Triangle;
exports.default = _default;
},{"../base/BaseGeom.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/base/BaseGeom.js","../../../utils/render/StrokePathWebGL.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/StrokePathWebGL.js","../../../utils/render/FillStyleCanvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/FillStyleCanvas.js","../../../utils/render/LineStyleCanvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/utils/render/LineStyleCanvas.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Arc", {
  enumerable: true,
  get: function () {
    return _Arc.default;
  }
});
Object.defineProperty(exports, "Circle", {
  enumerable: true,
  get: function () {
    return _Circle.default;
  }
});
Object.defineProperty(exports, "Curve", {
  enumerable: true,
  get: function () {
    return _Curve.default;
  }
});
Object.defineProperty(exports, "Ellipse", {
  enumerable: true,
  get: function () {
    return _Ellipse.default;
  }
});
Object.defineProperty(exports, "Line", {
  enumerable: true,
  get: function () {
    return _Line.default;
  }
});
Object.defineProperty(exports, "Lines", {
  enumerable: true,
  get: function () {
    return _Lines.default;
  }
});
Object.defineProperty(exports, "Rectangle", {
  enumerable: true,
  get: function () {
    return _Rectangle.default;
  }
});
Object.defineProperty(exports, "RoundRectangle", {
  enumerable: true,
  get: function () {
    return _RoundRectangle.default;
  }
});
Object.defineProperty(exports, "Triangle", {
  enumerable: true,
  get: function () {
    return _Triangle.default;
  }
});
var _Arc = _interopRequireDefault(require("./lines/arc/Arc.js"));
var _Circle = _interopRequireDefault(require("./lines/arc/Circle.js"));
var _Curve = _interopRequireDefault(require("./lines/Curve.js"));
var _Ellipse = _interopRequireDefault(require("./lines/arc/Ellipse.js"));
var _Line = _interopRequireDefault(require("./lines/Line.js"));
var _Lines = _interopRequireDefault(require("./lines/Lines.js"));
var _Rectangle = _interopRequireDefault(require("./rectangle/Rectangle.js"));
var _RoundRectangle = _interopRequireDefault(require("./lines/roundrectangle/RoundRectangle.js"));
var _Triangle = _interopRequireDefault(require("./triangle/Triangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./lines/arc/Arc.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/arc/Arc.js","./lines/arc/Circle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/arc/Circle.js","./lines/Curve.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/Curve.js","./lines/arc/Ellipse.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/arc/Ellipse.js","./lines/Line.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/Line.js","./lines/Lines.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/Lines.js","./rectangle/Rectangle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/rectangle/Rectangle.js","./lines/roundrectangle/RoundRectangle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/lines/roundrectangle/RoundRectangle.js","./triangle/Triangle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/triangle/Triangle.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/methods/ShapesUpdateMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _geoms = require("../../shapes/geoms");
var _default = {
  buildShapes() {
    this.addShape(new _geoms.RoundRectangle().setName('box')).addShape(new _geoms.Lines().setName('checker'));
  },
  updateShapes() {
    var centerX = this.width / 2,
      centerY = this.height / 2,
      radius = Math.min(centerX, centerY);
    var width = radius * 2;
    var x = centerX - radius,
      y = centerY - radius;
    var boxLineWidth = this.boxLineWidth;
    var checkLineWidth = Math.max(width / 10, 2);
    var boxShape = this.getShape('box');
    var checkerShape = this.getShape('checker');

    // Setup shapes
    if (this.isSizeChanged) {
      // Box
      var posOffset = width * (1 - this.boxSize) / 2;
      var halfBoxLineWidth = boxLineWidth / 2;
      var boxInnerWidth = width * this.boxSize - boxLineWidth;
      boxShape.setTopLeftPosition(x + halfBoxLineWidth + posOffset, y + halfBoxLineWidth + posOffset).setSize(boxInnerWidth, boxInnerWidth);
      if (this.isCircleShape) {
        boxShape.setRadius(boxInnerWidth / 2);
      } else {
        boxShape.setRadius(0);
      }

      // Checker
      var posOffset = width * (1 - this.checkerSize) / 2;
      var unit = width * this.checkerSize / 4;
      var u0 = 0,
        u1 = unit * 1,
        u2 = unit * 2,
        u3 = unit * 3;
      checkerShape.startAt(u1, u2).lineTo(u2, u3).lineTo(u3, u1).offset(x + posOffset, y + posOffset).end();
    }

    // Set styles
    if (this.checked) {
      boxShape.fillStyle(this.boxFillColor, this.boxFillAlpha).lineStyle(boxLineWidth, this.boxStrokeColor, this.boxStrokeAlpha);
      checkerShape.lineStyle(checkLineWidth, this.checkerColor);
    } else {
      boxShape.fillStyle(this.uncheckedBoxFillColor, this.uncheckedBoxFillAlpha).lineStyle(boxLineWidth, this.uncheckedBoxStrokeColor, this.uncheckedBoxStrokeAlpha);
      checkerShape.lineStyle();
    }

    // Play checker animation
    if (this.checked) {
      checkerShape.setDisplayPathSegment(this.checkerAnimProgress);
    }
  }
};
exports.default = _default;
},{"../../shapes/geoms":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/index.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/ease/EaseValueTask.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseValueTaskBase = _interopRequireDefault(require("../componentbase/tweentask/EaseValueTaskBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const Linear = Phaser.Math.Linear;
class EaseValueTask extends _EaseValueTaskBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;
    // this.timer

    this.resetFromJSON();
    this.boot();
  }
  start(config) {
    if (this.timer.isRunning) {
      return this;
    }
    var target = this.target;
    this.propertyKey = GetValue(config, 'key', 'value');
    var currentValue = target[this.propertyKey];
    this.fromValue = GetValue(config, 'from', currentValue);
    this.toValue = GetValue(config, 'to', currentValue);
    this.setEase(GetValue(config, 'ease', this.ease));
    this.setDuration(GetValue(config, 'duration', this.duration));
    this.setRepeat(GetValue(config, 'repeat', 0));
    this.setDelay(GetValue(config, 'delay', 0));
    this.setRepeatDelay(GetValue(config, 'repeatDelay', 0));
    this.timer.setDuration(this.duration).setRepeat(this.repeat).setDelay(this.delay).setRepeatDelay(this.repeatDelay);
    target[this.propertyKey] = this.fromValue;
    super.start();
    return this;
  }
  updateGameObject(target, timer) {
    var t = timer.t;
    t = this.easeFn(t);
    target[this.propertyKey] = Linear(this.fromValue, this.toValue, t);
  }
}
var _default = EaseValueTask;
exports.default = _default;
},{"../componentbase/tweentask/EaseValueTaskBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/tweentask/EaseValueTaskBase.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/methods/CheckerAnimationMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseValueTask = _interopRequireDefault(require("../../../../utils/ease/EaseValueTask.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  setCheckerAnimationDuration(duration) {
    if (duration === undefined) {
      duration = 0;
    }
    this.checkerAnimDuration = duration;
    return this;
  },
  playCheckerAnimation() {
    if (this.checkerAnimProgressTask === undefined) {
      this.checkerAnimProgressTask = new _EaseValueTask.default(this, {
        eventEmitter: null
      });
    }
    this.checkerAnimProgressTask.restart({
      key: 'checkerAnimProgress',
      from: 0,
      to: 1,
      duration: this.checkerAnimDuration
    });
    return this;
  },
  stopCheckerAnimation() {
    if (this.checkerAnimProgressTask === undefined) {
      return this;
    }
    this.checkerAnimProgressTask.stop();
    return this;
  }
};
exports.default = _default;
},{"../../../../utils/ease/EaseValueTask.js":"node_modules/phaser3-rex-plugins/plugins/utils/ease/EaseValueTask.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _StyleMethods = _interopRequireDefault(require("./StyleMethods.js"));
var _SizeMethods = _interopRequireDefault(require("./SizeMethods.js"));
var _ShapesUpdateMethods = _interopRequireDefault(require("./ShapesUpdateMethods.js"));
var _CheckerAnimationMethods = _interopRequireDefault(require("./CheckerAnimationMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {};
Object.assign(methods, _StyleMethods.default, _SizeMethods.default, _ShapesUpdateMethods.default, _CheckerAnimationMethods.default);
var _default = methods;
exports.default = _default;
},{"./StyleMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/methods/StyleMethods.js","./SizeMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/methods/SizeMethods.js","./ShapesUpdateMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/methods/ShapesUpdateMethods.js","./CheckerAnimationMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/methods/CheckerAnimationMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/CheckboxShape.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseShapes = _interopRequireDefault(require("../shapes/BaseShapes.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const DefaultBoxFillColor = 0x005cb2;
const DefaultCheckerColor = 0xffffff;
class CheckboxShape extends _BaseShapes.default {
  constructor(scene, x, y, width, height, color, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      width = GetValue(config, 'width', 2);
      height = GetValue(config, 'height', 2);
      color = GetValue(config, 'color', DefaultBoxFillColor);
    } else if (IsPlainObject(color)) {
      config = color;
      color = GetValue(config, 'color', DefaultBoxFillColor);
    }
    super(scene, x, y, width, height);
    this.type = 'rexCheckbox';
    if (color === undefined) {
      color = DefaultBoxFillColor;
    }
    this.setBoxShape(GetValue(config, 'circleBox', false));
    this.setBoxFillStyle(color, GetValue(config, 'boxFillAlpha', 1));
    this.setUncheckedBoxFillStyle(GetValue(config, 'uncheckedColor', null), GetValue(config, 'uncheckedBoxFillAlpha', 1));
    this.setBoxStrokeStyle(GetValue(config, 'boxLineWidth', 4), GetValue(config, 'boxStrokeColor', color), GetValue(config, 'boxStrokeAlpha', 1));
    this.setUncheckedBoxStrokeStyle(this.boxLineWidth, GetValue(config, 'uncheckedBoxStrokeColor', this.boxStrokeColor), GetValue(config, 'uncheckedBoxStrokeAlpha', this.boxStrokeAlpha));
    this.setCheckerStyle(GetValue(config, 'checkerColor', DefaultCheckerColor), GetValue(config, 'checkerAlpha', 1));
    this.setBoxSize(GetValue(config, 'boxSize', 1));
    this.setCheckerSize(GetValue(config, 'checkerSize', 1));
    this.setCheckerAnimationDuration(GetValue(config, 'animationDuration', 150));
    this.buildShapes();
    var value = GetValue(config, 'checked');
    if (value === undefined) {
      value = GetValue(config, 'value', false);
    }
    this.setValue(value);
  }
  get value() {
    return this._value;
  }
  set value(value) {
    value = !!value;
    if (this._value === value) {
      return;
    }
    this.dirty = true;
    this._value = value;
    if (value) {
      this.playCheckerAnimation();
    } else {
      this.stopCheckerAnimation();
    }
    this.emit('valuechange', value);
  }
  setValue(value) {
    this.value = value;
    return this;
  }
  toggleValue() {
    this.setValue(!this.value);
    return this;
  }
  get checked() {
    return this.value;
  }
  set checked(value) {
    this.value = value;
  }
  setChecked(checked) {
    if (checked === undefined) {
      checked = true;
    }
    this.setValue(checked);
    return this;
  }
  toggleChecked() {
    this.toggleValue();
    return this;
  }
  get checkerAnimProgress() {
    return this._checkerAnimProgress;
  }
  set checkerAnimProgress(value) {
    if (this._checkerAnimProgress === value) {
      return;
    }
    this._checkerAnimProgress = value;
    this.dirty = true;
  }
}
Object.assign(CheckboxShape.prototype, _Methods.default);
var _default = CheckboxShape;
exports.default = _default;
},{"../shapes/BaseShapes.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/BaseShapes.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/methods/Methods.js"}],"node_modules/phaser3-rex-plugins/plugins/input/button/Button.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Button extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;

    this._enable = undefined;
    gameObject.setInteractive(GetValue(config, "inputConfig", undefined));
    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    this.pointer = undefined;
    this.lastClickTime = undefined;
    this.setEnable(GetValue(o, "enable", true));
    this.setMode(GetValue(o, "mode", 1));
    this.setClickInterval(GetValue(o, "clickInterval", 100));
    this.setDragThreshold(GetValue(o, 'threshold', undefined));
    return this;
  }
  boot() {
    var gameObject = this.parent;
    gameObject.on('pointerdown', this.onPress, this);
    gameObject.on('pointerup', this.onRelease, this);
    gameObject.on('pointerout', this.onPointOut, this);
    gameObject.on('pointermove', this.onMove, this);
    gameObject.on('pointerover', this.onOver, this);
    gameObject.on('pointerout', this.onOut, this);
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }

    // GameObject events will be removed when this gameObject destroyed 
    // this.parent.on('pointerdown', this.onPress, this);
    // this.parent.on('pointerup', this.onRelease, this);
    // this.parent.on('pointerout', this.onPointOut, this);
    // this.parent.on('pointermove', this.onMove, this);
    this.pointer = null;
    super.shutdown(fromScene);
  }
  get enable() {
    return this._enable;
  }
  set enable(e) {
    if (this._enable === e) {
      return;
    }
    if (!e) {
      this.cancel();
    }
    this._enable = e;
    var eventName = e ? 'enable' : 'disable';
    this.emit(eventName, this, this.parent);
  }
  setEnable(e) {
    if (e === undefined) {
      e = true;
    }
    this.enable = e;
    return this;
  }
  toggleEnable() {
    this.setEnable(!this.enable);
    return this;
  }
  setMode(m) {
    if (typeof m === 'string') {
      m = CLICKMODE[m];
    }
    this.mode = m;
    return this;
  }
  setClickInterval(interval) {
    this.clickInterval = interval; // ms
    return this;
  }
  setDragThreshold(distance) {
    this.dragThreshold = distance;
    return this;
  }

  // internal
  onPress(pointer, localX, localY, event) {
    if (this.pointer !== undefined) {
      return;
    }
    this.pointer = pointer;
    if (this.mode === 0) {
      this.click(pointer.downTime, pointer, event);
    }
  }
  onRelease(pointer, localX, localY, event) {
    if (this.pointer !== pointer) {
      return;
    }
    if (this.mode === 1) {
      this.click(pointer.upTime, pointer, event);
    }
    this.pointer = undefined;
  }
  onPointOut(pointer, event) {
    if (this.pointer !== pointer) {
      return;
    }
    this.cancel();
  }
  onMove(pointer, localX, localY, event) {
    if (this.pointer !== pointer) {
      return;
    }
    if (this.dragThreshold === undefined) {
      return;
    }
    if (pointer.getDistance() >= this.dragThreshold) {
      this.cancel();
    }
  }
  click(nowTime, pointer, event) {
    if (!this.enable) {
      return this;
    }
    if (nowTime === undefined) {
      // fires 'click' event manually
      this.emit('click', this, this.parent, pointer, event);
      return this;
    }
    this.pointer = undefined;
    var lastClickTime = this.lastClickTime;
    if (lastClickTime !== undefined && nowTime - lastClickTime <= this.clickInterval) {
      return this;
    }
    this.lastClickTime = nowTime;
    this.emit('click', this, this.parent, pointer, event);
    return this;
  }
  cancel() {
    this.pointer = undefined;
    return this;
  }
  onOver(pointer, localX, localY, event) {
    if (!this.enable) {
      return this;
    }
    this.emit('over', this, this.parent, pointer, event);
    return this;
  }
  onOut(pointer, event) {
    if (!this.enable) {
      return this;
    }
    this.emit('out', this, this.parent, pointer, event);
    return this;
  }
}
const CLICKMODE = {
  press: 0,
  pointerdown: 0,
  release: 1,
  pointerup: 1
};
var _default = Button;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/Checkbox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CheckboxShape = _interopRequireDefault(require("./CheckboxShape.js"));
var _Button = _interopRequireDefault(require("../../../input/button/Button.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Checkbox extends _CheckboxShape.default {
  constructor(scene, x, y, width, height, color, config) {
    super(scene, x, y, width, height, color, config);
    this._click = new _Button.default(this, GetValue(config, 'click'));
    this._click.on('click', function () {
      this.toggleValue();
    }, this);
    this.setReadOnly(GetValue(config, 'readOnly', false));
  }
  get readOnly() {
    return !this._click.enable;
  }
  set readOnly(value) {
    this._click.enable = !value;
  }
  setReadOnly(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.readOnly = enable;
    return this;
  }
}
var _default = Checkbox;
exports.default = _default;
},{"./CheckboxShape.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/CheckboxShape.js","../../../input/button/Button.js":"node_modules/phaser3-rex-plugins/plugins/input/button/Button.js"}],"node_modules/phaser3-rex-plugins/plugins/checkbox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Checkbox = _interopRequireDefault(require("./gameobjects/shape/checkbox/Checkbox.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _Checkbox.default;
exports.default = _default;
},{"./gameobjects/shape/checkbox/Checkbox.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/checkbox/Checkbox.js"}],"node_modules/phaser3-rex-plugins/templates/ui/checkbox/Checkbox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _checkbox = _interopRequireDefault(require("../../../plugins/checkbox.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _checkbox.default;
exports.default = _default;
},{"../../../plugins/checkbox.js":"node_modules/phaser3-rex-plugins/plugins/checkbox.js"}],"node_modules/phaser3-rex-plugins/templates/ui/checkbox/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Checkbox = _interopRequireDefault(require("./Checkbox.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('checkbox', function (x, y, width, height, color, config) {
  var gameObject = new _Checkbox.default(this.scene, x, y, width, height, color, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Checkbox', _Checkbox.default);
var _default = _Checkbox.default;
exports.default = _default;
},{"./Checkbox.js":"node_modules/phaser3-rex-plugins/templates/ui/checkbox/Checkbox.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/methods/StyleMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setTrackFillStyle(color, alpha) {
    if (alpha === undefined) {
      alpha = 1;
    }
    this.dirty = this.dirty || this.trackFillColor !== color || this.trackFillAlpha !== alpha;
    this.trackFillColor = color;
    this.trackFillAlpha = alpha;
    return this;
  },
  setFalseValueTrackFillStyle(color, alpha) {
    if (alpha === undefined) {
      alpha = 1;
    }
    this.dirty = this.dirty || this.falseValueTrackColor !== color || this.uncheckedTrackFillAlpha !== alpha;
    this.falseValueTrackColor = color;
    this.falseValueTrackFillAlpha = alpha;
    return this;
  },
  setThumbStyle(color, alpha) {
    if (alpha === undefined) {
      alpha = 1;
    }
    this.dirty = this.dirty || this.thumbColor !== color || this.checkAlpha !== alpha;
    this.thumbColor = color;
    this.thumbAlpha = alpha;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/methods/SizeMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setTrackSize(width, height) {
    this.dirty = this.dirty || this.trackWidth !== width || this.trackHeight !== height;
    this.trackWidth = width;
    this.trackHeight = height;
    return this;
  },
  setTrackRadius(radius) {
    this.dirty = this.dirty || this.trackRadius !== radius;
    this.trackRadius = radius;
    return this;
  },
  setThumbSize(width, height) {
    if (height === undefined) {
      height = width;
    }
    this.dirty = this.dirty || this.thumbWidth !== width || this.thumbHeight !== height;
    this.thumbWidth = width;
    this.thumbHeight = height;
    return this;
  },
  setThumbRadius(radius) {
    this.dirty = this.dirty || this.thumbRadius !== radius;
    this.thumbRadius = radius;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/methods/PositionMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setThumbPosition(left, right) {
    if (right === undefined) {
      right = 1 - left;
    }
    this.thumbLeftX = left;
    this.thumbRightX = right;
    return this;
  },
  setRTL(rtl) {
    if (rtl === undefined) {
      rtl = true;
    }
    this.rtl = rtl;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/math/Linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

/**
 * Calculates a linear (interpolation) value over t.
 *
 * @function Phaser.Math.Linear
 * @since 3.0.0
 *
 * @param {number} p0 - The first point.
 * @param {number} p1 - The second point.
 * @param {number} t - The percentage between p0 and p1 to return, represented as a number between 0 and 1.
 *
 * @return {number} The step t% of the way between p0 and p1.
 */
var Linear = function (p0, p1, t) {
  return (p1 - p0) * t + p0;
};
var _default = Linear;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/color/MixColor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Linear = _interopRequireDefault(require("../math/Linear.js"));
var _GetRGB = require("./GetRGB.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var MixColor = function (color0, color1, t) {
  var r = (0, _Linear.default)((0, _GetRGB.GetR)(color0), (0, _GetRGB.GetR)(color1), t);
  var g = (0, _Linear.default)((0, _GetRGB.GetG)(color0), (0, _GetRGB.GetG)(color1), t);
  var b = (0, _Linear.default)((0, _GetRGB.GetB)(color0), (0, _GetRGB.GetB)(color1), t);
  return (r & 0xff) << 16 | (g & 0xff) << 8 | b & 0xff;
};
var _default = MixColor;
exports.default = _default;
},{"../math/Linear.js":"node_modules/phaser3-rex-plugins/plugins/utils/math/Linear.js","./GetRGB.js":"node_modules/phaser3-rex-plugins/plugins/utils/color/GetRGB.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/methods/ShapesUpdateMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _geoms = require("../../shapes/geoms");
var _MixColor = _interopRequireDefault(require("../../../../utils/color/MixColor"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Linear = Phaser.Math.Linear;
var _default = {
  buildShapes() {
    this.addShape(new _geoms.RoundRectangle().setName('track')).addShape(new _geoms.RoundRectangle().setName('thumb'));
  },
  updateShapes() {
    var width = this.width,
      height = this.height;
    var toggleAnimProgress = this.value ? this.toggleAnimProgress : 1 - this.toggleAnimProgress;

    // Track
    var trackShape = this.getShape('track');
    if (this.isSizeChanged) {
      var trackWidth = width * this.trackWidth,
        trackHeight = height * this.trackHeight,
        trackX = (width - trackWidth) / 2,
        trackY = (height - trackHeight) / 2,
        trackRadius = height * this.trackRadius;
      trackShape.setTopLeftPosition(trackX, trackY).setSize(trackWidth, trackHeight).setRadius(trackRadius);
    }
    var trackFillColor = (0, _MixColor.default)(this.falseValueTrackColor, this.trackFillColor, toggleAnimProgress);
    var trackFillAlpha = Linear(this.falseValueTrackFillAlpha, this.trackFillAlpha, toggleAnimProgress);
    trackShape.fillStyle(trackFillColor, trackFillAlpha);

    // Thumb
    var thumbShape = this.getShape('thumb');
    if (this.isSizeChanged) {
      var thumbWidth = width * this.thumbWidth,
        thumbHeight = height * this.thumbHeight,
        thumbRadius = height * this.thumbRadius;
      thumbShape.setSize(thumbWidth, thumbHeight).setRadius(thumbRadius);
    }
    var thumbX = Linear(this.thumbLeftX, this.thumbRightX, toggleAnimProgress) * width;
    if (this.rtl) {
      thumbX = width - thumbX;
    }
    var thumbY = height / 2;
    thumbShape.setCenterPosition(thumbX, thumbY);
    thumbShape.fillStyle(this.thumbColor, this.thumbAlpha);
  }
};
exports.default = _default;
},{"../../shapes/geoms":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/index.js","../../../../utils/color/MixColor":"node_modules/phaser3-rex-plugins/plugins/utils/color/MixColor.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/methods/ToggleAnimationMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseValueTask = _interopRequireDefault(require("../../../../utils/ease/EaseValueTask.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  setToggleAnimationDuration(duration) {
    if (duration === undefined) {
      duration = 0;
    }
    this.toggleAnimDuration = duration;
    return this;
  },
  playToggleAnimation() {
    if (this.toggleAnimProgressTask === undefined) {
      this.toggleAnimProgressTask = new _EaseValueTask.default(this, {
        eventEmitter: null
      });
    }
    this.toggleAnimProgressTask.restart({
      key: 'toggleAnimProgress',
      from: 0,
      to: 1,
      duration: this.toggleAnimDuration
    });
    return this;
  },
  stopToggleAnimation() {
    if (this.toggleAnimProgressTask === undefined) {
      return this;
    }
    this.toggleAnimProgressTask.stop();
    return this;
  }
};
exports.default = _default;
},{"../../../../utils/ease/EaseValueTask.js":"node_modules/phaser3-rex-plugins/plugins/utils/ease/EaseValueTask.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _StyleMethods = _interopRequireDefault(require("./StyleMethods.js"));
var _SizeMethods = _interopRequireDefault(require("./SizeMethods.js"));
var _PositionMethods = _interopRequireDefault(require("./PositionMethods.js"));
var _ShapesUpdateMethods = _interopRequireDefault(require("./ShapesUpdateMethods.js"));
var _ToggleAnimationMethods = _interopRequireDefault(require("./ToggleAnimationMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {};
Object.assign(methods, _StyleMethods.default, _SizeMethods.default, _PositionMethods.default, _ShapesUpdateMethods.default, _ToggleAnimationMethods.default);
var _default = methods;
exports.default = _default;
},{"./StyleMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/methods/StyleMethods.js","./SizeMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/methods/SizeMethods.js","./PositionMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/methods/PositionMethods.js","./ShapesUpdateMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/methods/ShapesUpdateMethods.js","./ToggleAnimationMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/methods/ToggleAnimationMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/color/GrayScale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetRGB = require("./GetRGB.js");
var GrayScale = function (color) {
  var shade = 0.3 * (0, _GetRGB.GetR)(color) + 0.59 * (0, _GetRGB.GetG)(color) + 0.11 * (0, _GetRGB.GetB)(color);
  return (shade & 0xff) << 16 | (shade & 0xff) << 8 | shade & 0xff;
};
var _default = GrayScale;
exports.default = _default;
},{"./GetRGB.js":"node_modules/phaser3-rex-plugins/plugins/utils/color/GetRGB.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/ToggleSwitchShape.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseShapes = _interopRequireDefault(require("../shapes/BaseShapes.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
var _GrayScale = _interopRequireDefault(require("../../../utils/color/GrayScale.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const DefaultTrackFillColor = 0x005cb2;
const DefaultThumbFillColor = 0xffffff;
class ToggleSwitchShape extends _BaseShapes.default {
  constructor(scene, x, y, width, height, color, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      width = GetValue(config, 'width', 2);
      height = GetValue(config, 'height', 2);
      color = GetValue(config, 'color', DefaultTrackFillColor);
    } else if (IsPlainObject(color)) {
      config = color;
      color = GetValue(config, 'color', DefaultTrackFillColor);
    }
    super(scene, x, y, width, height);
    this.type = 'rexToggleSwitch';
    if (color === undefined) {
      color = DefaultTrackFillColor;
    }
    this.setTrackFillStyle(color, GetValue(config, 'trackFillAlpha', 1));
    this.setFalseValueTrackFillStyle(GetValue(config, 'falseValueTrackColor', (0, _GrayScale.default)(color)), GetValue(config, 'falseValueTrackFillAlpha', 1));
    this.setThumbStyle(GetValue(config, 'thumbColor', DefaultThumbFillColor), GetValue(config, 'thumbAlpha', 1));
    this.setTrackSize(GetValue(config, 'trackWidth', 0.9), GetValue(config, 'trackHeight', 0.5));
    this.setTrackRadius(GetValue(config, 'trackRadius', this.trackHeight * 0.5));
    var thumbHeight = GetValue(config, 'thumbHeight', undefined);
    var thumbWidth = GetValue(config, 'thumbWidth', thumbHeight);
    if (thumbWidth === undefined) {
      thumbWidth = this.trackHeight * 0.9;
    }
    this.setThumbSize(thumbWidth, thumbHeight);
    this.setThumbRadius(GetValue(config, 'thumbRadius', this.thumbHeight * 0.5));
    this.setThumbPosition(GetValue(config, 'thumbLeft', 0.3), GetValue(config, 'thumbRight', undefined));
    this.setRTL(GetValue(config, 'rtl', false));
    this.setToggleAnimationDuration(GetValue(config, 'animationDuration', 150));
    this.buildShapes();
    this.setValue(GetValue(config, 'value', false), 0);
  }
  get value() {
    return this._value;
  }
  set value(value) {
    value = !!value;
    if (this._value === value) {
      return;
    }
    this.dirty = true;
    this._value = value;
    this.playToggleAnimation();
    this.emit('valuechange', value);
  }
  setValue(value, duration) {
    if (duration === undefined) {
      duration = this.toggleAnimDuration;
    }
    var durationSave = this.toggleAnimDuration;
    this.toggleAnimDuration = duration;
    this.value = value;
    this.toggleAnimDuration = durationSave;
    return this;
  }
  toggleValue(duration) {
    this.setValue(!this.value, duration);
    return this;
  }
  get toggleAnimProgress() {
    return this._toggleAnimProgress;
  }
  set toggleAnimProgress(value) {
    if (this._toggleAnimProgress === value) {
      return;
    }
    this._toggleAnimProgress = value;
    this.dirty = true;
  }
}
Object.assign(ToggleSwitchShape.prototype, _Methods.default);
var _default = ToggleSwitchShape;
exports.default = _default;
},{"../shapes/BaseShapes.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/BaseShapes.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/methods/Methods.js","../../../utils/color/GrayScale.js":"node_modules/phaser3-rex-plugins/plugins/utils/color/GrayScale.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/ToggleSwitch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ToggleSwitchShape = _interopRequireDefault(require("./ToggleSwitchShape.js"));
var _Button = _interopRequireDefault(require("../../../input/button/Button.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class ToggleSwitch extends _ToggleSwitchShape.default {
  constructor(scene, x, y, width, height, color, config) {
    super(scene, x, y, width, height, color, config);
    this._click = new _Button.default(this, GetValue(config, 'click'));
    this._click.on('click', function () {
      this.toggleValue();
    }, this);
    this.setReadOnly(GetValue(config, 'readOnly', false));
  }
  get readOnly() {
    return !this._click.enable;
  }
  set readOnly(value) {
    this._click.enable = !value;
  }
  setReadOnly(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.readOnly = enable;
    return this;
  }
}
var _default = ToggleSwitch;
exports.default = _default;
},{"./ToggleSwitchShape.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/ToggleSwitchShape.js","../../../input/button/Button.js":"node_modules/phaser3-rex-plugins/plugins/input/button/Button.js"}],"node_modules/phaser3-rex-plugins/plugins/toggleswitch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ToggleSwitch = _interopRequireDefault(require("./gameobjects/shape/toggleswitch/ToggleSwitch.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _ToggleSwitch.default;
exports.default = _default;
},{"./gameobjects/shape/toggleswitch/ToggleSwitch.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/toggleswitch/ToggleSwitch.js"}],"node_modules/phaser3-rex-plugins/templates/ui/toggleswitch/ToggleSwitch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toggleswitch = _interopRequireDefault(require("../../../plugins/toggleswitch.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _toggleswitch.default;
exports.default = _default;
},{"../../../plugins/toggleswitch.js":"node_modules/phaser3-rex-plugins/plugins/toggleswitch.js"}],"node_modules/phaser3-rex-plugins/templates/ui/toggleswitch/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ToggleSwitch = _interopRequireDefault(require("./ToggleSwitch.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('toggleSwitch', function (x, y, width, height, color, config) {
  var gameObject = new _ToggleSwitch.default(this.scene, x, y, width, height, color, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.ToggleSwitch', _ToggleSwitch.default);
var _default = _ToggleSwitch.default;
exports.default = _default;
},{"./ToggleSwitch.js":"node_modules/phaser3-rex-plugins/templates/ui/toggleswitch/ToggleSwitch.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvas/LoadImageMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  loadFromURL(url, callback) {
    var self = this;
    var img = new Image();
    img.onload = function () {
      if (self.width !== img.width || self.height !== img.height) {
        self.resize(img.width, img.height);
      } else {
        self.clear();
      }
      self.context.drawImage(img, 0, 0);
      self.updateTexture();
      if (callback) {
        callback();
      }
      img.onload = null;
      img.src = '';
      img.remove();
    };
    img.src = url;
    return this;
  },
  loadFromURLPromise(url) {
    var self = this;
    return new Promise(function (resolve, reject) {
      self.loadFromURL(url, resolve);
    });
  },
  loadFromFile(file, callback) {
    var url = URL.createObjectURL(file);
    this.loadFromURL(url, function () {
      URL.revokeObjectURL(url);
      if (callback) {
        callback();
      }
    });
    return this;
  },
  loadFromFilePromise(file) {
    var self = this;
    return new Promise(function (resolve, reject) {
      self.loadFromFile(file, resolve);
    });
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvas/Canvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Canvas = _interopRequireDefault(require("../canvasbase/Canvas.js"));
var _LoadImageMethods = _interopRequireDefault(require("./LoadImageMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Canvas extends _Canvas.default {}
Object.assign(Canvas.prototype, _LoadImageMethods.default);
var _default = Canvas;
exports.default = _default;
},{"../canvasbase/Canvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/Canvas.js","./LoadImageMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvas/LoadImageMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/canvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Canvas = _interopRequireDefault(require("./gameobjects/canvas/canvas/Canvas.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _Canvas.default;
exports.default = _default;
},{"./gameobjects/canvas/canvas/Canvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvas/Canvas.js"}],"node_modules/phaser3-rex-plugins/templates/ui/canvas/Canvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _canvas = _interopRequireDefault(require("../../../plugins/canvas.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _canvas.default;
exports.default = _default;
},{"../../../plugins/canvas.js":"node_modules/phaser3-rex-plugins/plugins/canvas.js"}],"node_modules/phaser3-rex-plugins/templates/ui/canvas/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Canvas = _interopRequireDefault(require("./Canvas.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('canvas', function (x, y, width, height) {
  var gameObject = new _Canvas.default(this.scene, x, y, width, height);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Canvas', _Canvas.default);
var _default = _Canvas.default;
exports.default = _default;
},{"./Canvas.js":"node_modules/phaser3-rex-plugins/templates/ui/canvas/Canvas.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/circlemaskimage/CircleMaskImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Canvas = _interopRequireDefault(require("../canvasbase/Canvas.js"));
var _AddRoundRectanglePath = _interopRequireDefault(require("../../../utils/canvas/AddRoundRectanglePath.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class CircleMaskImage extends _Canvas.default {
  constructor(scene, x, y, key, frame, config) {
    super(scene, x, y);
    this.type = 'rexCircleMaskImage';
    this.setTexture(key, frame, config);
  }
  setTexture(key, frame, config) {
    if (typeof frame === 'object') {
      config = frame;
      frame = undefined;
    }
    if (typeof config === 'string') {
      config = {
        maskType: config
      };
    }
    var maskType = GetValue(config, 'maskType', 0);
    var backgroundColor = GetValue(config, 'backgroundColor', undefined);
    var strokeColor = GetValue(config, 'strokeColor', undefined);
    var defaultStrokeWidth = strokeColor != null ? 10 : 0;
    var strokeWidth = GetValue(config, 'strokeWidth', defaultStrokeWidth);
    if (maskType === undefined) {
      maskType = 0;
    } else if (typeof maskType === 'string') {
      maskType = MASKTYPE[maskType];
    }
    this._textureKey = key;
    this._frameName = frame;
    if (maskType === null) {
      this.loadTexture(key, frame);
      this.dirty = true;
      return this;
    }
    var textureFrame = this.scene.sys.textures.getFrame(key, frame);
    if (!textureFrame) {
      return this;
    }
    // Resize to frame size
    if (textureFrame.cutWidth !== this.width || textureFrame.cutHeight !== this.height) {
      this.setCanvasSize(textureFrame.cutWidth, textureFrame.cutHeight);
    } else {
      this.clear();
    }
    var canvas = this.canvas,
      ctx = this.context;
    var width = canvas.width,
      height = canvas.height;

    // Fill background
    if (backgroundColor != null) {
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(0, 0, width, height);
    }
    ctx.save();
    ctx.beginPath();

    // Build clip path 
    var halfStrokeLineWidth = strokeWidth / 2;
    switch (maskType) {
      case 1:
        // ellipse
        var centerX = Math.floor(width / 2);
        var centerY = Math.floor(height / 2);
        var radiusX = centerX - halfStrokeLineWidth;
        var radiusY = centerY - halfStrokeLineWidth;
        ctx.ellipse(centerX, centerY, radiusX, radiusY, 0, 0, 2 * Math.PI);
        break;
      case 2:
        var radiusConfig = GetValue(config, 'radius', 0);
        var iteration = GetValue(config, 'iteration', undefined);
        (0, _AddRoundRectanglePath.default)(ctx, halfStrokeLineWidth, halfStrokeLineWidth, width - strokeWidth, height - strokeWidth, radiusConfig, iteration);
        break;
      default:
        // circle
        var centerX = Math.floor(width / 2);
        var centerY = Math.floor(height / 2);
        var radius = Math.min(centerX, centerY) - halfStrokeLineWidth;
        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        break;
    }

    // Draw stroke line
    if (strokeColor != null) {
      ctx.strokeStyle = strokeColor;
      ctx.lineWidth = strokeWidth;
      ctx.stroke();
    }

    // Clip frame image
    ctx.clip();
    this.loadTexture(key, frame);
    ctx.restore();
    this.dirty = true;
    return this;
  }
  resize(width, height) {
    // Don't draw content again.
    this.setDisplaySize(width, height);
    return this;
  }
}
const MASKTYPE = {
  circle: 0,
  ellipse: 1,
  roundRectangle: 2
};
var _default = CircleMaskImage;
exports.default = _default;
},{"../canvasbase/Canvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/Canvas.js","../../../utils/canvas/AddRoundRectanglePath.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/AddRoundRectanglePath.js"}],"node_modules/phaser3-rex-plugins/plugins/circlemaskimage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CircleMaskImage = _interopRequireDefault(require("./gameobjects/canvas/circlemaskimage/CircleMaskImage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _CircleMaskImage.default;
exports.default = _default;
},{"./gameobjects/canvas/circlemaskimage/CircleMaskImage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/circlemaskimage/CircleMaskImage.js"}],"node_modules/phaser3-rex-plugins/templates/ui/circlemaskimage/CircleMaskImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _circlemaskimage = _interopRequireDefault(require("../../../plugins/circlemaskimage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _circlemaskimage.default;
exports.default = _default;
},{"../../../plugins/circlemaskimage.js":"node_modules/phaser3-rex-plugins/plugins/circlemaskimage.js"}],"node_modules/phaser3-rex-plugins/templates/ui/circlemaskimage/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CircleMaskImage = _interopRequireDefault(require("./CircleMaskImage.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('circleMaskImage', function (x, y, key, frame, config) {
  var gameObject = new _CircleMaskImage.default(this.scene, x, y, key, frame, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.CircleMaskImage', _CircleMaskImage.default);
var _default = _CircleMaskImage.default;
exports.default = _default;
},{"./CircleMaskImage.js":"node_modules/phaser3-rex-plugins/templates/ui/circlemaskimage/CircleMaskImage.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/alphamaskimage/AlphaMaskImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Canvas = _interopRequireDefault(require("../canvasbase/Canvas.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class AlphaMaskImage extends _Canvas.default {
  constructor(scene, x, y, key, frame, config) {
    super(scene, x, y);
    this.type = 'rexAlphaMaskImage';
    this.maskFrame = null;
    this.setTexture(key, frame, config);
  }
  setTexture(key, frame, config) {
    if (typeof frame === 'object') {
      config = frame;
      frame = undefined;
    }
    if (typeof config === 'string') {
      config = {
        mask: {
          key: config
        }
      };
    }
    var maskKey = GetValue(config, 'mask.key');
    var maskFrame = GetValue(config, 'mask.frame');
    var invertMaskAlpha = GetValue(config, 'mask.invertAlpha', false);
    var maskScale = GetValue(config, 'mask.scale');
    var backgroundColor = GetValue(config, 'backgroundColor');
    if (maskKey) {
      this._maskKey = maskKey;
      this._maskFrame = maskFrame;
      this._maskScale = maskScale;
      var texture = maskKey ? this.scene.sys.textures.get(maskKey) : null;
      this.maskFrame = texture ? texture.get(maskFrame) : null;
    }
    this._textureKey = key;
    this._frameName = frame;
    var maskTextureFrame = this.maskFrame;
    if (maskTextureFrame === null) {
      this.loadTexture(key, frame);
      this.dirty = true;
      return this;
    }
    var hasBackgroundColor = backgroundColor != null;
    this.loadTexture(key, frame);

    // Draw mask
    var canvas = this.canvas,
      ctx = this.context;
    var width = canvas.width,
      height = canvas.height;
    ctx.save();
    ctx.globalCompositeOperation = invertMaskAlpha ? 'destination-out' : 'destination-in';
    var maskWidth, maskHeight;
    if (this._maskScale != null) {
      maskWidth = maskTextureFrame.cutWidth * this._maskScale;
      maskHeight = maskTextureFrame.cutHeight * this._maskScale;
    } else {
      maskWidth = width;
      maskHeight = height;
    }
    var maskX = (width - maskWidth) / 2;
    var maskY = (height - maskHeight) / 2;
    this.drawFrame(this._maskKey, this._maskFrame, maskX, maskY, maskWidth, maskHeight);
    ctx.restore();
    if (hasBackgroundColor) {
      ctx.save();
      ctx.globalCompositeOperation = 'destination-over';
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(0, 0, width, height);
      ctx.restore();
    }
    this.dirty = true;
    return this;
  }
  resize(width, height) {
    // Don't draw content again.
    this.setDisplaySize(width, height);
    return this;
  }
}
var _default = AlphaMaskImage;
exports.default = _default;
},{"../canvasbase/Canvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/Canvas.js"}],"node_modules/phaser3-rex-plugins/plugins/alphamaskimage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AlphaMaskImage = _interopRequireDefault(require("./gameobjects/canvas/alphamaskimage/AlphaMaskImage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _AlphaMaskImage.default;
exports.default = _default;
},{"./gameobjects/canvas/alphamaskimage/AlphaMaskImage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/alphamaskimage/AlphaMaskImage.js"}],"node_modules/phaser3-rex-plugins/templates/ui/alphamaskimage/AlphaMaskImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _alphamaskimage = _interopRequireDefault(require("../../../plugins/alphamaskimage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _alphamaskimage.default;
exports.default = _default;
},{"../../../plugins/alphamaskimage.js":"node_modules/phaser3-rex-plugins/plugins/alphamaskimage.js"}],"node_modules/phaser3-rex-plugins/templates/ui/alphamaskimage/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AlphaMaskImage = _interopRequireDefault(require("./AlphaMaskImage.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('alphaMaskImage', function (x, y, key, frame, config) {
  var gameObject = new _AlphaMaskImage.default(this.scene, x, y, key, frame, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.AlphaMaskImage', _AlphaMaskImage.default);
var _default = _AlphaMaskImage.default;
exports.default = _default;
},{"./AlphaMaskImage.js":"node_modules/phaser3-rex-plugins/templates/ui/alphamaskimage/AlphaMaskImage.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/progressvalue/ProgressValueMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Linear = Phaser.Math.Linear;
const Percent = Phaser.Math.Percent;
var _default = {
  setValue(value, min, max) {
    if (value === undefined || value === null) {
      return this;
    }
    if (min !== undefined) {
      value = Percent(value, min, max);
    }
    this.value = value;
    return this;
  },
  addValue(inc, min, max) {
    if (min !== undefined) {
      inc = Percent(inc, min, max);
    }
    this.value += inc;
    return this;
  },
  getValue(min, max) {
    var value = this.value;
    if (min !== undefined) {
      value = Linear(min, max, value);
    }
    return value;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/ease/EaseValueMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseValueTask = _interopRequireDefault(require("./EaseValueTask.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Percent = Phaser.Math.Percent;
var SetEaseValuePropName = function (name) {
  this.easeValuePropName = name;
  return this;
};
var SetEaseValueDuration = function (duration) {
  this.easeValueDuration = duration;
  return this;
};
var SetEaseValueFunction = function (ease) {
  this.easeFunction = ease;
  return this;
};
var StopEaseValue = function () {
  if (this.easeValueTask) {
    this.easeValueTask.stop();
  }
  return this;
};
var EaseValueTo = function (value, min, max) {
  if (value === undefined || value === null) {
    return this;
  }
  if (min !== undefined) {
    value = Percent(value, min, max);
  }
  if (this.easeValueTask === undefined) {
    this.easeValueTask = new _EaseValueTask.default(this, {
      eventEmitter: null
    });
  }
  this.easeValueTask.restart({
    key: this.easeValuePropName,
    to: value,
    duration: this.easeValueDuration,
    ease: this.easeFunction
  });
  return this;
};
var EaseValueRepeat = function (from, to, repeat, repeatDelay) {
  if (repeat === undefined) {
    repeat = -1;
  }
  if (repeatDelay === undefined) {
    repeatDelay = 0;
  }
  if (this.easeValueTask === undefined) {
    this.easeValueTask = new _EaseValueTask.default(this, {
      eventEmitter: null
    });
  }
  this.easeValueTask.restart({
    key: this.easeValuePropName,
    from: from,
    to: to,
    duration: this.easeValueDuration,
    ease: this.easeFunction,
    repeat: repeat,
    repeatDelay: repeatDelay
  });
  return this;
};
var _default = {
  setEaseValuePropName: SetEaseValuePropName,
  setEaseValueDuration: SetEaseValueDuration,
  setEaseValueFunction: SetEaseValueFunction,
  stopEaseValue: StopEaseValue,
  easeValueTo: EaseValueTo,
  easeValueRepeat: EaseValueRepeat
};
exports.default = _default;
},{"./EaseValueTask.js":"node_modules/phaser3-rex-plugins/plugins/utils/ease/EaseValueTask.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/progressbase/ProgressBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _ProgressValueMethods = _interopRequireDefault(require("../progressvalue/ProgressValueMethods.js"));
var _EaseValueMethods = _interopRequireDefault(require("../ease/EaseValueMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const Clamp = Phaser.Math.Clamp;
function _default(BaseClass) {
  class ProgressBase extends BaseClass {
    bootProgressBase(config) {
      this.eventEmitter = GetValue(config, 'eventEmitter', this);
      var callback = GetValue(config, 'valuechangeCallback', null);
      if (callback !== null) {
        var scope = GetValue(config, 'valuechangeCallbackScope', undefined);
        this.eventEmitter.on('valuechange', callback, scope);
      }
      this.setEaseValuePropName('value').setEaseValueDuration(GetValue(config, 'easeValue.duration', 0)).setEaseValueFunction(GetValue(config, 'easeValue.ease', 'Linear'));
      return this;
    }
    get value() {
      return this._value;
    }
    set value(value) {
      value = Clamp(value, 0, 1);
      var oldValue = this._value;
      var valueChanged = oldValue != value;
      this.dirty = this.dirty || valueChanged;
      this._value = value;
      if (valueChanged) {
        this.eventEmitter.emit('valuechange', this._value, oldValue, this.eventEmitter);
      }
    }
  }
  Object.assign(ProgressBase.prototype, _ProgressValueMethods.default, _EaseValueMethods.default);
  return ProgressBase;
}
},{"../progressvalue/ProgressValueMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/progressvalue/ProgressValueMethods.js","../ease/EaseValueMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/ease/EaseValueMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/circularprogress/ShapesUpdateMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _geoms = require("../shapes/geoms");
const RadToDeg = Phaser.Math.RadToDeg;
var _default = {
  buildShapes() {
    this.addShape(new _geoms.Circle().setName('track')).addShape(new _geoms.Arc().setName('bar')).addShape(new _geoms.Circle().setName('center'));
  },
  updateShapes() {
    var x = this.radius;
    var lineWidth = this.thickness * this.radius;
    var barRadius = this.radius - lineWidth / 2;
    var centerRadius = this.radius - lineWidth;

    // Track shape
    var trackShape = this.getShape('track');
    if (this.trackColor != null && lineWidth > 0) {
      trackShape.setCenterPosition(x, x).setRadius(barRadius).lineStyle(lineWidth, this.trackColor);
    } else {
      trackShape.reset();
    }

    // Bar shape
    var barShape = this.getShape('bar');
    if (this.barColor != null && barRadius > 0) {
      var anticlockwise, startAngle, endAngle;
      if (this.value === 1) {
        anticlockwise = false;
        startAngle = 0;
        endAngle = 361; // overshoot 1
      } else {
        anticlockwise = this.anticlockwise;
        startAngle = RadToDeg(this.startAngle);
        var deltaAngle = 360 * (anticlockwise ? 1 - this.value : this.value);
        endAngle = deltaAngle + startAngle;
      }
      barShape.setCenterPosition(x, x).setRadius(barRadius).setAngle(startAngle, endAngle, anticlockwise).lineStyle(lineWidth, this.barColor);
    } else {
      barShape.reset();
    }

    // Center shape
    var centerShape = this.getShape('center');
    if (this.centerColor && centerRadius > 0) {
      centerShape.setCenterPosition(x, x).setRadius(centerRadius).fillStyle(this.centerColor);
    } else {
      centerShape.reset();
    }
  }
};
exports.default = _default;
},{"../shapes/geoms":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/index.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/circularprogress/CircularProgress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseShapes = _interopRequireDefault(require("../shapes/BaseShapes.js"));
var _ProgressBase = _interopRequireDefault(require("../../../utils/progressbase/ProgressBase.js"));
var _ShapesUpdateMethods = _interopRequireDefault(require("./ShapesUpdateMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const Clamp = Phaser.Math.Clamp;
const DefaultStartAngle = Phaser.Math.DegToRad(270);
class CircularProgress extends (0, _ProgressBase.default)(_BaseShapes.default) {
  constructor(scene, x, y, radius, barColor, value, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      radius = GetValue(config, 'radius', 1);
      barColor = GetValue(config, 'barColor', undefined);
      value = GetValue(config, 'value', 0);
    }
    if (radius === undefined) {
      radius = 1;
    }
    var width = radius * 2;
    super(scene, x, y, width, width);
    this.type = 'rexCircularProgress';
    this.bootProgressBase(config);
    this.setRadius(radius);
    this.setTrackColor(GetValue(config, 'trackColor', undefined));
    this.setBarColor(barColor);
    this.setCenterColor(GetValue(config, 'centerColor', undefined));
    this.setThickness(GetValue(config, 'thickness', 0.2));
    this.setStartAngle(GetValue(config, 'startAngle', DefaultStartAngle));
    this.setAnticlockwise(GetValue(config, 'anticlockwise', false));
    this.buildShapes();
    this.setValue(value);
  }
  resize(width, height) {
    width = Math.floor(Math.min(width, height));
    if (width === this.width) {
      return this;
    }
    super.resize(width, width);
    this.setRadius(width / 2);
    return this;
  }
  get radius() {
    return this._radius;
  }
  set radius(value) {
    this.dirty = this.dirty || this._radius != value;
    this._radius = value;
    var width = value * 2;
    this.resize(width, width);
  }
  setRadius(radius) {
    this.radius = radius;
    return this;
  }
  get trackColor() {
    return this._trackColor;
  }
  set trackColor(value) {
    this.dirty = this.dirty || this._trackColor != value;
    this._trackColor = value;
  }
  setTrackColor(color) {
    this.trackColor = color;
    return this;
  }
  get barColor() {
    return this._barColor;
  }
  set barColor(value) {
    this.dirty = this.dirty || this._barColor != value;
    this._barColor = value;
  }
  setBarColor(color) {
    this.barColor = color;
    return this;
  }
  get startAngle() {
    return this._startAngle;
  }
  set startAngle(value) {
    this.dirty = this.dirty || this._startAngle != value;
    this._startAngle = value;
  }
  setStartAngle(angle) {
    this.startAngle = angle;
    return this;
  }
  get anticlockwise() {
    return this._anticlockwise;
  }
  set anticlockwise(value) {
    this.dirty = this.dirty || this._anticlockwise != value;
    this._anticlockwise = value;
  }
  setAnticlockwise(anticlockwise) {
    if (anticlockwise === undefined) {
      anticlockwise = true;
    }
    this.anticlockwise = anticlockwise;
    return this;
  }
  get thickness() {
    return this._thickness;
  }
  set thickness(value) {
    value = Clamp(value, 0, 1);
    this.dirty = this.dirty || this._thickness != value;
    this._thickness = value;
  }
  setThickness(thickness) {
    this.thickness = thickness;
    return this;
  }
  get centerColor() {
    return this._centerColor;
  }
  set centerColor(value) {
    this.dirty = this.dirty || this._centerColor != value;
    this._centerColor = value;
  }
  setCenterColor(color) {
    this.centerColor = color;
    return this;
  }
}
Object.assign(CircularProgress.prototype, _ShapesUpdateMethods.default);
var _default = CircularProgress;
exports.default = _default;
},{"../shapes/BaseShapes.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/BaseShapes.js","../../../utils/progressbase/ProgressBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/progressbase/ProgressBase.js","./ShapesUpdateMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/circularprogress/ShapesUpdateMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/circularprogress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CircularProgress = _interopRequireDefault(require("./gameobjects/shape/circularprogress/CircularProgress.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _CircularProgress.default;
exports.default = _default;
},{"./gameobjects/shape/circularprogress/CircularProgress.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/circularprogress/CircularProgress.js"}],"node_modules/phaser3-rex-plugins/templates/ui/circularprogress/CircularProgress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _circularprogress = _interopRequireDefault(require("../../../plugins/circularprogress.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _circularprogress.default;
exports.default = _default;
},{"../../../plugins/circularprogress.js":"node_modules/phaser3-rex-plugins/plugins/circularprogress.js"}],"node_modules/phaser3-rex-plugins/templates/ui/circularprogress/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CircularProgress = _interopRequireDefault(require("./CircularProgress.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('circularProgress', function (x, y, radius, barColor, value, config) {
  var gameObject = new _CircularProgress.default(this.scene, x, y, radius, barColor, value, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.CircularProgress', _CircularProgress.default);
var _default = _CircularProgress.default;
exports.default = _default;
},{"./CircularProgress.js":"node_modules/phaser3-rex-plugins/templates/ui/circularprogress/CircularProgress.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/canvas/DrawCircle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var DrawCircle = function (canvas, context, x, y, rx, ry, fillStyle, strokeStyle, lineWidth, startAngle, endAngle, anticlockwise) {
  if (startAngle === undefined) {
    startAngle = 0;
  }
  if (endAngle === undefined) {
    endAngle = 2 * Math.PI;
  }
  if (anticlockwise === undefined) {
    anticlockwise = false;
  }
  context.beginPath();
  context.ellipse(x, y, rx, ry, 0, startAngle, endAngle, anticlockwise);
  if (fillStyle != null) {
    context.fillStyle = fillStyle;
    context.fill();
  }
  if (strokeStyle != null) {
    context.strokeStyle = strokeStyle;
    context.lineWidth = lineWidth;
    context.stroke();
  }
};
var _default = DrawCircle;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/canvas/DrawText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var DrawText = function (canvas, context, x, y, text, font, fillStyle, strokeStyle, lineWidth, textAlign, textBaseline) {
  if (lineWidth === undefined && strokeStyle != null) {
    lineWidth = 2;
  }
  if (textAlign === undefined) {
    textAlign = 'start';
  }
  if (textBaseline === undefined) {
    textBaseline = 'alphabetic';
  }
  context.font = font;
  context.textAlign = textAlign;
  context.textBaseline = textBaseline;
  context.fillStyle = fillStyle;
  context.strokeStyle = strokeStyle;
  context.lineWidth = lineWidth;
  context.lineCap = 'round';
  context.lineJoin = 'round';
  if (strokeStyle != null && strokeStyle !== 'none' && lineWidth > 0) {
    context.strokeText(text, x, y);
  }
  if (fillStyle != null && fillStyle !== 'none') {
    context.fillText(text, x, y);
  }
};
var _default = DrawText;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/circularprogress/DrawContent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DrawCircle = _interopRequireDefault(require("../../../utils/canvas/DrawCircle.js"));
var _DrawText = _interopRequireDefault(require("../../../utils/canvas/DrawText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DrawContent = function () {
  var x = this.radius;
  var lineWidth = this.thickness * this.radius;
  var barRadius = this.radius - lineWidth / 2;
  var centerRadius = this.radius - lineWidth;
  var canvas = this.canvas,
    context = this.context;

  // Draw track
  if (this.trackColor && lineWidth > 0) {
    context.save();
    (0, _DrawCircle.default)(canvas, context, x, x, barRadius, barRadius, undefined, this.trackColor, lineWidth);
    context.restore();
  }

  // Draw bar
  if (this.barColor && barRadius > 0) {
    var anticlockwise, startAngle, endAngle;
    if (this.value === 1) {
      anticlockwise = false;
      startAngle = 0;
      endAngle = 2 * Math.PI;
    } else {
      anticlockwise = this.anticlockwise;
      startAngle = this.startAngle;
      var deltaAngle = 2 * Math.PI * (anticlockwise ? 1 - this.value : this.value);
      endAngle = deltaAngle + startAngle;
    }
    context.save();
    (0, _DrawCircle.default)(canvas, context, x, x, barRadius, barRadius, undefined, this.barColor, lineWidth, startAngle, endAngle, anticlockwise);
    context.restore();
  }

  // Draw center
  if (this.centerColor && centerRadius > 0) {
    var fillStyle;
    if (this.centerColor2) {
      fillStyle = this.context.createRadialGradient(x, x, 0, x, x, centerRadius);
      fillStyle.addColorStop(0, this.centerColor);
      fillStyle.addColorStop(1, this.centerColor2);
    } else {
      fillStyle = this.centerColor;
    }
    context.save();
    (0, _DrawCircle.default)(canvas, context, x, x, centerRadius, centerRadius, fillStyle);
    context.restore();
  }

  // Draw text
  if (this.textFormatCallback && (this.textColor || this.textStrokeColor)) {
    context.save();
    (0, _DrawText.default)(canvas, context, x, x, this.getFormatText(), this.textFont, this.textColor, this.textStrokeColor, this.textStrokeThickness, 'center',
    // textAlign
    'middle' // textBaseline
    );

    context.restore();
  }
};
var _default = DrawContent;
exports.default = _default;
},{"../../../utils/canvas/DrawCircle.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/DrawCircle.js","../../../utils/canvas/DrawText.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/DrawText.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/circularprogress/CircularProgress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Canvas = _interopRequireDefault(require("../canvasbase/Canvas.js"));
var _ProgressBase = _interopRequireDefault(require("../../../utils/progressbase/ProgressBase.js"));
var _GetStyle = _interopRequireDefault(require("../../../utils/canvas/GetStyle.js"));
var _DrawContent = _interopRequireDefault(require("./DrawContent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const Clamp = Phaser.Math.Clamp;
const DefaultStartAngle = Phaser.Math.DegToRad(270);
class CircularProgress extends (0, _ProgressBase.default)(_Canvas.default) {
  constructor(scene, x, y, radius, barColor, value, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      radius = GetValue(config, 'radius', 1);
      barColor = GetValue(config, 'barColor', undefined);
      value = GetValue(config, 'value', 0);
    }
    var width = radius * 2;
    super(scene, x, y, width, width);
    this.type = 'rexCircularProgressCanvas';
    this.bootProgressBase(config);
    this.setRadius(radius);
    this.setTrackColor(GetValue(config, 'trackColor', undefined));
    this.setBarColor(barColor);
    this.setCenterColor(GetValue(config, 'centerColor', undefined));
    this.setThickness(GetValue(config, 'thickness', 0.2));
    this.setStartAngle(GetValue(config, 'startAngle', DefaultStartAngle));
    this.setAnticlockwise(GetValue(config, 'anticlockwise', false));
    this.setTextColor(GetValue(config, 'textColor', undefined));
    this.setTextStrokeColor(GetValue(config, 'textStrokeColor', undefined), GetValue(config, 'textStrokeThickness', undefined));
    var textFont = GetValue(config, 'textFont', undefined);
    if (textFont) {
      this.setTextFont(textFont);
    } else {
      this.setTextFont(GetValue(config, 'textSize', '16px'), GetValue(config, 'textFamily', 'Courier'), GetValue(config, 'textStyle', ''));
    }
    this.setTextFormatCallback(GetValue(config, 'textFormatCallback', undefined), GetValue(config, 'textFormatCallbackScope', undefined));
    this.setValue(value);
  }
  resize(width, height) {
    width = Math.floor(Math.min(width, height));
    if (width === this.width) {
      return this;
    }
    super.resize(width, width);
    this.setRadius(width / 2);
    return this;
  }
  get radius() {
    return this._radius;
  }
  set radius(value) {
    this.dirty = this.dirty || this._radius != value;
    this._radius = value;
    var width = value * 2;
    this.resize(width, width);
  }
  setRadius(radius) {
    this.radius = radius;
    return this;
  }
  get trackColor() {
    return this._trackColor;
  }
  set trackColor(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.dirty = this.dirty || this._trackColor != value;
    this._trackColor = value;
  }
  setTrackColor(color) {
    this.trackColor = color;
    return this;
  }
  get barColor() {
    return this._barColor;
  }
  set barColor(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.dirty = this.dirty || this._barColor != value;
    this._barColor = value;
  }
  setBarColor(color) {
    this.barColor = color;
    return this;
  }
  get startAngle() {
    return this._startAngle;
  }
  set startAngle(value) {
    this.dirty = this.dirty || this._startAngle != value;
    this._startAngle = value;
  }
  setStartAngle(angle) {
    this.startAngle = angle;
    return this;
  }
  get anticlockwise() {
    return this._anticlockwise;
  }
  set anticlockwise(value) {
    this.dirty = this.dirty || this._anticlockwise != value;
    this._anticlockwise = value;
  }
  setAnticlockwise(anticlockwise) {
    if (anticlockwise === undefined) {
      anticlockwise = true;
    }
    this.anticlockwise = anticlockwise;
    return this;
  }
  get thickness() {
    return this._thickness;
  }
  set thickness(value) {
    value = Clamp(value, 0, 1);
    this.dirty = this.dirty || this._thickness != value;
    this._thickness = value;
  }
  setThickness(thickness) {
    this.thickness = thickness;
    return this;
  }
  get centerColor() {
    return this._centerColor;
  }
  set centerColor(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.dirty = this.dirty || this._centerColor != value;
    this._centerColor = value;
  }
  get centerColor2() {
    return this._centerColor2;
  }
  set centerColor2(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.dirty = this.dirty || this._centerColor2 != value;
    this._centerColor2 = value;
  }
  setCenterColor(color, color2) {
    this.centerColor = color;
    this.centerColor2 = color2;
    return this;
  }
  get textColor() {
    return this._textColor;
  }
  set textColor(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.dirty = this.dirty || this._textColor != value;
    this._textColor = value;
  }
  setTextColor(color) {
    this.textColor = color;
    return this;
  }
  get textStrokeColor() {
    return this._textStrokeColor;
  }
  set textStrokeColor(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.dirty = this.dirty || this._textStrokeColor != value;
    this._textStrokeColor = value;
  }
  get textStrokeThickness() {
    return this._textStrokeThickness;
  }
  set textStrokeThickness(value) {
    this.dirty = this.dirty || this._textStrokeThickness != value;
    this._textStrokeThickness = value;
  }
  setTextStrokeColor(color, thickness) {
    if (thickness === undefined) {
      thickness = 2;
    }
    this.textStrokeColor = color;
    this.textStrokeThickness = thickness;
    return this;
  }
  get textFont() {
    return this._textFont;
  }
  set textFont(value) {
    this.dirty = this.dirty || this._textFont != value;
    this._textFont = value;
  }
  setTextFont(fontSize, fontFamily, fontStyle) {
    var font;
    if (fontFamily === undefined) {
      font = fontSize;
    } else {
      font = fontStyle + ' ' + fontSize + ' ' + fontFamily;
    }
    this.textFont = font;
    return this;
  }
  setTextFormatCallback(callback, scope) {
    this.textFormatCallback = callback;
    this.textFormatCallbackScope = scope;
    return this;
  }
  updateTexture() {
    this.clear();
    _DrawContent.default.call(this);
    super.updateTexture();
    return this;
  }
  getFormatText(value) {
    if (value === undefined) {
      value = this.value;
    }
    var text;
    if (this.textFormatCallbackScope) {
      text = this.textFormatCallback(value);
    } else {
      text = this.textFormatCallback.call(this.textFormatCallbackScope, value);
    }
    return text;
  }
}
var _default = CircularProgress;
exports.default = _default;
},{"../canvasbase/Canvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/Canvas.js","../../../utils/progressbase/ProgressBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/progressbase/ProgressBase.js","../../../utils/canvas/GetStyle.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/GetStyle.js","./DrawContent.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/circularprogress/DrawContent.js"}],"node_modules/phaser3-rex-plugins/plugins/circularprogresscanvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CircularProgress = _interopRequireDefault(require("./gameobjects/canvas/circularprogress/CircularProgress.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _CircularProgress.default;
exports.default = _default;
},{"./gameobjects/canvas/circularprogress/CircularProgress.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/circularprogress/CircularProgress.js"}],"node_modules/phaser3-rex-plugins/templates/ui/circularprogresscanvas/CircularProgressCanvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _circularprogresscanvas = _interopRequireDefault(require("../../../plugins/circularprogresscanvas.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _circularprogresscanvas.default;
exports.default = _default;
},{"../../../plugins/circularprogresscanvas.js":"node_modules/phaser3-rex-plugins/plugins/circularprogresscanvas.js"}],"node_modules/phaser3-rex-plugins/templates/ui/circularprogresscanvas/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CircularProgressCanvas = _interopRequireDefault(require("./CircularProgressCanvas.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('circularProgressCanvas', function (x, y, radius, barColor, value, config) {
  var gameObject = new _CircularProgressCanvas.default(this.scene, x, y, radius, barColor, value, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.CircularProgressCanvas', _CircularProgressCanvas.default);
var _default = _CircularProgressCanvas.default;
exports.default = _default;
},{"./CircularProgressCanvas.js":"node_modules/phaser3-rex-plugins/templates/ui/circularprogresscanvas/CircularProgressCanvas.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/lineprogress/UpdateShapes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var UpdateShapes = function () {
  var skewX = this.skewX;
  var width = this.width - Math.abs(skewX);
  var height = this.height;
  var trackFill = this.getShape('trackFill');
  trackFill.fillStyle(this.trackColor);
  if (trackFill.isFilled) {
    BuildRectangle(trackFill,
    // lines
    0, 0,
    // x0, y0
    width, height,
    // x1, y1
    skewX // skewX
    ).close();
  }
  var bar = this.getShape('bar');
  bar.fillStyle(this.barColor);
  if (bar.isFilled) {
    var barX0, barX1;
    if (!this.rtl) {
      barX0 = 0;
      barX1 = width * this.value;
    } else {
      barX0 = width * (1 - this.value);
      barX1 = width;
    }
    BuildRectangle(bar,
    // lines
    barX0, 0,
    // x0, y0
    barX1, height,
    // x1, y1
    skewX // skew
    ).close();
  }
  var trackStroke = this.getShape('trackStroke');
  trackStroke.lineStyle(this.trackStrokeThickness, this.trackStrokeColor);
  if (trackStroke.isStroked) {
    BuildRectangle(trackStroke,
    // lines            
    0, 0,
    // x0, y0
    width, height,
    // x1, y1
    skewX // skewX
    ).end();
  }
};
var BuildRectangle = function (lines, x0, y0, x1, y1, skewX) {
  if (skewX >= 0) {
    lines.startAt(x0 + skewX, y0).lineTo(x1 + skewX, y0).lineTo(x1, y1).lineTo(x0, y1).lineTo(x0 + skewX, y0);
  } else {
    lines.startAt(x0, y0).lineTo(x1, y0).lineTo(x1 - skewX, y1).lineTo(x0 - skewX, y1).lineTo(x0, y0);
  }
  return lines;
};
var _default = UpdateShapes;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/lineprogress/LineProgress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseShapes = _interopRequireDefault(require("../shapes/BaseShapes.js"));
var _ProgressBase = _interopRequireDefault(require("../../../utils/progressbase/ProgressBase.js"));
var _geoms = require("../shapes/geoms");
var _UpdateShapes = _interopRequireDefault(require("./UpdateShapes.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class LineProgress extends (0, _ProgressBase.default)(_BaseShapes.default) {
  constructor(scene, x, y, width, height, barColor, value, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      width = GetValue(config, 'width', 2);
      height = GetValue(config, 'height', 2);
      barColor = GetValue(config, 'barColor', undefined);
      value = GetValue(config, 'value', 0);
    } else if (IsPlainObject(width)) {
      config = width;
      width = GetValue(config, 'width', 2);
      height = GetValue(config, 'height', 2);
      barColor = GetValue(config, 'barColor', undefined);
      value = GetValue(config, 'value', 0);
    } else if (IsPlainObject(barColor)) {
      config = barColor;
      barColor = GetValue(config, 'barColor', undefined);
      value = GetValue(config, 'value', 0);
    }
    super(scene, x, y, width, height, config);
    this.type = 'rexLineProgress';
    this.bootProgressBase(config);
    this.addShape(new _geoms.Lines().setName('trackFill')).addShape(new _geoms.Lines().setName('bar')).addShape(new _geoms.Lines().setName('trackStroke'));
    this.setTrackColor(GetValue(config, 'trackColor', undefined));
    this.setBarColor(barColor);
    this.setTrackStroke(GetValue(config, 'trackStrokeThickness', 2), GetValue(config, 'trackStrokeColor', undefined));
    this.setSkewX(GetValue(config, 'skewX', 0));
    this.setRTL(GetValue(config, 'rtl', false));
    this.setValue(value);
  }
  get trackColor() {
    return this._trackColor;
  }
  set trackColor(value) {
    this.dirty = this.dirty || this._trackColor != value;
    this._trackColor = value;
  }
  setTrackColor(color) {
    this.trackColor = color;
    return this;
  }
  get trackStrokeColor() {
    return this._trackStrokeColor;
  }
  set trackStrokeColor(value) {
    this.dirty = this.dirty || this._trackStrokeColor != value;
    this._trackStrokeColor = value;
  }
  get trackStrokeThickness() {
    return this._trackStrokeThickness;
  }
  set trackStrokeThickness(value) {
    this.dirty = this.dirty || this._trackStrokeThickness != value;
    this._trackStrokeThickness = value;
  }
  setTrackStroke(lineWidth, color) {
    this.trackStrokeThickness = lineWidth;
    this.trackStrokeColor = color;
    return this;
  }
  get barColor() {
    return this._barColor;
  }
  set barColor(value) {
    this.dirty = this.dirty || this._barColor != value;
    this._barColor = value;
  }
  setBarColor(color) {
    this.barColor = color;
    return this;
  }
  get skewX() {
    return this._skewX;
  }
  set skewX(value) {
    this.dirty = this.dirty || this._skewX != value;
    this._skewX = value;
  }
  setSkewX(value) {
    this.skewX = value;
    return this;
  }
  get rtl() {
    return this._rtl;
  }
  set rtl(value) {
    value = !!value;
    this.dirty = this.dirty || this._rtl != value;
    this._rtl = value;
  }
  setRTL(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.rtl = enable;
    return this;
  }
}
var Methods = {
  updateShapes: _UpdateShapes.default
};
Object.assign(LineProgress.prototype, Methods);
var _default = LineProgress;
exports.default = _default;
},{"../shapes/BaseShapes.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/BaseShapes.js","../../../utils/progressbase/ProgressBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/progressbase/ProgressBase.js","../shapes/geoms":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/index.js","./UpdateShapes.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/lineprogress/UpdateShapes.js"}],"node_modules/phaser3-rex-plugins/plugins/lineprogress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _LineProgress = _interopRequireDefault(require("./gameobjects/shape/lineprogress/LineProgress.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _LineProgress.default;
exports.default = _default;
},{"./gameobjects/shape/lineprogress/LineProgress.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/lineprogress/LineProgress.js"}],"node_modules/phaser3-rex-plugins/templates/ui/lineprogress/LineProgress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lineprogress = _interopRequireDefault(require("../../../plugins/lineprogress.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _lineprogress.default;
exports.default = _default;
},{"../../../plugins/lineprogress.js":"node_modules/phaser3-rex-plugins/plugins/lineprogress.js"}],"node_modules/phaser3-rex-plugins/templates/ui/lineprogress/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _LineProgress = _interopRequireDefault(require("./LineProgress.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('lineProgress', function (x, y, width, height, barColor, value, config) {
  var gameObject = new _LineProgress.default(this.scene, x, y, width, height, barColor, value, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.LineProgress', _LineProgress.default);
var _default = _LineProgress.default;
exports.default = _default;
},{"./LineProgress.js":"node_modules/phaser3-rex-plugins/templates/ui/lineprogress/LineProgress.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/canvas/DrawPolygon.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var DrawPolygon = function (canvas, context, points, fillStyle, strokeStyle, lineWidth, lineJoin) {
  if (lineJoin === undefined) {
    lineJoin = 'round';
  }
  context.beginPath();
  context.lineJoin = lineJoin;
  var point = points[0];
  context.moveTo(point.x, point.y);
  for (var i = 1, cnt = points.length; i < cnt; i++) {
    point = points[i];
    context.lineTo(point.x, point.y);
  }
  context.closePath();
  if (fillStyle != null) {
    context.fillStyle = fillStyle;
    context.fill();
  }
  if (strokeStyle != null) {
    context.strokeStyle = strokeStyle;
    context.lineWidth = lineWidth;
    context.stroke();
  }
};
var _default = DrawPolygon;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/lineprogress/DrawContent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DrawPolygon = _interopRequireDefault(require("../../../utils/canvas/DrawPolygon.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DrawContent = function () {
  var skewX = this.skewX;
  var width = this.width - Math.abs(skewX);
  var height = this.height;
  var canvas = this.canvas,
    context = this.context;

  // Has track
  if (this.trackColor || this.trackStrokeColor) {
    BuildPolygon(0, 0,
    // x0, y0
    width, height,
    // x1, y1
    skewX,
    // skewX
    this.trackPoints);
  }

  // Has bar
  var barX0, barX1;
  if (this.barColor) {
    if (!this.rtl) {
      barX0 = 0;
      barX1 = width * this.value;
    } else {
      barX0 = width * (1 - this.value);
      barX1 = width;
    }
    BuildPolygon(barX0, 0,
    // x0, y0
    barX1, height,
    // x1, y1
    skewX,
    // skewX
    this.barPoints);
  }
  if (this.trackColor) {
    context.save();
    (0, _DrawPolygon.default)(canvas, context, this.trackPoints, this.trackColor);
    context.restore();
  }
  if (this.barColor) {
    context.save();
    var style;
    if (this.barColor2) {
      var grd;
      if (this.isHorizontalGradient) {
        var helfHeight = height / 2;
        grd = context.createLinearGradient(barX0, helfHeight, barX1, helfHeight);
      } else {
        var helfWidth = width / 2;
        grd = context.createLinearGradient(helfWidth, 0, helfWidth, height);
      }
      grd.addColorStop(0, this.rtl ? this.barColor : this.barColor2);
      grd.addColorStop(1, this.rtl ? this.barColor2 : this.barColor);
      style = grd;
    } else {
      style = this.barColor;
    }
    (0, _DrawPolygon.default)(canvas, context, this.barPoints, style);
    context.restore();
  }
  if (this.trackStrokeColor && this.trackStrokeThickness > 0) {
    context.save();
    (0, _DrawPolygon.default)(canvas, context, this.trackPoints, undefined, this.trackStrokeColor, this.trackStrokeThickness);
    context.restore();
  }
};
var BuildPolygon = function (x0, y0, x1, y1, skewX, out) {
  if (out === undefined) {
    out = [];
  }
  out.length = 4;
  for (var i = 0; i < 4; i++) {
    if (!out[i]) {
      out[i] = {};
    }
  }
  var p;
  if (skewX >= 0) {
    p = out[0];
    p.x = x0 + skewX;
    p.y = y0;
    p = out[1];
    p.x = x1 + skewX;
    p.y = y0;
    p = out[2];
    p.x = x1;
    p.y = y1;
    p = out[3];
    p.x = x0;
    p.y = y1;
  } else {
    p = out[0];
    p.x = x0;
    p.y = y0;
    p = out[1];
    p.x = x1;
    p.y = y0;
    p = out[2];
    p.x = x1 - skewX;
    p.y = y1;
    p = out[3];
    p.x = x0 - skewX;
    p.y = y1;
  }
  return out;
};
var _default = DrawContent;
exports.default = _default;
},{"../../../utils/canvas/DrawPolygon.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/DrawPolygon.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/lineprogress/LineProgress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Canvas = _interopRequireDefault(require("../canvasbase/Canvas.js"));
var _ProgressBase = _interopRequireDefault(require("../../../utils/progressbase/ProgressBase.js"));
var _GetStyle = _interopRequireDefault(require("../../../utils/canvas/GetStyle.js"));
var _DrawContent = _interopRequireDefault(require("./DrawContent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class LineProgress extends (0, _ProgressBase.default)(_Canvas.default) {
  constructor(scene, x, y, width, height, barColor, value, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      width = GetValue(config, 'width', 2);
      height = GetValue(config, 'height', 2);
      barColor = GetValue(config, 'barColor', undefined);
      value = GetValue(config, 'value', 0);
    } else if (IsPlainObject(width)) {
      config = width;
      width = GetValue(config, 'width', 2);
      height = GetValue(config, 'height', 2);
      barColor = GetValue(config, 'barColor', undefined);
      value = GetValue(config, 'value', 0);
    } else if (IsPlainObject(barColor)) {
      config = barColor;
      barColor = GetValue(config, 'barColor', undefined);
      value = GetValue(config, 'value', 0);
    }
    super(scene, x, y, width, height);
    this.type = 'rexLineProgressCanvas';
    this.trackPoints = [];
    this.barPoints = [];
    this.bootProgressBase(config);
    this.setTrackColor(GetValue(config, 'trackColor', undefined));
    this.setBarColor(barColor, GetValue(config, 'barColor2', undefined), GetValue(config, 'isHorizontalGradient', undefined));
    this.setTrackStroke(GetValue(config, 'trackStrokeThickness', 2), GetValue(config, 'trackStrokeColor', undefined));
    this.setSkewX(GetValue(config, 'skewX', 0));
    this.setRTL(GetValue(config, 'rtl', false));
    this.setValue(value);
  }
  get trackColor() {
    return this._trackColor;
  }
  set trackColor(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.dirty = this.dirty || this._trackColor != value;
    this._trackColor = value;
  }
  setTrackColor(color) {
    this.trackColor = color;
    return this;
  }
  get trackStrokeColor() {
    return this._trackStrokeColor;
  }
  set trackStrokeColor(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.dirty = this.dirty || this._trackStrokeColor != value;
    this._trackStrokeColor = value;
  }
  get trackStrokeThickness() {
    return this._trackStrokeThickness;
  }
  set trackStrokeThickness(value) {
    this.dirty = this.dirty || this._trackStrokeThickness != value;
    this._trackStrokeThickness = value;
  }
  setTrackStroke(lineWidth, color) {
    this.trackStrokeThickness = lineWidth;
    this.trackStrokeColor = color;
    return this;
  }
  get barColor() {
    return this._barColor;
  }
  set barColor(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.dirty = this.dirty || this._barColor != value;
    this._barColor = value;
  }
  get barColor2() {
    return this._barColor2;
  }
  set barColor2(value) {
    value = (0, _GetStyle.default)(value, this.canvas, this.context);
    this.dirty = this.dirty || this._barColor2 != value;
    this._barColor2 = value;
  }
  get isHorizontalGradient() {
    return this._isHorizontalGradient;
  }
  set isHorizontalGradient(value) {
    this.dirty |= this._isHorizontalGradient != value;
    this._isHorizontalGradient = value;
  }
  setBarColor(color, color2, isHorizontalGradient) {
    if (isHorizontalGradient === undefined) {
      isHorizontalGradient = true;
    }
    this.barColor = color;
    this.barColor2 = color2;
    this.isHorizontalGradient = isHorizontalGradient;
    return this;
  }
  get skewX() {
    return this._skewX;
  }
  set skewX(value) {
    this.dirty = this.dirty || this._skewX != value;
    this._skewX = value;
  }
  setSkewX(value) {
    this.skewX = value;
    return this;
  }
  get rtl() {
    return this._rtl;
  }
  set rtl(value) {
    value = !!value;
    this.dirty = this.dirty || this._rtl != value;
    this._rtl = value;
  }
  setRTL(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.rtl = enable;
    return this;
  }
  updateTexture() {
    this.clear();
    _DrawContent.default.call(this);
    super.updateTexture();
    return this;
  }
}
var _default = LineProgress;
exports.default = _default;
},{"../canvasbase/Canvas.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/canvasbase/Canvas.js","../../../utils/progressbase/ProgressBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/progressbase/ProgressBase.js","../../../utils/canvas/GetStyle.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/GetStyle.js","./DrawContent.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/lineprogress/DrawContent.js"}],"node_modules/phaser3-rex-plugins/plugins/lineprogresscanvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _LineProgress = _interopRequireDefault(require("./gameobjects/canvas/lineprogress/LineProgress.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _LineProgress.default;
exports.default = _default;
},{"./gameobjects/canvas/lineprogress/LineProgress.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/canvas/lineprogress/LineProgress.js"}],"node_modules/phaser3-rex-plugins/templates/ui/lineprogresscanvas/LineProgressCanvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lineprogresscanvas = _interopRequireDefault(require("../../../plugins/lineprogresscanvas.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _lineprogresscanvas.default;
exports.default = _default;
},{"../../../plugins/lineprogresscanvas.js":"node_modules/phaser3-rex-plugins/plugins/lineprogresscanvas.js"}],"node_modules/phaser3-rex-plugins/templates/ui/lineprogresscanvas/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _LineProgressCanvas = _interopRequireDefault(require("./LineProgressCanvas.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('circularProgressCanvas', function (x, y, width, height, barColor, value, config) {
  var gameObject = new _LineProgressCanvas.default(this.scene, x, y, width, height, barColor, value, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.LineProgressCanvas', _LineProgressCanvas.default);
var _default = _LineProgressCanvas.default;
exports.default = _default;
},{"./LineProgressCanvas.js":"node_modules/phaser3-rex-plugins/templates/ui/lineprogresscanvas/LineProgressCanvas.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/triangle/methods/DrawFitTriangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Wrap = Phaser.Math.Wrap;
const Linear = Phaser.Math.Linear;
var DrawFitTriangle = function () {
  var triangle = this.getShape('triangle');
  var padding = this.padding;
  var right = this.width - padding.right;
  var left = 0 + padding.left;
  var bottom = this.height - padding.bottom;
  var top = 0 + padding.top;
  var centerX = (left + right) / 2;
  var centerY = (top + bottom) / 2;
  var points = {
    0: {
      // right
      a: {
        x: left,
        y: top
      },
      b: {
        x: right,
        y: centerY
      },
      c: {
        x: left,
        y: bottom
      }
    },
    1: {
      // down
      a: {
        x: left,
        y: top
      },
      b: {
        x: centerX,
        y: bottom
      },
      c: {
        x: right,
        y: top
      }
    },
    2: {
      // left
      a: {
        x: right,
        y: top
      },
      b: {
        x: left,
        y: centerY
      },
      c: {
        x: right,
        y: bottom
      }
    },
    3: {
      // up
      a: {
        x: left,
        y: bottom
      },
      b: {
        x: centerX,
        y: top
      },
      c: {
        x: right,
        y: bottom
      }
    }
  };
  var pax, pay, pbx, pby, pcx, pcy;
  if (this.previousDirection === undefined) {
    var currentTrianglePoints = points[this.direction];
    var pa = currentTrianglePoints.a,
      pb = currentTrianglePoints.b,
      pc = currentTrianglePoints.c;
    pax = pa.x;
    pay = pa.y;
    pbx = pb.x;
    pby = pb.y;
    pcx = pc.x;
    pcy = pc.y;
  } else {
    var p0 = points[this.previousDirection];
    var p1 = points[this.direction];
    var t = this.easeDirectionProgress;
    pax = Linear(p0.a.x, p1.a.x, t);
    pay = Linear(p0.a.y, p1.a.y, t);
    pbx = Linear(p0.b.x, p1.b.x, t);
    pby = Linear(p0.b.y, p1.b.y, t);
    pcx = Linear(p0.c.x, p1.c.x, t);
    pcy = Linear(p0.c.y, p1.c.y, t);
  }
  triangle.startAt(pax, pay).lineTo(pbx, pby).lineTo(pcx, pcy);
  if (!this.arrowOnly) {
    triangle.close();
  } else {
    triangle.end();
  }
};
var _default = DrawFitTriangle;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/triangle/methods/DrawCircleVerticesTriangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const DegToRad = Phaser.Math.DegToRad;
const Rad120 = DegToRad(120);
var DrawCircleVerticesTriangle = function (triangle) {
  var triangle = this.getShape('triangle');
  var centerX = this.width / 2,
    centerY = this.height / 2;
  var radius = Math.min(centerX, centerY) * this.radius,
    verticeRotation = this.verticeRotation;
  triangle.startAt(centerX + radius * Math.cos(verticeRotation + Rad120), centerY + radius * Math.sin(verticeRotation + Rad120)).lineTo(centerX + radius * Math.cos(verticeRotation), centerY + radius * Math.sin(verticeRotation)).lineTo(centerX + radius * Math.cos(verticeRotation - Rad120), centerY + radius * Math.sin(verticeRotation - Rad120));
  if (!this.arrowOnly) {
    triangle.close();
  } else {
    triangle.end();
  }
};
var _default = DrawCircleVerticesTriangle;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/triangle/methods/ShapesUpdateMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _geoms = require("../../shapes/geoms");
var _DrawFitTriangle = _interopRequireDefault(require("./DrawFitTriangle.js"));
var _DrawCircleVerticesTriangle = _interopRequireDefault(require("./DrawCircleVerticesTriangle"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  buildShapes() {
    this.addShape(new _geoms.Lines().setName('triangle'));
  },
  updateShapes() {
    // Set style
    var triangle = this.getShape('triangle');
    if (!this.arrowOnly) {
      triangle.fillStyle(this.fillColor, this.fillAlpha).lineStyle(this.lineWidth, this.strokeColor, this.strokeAlpha);
    } else {
      triangle.fillStyle().lineStyle(this.lineWidth, this.strokeColor, this.strokeAlpha);
    }

    // Set points
    if (this.shapeMode === 0) {
      _DrawFitTriangle.default.call(this);
    } else {
      _DrawCircleVerticesTriangle.default.call(this);
    }
  }
};
exports.default = _default;
},{"../../shapes/geoms":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/index.js","./DrawFitTriangle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/triangle/methods/DrawFitTriangle.js","./DrawCircleVerticesTriangle":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/triangle/methods/DrawCircleVerticesTriangle.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/triangle/methods/EaseDirectionMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseValueTask = _interopRequireDefault(require("../../../../utils/ease/EaseValueTask.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  setEaseDuration(duration) {
    if (duration === undefined) {
      duration = 0;
    }
    this.easeDuration = duration;
    return this;
  },
  playEaseDirectionation() {
    if (this.easeDirectionProgressTask === undefined) {
      this.easeDirectionProgressTask = new _EaseValueTask.default(this, {
        eventEmitter: null
      });
    }
    this.easeDirectionProgressTask.restart({
      key: 'easeDirectionProgress',
      from: 0,
      to: 1,
      duration: this.easeDuration
    });
    return this;
  },
  stopEaseDirection() {
    if (this.easeDirectionProgressTask === undefined) {
      return this;
    }
    this.easeDirectionProgressTask.stop();
    return this;
  }
};
exports.default = _default;
},{"../../../../utils/ease/EaseValueTask.js":"node_modules/phaser3-rex-plugins/plugins/utils/ease/EaseValueTask.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/triangle/Triangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseShapes = _interopRequireDefault(require("../shapes/BaseShapes.js"));
var _ShapesUpdateMethods = _interopRequireDefault(require("./methods/ShapesUpdateMethods.js"));
var _EaseDirectionMethods = _interopRequireDefault(require("./methods/EaseDirectionMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const DegToRad = Phaser.Math.DegToRad;
const RadToDeg = Phaser.Math.RadToDeg;
class Triangle extends _BaseShapes.default {
  constructor(scene, x, y, width, height, fillColor, fillAlpha) {
    var strokeColor, strokeAlpha, strokeWidth, arrowOnly;
    var direction, easeDuration, padding;
    var radius;
    if (IsPlainObject(x)) {
      var config = x;
      x = config.x;
      y = config.y;
      width = config.width;
      height = config.height;
      fillColor = config.color;
      fillAlpha = config.alpha;
      strokeColor = config.strokeColor;
      strokeAlpha = config.strokeAlpha;
      strokeWidth = config.strokeWidth;
      arrowOnly = config.arrowOnly;
      direction = config.direction;
      easeDuration = config.easeDuration;
      padding = config.padding;
      radius = config.radius;
    }
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (width === undefined) {
      width = 1;
    }
    if (height === undefined) {
      height = width;
    }
    if (arrowOnly === undefined) {
      arrowOnly = false;
    }
    if (direction === undefined) {
      direction = 0;
    }
    if (easeDuration === undefined) {
      easeDuration = 0;
    }
    if (padding === undefined) {
      padding = 0;
    }
    if (radius === undefined) {
      radius = undefined;
    }
    super(scene, x, y, width, height);
    this.type = 'rexTriangle';
    this.setFillStyle(fillColor, fillAlpha);
    if (strokeColor !== undefined && strokeWidth === undefined) {
      strokeWidth = 2;
    }
    this.setStrokeStyle(strokeWidth, strokeColor, strokeAlpha);
    this.setArrowOnly(arrowOnly);
    this.setDirection(direction, easeDuration);
    this.setPadding(padding);
    this.setRadius(radius);
    this.buildShapes();
  }
  get arrowOnly() {
    return this._arrowOnly;
  }
  set arrowOnly(value) {
    this.dirty = this.dirty || this._arrowOnly != value;
    this._arrowOnly = value;
  }
  setArrowOnly(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.arrowOnly = enable;
    return this;
  }
  get direction() {
    return this._direction;
  }
  set direction(value) {
    value = ParseDirection(value);
    if (this._direction === value) {
      return;
    }
    if (this.easeDuration > 0 && this._direction !== undefined) {
      this.previousDirection = this._direction;
    } else {
      this.previousDirection = undefined;
    }
    this._direction = value;
    this.verticeAngle = value * 90;
    this.dirty = true;
    if (this.previousDirection !== undefined) {
      this.playEaseDirectionation();
    } else {
      this.stopEaseDirection();
    }
  }
  setDirection(direction, easeDuration) {
    if (easeDuration !== undefined) {
      this.setEaseDuration(easeDuration);
    }
    this.direction = direction;
    return this;
  }
  toggleDirection(easeDuration) {
    this.setDirection(this.direction + 2, easeDuration);
    return this;
  }
  get easeDirectionProgress() {
    return this._easeDirectionProgress;
  }
  set easeDirectionProgress(value) {
    if (this._easeDirectionProgress === value) {
      return;
    }
    this._easeDirectionProgress = value;
    this.dirty = true;
  }
  setPadding(left, top, right, bottom) {
    if (typeof left === 'object') {
      var config = left;

      //  If they specify x and/or y this applies to all
      var x = GetValue(config, 'x', null);
      if (x !== null) {
        left = x;
        right = x;
      } else {
        left = GetValue(config, 'left', 0);
        right = GetValue(config, 'right', left);
      }
      var y = GetValue(config, 'y', null);
      if (y !== null) {
        top = y;
        bottom = y;
      } else {
        top = GetValue(config, 'top', 0);
        bottom = GetValue(config, 'bottom', top);
      }
    } else {
      if (left === undefined) {
        left = 0;
      }
      if (top === undefined) {
        top = left;
      }
      if (right === undefined) {
        right = left;
      }
      if (bottom === undefined) {
        bottom = top;
      }
    }
    if (this.padding === undefined) {
      this.padding = {};
    }
    this.dirty = this.dirty || this.padding.left != left || this.padding.top != top || this.padding.right != right || this.padding.bottom != bottom;
    this.padding.left = left;
    this.padding.top = top;
    this.padding.right = right;
    this.padding.bottom = bottom;

    // Switch to fit mode
    this.setRadius();
    return this;
  }
  get radius() {
    return this._radius;
  }
  set radius(value) {
    this.dirty = this.dirty || this._radius != value;
    this._radius = value;
  }
  setRadius(radius) {
    this.radius = radius;

    // 0: fit mode
    // 1: circle mode
    this.shapeMode = radius == null ? 0 : 1;
    return this;
  }
  get verticeRotation() {
    return this._verticeRotation;
  }
  set verticeRotation(value) {
    this.dirty = this.dirty || this._verticeRotation != value;
    this._verticeRotation = value;
  }
  setVerticeRotation(rotation) {
    this.verticeRotation = rotation;
    return this;
  }
  get verticeAngle() {
    return RadToDeg(this.verticeRotation);
  }
  set verticeAngle(value) {
    this.verticeRotation = DegToRad(value);
  }
  setVerticeAngle(angle) {
    this.verticeAngle = angle;
    return this;
  }
}
const DirectionNameMap = {
  right: 0,
  down: 1,
  left: 2,
  up: 3
};
var ParseDirection = function (direction) {
  if (typeof direction === 'string') {
    direction = DirectionNameMap[direction];
  }
  direction = direction % 4;
  return direction;
};
Object.assign(Triangle.prototype, _ShapesUpdateMethods.default, _EaseDirectionMethods.default);
var _default = Triangle;
exports.default = _default;
},{"../shapes/BaseShapes.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/BaseShapes.js","./methods/ShapesUpdateMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/triangle/methods/ShapesUpdateMethods.js","./methods/EaseDirectionMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/triangle/methods/EaseDirectionMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/triangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Triangle = _interopRequireDefault(require("./gameobjects/shape/triangle/Triangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _Triangle.default;
exports.default = _default;
},{"./gameobjects/shape/triangle/Triangle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/triangle/Triangle.js"}],"node_modules/phaser3-rex-plugins/templates/ui/triangle/Triangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _triangle = _interopRequireDefault(require("../../../plugins/triangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _triangle.default;
exports.default = _default;
},{"../../../plugins/triangle.js":"node_modules/phaser3-rex-plugins/plugins/triangle.js"}],"node_modules/phaser3-rex-plugins/templates/ui/triangle/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Triangle = _interopRequireDefault(require("./Triangle.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('triangle', function (x, y, width, height, fillColor, fillAlpha) {
  var gameObject = new _Triangle.default(this.scene, x, y, width, height, fillColor, fillAlpha);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Triangle', _Triangle.default);
var _default = _Triangle.default;
exports.default = _default;
},{"./Triangle.js":"node_modules/phaser3-rex-plugins/templates/ui/triangle/Triangle.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Base.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Zone = Phaser.GameObjects.Zone;
const AddItem = Phaser.Utils.Array.Add;
const RemoveItem = Phaser.Utils.Array.Remove;
class Base extends Zone {
  constructor(scene, x, y, width, height) {
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (width === undefined) {
      width = 1;
    }
    if (height === undefined) {
      height = 1;
    }
    super(scene, x, y, width, height);
    this.children = [];
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    if (fromScene) {
      // Stop scene
      var child;
      for (var i = this.children.length - 1; i >= 0; i--) {
        child = this.children[i];
        if (!child.parentContainer &&
        // Not in container
        !child.displayList // Not in scene, neither in layer
        ) {
          // Destroy child which is not in scene, container, or layer manually
          child.destroy(fromScene);
        }
      }
    }

    // Destroy/remove children
    this.clear(!fromScene);
    super.destroy(fromScene);
  }
  contains(gameObject) {
    return this.children.indexOf(gameObject) !== -1;
  }
  add(gameObjects) {
    var parent = this;
    AddItem(this.children, gameObjects, 0,
    // Callback of item added
    function (gameObject) {
      gameObject.once('destroy', parent.onChildDestroy, parent);
    }, this);
    return this;
  }
  remove(gameObjects, destroyChild) {
    var parent = this;
    RemoveItem(this.children, gameObjects,
    // Callback of item removed
    function (gameObject) {
      gameObject.off('destroy', parent.onChildDestroy, parent);
      if (destroyChild) {
        gameObject.destroy();
      }
    });
    return this;
  }
  onChildDestroy(child, fromScene) {
    // Only remove reference
    this.remove(child, false);
  }
  clear(destroyChild) {
    var parent = this;
    var gameObject;
    for (var i = 0, cnt = this.children.length; i < cnt; i++) {
      gameObject = this.children[i];
      gameObject.off('destroy', parent.onChildDestroy, parent);
      if (destroyChild) {
        gameObject.destroy();
      }
    }
    this.children.length = 0;
    return this;
  }
}
const Components = Phaser.GameObjects.Components;
Phaser.Class.mixin(Base, [Components.Alpha, Components.Flip]);
var _default = Base;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/GetParent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GetTopmostParent = exports.GetParent = void 0;
var GetParent = function (gameObject, name) {
  var parent;
  if (name === undefined) {
    if (gameObject.hasOwnProperty('rexContainer')) {
      parent = gameObject.rexContainer.parent;
    }
  } else {
    parent = GetParent(gameObject);
    while (parent) {
      if (parent.name === name) {
        break;
      }
      parent = GetParent(parent);
    }
  }
  return parent;
};
exports.GetParent = GetParent;
var GetTopmostParent = function (gameObject) {
  var parent = GetParent(gameObject);
  while (parent) {
    gameObject = parent;
    parent = GetParent(parent);
  }
  return gameObject;
};
exports.GetTopmostParent = GetTopmostParent;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetLocalState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const DegToRad = Phaser.Math.DegToRad;
const RadToDeg = Phaser.Math.RadToDeg;
var GetLocalState = function (gameObject) {
  if (!gameObject.hasOwnProperty('rexContainer')) {
    var rexContainer = {
      parent: null,
      self: null,
      layer: null,
      x: 0,
      y: 0,
      syncPosition: true,
      rotation: 0,
      syncRotation: true,
      scaleX: 0,
      scaleY: 0,
      syncScale: true,
      alpha: 0,
      syncAlpha: true,
      visible: true,
      active: true
    };
    Object.defineProperty(rexContainer, 'angle', {
      get: function () {
        return RadToDeg(this.rotation);
      },
      set: function (value) {
        this.rotation = DegToRad(value);
      }
    });
    Object.defineProperty(rexContainer, 'displayWidth', {
      get: function () {
        return gameObject.width * this.scaleX;
      },
      set: function (width) {
        this.scaleX = width / gameObject.width;
      }
    });
    Object.defineProperty(rexContainer, 'displayHeight', {
      get: function () {
        return gameObject.height * this.scaleY;
      },
      set: function (height) {
        this.scaleY = height / gameObject.height;
      }
    });
    gameObject.rexContainer = rexContainer;
  }
  return gameObject.rexContainer;
};
var _default = GetLocalState;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Parent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetParent = require("./GetParent.js");
var _GetLocalState = _interopRequireDefault(require("./utils/GetLocalState.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  setParent(gameObject, parent) {
    if (parent === undefined) {
      parent = this;
    }
    var localState = (0, _GetLocalState.default)(gameObject);
    if (parent) {
      // Add to parent
      localState.parent = parent;
      localState.self = gameObject;
    } else {
      // Remove from parent
      localState.parent = null;
      localState.self = null;
    }
    return this;
  },
  getParent(gameObject, name) {
    if (typeof gameObject === 'string') {
      name = gameObject;
      gameObject = undefined;
    }
    if (gameObject === undefined) {
      gameObject = this;
    }
    return (0, _GetParent.GetParent)(gameObject, name);
  },
  getTopmostParent(gameObject) {
    if (gameObject === undefined) {
      gameObject = this;
    }
    return (0, _GetParent.GetTopmostParent)(gameObject);
  }
};
exports.default = _default;
},{"./GetParent.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/GetParent.js","./utils/GetLocalState.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetLocalState.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/AddChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Base = _interopRequireDefault(require("./Base.js"));
var _GetLocalState = _interopRequireDefault(require("./utils/GetLocalState.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const BaseAdd = _Base.default.prototype.add;
var Add = function (gameObject, config) {
  this.setParent(gameObject);
  var state = (0, _GetLocalState.default)(gameObject);
  SetupSyncFlags(state, config);
  this.resetChildState(gameObject) // Reset local state of child
  .updateChildVisible(gameObject) // Apply parent's visible to child
  .updateChildActive(gameObject) // Apply parent's active to child
  .updateChildScrollFactor(gameObject) // Apply parent's scroll factor to child
  .updateChildMask(gameObject); // Apply parent's mask to child

  BaseAdd.call(this, gameObject);
  this.addToParentContainer(gameObject);
  this.addToRenderLayer(gameObject);
  return this;
};
var AddLocal = function (gameObject, config) {
  this.setParent(gameObject);

  // Set local state from child directly
  var state = (0, _GetLocalState.default)(gameObject);
  SetupSyncFlags(state, config);
  // Position
  state.x = gameObject.x;
  state.y = gameObject.y;
  state.rotation = gameObject.rotation;
  state.scaleX = gameObject.scaleX;
  state.scaleY = gameObject.scaleY;
  // Alpha
  state.alpha = gameObject.alpha;
  // Visible
  state.visible = gameObject.visible;
  // Active
  state.active = gameObject.active;
  this.updateChildPosition(gameObject).updateChildAlpha(gameObject).updateChildVisible(gameObject) // Apply parent's visible to child
  .updateChildActive(gameObject) // Apply parent's active to child
  .updateChildScrollFactor(gameObject) // Apply parent's scroll factor to child
  .updateChildMask(gameObject); // Apply parent's mask to child

  BaseAdd.call(this, gameObject);
  this.addToRenderLayer(gameObject);
  return this;
};
var SetupSyncFlags = function (state, config) {
  if (config === undefined) {
    config = true;
  }
  if (typeof config === 'boolean') {
    state.syncPosition = config;
    state.syncRotation = config;
    state.syncScale = config;
    state.syncAlpha = config;
    state.syncScrollFactor = config;
  } else {
    state.syncPosition = GetValue(config, 'syncPosition', true);
    state.syncRotation = GetValue(config, 'syncRotation', true);
    state.syncScale = GetValue(config, 'syncScale', true);
    state.syncAlpha = GetValue(config, 'syncAlpha', true);
    state.syncScrollFactor = GetValue(config, 'syncScrollFactor', true);
  }
};
var _default = {
  // Can override this method
  add(gameObject) {
    if (Array.isArray(gameObject)) {
      this.addMultiple(gameObject);
    } else {
      Add.call(this, gameObject);
    }
    return this;
  },
  // Don't override this method
  pin(gameObject, config) {
    if (Array.isArray(gameObject)) {
      this.addMultiple(gameObject, config);
    } else {
      Add.call(this, gameObject, config);
    }
    return this;
  },
  addMultiple(gameObjects) {
    for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
      Add.call(this, gameObjects[i]);
    }
    return this;
  },
  addLocal(gameObject) {
    if (Array.isArray(gameObject)) {
      this.addMultiple(gameObject);
    } else {
      AddLocal.call(this, gameObject);
    }
    return this;
  },
  // Don't override this method
  pinLocal(gameObject, config) {
    if (Array.isArray(gameObject)) {
      this.addMultiple(gameObject, config);
    } else {
      AddLocal.call(this, gameObject, config);
    }
    return this;
  },
  addLocalMultiple(gameObjects) {
    for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
      AddLocal.call(this, gameObjects[i]);
    }
    return this;
  }
};
exports.default = _default;
},{"./Base.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Base.js","./utils/GetLocalState.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetLocalState.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/RemoveChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Base = _interopRequireDefault(require("./Base.js"));
var _GetParent = require("./GetParent.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const BaseRemove = _Base.default.prototype.remove;
const BaseClear = _Base.default.prototype.clear;
var _default = {
  // Can override this method
  remove(gameObject, destroyChild) {
    if ((0, _GetParent.GetParent)(gameObject) !== this) {
      return this;
    }
    this.setParent(gameObject, null);
    if (!destroyChild) {
      this.removeFromRenderLayer(gameObject);
    }
    BaseRemove.call(this, gameObject, destroyChild);
    return this;
  },
  // Don't override this method
  unpin(gameObject, destroyChild) {
    if ((0, _GetParent.GetParent)(gameObject) !== this) {
      return this;
    }
    this.setParent(gameObject, null);
    if (!destroyChild) {
      this.removeFromRenderLayer(gameObject);
    }
    BaseRemove.call(this, gameObject, destroyChild);
    return this;
  },
  clear(destroyChild) {
    var children = this.children;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      var child = children[i];
      this.setParent(child, null);
      if (!destroyChild) {
        this.removeFromRenderLayer(child);
      }
    }
    BaseClear.call(this, destroyChild);
    return this;
  }
};
exports.default = _default;
},{"./Base.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Base.js","./GetParent.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/GetParent.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/ChildState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetLocalState = _interopRequireDefault(require("./utils/GetLocalState.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  getLocalState(gameObject) {
    return (0, _GetLocalState.default)(gameObject);
  },
  resetChildState(gameObject) {
    this.resetChildPositionState(gameObject).resetChildVisibleState(gameObject).resetChildAlphaState(gameObject).resetChildActiveState(gameObject);
    return this;
  },
  resetChildrenState(gameObjects) {
    for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
      this.resetChildState(gameObjects[i]);
    }
    return this;
  },
  syncProperties() {
    this.syncPosition().syncVisible().syncAlpha().syncActive().syncScrollFactor().syncMask();
    return this;
  }
};
exports.default = _default;
},{"./utils/GetLocalState.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetLocalState.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const RotateAround = Phaser.Math.RotateAround;
var _default = {
  worldToLocal(point) {
    // Transform
    point.x -= this.x;
    point.y -= this.y;
    // Rotate
    RotateAround(point, 0, 0, -this.rotation);
    // Scale
    point.x /= this.scaleX;
    point.y /= this.scaleY;
    return point;
  },
  localToWorld(point) {
    // Scale
    point.x *= this.scaleX;
    point.y *= this.scaleY;
    // Rotate
    RotateAround(point, 0, 0, this.rotation);
    // Transform
    point.x += this.x;
    point.y += this.y;
    return point;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetScale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetScale = function (a, b) {
  if (a === b) {
    return 1;
  } else {
    return a / b;
  }
};
var _default = GetScale;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Position.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetLocalState = _interopRequireDefault(require("./utils/GetLocalState.js"));
var _GetScale = _interopRequireDefault(require("./utils/GetScale.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  updateChildPosition(child) {
    if (child.isRexContainerLite) {
      child.syncChildrenEnable = false;
    }
    var state = (0, _GetLocalState.default)(child);
    var parent = state.parent;
    if (state.syncPosition) {
      child.x = state.x;
      child.y = state.y;
      parent.localToWorld(child);
    }
    if (state.syncRotation) {
      child.rotation = state.rotation + parent.rotation;
    }
    if (state.syncScale) {
      child.scaleX = state.scaleX * parent.scaleX;
      child.scaleY = state.scaleY * parent.scaleY;
    }
    if (child.isRexContainerLite) {
      child.syncChildrenEnable = true;
      child.syncPosition();
    }
    return this;
  },
  syncPosition() {
    if (this.syncChildrenEnable) {
      this.children.forEach(this.updateChildPosition, this);
    }
    return this;
  },
  resetChildPositionState(child) {
    var state = (0, _GetLocalState.default)(child);
    var parent = state.parent;
    state.x = child.x;
    state.y = child.y;
    parent.worldToLocal(state);
    state.scaleX = (0, _GetScale.default)(child.scaleX, parent.scaleX);
    state.scaleY = (0, _GetScale.default)(child.scaleY, parent.scaleY);
    state.rotation = child.rotation - parent.rotation;
    return this;
  },
  setChildPosition(child, x, y) {
    child.x = x;
    child.y = y;
    this.resetChildPositionState(child);
    return this;
  },
  setChildLocalPosition(child, x, y) {
    var state = (0, _GetLocalState.default)(child);
    state.x = x;
    state.y = y;
    this.updateChildPosition(child);
    return this;
  },
  resetLocalPositionState() {
    var parent = (0, _GetLocalState.default)(this).parent;
    if (parent) {
      parent.resetChildPositionState(this);
    }
    return this;
  }
};
exports.default = _default;
},{"./utils/GetLocalState.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetLocalState.js","./utils/GetScale.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetScale.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Rotation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetLocalState = _interopRequireDefault(require("./utils/GetLocalState.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DegToRad = Phaser.Math.DegToRad;
var _default = {
  updateChildRotation(child) {
    var state = (0, _GetLocalState.default)(child);
    var parent = state.parent;
    if (state.syncRotation) {
      child.rotation = parent.rotation + state.rotation;
    }
    return this;
  },
  syncRotation() {
    if (this.syncChildrenEnable) {
      this.children.forEach(this.updateChildRotation, this);
    }
    return this;
  },
  resetChildRotationState(child) {
    var state = (0, _GetLocalState.default)(child);
    var parent = state.parent;
    state.rotation = child.rotation - parent.rotation;
    return this;
  },
  setChildRotation(child, rotation) {
    child.rotation = rotation;
    this.resetChildRotationState(child);
    return this;
  },
  setChildAngle(child, angle) {
    child.angle = angle;
    this.resetChildRotationState(child);
    return this;
  },
  setChildLocalRotation(child, rotation) {
    var state = (0, _GetLocalState.default)(child);
    state.rotation = rotation;
    this.updateChildRotation(child);
    return this;
  },
  setChildLocalAngle(child, angle) {
    var state = (0, _GetLocalState.default)(child);
    state.rotation = DegToRad(angle);
    this.updateChildRotation(child);
    return this;
  },
  resetLocalRotationState() {
    var parent = (0, _GetLocalState.default)(this).parent;
    if (parent) {
      parent.resetChildRotationState(this);
    }
    return this;
  }
};
exports.default = _default;
},{"./utils/GetLocalState.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetLocalState.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Scale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetLocalState = _interopRequireDefault(require("./utils/GetLocalState.js"));
var _GetScale = _interopRequireDefault(require("./utils/GetScale.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  updateChildScale(child) {
    var state = (0, _GetLocalState.default)(child);
    var parent = state.parent;
    if (state.syncScale) {
      child.scaleX = parent.scaleX * state.scaleX;
      child.scaleY = parent.scaleY * state.scaleY;
    }
    return this;
  },
  syncScale() {
    if (this.syncChildrenEnable) {
      this.children.forEach(this.updateChildScale, this);
    }
    return this;
  },
  resetChildScaleState(child) {
    var state = (0, _GetLocalState.default)(child);
    var parent = state.parent;
    state.scaleX = (0, _GetScale.default)(child.scaleX, parent.scaleX);
    state.scaleY = (0, _GetScale.default)(child.scaleY, parent.scaleY);
    return this;
  },
  setChildScale(child, scaleX, scaleY) {
    if (scaleY === undefined) {
      scaleY = scaleX;
    }
    child.scaleX = scaleX;
    child.scaleY = scaleY;
    this.resetChildScaleState(child);
    return this;
  },
  setChildLocalScale(child, scaleX, scaleY) {
    if (scaleY === undefined) {
      scaleY = scaleX;
    }
    var state = (0, _GetLocalState.default)(child);
    state.scaleX = scaleX;
    state.scaleY = scaleY;
    this.updateChildScale(child);
    return this;
  },
  setChildDisplaySize(child, width, height) {
    child.setDisplaySize(width, height);
    this.resetChildScaleState(child);
    return this;
  },
  resetLocalScaleState() {
    var parent = (0, _GetLocalState.default)(this).parent;
    if (parent) {
      parent.resetChildScaleState(this);
    }
    return this;
  }
};
exports.default = _default;
},{"./utils/GetLocalState.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetLocalState.js","./utils/GetScale.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetScale.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Visible.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetLocalState = _interopRequireDefault(require("./utils/GetLocalState.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*

Visible in localState:

  - visible: original visible of child
  - maskVisible: invisible by parent mask, see MaskChildren.js
      - undefined (not in masking) : Equal to mask visible
      - true (mask visible) : Inside, or across parent's visible area
      - false (maske invisible) : Out of parent's visible area

Visible result of child = (parent visible) && (child visible) && (mask visible)
*/
var _default = {
  updateChildVisible(child) {
    var localState = (0, _GetLocalState.default)(child);
    var parent = localState.parent;
    var maskVisible = localState.hasOwnProperty('maskVisible') ? localState.maskVisible : true;
    child.visible = parent.visible && localState.visible && maskVisible;
    return this;
  },
  syncVisible() {
    if (this.syncChildrenEnable) {
      this.children.forEach(this.updateChildVisible, this);
    }
    return this;
  },
  resetChildVisibleState(child) {
    var localState = (0, _GetLocalState.default)(child);
    // Delete maskVisible property
    if (localState.hasOwnProperty('maskVisible')) {
      delete localState.maskVisible;
    }
    localState.visible = child.visible;
    return this;
  },
  setChildVisible(child, visible) {
    // Visible of child will be affect by parent's visible, and mask visible
    this.setChildLocalVisible(child, visible);
    return this;
  },
  // Internal method
  setChildLocalVisible(child, visible) {
    if (visible === undefined) {
      visible = true;
    }
    var localState = (0, _GetLocalState.default)(child);
    localState.visible = visible;
    this.updateChildVisible(child);
    return this;
  },
  // Internal method
  setChildMaskVisible(child, visible) {
    if (visible === undefined) {
      visible = true;
    }
    var localState = (0, _GetLocalState.default)(child);
    localState.maskVisible = visible;
    this.updateChildVisible(child);
    return this;
  },
  resetLocalVisibleState() {
    var parent = (0, _GetLocalState.default)(this).parent;
    if (parent) {
      parent.resetChildVisibleState(this);
    }
    return this;
  }
};
exports.default = _default;
},{"./utils/GetLocalState.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetLocalState.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Alpha.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetLocalState = _interopRequireDefault(require("./utils/GetLocalState.js"));
var _GetScale = _interopRequireDefault(require("./utils/GetScale.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  updateChildAlpha(child) {
    var state = (0, _GetLocalState.default)(child);
    var parent = state.parent;
    if (state.syncAlpha) {
      child.alpha = parent.alpha * state.alpha;
    }
    return this;
  },
  syncAlpha() {
    if (this.syncChildrenEnable) {
      this.children.forEach(this.updateChildAlpha, this);
    }
    return this;
  },
  resetChildAlphaState(child) {
    var state = (0, _GetLocalState.default)(child);
    var parent = state.parent;
    state.alpha = (0, _GetScale.default)(child.alpha, parent.alpha);
    return this;
  },
  setChildAlpha(child, alpha) {
    child.alpha = alpha;
    this.resetChildAlphaState(child);
    return this;
  },
  setChildLocalAlpha(child, alpha) {
    var state = (0, _GetLocalState.default)(child);
    state.alpha = alpha;
    this.updateChildAlpha(child);
    return this;
  },
  resetLocalAlphaState() {
    var parent = (0, _GetLocalState.default)(this).parent;
    if (parent) {
      parent.resetChildAlphaState(this);
    }
    return this;
  }
};
exports.default = _default;
},{"./utils/GetLocalState.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetLocalState.js","./utils/GetScale.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetScale.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Active.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetLocalState = _interopRequireDefault(require("./utils/GetLocalState.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  updateChildActive(child) {
    var localState = (0, _GetLocalState.default)(child);
    var parent = localState.parent;
    child.active = parent.active && localState.active;
    return this;
  },
  syncActive() {
    if (this.syncChildrenEnable) {
      this.children.forEach(this.updateChildActive, this);
    }
    return this;
  },
  resetChildActiveState(child) {
    var localState = (0, _GetLocalState.default)(child);
    localState.active = child.active;
    return this;
  },
  setChildActive(child, active) {
    child.active = active;
    this.resetChildActiveState(child);
    return this;
  },
  setChildLocalActive(child, active) {
    if (active === undefined) {
      active = true;
    }
    var localState = (0, _GetLocalState.default)(child);
    localState.active = active;
    this.updateChildActive(child);
    return this;
  },
  resetLocalActiveState() {
    var parent = (0, _GetLocalState.default)(this).parent;
    if (parent) {
      parent.resetChildActiveState(this);
    }
    return this;
  }
};
exports.default = _default;
},{"./utils/GetLocalState.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetLocalState.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/ScrollFactor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetLocalState = _interopRequireDefault(require("./utils/GetLocalState.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  updateChildScrollFactor(child) {
    var state = (0, _GetLocalState.default)(child);
    var parent = state.parent;
    if (state.syncScrollFactor) {
      child.setScrollFactor(parent.scrollFactorX, parent.scrollFactorY);
    }
    return this;
  },
  syncScrollFactor() {
    if (this.syncChildrenEnable) {
      this.children.forEach(this.updateChildScrollFactor, this);
    }
    return this;
  }
};
exports.default = _default;
},{"./utils/GetLocalState.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetLocalState.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Mask.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  updateChildMask(child) {
    // Don't propagate null mask to clear children's mask
    if (this.mask == null) {
      return this;
    }
    var maskGameObject = this.mask.hasOwnProperty('geometryMask') ? this.mask.geometryMask : this.mask.bitmapMask;
    if (maskGameObject !== child) {
      child.mask = this.mask;
    }
    return this;
  },
  syncMask() {
    if (this.syncChildrenEnable) {
      this.children.forEach(this.updateChildMask, this);
    }
    return this;
  },
  setMask(mask) {
    this.mask = mask;
    return this;
  },
  clearMask(destroyMask) {
    if (destroyMask === undefined) {
      destroyMask = false;
    }

    // Clear current mask
    this._mask = null;
    // Clear children mask
    this.children.forEach(function (child) {
      child.clearMask(false);
    });
    if (destroyMask && this.mask) {
      this.mask.destroy();
    }
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/system/SortGameObjectsByDepth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SortGameObjectsByDepth = function (gameObjects, descending) {
  if (gameObjects.length === 0) {
    return gameObjects;
  }
  if (descending === undefined) {
    descending = false;
  }
  var scene = gameObjects[0].scene;
  var displayList = scene.sys.displayList;
  displayList.depthSort();
  if (descending) {
    gameObjects.sort(function (childA, childB) {
      return displayList.getIndex(childB) - displayList.getIndex(childA);
    });
  } else {
    gameObjects.sort(function (childA, childB) {
      return displayList.getIndex(childA) - displayList.getIndex(childB);
    });
  }
  return gameObjects;
};
var _default = SortGameObjectsByDepth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Depth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SortGameObjectsByDepth = _interopRequireDefault(require("../../../utils/system/SortGameObjectsByDepth.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  setDepth(value, containerOnly) {
    this.depth = value;
    if (!containerOnly && this.children) {
      var children = this.getAllChildren();
      for (var i = 0, cnt = children.length; i < cnt; i++) {
        children[i].depth = value;
      }
    }
    return this;
  },
  swapDepth(containerB) {
    var depthA = this.depth;
    var depthB = containerB.depth;
    this.setDepth(depthB);
    containerB.setDepth(depthA);
    return this;
  },
  incDepth(inc) {
    this.depth += inc;
    if (this.children) {
      var children = this.getAllChildren();
      for (var i = 0, cnt = children.length; i < cnt; i++) {
        children[i].depth += inc;
      }
    }
    return this;
  },
  bringToTop() {
    var displayList = this.displayList;
    var children = this.getAllChildren([this]);
    (0, _SortGameObjectsByDepth.default)(children, false);
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      var child = children[i];
      if (displayList.exists(child)) {
        displayList.bringToTop(child);
      }
    }
    return this;
  },
  moveDepthBelow(gameObject) {
    var displayList = this.displayList;
    if (gameObject.displayList !== displayList) {
      // Do nothing if not at the same display list
      return this;
    }
    var children = this.getAllChildren([this]);
    (0, _SortGameObjectsByDepth.default)(children, false);
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      var child = children[i];
      if (displayList.exists(child)) {
        displayList.moveBelow(gameObject, child);
        break;
      }
    }
    return this;
  },
  moveDepthAbove(gameObject) {
    var displayList = this.displayList;
    if (gameObject.displayList !== displayList) {
      // Do nothing if not at the same display list
      return this;
    }
    var children = this.getAllChildren([this]);
    (0, _SortGameObjectsByDepth.default)(children, true);
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      var child = children[i];
      if (displayList.exists(child)) {
        displayList.moveAbove(gameObject, child);
        break;
      }
    }
    return this;
  }
};
exports.default = _default;
},{"../../../utils/system/SortGameObjectsByDepth.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/SortGameObjectsByDepth.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/Traversal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DepthFirstSearch = exports.BreadthFirstSearch = void 0;
var DepthFirstSearch = function (root, callback) {
  var skip = callback(root);
  if (!skip && root.isRexContainerLite) {
    var children = root.children;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      DepthFirstSearch(children[i], callback);
    }
  }
};
exports.DepthFirstSearch = DepthFirstSearch;
var BreadthFirstSearch = function (root, callback) {
  var queue = [root];
  while (queue.length > 0) {
    var current = queue.shift();
    var skip = callback(current);
    if (!skip && current.isRexContainerLite) {
      queue.push(...current.children);
    }
  }
};
exports.BreadthFirstSearch = BreadthFirstSearch;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Children.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetParent = require("./GetParent.js");
var _Traversal = require("./utils/Traversal.js");
const ArrayUtils = Phaser.Utils.Array;
var _default = {
  getChildren(out) {
    if (!out) {
      out = this.children; // Return internal children array
    } else {
      for (var i = 0, cnt = this.children.length; i < cnt; i++) {
        out.push(this.children[i]);
      }
      // Copy children
    }

    return out;
  },
  getAllChildren(out) {
    if (out === undefined) {
      out = [];
    }
    var root = this;
    (0, _Traversal.BreadthFirstSearch)(root, function (child) {
      // Don't add root
      if (child === root) {
        return;
      }
      out.push(child);
    });
    return out;
  },
  getAllVisibleChildren(out) {
    if (out === undefined) {
      out = [];
    }
    var root = this;
    (0, _Traversal.BreadthFirstSearch)(root, function (child) {
      // Don't add root
      if (child === root) {
        return;
      }
      // Don't add invisible child
      if (!child.visible) {
        return true;
      }
      out.push(child);
    });
    return out;
  },
  bfs(callback, root) {
    if (root === undefined) {
      root = this;
    }
    (0, _Traversal.BreadthFirstSearch)(root, callback);
    return this;
  },
  dfs(callback, root) {
    if (root === undefined) {
      root = this;
    }
    (0, _Traversal.DepthFirstSearch)(root, callback);
    return this;
  },
  contains(gameObject) {
    // Override Base.contains method
    var parent = (0, _GetParent.GetParent)(gameObject);
    if (!parent) {
      return false;
    } else if (parent === this) {
      return true;
    } else {
      return this.contains(parent);
    }
  },
  getByName(name, recursive) {
    if (!recursive) {
      return ArrayUtils.GetFirst(this.children, 'name', name); // object, or null if not found
    } else {
      // recursive
      // Breadth-first search
      var queue = [this];
      var parent, child;
      while (queue.length) {
        parent = queue.shift();
        for (var i = 0, cnt = parent.children.length; i < cnt; i++) {
          child = parent.children[i];
          if (child.name === name) {
            return child;
          } else if (child.isRexContainerLite) {
            queue.push(child);
          }
        }
      }
      return null;
    }
  },
  getRandom(startIndex, length) {
    return ArrayUtils.GetRandom(this.children, startIndex, length);
  },
  getFirst(property, value, startIndex, endIndex) {
    return ArrayUtils.GetFirstElement(this.children, property, value, startIndex, endIndex);
  },
  getAll(property, value, startIndex, endIndex) {
    return ArrayUtils.GetAll(this.children, property, value, startIndex, endIndex);
  },
  count(property, value, startIndex, endIndex) {
    return ArrayUtils.CountAllMatching(this.children, property, value, startIndex, endIndex);
  },
  swap(child1, child2) {
    ArrayUtils.Swap(this.children, child1, child2);
    return this;
  },
  setAll(property, value, startIndex, endIndex) {
    ArrayUtils.SetAll(this.children, property, value, startIndex, endIndex);
    return this;
  }
};
exports.default = _default;
},{"./GetParent.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/GetParent.js","./utils/Traversal.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/Traversal.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Tween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetLocalStates = function (gameObjects) {
  var localStates = [];
  for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
    var gameObject = gameObjects[i];
    if (!gameObject.hasOwnProperty('rexContainer')) {
      continue;
    }
    localStates.push(gameObject.rexContainer);
  }
  return localStates;
};
var GetScene = function (gameObjects) {
  for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
    var scene = gameObjects[i].scene;
    if (scene) {
      return scene;
    }
  }
  return null;
};
var UpdateChild = function (tween, key, target) {
  if (!target.parent) {
    // target object was removed, so remove this tween too
    tween.remove();
    return;
  }
  var parent = target.parent;
  var child = target.self;
  switch (key) {
    case 'x':
    case 'y':
      parent.updateChildPosition(child);
      break;
    case 'angle':
    case 'rotation':
      parent.updateChildRotation(child);
      break;
    case 'scaleX':
    case 'scaleY':
    case 'displayWidth':
    case 'displayHeight':
      parent.updateChildScale(child);
      break;
    case 'alpha':
      parent.updateChildAlpha(child);
      break;
    default:
      parent.updateChildPosition(child);
      parent.updateChildRotation(child);
      parent.updateChildScale(child);
      parent.updateChildAlpha(child);
      break;
  }
};
var _default = {
  tweenChild(tweenConfig) {
    var targets = tweenConfig.targets;
    if (!Array.isArray(targets)) {
      targets = [targets];
    }
    var scene = this.scene || GetScene(targets);
    if (!scene) {
      return;
    }

    // Map child game objects to local states
    tweenConfig.targets = GetLocalStates(targets);
    var tween = scene.tweens.add(tweenConfig);

    // Update child game object in 'update' event
    tween.on('update', UpdateChild);
    return tween;
  },
  tweenSelf(tweenConfig) {
    tweenConfig.targets = [this];
    return this.tweenChild(tweenConfig);
  },
  createTweenChildConfig(tweenConfig) {
    var targets = tweenConfig.targets;
    if (targets) {
      if (!Array.isArray(targets)) {
        targets = [targets];
      }
      // Map child game objects to local states
      tweenConfig.targets = GetLocalStates(targets);
    }
    var onUpdate = tweenConfig.onUpdate;
    tweenConfig.onUpdate = function (tween, target) {
      if (onUpdate) {
        onUpdate(tween, target);
      }
      UpdateChild(tween, undefined, target);
    };
    return tweenConfig;
  },
  tween(tweenConfig) {
    var scene = this.scene;
    if (!tweenConfig.targets) {
      tweenConfig.targets = this;
    }
    return scene.tweens.add(tweenConfig);
  },
  timelineChild(timelineConfig) {
    var targets = timelineConfig.targets;
    // Map child game objects to local states
    if (targets) {
      if (!Array.isArray(targets)) {
        targets = [targets];
      }
      timelineConfig.targets = GetLocalStates(targets);
    }
    var tweens = timelineConfig.tweens;
    for (var i = 0, cnt = tweens.length; i < cnt; i++) {
      tweens[i] = this.createTweenChildConfig(tweens[i]);
    }
    var timeline = this.scene.tweens.timeline(timelineConfig);
    return timeline;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/P3Container.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SortGameObjectsByDepth = _interopRequireDefault(require("../../../utils/system/SortGameObjectsByDepth.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  addToContainer(p3Container) {
    this._setParentContainerFlag = true;
    var gameObjects = this.getAllChildren([this]);
    (0, _SortGameObjectsByDepth.default)(gameObjects);
    p3Container.add(gameObjects);
    this._setParentContainerFlag = false;
    return this;
  },
  addToLayer(layer) {
    this.addToContainer(layer);
    return this;
  },
  removeFromContainer() {
    if (!this.parentContainer) {
      return this;
    }
    this._setParentContainerFlag = true;
    var gameObjects = this.getAllChildren([this]);
    (0, _SortGameObjectsByDepth.default)(gameObjects);
    gameObjects.reverse();
    this.parentContainer.remove(gameObjects);
    this._setParentContainerFlag = false;
    return this;
  },
  getParentContainer() {
    if (this.parentContainer) {
      return this.parentContainer;
    }

    // One of parent container has a layer
    var parent = this.getParent();
    while (parent) {
      var p3Container = parent.parentContainer;
      if (p3Container) {
        return p3Container;
      }
      parent = parent.getParent();
    }
    return null;
  },
  addToParentContainer(gameObject) {
    // Don't add to layer if gameObject is not in any displayList
    if (!gameObject.displayList) {
      return this;
    }
    var p3Container = this.getParentContainer();
    if (!p3Container) {
      return this;
    }
    if (gameObject.isRexContainerLite) {
      // Add containerLite and its children
      gameObject.addToContainer(p3Container);
    } else {
      // Add gameObject directly
      p3Container.add(gameObject);
    }
    return this;
  }
};
exports.default = _default;
},{"../../../utils/system/SortGameObjectsByDepth.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/SortGameObjectsByDepth.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Layer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetLocalState = _interopRequireDefault(require("./utils/GetLocalState.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  enableLayer() {
    if (this.privateRenderLayer) {
      return this;
    }
    var layer = this.scene.add.layer();
    // layer.name = (this.name) ? `${this.name}.privateLayer` : 'privateLayer';

    this.moveDepthBelow(layer);
    this.addToLayer(layer);
    this.privateRenderLayer = layer;
    return this;
  },
  getLayer() {
    if (!this.privateRenderLayer) {
      this.enableLayer();
    }
    return this.privateRenderLayer;
  },
  getRenderLayer() {
    // This containerLite has a layer
    if (this.privateRenderLayer) {
      return this.privateRenderLayer;
    }

    // One of parent container has a layer
    var parent = this.getParent();
    while (parent) {
      var layer = parent.privateRenderLayer;
      if (layer) {
        return layer;
      }
      parent = parent.getParent();
    }
    return null;
  },
  // Internal method for adding child
  addToRenderLayer(gameObject) {
    // Don't add to layer if gameObject is not in any displayList
    if (!gameObject.displayList) {
      return this;
    }

    // Move gameObject from scene to layer
    var layer = this.getRenderLayer();
    if (!layer) {
      return this;
    }
    if (gameObject.isRexContainerLite) {
      // Add containerLite and its children
      gameObject.addToLayer(layer);
    } else {
      // Add gameObject directly
      layer.add(gameObject);
    }
    var state = (0, _GetLocalState.default)(gameObject);
    state.layer = layer;
    return this;
  },
  // Internal method for removing child
  removeFromRenderLayer(gameObject) {
    // Move gameObject from layer to scene
    var state = (0, _GetLocalState.default)(gameObject);
    var layer = state.layer;
    if (!layer) {
      return this;
    }
    layer.remove(gameObject);
    state.layer = null;
    return this;
  }
};
exports.default = _default;
},{"./utils/GetLocalState.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/utils/GetLocalState.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/bounds/GetBoundsOfGameObjects.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetBounds = require("./GetBounds.js");
const Rectangle = Phaser.Geom.Rectangle;
const Union = Phaser.Geom.Rectangle.Union;
var GetBoundsOfGameObjects = function (gameObjects, out) {
  if (out === undefined) {
    out = new Rectangle();
  } else if (out === true) {
    if (GlobRect === undefined) {
      GlobRect = new Rectangle();
    }
    out = GlobRect;
  }
  out.setTo(0, 0, 0, 0);
  var gameObject;
  var firstClone = true;
  for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
    gameObject = gameObjects[i];
    if (!gameObject.getBounds) {
      continue;
    }
    var boundsRect = (0, _GetBounds.GetBounds)(gameObject, true);
    if (firstClone) {
      out.setTo(boundsRect.x, boundsRect.y, boundsRect.width, boundsRect.height);
      firstClone = false;
    } else {
      Union(boundsRect, out, out);
    }
  }
  return out;
};
var GlobRect;
var _default = GetBoundsOfGameObjects;
exports.default = _default;
},{"./GetBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/bounds/GetBounds.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/rendertexture/Snapshot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetBoundsOfGameObjects = _interopRequireDefault(require("../bounds/GetBoundsOfGameObjects.js"));
var _Clone = _interopRequireDefault(require("../object/Clone.js"));
var _SortGameObjectsByDepth = _interopRequireDefault(require("../system/SortGameObjectsByDepth.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetValue = Phaser.Utils.Objects.GetValue;
var Snapshot = function (config) {
  if (!config) {
    return;
  }
  var gameObjects = config.gameObjects;
  var renderTexture = config.renderTexture;
  var x = GetValue(config, 'x', undefined);
  var y = GetValue(config, 'y', undefined);
  var width = GetValue(config, 'width', undefined);
  var height = GetValue(config, 'height', undefined);
  var originX = GetValue(config, 'originX', 0);
  var originY = GetValue(config, 'originY', 0);
  var padding = GetValue(config, 'padding', 0);
  var scrollX, scrollY;
  if (width === undefined || height === undefined || x === undefined || y === undefined) {
    // Union bounds of gameObjects
    var bounds = (0, _GetBoundsOfGameObjects.default)(gameObjects, true);
    var isCenterOrigin = x !== undefined && y !== undefined;
    if (isCenterOrigin) {
      width = Math.max(x - bounds.left, bounds.right - x) * 2;
      height = Math.max(y - bounds.top, bounds.bottom - y) * 2;
      originX = 0.5;
      originY = 0.5;
    } else {
      x = bounds.x;
      y = bounds.y;
      width = bounds.width;
      height = bounds.height;
      originX = 0;
      originY = 0;
    }
    scrollX = bounds.x;
    scrollY = bounds.y;
  } else {
    scrollX = x + (0 - originX) * width;
    scrollY = y + (0 - originY) * height;
  }
  scrollX -= padding;
  scrollY -= padding;
  width += padding * 2;
  height += padding * 2;
  var tempRT = !renderTexture;
  // Configurate render texture
  if (tempRT) {
    var scene = gameObjects[0].scene;
    renderTexture = scene.add.renderTexture(0, 0, width, height);
  }
  renderTexture.setPosition(x, y);
  if (renderTexture.width !== width || renderTexture.height !== height) {
    renderTexture.setSize(width, height);
  }
  renderTexture.setOrigin(originX, originY);
  renderTexture.camera.setScroll(scrollX, scrollY);

  // Draw gameObjects
  gameObjects = (0, _SortGameObjectsByDepth.default)((0, _Clone.default)(gameObjects));
  renderTexture.draw(gameObjects);

  // Save render result to texture    
  var saveTexture = config.saveTexture;
  if (saveTexture) {
    renderTexture.saveTexture(saveTexture);
  }
  // Destroy render texture if tempRT and saveTexture
  if (tempRT && saveTexture) {
    renderTexture.destroy();
  }
  return renderTexture;
};
var _default = Snapshot;
exports.default = _default;
},{"../bounds/GetBoundsOfGameObjects.js":"node_modules/phaser3-rex-plugins/plugins/utils/bounds/GetBoundsOfGameObjects.js","../object/Clone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/Clone.js","../system/SortGameObjectsByDepth.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/SortGameObjectsByDepth.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/RenderTexture.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Snapshot = _interopRequireDefault(require("../../../utils/rendertexture/Snapshot.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  snapshot(config) {
    // Save scale
    var scaleXSave = this.scaleX;
    var scaleYSave = this.scaleY;
    var scale1 = scaleXSave === 1 && scaleYSave === 1;
    if (!scale1) {
      this.setScale(1);
    }

    // Snapshot with scale = 1
    if (config === undefined) {
      config = {};
    }
    config.gameObjects = this.getAllVisibleChildren();
    config.x = this.x;
    config.y = this.y;
    config.originX = this.originX;
    config.originY = this.originY;
    var rt = (0, _Snapshot.default)(config);
    var isValidRT = !!rt.scene;

    // Restore scale
    if (!scale1) {
      this.setScale(scaleXSave, scaleYSave);
      if (isValidRT) {
        rt.setScale(scaleXSave, scaleYSave);
      }
    }
    return isValidRT ? rt : this;
  }
};
exports.default = _default;
},{"../../../utils/rendertexture/Snapshot.js":"node_modules/phaser3-rex-plugins/plugins/utils/rendertexture/Snapshot.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/DrawBounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DrawBounds = _interopRequireDefault(require("../../../utils/bounds/DrawBounds.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var DrawBounds = function (graphics, config) {
  var drawContainer = GetValue(config, 'drawContainer', true);
  var gameObjects = GetValue(config, 'children');
  if (gameObjects === undefined) {
    gameObjects = this.getAllVisibleChildren([this]);
  }
  if (!drawContainer) {
    gameObjects = gameObjects.filter(function (gameObject) {
      return !gameObject.isRexContainerLite;
    });
  }
  (0, _DrawBounds.default)(gameObjects, graphics, config);
  return this;
};
var _default = DrawBounds;
exports.default = _default;
},{"../../../utils/bounds/DrawBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/bounds/DrawBounds.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/origin/ChangeOrigin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const RotateAround = Phaser.Math.RotateAround;
var ChangeOrigin = function (gameObject, originX, originY) {
  if (originY === undefined) {
    originY = originX;
  }
  var deltaXY = {
    x: (originX - gameObject.originX) * gameObject.displayWidth,
    y: (originY - gameObject.originY) * gameObject.displayHeight
  };
  RotateAround(deltaXY, 0, 0, gameObject.rotation);
  gameObject.originX = originX;
  gameObject.originY = originY;
  gameObject.x = gameObject.x + deltaXY.x;
  gameObject.y = gameObject.y + deltaXY.y;
  return gameObject;
};
var _default = ChangeOrigin;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/ChangeOrigin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ChangeOrigin = _interopRequireDefault(require("../../../utils/origin/ChangeOrigin.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ChangeOrigin = function (originX, originY) {
  this.syncChildrenEnable = false;
  (0, _ChangeOrigin.default)(this, originX, originY);
  this.syncChildrenEnable = true;
  var children = this.getAllChildren();
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    this.resetChildPositionState(children[i]);
  }
  return this;
};
var _default = ChangeOrigin;
exports.default = _default;
},{"../../../utils/origin/ChangeOrigin.js":"node_modules/phaser3-rex-plugins/plugins/utils/origin/ChangeOrigin.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Parent = _interopRequireDefault(require("./Parent.js"));
var _AddChild = _interopRequireDefault(require("./AddChild.js"));
var _RemoveChild = _interopRequireDefault(require("./RemoveChild.js"));
var _ChildState = _interopRequireDefault(require("./ChildState.js"));
var _Transform = _interopRequireDefault(require("./Transform.js"));
var _Position = _interopRequireDefault(require("./Position.js"));
var _Rotation = _interopRequireDefault(require("./Rotation.js"));
var _Scale = _interopRequireDefault(require("./Scale.js"));
var _Visible = _interopRequireDefault(require("./Visible.js"));
var _Alpha = _interopRequireDefault(require("./Alpha.js"));
var _Active = _interopRequireDefault(require("./Active.js"));
var _ScrollFactor = _interopRequireDefault(require("./ScrollFactor.js"));
var _Mask = _interopRequireDefault(require("./Mask.js"));
var _Depth = _interopRequireDefault(require("./Depth.js"));
var _Children = _interopRequireDefault(require("./Children.js"));
var _Tween = _interopRequireDefault(require("./Tween.js"));
var _P3Container = _interopRequireDefault(require("./P3Container.js"));
var _Layer = _interopRequireDefault(require("./Layer.js"));
var _RenderTexture = _interopRequireDefault(require("./RenderTexture.js"));
var _DrawBounds = _interopRequireDefault(require("./DrawBounds.js"));
var _ChangeOrigin = _interopRequireDefault(require("./ChangeOrigin.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  changeOrigin: _ChangeOrigin.default,
  drawBounds: _DrawBounds.default
};
Object.assign(methods, _Parent.default, _AddChild.default, _RemoveChild.default, _ChildState.default, _Transform.default, _Position.default, _Rotation.default, _Scale.default, _Visible.default, _Alpha.default, _Active.default, _ScrollFactor.default, _Mask.default, _Depth.default, _Children.default, _Tween.default, _P3Container.default, _Layer.default, _RenderTexture.default);
var _default = methods;
exports.default = _default;
},{"./Parent.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Parent.js","./AddChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/AddChild.js","./RemoveChild.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/RemoveChild.js","./ChildState.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/ChildState.js","./Transform.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Transform.js","./Position.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Position.js","./Rotation.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Rotation.js","./Scale.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Scale.js","./Visible.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Visible.js","./Alpha.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Alpha.js","./Active.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Active.js","./ScrollFactor.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/ScrollFactor.js","./Mask.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Mask.js","./Depth.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Depth.js","./Children.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Children.js","./Tween.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Tween.js","./P3Container.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/P3Container.js","./Layer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Layer.js","./RenderTexture.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/RenderTexture.js","./DrawBounds.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/DrawBounds.js","./ChangeOrigin.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/ChangeOrigin.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/ContainerLite.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Base = _interopRequireDefault(require("./Base.js"));
var _Methods = _interopRequireDefault(require("./Methods.js"));
var _GetParent = require("./GetParent.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class ContainerLite extends _Base.default {
  constructor(scene, x, y, width, height, children) {
    if (Array.isArray(width)) {
      children = width;
      width = undefined;
      height = undefined;
    }
    super(scene, x, y, width, height);
    this.type = 'rexContainerLite';
    this.isRexContainerLite = true;
    this.syncChildrenEnable = true;
    this._active = true;
    this._mask = null;
    this._scrollFactorX = 1;
    this._scrollFactorY = 1;
    this.privateRenderLayer = undefined;
    if (children) {
      this.add(children);
    }
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    this.syncChildrenEnable = false; // Don't sync properties changing anymore
    super.destroy(fromScene);
    if (this.privateRenderLayer) {
      this.privateRenderLayer.list.length = 0; // Remove all children without trigger callback
      this.privateRenderLayer.destroy();
    }
  }
  resize(width, height) {
    this.setSize(width, height);
    return this;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    if (this._x === value) {
      return;
    }
    this._x = value;
    this.syncPosition();
  }
  get y() {
    return this._y;
  }
  set y(value) {
    if (this._y === value) {
      return;
    }
    this._y = value;
    this.syncPosition();
  }

  // Override
  get rotation() {
    return super.rotation;
  }
  set rotation(value) {
    if (this.rotation === value) {
      return;
    }
    super.rotation = value;
    this.syncPosition();
  }

  // Override
  get scaleX() {
    return super.scaleX;
  }
  set scaleX(value) {
    if (this.scaleX === value) {
      return;
    }
    super.scaleX = value;
    this.syncPosition();
  }

  // Override
  get scaleY() {
    return super.scaleY;
  }
  set scaleY(value) {
    if (this.scaleY === value) {
      return;
    }
    super.scaleY = value;
    this.syncPosition();
  }

  // Override
  get scale() {
    return super.scale;
  }
  set scale(value) {
    if (this.scale === value) {
      return;
    }
    super.scale = value;
    this.syncPosition();
  }

  // Override
  get visible() {
    return super.visible;
  }
  set visible(value) {
    if (super.visible === value) {
      return;
    }
    super.visible = value;
    this.syncVisible();
  }

  // Override
  get alpha() {
    return super.alpha;
  }
  set alpha(value) {
    if (super.alpha === value) {
      return;
    }
    super.alpha = value;
    this.syncAlpha();
  }

  // Override
  get active() {
    return this._active;
  }
  set active(value) {
    if (this._active === value) {
      return;
    }
    this._active = value;
    this.syncActive();
  }

  // Override
  get mask() {
    return this._mask;
  }
  set mask(mask) {
    if (this._mask === mask) {
      return;
    }
    this._mask = mask;
    this.syncMask();
  }

  // Override
  get scrollFactorX() {
    return this._scrollFactorX;
  }
  set scrollFactorX(value) {
    if (this._scrollFactorX === value) {
      return;
    }
    this._scrollFactorX = value;
    this.syncScrollFactor();
  }
  get scrollFactorY() {
    return this._scrollFactorY;
  }
  set scrollFactorY(value) {
    if (this._scrollFactorY === value) {
      return;
    }
    this._scrollFactorY = value;
    this.syncScrollFactor();
  }

  // Compatiable with container plugin
  get list() {
    return this.children;
  }
  static GetParent(child) {
    return (0, _GetParent.GetParent)(child);
  }

  // For p3-container
  get parentContainer() {
    return this._parentContainer;
  }
  set parentContainer(value) {
    // Initialize
    if (!this._parentContainer && !value) {
      this._parentContainer = value;
      return;
    }

    // Set this._parentContainer only,
    // if under AddToContainer, or RemoveFromContainer methods
    if (this.setParentContainerFlag) {
      this._parentContainer = value;
      return;
    }
    // else if (!this.setParentContainerFlag)

    // Add itself and all children to container,
    // Or remove itseld and all children from container
    if (this._parentContainer && !value) {
      // Remove from container
      this.removeFromContainer();
      this._parentContainer = value;
    } else if (value) {
      // Add to container
      this._parentContainer = value;
      this.addToContainer(value);
    } else {
      this._parentContainer = value;
    }
  }
  get setParentContainerFlag() {
    if (this._setParentContainerFlag) {
      return true;
    }
    var parent = (0, _GetParent.GetParent)(this);
    return parent ? parent.setParentContainerFlag : false;
  }
}
Object.assign(ContainerLite.prototype, _Methods.default);
var _default = ContainerLite;
exports.default = _default;
},{"./Base.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Base.js","./Methods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/Methods.js","./GetParent.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/GetParent.js"}],"node_modules/phaser3-rex-plugins/plugins/containerlite.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ContainerLite = _interopRequireDefault(require("./gameobjects/container/containerlite/ContainerLite.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _ContainerLite.default;
exports.default = _default;
},{"./gameobjects/container/containerlite/ContainerLite.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/ContainerLite.js"}],"node_modules/phaser3-rex-plugins/templates/ui/container/Container.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _containerlite = _interopRequireDefault(require("../../../plugins/containerlite.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _containerlite.default;
exports.default = _default;
},{"../../../plugins/containerlite.js":"node_modules/phaser3-rex-plugins/plugins/containerlite.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/GetSizerConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetSizerConfig = function (gameObject) {
  if (!gameObject.hasOwnProperty('rexSizer')) {
    gameObject.rexSizer = {};
  }
  return gameObject.rexSizer;
};
var _default = GetSizerConfig;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetSizerConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _GetSizerConfig = _interopRequireDefault(require("../utils/GetSizerConfig.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _default(gameObject) {
  if (gameObject === undefined) {
    gameObject = this;
  }
  return (0, _GetSizerConfig.default)(gameObject);
}
},{"../utils/GetSizerConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetSizerConfig.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/GetChildPrevState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetSizerConfig = _interopRequireDefault(require("./GetSizerConfig.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetChildPrevState = function (child) {
  var childConfig = (0, _GetSizerConfig.default)(child);
  if (!childConfig.hasOwnProperty('prevState')) {
    childConfig.prevState = {};
  }
  return childConfig.prevState;
};
var _default = GetChildPrevState;
exports.default = _default;
},{"./GetSizerConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetSizerConfig.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PushIntoBounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetViewport = _interopRequireDefault(require("../../../plugins/utils/system/GetViewport.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PushIntoBounds = function (bounds) {
  if (bounds === undefined) {
    bounds = (0, _GetViewport.default)(this.scene);
  }
  this.left = Math.max(this.left, bounds.left);
  this.right = Math.min(this.right, bounds.right);
  this.top = Math.max(this.top, bounds.top);
  this.bottom = Math.min(this.bottom, bounds.bottom);
  return this;
};
var _default = PushIntoBounds;
exports.default = _default;
},{"../../../plugins/utils/system/GetViewport.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetViewport.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/actions/AlignConst.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const ALIGN = Phaser.Display.Align;
var _default = {
  center: ALIGN.CENTER,
  left: ALIGN.LEFT_CENTER,
  right: ALIGN.RIGHT_CENTER,
  top: ALIGN.TOP_CENTER,
  bottom: ALIGN.BOTTOM_CENTER,
  'left-top': ALIGN.TOP_LEFT,
  'left-center': ALIGN.LEFT_CENTER,
  'left-bottom': ALIGN.BOTTOM_LEFT,
  'center-top': ALIGN.TOP_CENTER,
  'center-center': ALIGN.CENTER,
  'center-bottom': ALIGN.BOTTOM_CENTER,
  'right-top': ALIGN.TOP_RIGHT,
  'right-center': ALIGN.RIGHT_CENTER,
  'right-bottom': ALIGN.BOTTOM_RIGHT
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/AlignConst.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AlignConst = _interopRequireDefault(require("../../../plugins/utils/actions/AlignConst.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _AlignConst.default;
exports.default = _default;
},{"../../../plugins/utils/actions/AlignConst.js":"node_modules/phaser3-rex-plugins/plugins/utils/actions/AlignConst.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/actions/GlobZone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NOOP = _interopRequireDefault(require("../object/NOOP.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var globZone = new Phaser.GameObjects.Zone({
  sys: {
    queueDepthSort: _NOOP.default,
    events: {
      once: _NOOP.default
    }
  }
}, 0, 0, 1, 1);
globZone.setOrigin(0);
var _default = globZone;
exports.default = _default;
},{"../object/NOOP.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/NOOP.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/align/const.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ALIGN_CONST = {
  /**
  * A constant representing a top-left alignment or position.
  * @constant
  * @name Phaser.Display.Align.TOP_LEFT
  * @since 3.0.0
  * @type {integer}
  */
  TOP_LEFT: 0,
  /**
  * A constant representing a top-center alignment or position.
  * @constant
  * @name Phaser.Display.Align.TOP_CENTER
  * @since 3.0.0
  * @type {integer}
  */
  TOP_CENTER: 1,
  /**
  * A constant representing a top-right alignment or position.
  * @constant
  * @name Phaser.Display.Align.TOP_RIGHT
  * @since 3.0.0
  * @type {integer}
  */
  TOP_RIGHT: 2,
  /**
  * A constant representing a left-top alignment or position.
  * @constant
  * @name Phaser.Display.Align.LEFT_TOP
  * @since 3.0.0
  * @type {integer}
  */
  LEFT_TOP: 3,
  /**
  * A constant representing a left-center alignment or position.
  * @constant
  * @name Phaser.Display.Align.LEFT_CENTER
  * @since 3.0.0
  * @type {integer}
  */
  LEFT_CENTER: 4,
  /**
  * A constant representing a left-bottom alignment or position.
  * @constant
  * @name Phaser.Display.Align.LEFT_BOTTOM
  * @since 3.0.0
  * @type {integer}
  */
  LEFT_BOTTOM: 5,
  /**
  * A constant representing a center alignment or position.
  * @constant
  * @name Phaser.Display.Align.CENTER
  * @since 3.0.0
  * @type {integer}
  */
  CENTER: 6,
  /**
  * A constant representing a right-top alignment or position.
  * @constant
  * @name Phaser.Display.Align.RIGHT_TOP
  * @since 3.0.0
  * @type {integer}
  */
  RIGHT_TOP: 7,
  /**
  * A constant representing a right-center alignment or position.
  * @constant
  * @name Phaser.Display.Align.RIGHT_CENTER
  * @since 3.0.0
  * @type {integer}
  */
  RIGHT_CENTER: 8,
  /**
  * A constant representing a right-bottom alignment or position.
  * @constant
  * @name Phaser.Display.Align.RIGHT_BOTTOM
  * @since 3.0.0
  * @type {integer}
  */
  RIGHT_BOTTOM: 9,
  /**
  * A constant representing a bottom-left alignment or position.
  * @constant
  * @name Phaser.Display.Align.BOTTOM_LEFT
  * @since 3.0.0
  * @type {integer}
  */
  BOTTOM_LEFT: 10,
  /**
  * A constant representing a bottom-center alignment or position.
  * @constant
  * @name Phaser.Display.Align.BOTTOM_CENTER
  * @since 3.0.0
  * @type {integer}
  */
  BOTTOM_CENTER: 11,
  /**
  * A constant representing a bottom-right alignment or position.
  * @constant
  * @name Phaser.Display.Align.BOTTOM_RIGHT
  * @since 3.0.0
  * @type {integer}
  */
  BOTTOM_RIGHT: 12
};
var _default = ALIGN_CONST;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetBottom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../size/GetDisplaySize.js");
var GetBottom = function (gameObject) {
  var height = (0, _GetDisplaySize.GetDisplayHeight)(gameObject);
  return gameObject.y + height - height * gameObject.originY;
};
var _default = GetBottom;
exports.default = _default;
},{"../../size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetCenterX.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../size/GetDisplaySize.js");
var GetCenterX = function (gameObject) {
  var width = (0, _GetDisplaySize.GetDisplayWidth)(gameObject);
  return gameObject.x - width * gameObject.originX + width * 0.5;
};
var _default = GetCenterX;
exports.default = _default;
},{"../../size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetBottom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../size/GetDisplaySize.js");
var SetBottom = function (gameObject, value) {
  var height = (0, _GetDisplaySize.GetDisplayHeight)(gameObject);
  gameObject.y = value - height + height * gameObject.originY;
  return gameObject;
};
var _default = SetBottom;
exports.default = _default;
},{"../../size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetCenterX.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../size/GetDisplaySize.js");
var SetCenterX = function (gameObject, x) {
  var width = (0, _GetDisplaySize.GetDisplayWidth)(gameObject);
  var offsetX = width * gameObject.originX;
  gameObject.x = x + offsetX - width * 0.5;
  return gameObject;
};
var _default = SetCenterX;
exports.default = _default;
},{"../../size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/BottomCenter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetBottom = _interopRequireDefault(require("../../bounds/GetBottom.js"));
var _GetCenterX = _interopRequireDefault(require("../../bounds/GetCenterX.js"));
var _SetBottom = _interopRequireDefault(require("../../bounds/SetBottom.js"));
var _SetCenterX = _interopRequireDefault(require("../../bounds/SetCenterX.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var BottomCenter = function (gameObject, alignIn, offsetX, offsetY) {
  if (offsetX === undefined) {
    offsetX = 0;
  }
  if (offsetY === undefined) {
    offsetY = 0;
  }
  (0, _SetCenterX.default)(gameObject, (0, _GetCenterX.default)(alignIn) + offsetX);
  (0, _SetBottom.default)(gameObject, (0, _GetBottom.default)(alignIn) + offsetY);
  return gameObject;
};
var _default = BottomCenter;
exports.default = _default;
},{"../../bounds/GetBottom.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetBottom.js","../../bounds/GetCenterX.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetCenterX.js","../../bounds/SetBottom.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetBottom.js","../../bounds/SetCenterX.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetCenterX.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetLeft.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../size/GetDisplaySize.js");
var GetLeft = function (gameObject) {
  var width = (0, _GetDisplaySize.GetDisplayWidth)(gameObject);
  return gameObject.x - width * gameObject.originX;
};
var _default = GetLeft;
exports.default = _default;
},{"../../size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetLeft.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../size/GetDisplaySize.js");
var SetLeft = function (gameObject, value) {
  var width = (0, _GetDisplaySize.GetDisplayWidth)(gameObject);
  gameObject.x = value + width * gameObject.originX;
  return gameObject;
};
var _default = SetLeft;
exports.default = _default;
},{"../../size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/BottomLeft.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetBottom = _interopRequireDefault(require("../../bounds/GetBottom.js"));
var _GetLeft = _interopRequireDefault(require("../../bounds/GetLeft.js"));
var _SetBottom = _interopRequireDefault(require("../../bounds/SetBottom.js"));
var _SetLeft = _interopRequireDefault(require("../../bounds/SetLeft.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var BottomLeft = function (gameObject, alignIn, offsetX, offsetY) {
  if (offsetX === undefined) {
    offsetX = 0;
  }
  if (offsetY === undefined) {
    offsetY = 0;
  }
  (0, _SetLeft.default)(gameObject, (0, _GetLeft.default)(alignIn) - offsetX);
  (0, _SetBottom.default)(gameObject, (0, _GetBottom.default)(alignIn) + offsetY);
  return gameObject;
};
var _default = BottomLeft;
exports.default = _default;
},{"../../bounds/GetBottom.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetBottom.js","../../bounds/GetLeft.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetLeft.js","../../bounds/SetBottom.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetBottom.js","../../bounds/SetLeft.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetLeft.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetRight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../size/GetDisplaySize.js");
var GetRight = function (gameObject) {
  var width = (0, _GetDisplaySize.GetDisplayWidth)(gameObject);
  return gameObject.x + width - width * gameObject.originX;
};
var _default = GetRight;
exports.default = _default;
},{"../../size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetRight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../size/GetDisplaySize.js");
var SetRight = function (gameObject, value) {
  var width = (0, _GetDisplaySize.GetDisplayWidth)(gameObject);
  gameObject.x = value - width + width * gameObject.originX;
  return gameObject;
};
var _default = SetRight;
exports.default = _default;
},{"../../size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/BottomRight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetBottom = _interopRequireDefault(require("../../bounds/GetBottom.js"));
var _GetRight = _interopRequireDefault(require("../../bounds/GetRight.js"));
var _SetBottom = _interopRequireDefault(require("../../bounds/SetBottom.js"));
var _SetRight = _interopRequireDefault(require("../../bounds/SetRight.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var BottomRight = function (gameObject, alignIn, offsetX, offsetY) {
  if (offsetX === undefined) {
    offsetX = 0;
  }
  if (offsetY === undefined) {
    offsetY = 0;
  }
  (0, _SetRight.default)(gameObject, (0, _GetRight.default)(alignIn) + offsetX);
  (0, _SetBottom.default)(gameObject, (0, _GetBottom.default)(alignIn) + offsetY);
  return gameObject;
};
var _default = BottomRight;
exports.default = _default;
},{"../../bounds/GetBottom.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetBottom.js","../../bounds/GetRight.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetRight.js","../../bounds/SetBottom.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetBottom.js","../../bounds/SetRight.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetRight.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetCenterY.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../size/GetDisplaySize.js");
var SetCenterY = function (gameObject, y) {
  var height = (0, _GetDisplaySize.GetDisplayHeight)(gameObject);
  var offsetY = height * gameObject.originY;
  gameObject.y = y + offsetY - height * 0.5;
  return gameObject;
};
var _default = SetCenterY;
exports.default = _default;
},{"../../size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/CenterOn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SetCenterX = _interopRequireDefault(require("./SetCenterX.js"));
var _SetCenterY = _interopRequireDefault(require("./SetCenterY.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CenterOn = function (gameObject, x, y) {
  (0, _SetCenterX.default)(gameObject, x);
  return (0, _SetCenterY.default)(gameObject, y);
};
var _default = CenterOn;
exports.default = _default;
},{"./SetCenterX.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetCenterX.js","./SetCenterY.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetCenterY.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetCenterY.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../size/GetDisplaySize.js");
var GetCenterY = function (gameObject) {
  var height = (0, _GetDisplaySize.GetDisplayHeight)(gameObject);
  return gameObject.y - height * gameObject.originY + height * 0.5;
};
var _default = GetCenterY;
exports.default = _default;
},{"../../size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/Center.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CenterOn = _interopRequireDefault(require("../../bounds/CenterOn.js"));
var _GetCenterX = _interopRequireDefault(require("../../bounds/GetCenterX.js"));
var _GetCenterY = _interopRequireDefault(require("../../bounds/GetCenterY.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Center = function (gameObject, alignIn, offsetX, offsetY) {
  if (offsetX === undefined) {
    offsetX = 0;
  }
  if (offsetY === undefined) {
    offsetY = 0;
  }
  (0, _CenterOn.default)(gameObject, (0, _GetCenterX.default)(alignIn) + offsetX, (0, _GetCenterY.default)(alignIn) + offsetY);
  return gameObject;
};
var _default = Center;
exports.default = _default;
},{"../../bounds/CenterOn.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/CenterOn.js","../../bounds/GetCenterX.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetCenterX.js","../../bounds/GetCenterY.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetCenterY.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/LeftCenter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetCenterY = _interopRequireDefault(require("../../bounds/GetCenterY.js"));
var _GetLeft = _interopRequireDefault(require("../../bounds/GetLeft.js"));
var _SetCenterY = _interopRequireDefault(require("../../bounds/SetCenterY.js"));
var _SetLeft = _interopRequireDefault(require("../../bounds/SetLeft.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var LeftCenter = function (gameObject, alignIn, offsetX, offsetY) {
  if (offsetX === undefined) {
    offsetX = 0;
  }
  if (offsetY === undefined) {
    offsetY = 0;
  }
  (0, _SetLeft.default)(gameObject, (0, _GetLeft.default)(alignIn) - offsetX);
  (0, _SetCenterY.default)(gameObject, (0, _GetCenterY.default)(alignIn) + offsetY);
  return gameObject;
};
var _default = LeftCenter;
exports.default = _default;
},{"../../bounds/GetCenterY.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetCenterY.js","../../bounds/GetLeft.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetLeft.js","../../bounds/SetCenterY.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetCenterY.js","../../bounds/SetLeft.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetLeft.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/RightCenter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetCenterY = _interopRequireDefault(require("../../bounds/GetCenterY.js"));
var _GetRight = _interopRequireDefault(require("../../bounds/GetRight.js"));
var _SetCenterY = _interopRequireDefault(require("../../bounds/SetCenterY.js"));
var _SetRight = _interopRequireDefault(require("../../bounds/SetRight.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var RightCenter = function (gameObject, alignIn, offsetX, offsetY) {
  if (offsetX === undefined) {
    offsetX = 0;
  }
  if (offsetY === undefined) {
    offsetY = 0;
  }
  (0, _SetRight.default)(gameObject, (0, _GetRight.default)(alignIn) + offsetX);
  (0, _SetCenterY.default)(gameObject, (0, _GetCenterY.default)(alignIn) + offsetY);
  return gameObject;
};
var _default = RightCenter;
exports.default = _default;
},{"../../bounds/GetCenterY.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetCenterY.js","../../bounds/GetRight.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetRight.js","../../bounds/SetCenterY.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetCenterY.js","../../bounds/SetRight.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetRight.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetTop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../size/GetDisplaySize.js");
var GetTop = function (gameObject) {
  var height = (0, _GetDisplaySize.GetDisplayHeight)(gameObject);
  return gameObject.y - height * gameObject.originY;
};
var _default = GetTop;
exports.default = _default;
},{"../../size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetTop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../size/GetDisplaySize.js");
var SetTop = function (gameObject, value) {
  var height = (0, _GetDisplaySize.GetDisplayHeight)(gameObject);
  gameObject.y = value + height * gameObject.originY;
  return gameObject;
};
var _default = SetTop;
exports.default = _default;
},{"../../size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/TopCenter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetCenterX = _interopRequireDefault(require("../../bounds/GetCenterX.js"));
var _GetTop = _interopRequireDefault(require("../../bounds/GetTop.js"));
var _SetCenterX = _interopRequireDefault(require("../../bounds/SetCenterX.js"));
var _SetTop = _interopRequireDefault(require("../../bounds/SetTop.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var TopCenter = function (gameObject, alignIn, offsetX, offsetY) {
  if (offsetX === undefined) {
    offsetX = 0;
  }
  if (offsetY === undefined) {
    offsetY = 0;
  }
  (0, _SetCenterX.default)(gameObject, (0, _GetCenterX.default)(alignIn) + offsetX);
  (0, _SetTop.default)(gameObject, (0, _GetTop.default)(alignIn) - offsetY);
  return gameObject;
};
var _default = TopCenter;
exports.default = _default;
},{"../../bounds/GetCenterX.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetCenterX.js","../../bounds/GetTop.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetTop.js","../../bounds/SetCenterX.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetCenterX.js","../../bounds/SetTop.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetTop.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/TopLeft.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetLeft = _interopRequireDefault(require("../../bounds/GetLeft.js"));
var _GetTop = _interopRequireDefault(require("../../bounds/GetTop.js"));
var _SetLeft = _interopRequireDefault(require("../../bounds/SetLeft.js"));
var _SetTop = _interopRequireDefault(require("../../bounds/SetTop.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var TopLeft = function (gameObject, alignIn, offsetX, offsetY) {
  if (offsetX === undefined) {
    offsetX = 0;
  }
  if (offsetY === undefined) {
    offsetY = 0;
  }
  (0, _SetLeft.default)(gameObject, (0, _GetLeft.default)(alignIn) - offsetX);
  (0, _SetTop.default)(gameObject, (0, _GetTop.default)(alignIn) - offsetY);
  return gameObject;
};
var _default = TopLeft;
exports.default = _default;
},{"../../bounds/GetLeft.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetLeft.js","../../bounds/GetTop.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetTop.js","../../bounds/SetLeft.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetLeft.js","../../bounds/SetTop.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetTop.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/TopRight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetRight = _interopRequireDefault(require("../../bounds/GetRight.js"));
var _GetTop = _interopRequireDefault(require("../../bounds/GetTop.js"));
var _SetRight = _interopRequireDefault(require("../../bounds/SetRight.js"));
var _SetTop = _interopRequireDefault(require("../../bounds/SetTop.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var TopRight = function (gameObject, alignIn, offsetX, offsetY) {
  if (offsetX === undefined) {
    offsetX = 0;
  }
  if (offsetY === undefined) {
    offsetY = 0;
  }
  (0, _SetRight.default)(gameObject, (0, _GetRight.default)(alignIn) + offsetX);
  (0, _SetTop.default)(gameObject, (0, _GetTop.default)(alignIn) - offsetY);
  return gameObject;
};
var _default = TopRight;
exports.default = _default;
},{"../../bounds/GetRight.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetRight.js","../../bounds/GetTop.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/GetTop.js","../../bounds/SetRight.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetRight.js","../../bounds/SetTop.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/bounds/SetTop.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/QuickSet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _const = _interopRequireDefault(require("../const.js"));
var _BottomCenter = _interopRequireDefault(require("./BottomCenter.js"));
var _BottomLeft = _interopRequireDefault(require("./BottomLeft.js"));
var _BottomRight = _interopRequireDefault(require("./BottomRight.js"));
var _Center = _interopRequireDefault(require("./Center.js"));
var _LeftCenter = _interopRequireDefault(require("./LeftCenter.js"));
var _RightCenter = _interopRequireDefault(require("./RightCenter.js"));
var _TopCenter = _interopRequireDefault(require("./TopCenter.js"));
var _TopLeft = _interopRequireDefault(require("./TopLeft.js"));
var _TopRight = _interopRequireDefault(require("./TopRight.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var AlignInMap = [];
AlignInMap[_const.default.BOTTOM_CENTER] = _BottomCenter.default;
AlignInMap[_const.default.BOTTOM_LEFT] = _BottomLeft.default;
AlignInMap[_const.default.BOTTOM_RIGHT] = _BottomRight.default;
AlignInMap[_const.default.CENTER] = _Center.default;
AlignInMap[_const.default.LEFT_CENTER] = _LeftCenter.default;
AlignInMap[_const.default.RIGHT_CENTER] = _RightCenter.default;
AlignInMap[_const.default.TOP_CENTER] = _TopCenter.default;
AlignInMap[_const.default.TOP_LEFT] = _TopLeft.default;
AlignInMap[_const.default.TOP_RIGHT] = _TopRight.default;
var QuickSet = function (child, alignIn, position, offsetX, offsetY) {
  return AlignInMap[position](child, alignIn, offsetX, offsetY);
};
var _default = QuickSet;
exports.default = _default;
},{"../const.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/align/const.js","./BottomCenter.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/BottomCenter.js","./BottomLeft.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/BottomLeft.js","./BottomRight.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/BottomRight.js","./Center.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/Center.js","./LeftCenter.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/LeftCenter.js","./RightCenter.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/RightCenter.js","./TopCenter.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/TopCenter.js","./TopLeft.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/TopLeft.js","./TopRight.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/TopRight.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/actions/AlignIn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GlobZone = _interopRequireDefault(require("./GlobZone.js"));
var _QuickSet = _interopRequireDefault(require("../align/align/in/QuickSet.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var AlignIn = function (child, x, y, width, height, align) {
  _GlobZone.default.setPosition(x, y).setSize(width, height);
  (0, _QuickSet.default)(child, _GlobZone.default, align);
};
var _default = AlignIn;
exports.default = _default;
},{"./GlobZone.js":"node_modules/phaser3-rex-plugins/plugins/utils/actions/GlobZone.js","../align/align/in/QuickSet.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/QuickSet.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/DrawBounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AlignConst = _interopRequireDefault(require("../utils/AlignConst.js"));
var _AlignIn = _interopRequireDefault(require("../../../plugins/utils/actions/AlignIn.js"));
var _GetBounds = require("../../../plugins/utils/bounds/GetBounds.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const Group = Phaser.GameObjects.Group;
var DrawBounds = function (graphics, config) {
  var scene = graphics.scene;
  var color, lineWidth;
  var createTextCallback, createTextCallbackScope, textAlign;
  if (typeof config === 'number') {
    color = config;
  } else {
    color = GetValue(config, 'color');
    lineWidth = GetValue(config, 'lineWidth');
    var nameTextConfig = GetValue(config, 'name', false);
    if (nameTextConfig) {
      createTextCallback = GetValue(nameTextConfig, 'createTextCallback', DefaultCreateTextCallback);
      createTextCallbackScope = GetValue(nameTextConfig, 'createTextCallbackScope', undefined);
      textAlign = GetValue(nameTextConfig, 'align', 'left-top');
      if (typeof textAlign === 'string') {
        textAlign = _AlignConst.default[textAlign];
      }
    }
  }
  if (color === undefined) {
    color = 0xffffff;
  }
  if (lineWidth === undefined) {
    lineWidth = 1;
  }
  if (createTextCallback && !graphics.children) {
    graphics.children = new Group(scene);
    graphics.once('destroy', function (graphics, fromScene) {
      graphics.children.destroy(!fromScene);
      graphics.children = undefined;
    });
    var graphicsClear = graphics.clear.bind(graphics);
    graphics.clear = function () {
      graphicsClear();
      graphics.children.clear(false, true);
    };
  }
  var children = this.getAllShownChildren([this]),
    child;
  var nameText;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    child = children[i];
    if (child.getBounds || child.width !== undefined && child.height !== undefined) {
      GlobRect = (0, _GetBounds.GetBounds)(child, GlobRect);
    } else {
      continue;
    }
    if (color != null) {
      graphics.lineStyle(lineWidth, color).strokeRectShape(GlobRect);
    }
    if (child.name && createTextCallback) {
      if (createTextCallbackScope) {
        nameText = createTextCallback.call(createTextCallbackScope, scene);
      } else {
        nameText = createTextCallback(scene);
      }
      if (nameText) {
        nameText.setText(child.name);
        graphics.children.add(nameText);
        (0, _AlignIn.default)(nameText, GlobRect.x, GlobRect.y, GlobRect.width, GlobRect.height, textAlign);
      }
    }
  }
  return this;
};
var DefaultCreateTextCallback = function (scene, child, childBoundsRect) {
  return scene.add.text(0, 0, '');
};
var GlobRect = undefined;
var _default = DrawBounds;
exports.default = _default;
},{"../utils/AlignConst.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/AlignConst.js","../../../plugins/utils/actions/AlignIn.js":"node_modules/phaser3-rex-plugins/plugins/utils/actions/AlignIn.js","../../../plugins/utils/bounds/GetBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/bounds/GetBounds.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/bounds/GetBoundsConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetValue = Phaser.Utils.Objects.GetValue;
var GetBoundsConfig = function (config, out) {
  if (out === undefined) {
    out = {};
  }
  if (typeof config === 'number') {
    out.left = config;
    out.right = config;
    out.top = config;
    out.bottom = config;
  } else {
    out.left = GetValue(config, 'left', 0);
    out.right = GetValue(config, 'right', 0);
    out.top = GetValue(config, 'top', 0);
    out.bottom = GetValue(config, 'bottom', 0);
  }
  return out;
};
var _default = GetBoundsConfig;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/GetBoundsConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetBoundsConfig = _interopRequireDefault(require("../../../plugins/utils/bounds/GetBoundsConfig.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _GetBoundsConfig.default;
exports.default = _default;
},{"../../../plugins/utils/bounds/GetBoundsConfig.js":"node_modules/phaser3-rex-plugins/plugins/utils/bounds/GetBoundsConfig.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/AddChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Container = _interopRequireDefault(require("../../container/Container.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ContainerAdd = _Container.default.prototype.add;
var AddChild = function (gameObject) {
  ContainerAdd.call(this, gameObject);
  if (this.sizerEventsEnable) {
    gameObject.emit('sizer.add', gameObject, this);
    this.emit('add', gameObject, this);
  }
  return this;
};
var _default = AddChild;
exports.default = _default;
},{"../../container/Container.js":"node_modules/phaser3-rex-plugins/templates/ui/container/Container.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/AddChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetBoundsConfig = _interopRequireDefault(require("../utils/GetBoundsConfig.js"));
var _AddChild = _interopRequireDefault(require("./utils/AddChild.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  addBackground(gameObject, paddingConfig, childKey) {
    if (this.backgroundChildren === undefined) {
      this.backgroundChildren = [];
    }
    if (typeof paddingConfig === 'string') {
      childKey = paddingConfig;
      paddingConfig = undefined;
    }
    if (paddingConfig === undefined) {
      paddingConfig = 0;
    }
    _AddChild.default.call(this, gameObject);
    this.backgroundChildren.push(gameObject);
    var config = this.getSizerConfig(gameObject);
    config.padding = (0, _GetBoundsConfig.default)(paddingConfig);
    if (childKey !== undefined) {
      this.addChildrenMap(childKey, gameObject);
    }
    return this;
  },
  isBackground(gameObject) {
    if (this.backgroundChildren === undefined) {
      return false;
    }
    return this.backgroundChildren.indexOf(gameObject) !== -1;
  }
};
exports.default = _default;
},{"../utils/GetBoundsConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetBoundsConfig.js","./utils/AddChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/AddChild.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/RemoveChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Container = _interopRequireDefault(require("../../container/Container.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const RemoveItem = Phaser.Utils.Array.Remove;
const ContainerRemove = _Container.default.prototype.remove;
var RemoveChild = function (gameObject, destroyChild) {
  if (this.isBackground(gameObject)) {
    RemoveItem(this.backgroundChildren, gameObject);
  }
  ContainerRemove.call(this, gameObject, destroyChild);
  if (!destroyChild && this.sizerEventsEnable) {
    gameObject.emit('sizer.remove', gameObject, this);
    this.emit('remove', gameObject, this);
  }
  return this;
};
var _default = RemoveChild;
exports.default = _default;
},{"../../container/Container.js":"node_modules/phaser3-rex-plugins/templates/ui/container/Container.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetParentSizerMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetParent = function (gameObject, name) {
  var parent;
  if (name === undefined) {
    if (gameObject.hasOwnProperty('rexContainer')) {
      parent = gameObject.rexContainer.parent;
      if (parent && !parent.isRexSizer) {
        parent = null;
      }
    }
  } else {
    parent = GetParent(gameObject);
    while (parent) {
      if (parent.name === name) {
        break;
      }
      parent = GetParent(parent);
    }
  }
  return parent;
};
var GetTopmostParent = function (gameObject) {
  var parent = GetParent(gameObject);
  while (parent) {
    gameObject = parent;
    parent = GetParent(parent);
  }
  return gameObject;
};
var _default = {
  getParentSizer(gameObject, name) {
    if (typeof gameObject === 'string') {
      name = gameObject;
      gameObject = undefined;
    }
    if (gameObject === undefined) {
      gameObject = this;
    }
    return GetParent(gameObject, name);
  },
  getTopmostSizer(gameObject) {
    if (gameObject === undefined) {
      gameObject = this;
    }
    return GetTopmostParent(gameObject);
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/RemoveChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RemoveChild = _interopRequireDefault(require("./utils/RemoveChild.js"));
var _GetParentSizerMethods = _interopRequireDefault(require("./GetParentSizerMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const RemoveItem = Phaser.Utils.Array.Remove;
var _default = {
  removeFromParentSizer() {
    var parent = _GetParentSizerMethods.default.getParentSizer(gameObject);
    if (parent) {
      parent.remove(this);
    }
    return this;
  },
  removeBackground(gameObject, destroyChild) {
    if (this.backgroundChildren === undefined) {
      return this;
    }
    if (this.getParentSizer(gameObject) !== this) {
      return this;
    }
    RemoveItem(this.backgroundChildren, gameObject);
    _RemoveChild.default.call(this, gameObject, destroyChild);
    return this;
  },
  removeAllBackgrounds(destroyChild) {
    if (this.backgroundChildren === undefined) {
      return this;
    }
    for (var i = this.backgroundChildren.length - 1; i >= 0; i--) {
      this.remove(this.backgroundChildren[i], destroyChild);
    }
    return this;
  }
};
exports.default = _default;
},{"./utils/RemoveChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/RemoveChild.js","./GetParentSizerMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetParentSizerMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/AddChildrenMap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var AddChildrenMap = function (key, gameObject) {
  this.childrenMap[key] = gameObject;
  return this;
};
var _default = AddChildrenMap;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/RemoveChildrenMap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RemoveChildrenMap = function (key) {
  if (typeof key === 'object') {
    var gameObject = key;
    for (var key in this.childrenMap) {
      if (this.childrenMap[key] === gameObject) {
        delete this.childrenMap[key];
        return this;
      }
    }
  }
  delete this.childrenMap[key];
  return this;
};
var _default = RemoveChildrenMap;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetElement.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetElement = function (mapNameList, recursive) {
  if (typeof mapNameList === 'string') {
    mapNameList = mapNameList.split('.');
  }
  if (mapNameList.length === 0) {
    return undefined;
  }
  var name = mapNameList.shift(),
    element = null;
  if (name.charAt(0) === '#') {
    // Get element by name
    name = name.substring(1);
    element = this.getByName(name, recursive);
  } else if (name.indexOf('[') === -1) {
    // Get element by key
    if (this.childrenMap) {
      element = this.childrenMap[name];
    }
  } else {
    // Get element by key[]
    var innerMatch = name.match(RE_OBJ);
    if (innerMatch != null) {
      if (this.childrenMap) {
        var elements = this.childrenMap[innerMatch[1]];
        if (elements) {
          element = elements[innerMatch[2]];
        }
      }
    }
  }
  if (mapNameList.length === 0) {
    return element;
  } else if (element && element.childrenMap) {
    return element.getElement(mapNameList);
  } else {
    return null;
  }
};
const RE_OBJ = /(\S+)\[(\d+)\]/i;
var _default = GetElement;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PaddingMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PaddingMethods = require("../../../plugins/utils/padding/PaddingMethods.js");
var _default = {
  getInnerPadding(key) {
    return (0, _PaddingMethods.GetPadding)(this.space, key);
  },
  setInnerPadding(key, value) {
    (0, _PaddingMethods.SetPadding)(this.space, key, value);
    return this;
  },
  getOuterPadding(key) {
    return (0, _PaddingMethods.GetPadding)(this.getSizerConfig(this).padding, key);
  },
  setOuterPadding(key, value) {
    (0, _PaddingMethods.SetPadding)(this.getSizerConfig(this).padding, key, value);
    return this;
  },
  getChildOuterPadding(child, key) {
    if (typeof child === 'string') {
      child = this.getElement(child);
    }
    return (0, _PaddingMethods.GetPadding)(this.getSizerConfig(child).padding, key);
  },
  setChildOuterPadding(child, key, value) {
    if (typeof child === 'string') {
      child = this.getElement(child);
    }
    (0, _PaddingMethods.SetPadding)(this.getSizerConfig(child).padding, key, value);
    return this;
  }
};
exports.default = _default;
},{"../../../plugins/utils/padding/PaddingMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/padding/PaddingMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ResolveWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ResolveWidth = function (width) {
  if (width === undefined) {
    width = Math.max(this.childrenWidth, this.minWidth);
  } else {
    /*
    var minWidth = Math.max(this.childrenWidth, this.minWidth);
    if (minWidth > width) {
        // Warning
    }
    */
  }
  return width;
};
var _default = ResolveWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ResolveChildrenWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ResolveChildrenWidth = function (parentWidth) {
  // Resolve width of sizer children
  var child, childWidth;
  for (var i in this.sizerChildren) {
    child = this.sizerChildren[i];
    if (child && child.isRexSizer && !child.ignoreLayout) {
      childWidth = this.getExpandedChildWidth(child, parentWidth);
      childWidth = child.resolveWidth(childWidth);
      child.resolveChildrenWidth(childWidth);
    }
  }
};
var _default = ResolveChildrenWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ResolveHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ResolveHeight = function (height) {
  var minHeight = Math.max(this.childrenHeight, this.minHeight);
  if (height === undefined) {
    height = minHeight;
  } else {
    if (minHeight > height) {
      // Warning
    }
  }
  return height;
};
var _default = ResolveHeight;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PostResolveSize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var PostResolveSize = function (width, height) {};
var _default = PostResolveSize;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetChildWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../../plugins/utils/size/GetDisplaySize.js");
var GetChildWidth = function (child) {
  var childWidth;
  if (child.isRexSizer) {
    // Sizer game object
    childWidth = Math.max(child.minWidth, child.childrenWidth);
  } else {
    // Normal game object
    if (child.minWidth !== undefined) {
      // Force minWidth
      childWidth = child.minWidth;
    } else {
      childWidth = (0, _GetDisplaySize.GetDisplayWidth)(child);
    }
  }
  return childWidth;
};
var _default = GetChildWidth;
exports.default = _default;
},{"../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetChildHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../../plugins/utils/size/GetDisplaySize.js");
var GetChildHeight = function (child) {
  var childHeight;
  if (child.isRexSizer) {
    // Sizer game object
    childHeight = Math.max(child.minHeight, child.childrenHeight);
  } else {
    // Normal game object
    if (child.minHeight !== undefined) {
      // Force minHeight
      childHeight = child.minHeight;
    } else {
      childHeight = (0, _GetDisplaySize.GetDisplayHeight)(child);
    }
  }
  return childHeight;
};
var _default = GetChildHeight;
exports.default = _default;
},{"../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetExpandedChildWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Override
var GetExpandedChildWidth = function (child, parentWidth) {
  return parentWidth;
};
var _default = GetExpandedChildWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetExpandedChildHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Override
var GetExpandedChildHeight = function (child, parentHeight) {
  return parentHeight;
};
var _default = GetExpandedChildHeight;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetChildrenWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Override
var GetChildrenWidth = function () {
  return 0;
};
var _default = GetChildrenWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetChildrenHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Override
var GetChildrenHeight = function () {
  return 0;
};
var _default = GetChildrenHeight;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetAllChildrenSizers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetAllChildrenSizers = function (out) {
  if (out === undefined) {
    out = [];
  }
  var startIdx = out.length;
  var children = this.getChildrenSizers(out);
  var endIdx = out.length;
  for (var i = startIdx; i < endIdx; i++) {
    children[i].getAllChildrenSizers(out);
  }
  return out;
};
var _default = GetAllChildrenSizers;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetChildrenSizers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Default method
var GetChildrenSizers = function (out) {
  if (out === undefined) {
    out = [];
  }
  return out;
};
var _default = GetChildrenSizers;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetShownChildrenMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  getShownChildren(out) {
    if (out === undefined) {
      out = [];
    }
    var children = this.children,
      child;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      child = children[i];
      if (child.rexSizer && child.rexSizer.hidden) {
        // Don't add hidden child
        continue;
      }
      out.push(child);
    }
    return out;
  },
  getAllShownChildren(out) {
    if (out === undefined) {
      out = [];
    }
    var queue = [this];
    while (queue.length > 0) {
      var current = queue.shift();
      if (current.rexSizer && current.rexSizer.hidden) {
        continue;
      }
      if (current !== this) {
        out.push(current);
      }
      if (current.isRexContainerLite) {
        queue.push(...current.children);
      }
    }
    return out;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PreLayout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var PreLayout = function () {
  this._childrenWidth = undefined;
  this._childrenHeight = undefined;
  var children = this.getChildrenSizers(),
    child;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    child = children[i];
    if (child.ignoreLayout) {
      continue;
    }
    child.preLayout();
  }
};
var _default = PreLayout;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/Layout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Layout = function () {
  // Save scale
  var scaleXSave = this.scaleX;
  var scaleYSave = this.scaleY;
  var scale1 = scaleXSave === 1 && scaleYSave === 1;
  if (!scale1) {
    this.setScale(1);
  }

  // Run layout with scale = 1
  this.runLayout();

  // Restore scale
  if (!scale1) {
    this.setScale(scaleXSave, scaleYSave);
  }
  return this;
};
var _default = Layout;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/RunLayout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Override
var RunLayout = function (parent, newWidth, newHeight) {
  // Skip hidden or !dirty sizer
  if (this.ignoreLayout) {
    return this;
  }
  var isTopmostParent = !parent;
  // Preprocessor, top parent only
  if (isTopmostParent) {
    this.preLayout();
  }

  // Calculate parent width
  newWidth = this.resolveWidth(newWidth);
  // Calculate all children width, run width wrap
  if (isTopmostParent) {
    this.resolveChildrenWidth(newWidth);
    this.runWidthWrap(newWidth);
  }
  // Calculate parent height
  newHeight = this.resolveHeight(newHeight);
  // The last chance of resolving size
  this.postResolveSize(newWidth, newHeight);
  // Resize parent
  this.resize(newWidth, newHeight);
  if (this.sizerEventsEnable) {
    if (this.layoutedChildren === undefined) {
      this.layoutedChildren = [];
    }
  }

  // Layout children    
  this.layoutChildren();

  // Layout background children
  this.layoutBackgrounds();
  if (this.sizerEventsEnable) {
    this.emit('postlayout', this.layoutedChildren, this);
    this.layoutedChildren.length = 0;
  }
  return this.postLayout();
};
var _default = RunLayout;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/LayoutChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Override
var LayoutChildren = function () {};
var _default = LayoutChildren;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PostLayout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var PostLayout = function (parent, newWidth, newHeight) {
  if (this._anchor) {
    this._anchor.updatePosition();
  }
  return this;
};
var _default = PostLayout;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/RunWidthWrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Default method
var RunWidthWrap = function (parentWidth) {
  var child, childWidth;
  for (var i in this.sizerChildren) {
    child = this.sizerChildren[i];
    if (!child || child.isRexSizer && child.ignoreLayout || !child.runWidthWrap) {
      continue;
    }
    childWidth = this.getExpandedChildWidth(child, parentWidth);
    if (child.isRexSizer) {
      childWidth = child.resolveWidth(childWidth);
    }
    child.runWidthWrap(childWidth);
  }
  return this;
};
var _default = RunWidthWrap;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/anchor/Anchor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
var _GetViewport = _interopRequireDefault(require("../../utils/system/GetViewport.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Anchor extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject, {
      eventEmitter: false
    });
    // No event emitter
    // this.parent = gameObject;

    this.viewport = undefined;
    this.resetFromJSON(config);
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }
    this.autoAnchor(false);
    this.viewport = undefined;
    this.onUpdateViewportCallback = undefined;
    this.onUpdateViewportCallbackScope = undefined;
    this.onResizeCallback = undefined;
    this.onResizeCallbackScope = undefined;
    super.shutdown(fromScene);
  }
  resetFromJSON(o) {
    if (o === undefined) {
      o = {};
    }

    // Position
    var alignX, configX;
    if (o.x !== undefined) {
      alignX = null;
      configX = o.x;
    } else if (o.left !== undefined) {
      alignX = 0;
      configX = o.left;
    } else if (o.right !== undefined) {
      alignX = 1;
      configX = o.right;
    } else if (o.centerX !== undefined) {
      alignX = 0.5;
      configX = o.centerX;
    }
    var alignY, configY;
    if (o.y !== undefined) {
      alignY = null;
      configY = o.y;
    } else if (o.top !== undefined) {
      alignY = 0;
      configY = o.top;
    } else if (o.bottom !== undefined) {
      alignY = 1;
      configY = o.bottom;
    } else if (o.centerY !== undefined) {
      alignY = 0.5;
      configY = o.centerY;
    }
    var percentageX, offsetX;
    if (configX !== undefined) {
      configX = configX.replace('left', '0%').replace('right', '100%').replace('center', '50%').split('%');
      percentageX = parseFloat(configX[0]) / 100;
      offsetX = configX[1] === '' ? 0 : parseFloat(configX[1]);
    }
    var percentageY, offsetY;
    if (configY !== undefined) {
      configY = configY.replace('top', '0%').replace('bottom', '100%').replace('center', '50%').split('%');
      percentageY = parseFloat(configY[0]) / 100;
      offsetY = configY[1] === '' ? 0 : parseFloat(configY[1]);
    }

    // Size
    var configWidth = o.width;
    var percentageWidth, paddingWidth;
    if (configWidth !== undefined) {
      configWidth = configWidth.split('%');
      percentageWidth = parseFloat(configWidth[0]) / 100;
      paddingWidth = configWidth[1] === '' ? 0 : parseFloat(configWidth[1]);
    }
    var configHeight = o.height;
    var percentageHeight, paddingHeight;
    if (configHeight !== undefined) {
      configHeight = configHeight.split('%');
      percentageHeight = parseFloat(configHeight[0]) / 100;
      paddingHeight = configHeight[1] === '' ? 0 : parseFloat(configHeight[1]);
    }

    // Position
    this.setAlign(alignX, alignY);
    this.setPercentage(percentageX, percentageY);
    this.setOffset(offsetX, offsetY);
    // Size
    this.setSizePercentage(percentageWidth, percentageHeight);
    this.setSizePadding(paddingWidth, paddingHeight);
    var onResizeCallback = o.onResizeCallback;
    var onResizeCallbackScope = o.onResizeCallbackScope;
    if (onResizeCallback !== undefined) {
      this.setResizeCallback(onResizeCallback, onResizeCallbackScope);
    }
    var onUpdateViewportCallback = o.onUpdateViewportCallback;
    var onUpdateViewportCallbackScope = o.onUpdateViewportCallbackScope;
    if (onUpdateViewportCallback !== undefined) {
      this.setUpdateViewportCallback(onUpdateViewportCallback, onUpdateViewportCallbackScope);
    }
    this.autoAnchor(o.enable);
    return this;
  }
  autoAnchor(enable) {
    if (enable === undefined) {
      enable = true;
    }
    enable = !!enable;
    if (this.autoAnchorEnable === enable) {
      return this;
    }
    if (enable) {
      this.scene.sys.scale.on('resize', this.anchor, this);
      this.anchor();
    } else {
      this.scene.sys.scale.off('resize', this.anchor, this);
    }
    this.autoAnchorEnable = enable;
    return this;
  }

  // Position
  setAlign(x, y) {
    this.alignX = x;
    this.alignY = y;
    return this;
  }
  setPercentage(x, y) {
    this.percentageX = x;
    this.percentageY = y;
    return this;
  }
  setOffset(x, y) {
    this.offsetX = x;
    this.offsetY = y;
    return this;
  }

  // Size
  setSizePercentage(width, height) {
    this.percentageWidth = width;
    this.percentageHeight = height;
    return this;
  }
  setSizePadding(width, height) {
    this.paddingWidth = width;
    this.paddingHeight = height;
    return this;
  }
  setResizeCallback(callback, scope) {
    this.onResizeCallback = callback;
    this.onResizeCallbackScope = scope;
    return this;
  }
  setUpdateViewportCallback(callback, scope) {
    this.onUpdateViewportCallback = callback;
    this.onUpdateViewportCallbackScope = scope;
    return this;
  }
  anchor() {
    this.updateViewport();
    this.updateSize();
    this.updatePosition();
    return this;
  }
  updateSize() {
    var callback = this.onResizeCallback,
      scope = this.onResizeCallbackScope;
    var newWidth = this.anchorWidth,
      newHeight = this.anchorHeight;
    if (newWidth === undefined && newHeight === undefined || !callback) {
      return;
    }
    var gameObject = this.parent;
    if (newWidth === undefined) {
      newWidth = gameObject.width;
    }
    if (newHeight === undefined) {
      newHeight = gameObject.height;
    }
    if (scope) {
      callback.call(scope, newWidth, newHeight, gameObject, this);
    } else {
      callback(newWidth, newHeight, gameObject, this);
    }
  }
  updatePosition() {
    var gameObject = this.parent;
    if (this.alignX === null) {
      gameObject.x = this.anchorX;
    } else if (this.alignX !== undefined) {
      gameObject.x = this.anchorX + gameObject.displayWidth * (gameObject.originX - this.alignX);
    }
    if (this.alignY === null) {
      gameObject.y = this.anchorY;
    } else if (this.alignY !== undefined) {
      gameObject.y = this.anchorY + gameObject.displayHeight * (gameObject.originY - this.alignY);
    }
    return this;
  }
  get anchorX() {
    return this.viewport.x + this.viewport.width * this.percentageX + this.offsetX;
  }
  get anchorY() {
    return this.viewport.y + this.viewport.height * this.percentageY + this.offsetY;
  }
  get anchorWidth() {
    if (this.percentageWidth === undefined) {
      return undefined;
    }
    return this.viewport.width * this.percentageWidth + this.paddingWidth;
  }
  get anchorHeight() {
    if (this.percentageHeight === undefined) {
      return undefined;
    }
    return this.viewport.height * this.percentageHeight + this.paddingHeight;
  }
  updateViewport() {
    var camera = this.parent.scene.cameras.main;
    this.viewport = (0, _GetViewport.default)(this.scene, camera, this.viewport);
    var viewport = this.viewport;
    var callback = this.onUpdateViewportCallback,
      scope = this.onUpdateViewportCallbackScope;
    if (callback) {
      if (scope) {
        callback.call(scope, viewport, this.parent, this);
      } else {
        callback(viewport, this.parent, this);
      }
    }
  }
}
var _default = Anchor;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js","../../utils/system/GetViewport.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetViewport.js"}],"node_modules/phaser3-rex-plugins/templates/ui/anchor/Anchor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Anchor = _interopRequireDefault(require("../../../plugins/behaviors/anchor/Anchor.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _Anchor.default;
exports.default = _default;
},{"../../../plugins/behaviors/anchor/Anchor.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/anchor/Anchor.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/SetAnchor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Anchor = _interopRequireDefault(require("../anchor/Anchor.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var SetAnchor = function (config) {
  if (config === undefined) {
    config = {};
  }

  // Assign default onResizeCallback if not given    
  var hasMinWidth = config.hasOwnProperty('width');
  var hasMinHeight = config.hasOwnProperty('height');
  var hasOnResizeCallback = config.hasOwnProperty('onResizeCallback');
  if ((hasMinWidth || hasMinHeight) && !hasOnResizeCallback) {
    config.onResizeCallback = function (width, height, sizer) {
      if (hasMinWidth) {
        sizer.setMinWidth(width);
      }
      if (hasMinHeight) {
        sizer.setMinHeight(height);
      }
      sizer.layout();
    };
  }
  if (this._anchor === undefined) {
    this._anchor = new _Anchor.default(this, config);
  } else {
    this._anchor.resetFromJSON(config);
  }
  return this;
};
var _default = SetAnchor;
exports.default = _default;
},{"../anchor/Anchor.js":"node_modules/phaser3-rex-plugins/templates/ui/anchor/Anchor.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/scale/Scale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseValueTaskBase = _interopRequireDefault(require("../../utils/componentbase/tweentask/EaseValueTaskBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const Linear = Phaser.Math.Linear;
class Scale extends _EaseValueTaskBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;
    // this.timer

    this.scaleStart = {};
    this.scaleEnd = {};
    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this.setMode(GetValue(o, 'mode', 0));
    this.setScaleRange(GetAdvancedValue(o, 'start', undefined), GetAdvancedValue(o, 'end', 0));
    return this;
  }
  setMode(m) {
    if (typeof m === 'string') {
      m = MODE[m];
    }
    this.mode = m;
    return this;
  }
  setScaleRange(start, end) {
    if (typeof start === 'number') {
      this.startX = start;
      this.startY = start;
    } else {
      this.startX = GetAdvancedValue(start, 'x', this.parent.scaleX);
      this.startY = GetAdvancedValue(start, 'y', this.parent.scaleY);
    }
    if (typeof end === 'number') {
      this.endX = end;
      this.endY = end;
    } else {
      this.endX = GetAdvancedValue(end, 'x', undefined);
      this.endY = GetAdvancedValue(end, 'y', undefined);
    }
    this.hasScaleX = this.startX !== undefined && this.endX !== undefined;
    this.hasScaleY = this.startY !== undefined && this.endY !== undefined;
    return this;
  }
  start() {
    if (this.timer.isRunning) {
      return this;
    }
    var gameObject = this.parent;
    if (this.hasScaleX) {
      gameObject.scaleX = this.startX;
    }
    if (this.hasScaleY) {
      gameObject.scaleY = this.startY;
    }
    var repeat = this.repeat;
    if (this.mode === 2) {
      // Yoyo
      if (repeat !== -1) {
        repeat = (repeat + 1) * 2 - 1;
      }
    }
    this.timer.setDelay(this.delay).setDuration(this.duration).setRepeat(repeat);
    super.start();
    return this;
  }
  updateGameObject(gameObject, timer) {
    var t = timer.t;
    if (timer.isOddIteration) {
      // Yoyo
      t = 1 - t;
    }
    t = this.easeFn(t);
    if (this.hasScaleX) {
      gameObject.scaleX = Linear(this.startX, this.endX, t);
    }
    if (this.hasScaleY) {
      gameObject.scaleY = Linear(this.startY, this.endY, t);
    }
  }
  complete() {
    super.complete();
    if (this.mode === 1) {
      this.parent.destroy();
      // Will also destroy this behavior
    }

    return this;
  }
}
const MODE = {
  stop: 0,
  destroy: 1,
  yoyo: 2
};
var _default = Scale;
exports.default = _default;
},{"../../utils/componentbase/tweentask/EaseValueTaskBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/tweentask/EaseValueTaskBase.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/scale/PopUp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Scale = _interopRequireDefault(require("./Scale.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PopUp = function (gameObject, duration, orientation, ease, scale) {
  if (ease === undefined) {
    ease = 'Cubic';
  }

  // Ease scale from 0 to current scale
  var start, end;
  switch (orientation) {
    case 0:
    case 'x':
      start = {
        x: 0
      };
      end = {
        x: gameObject.scaleX
      };
      break;
    case 1:
    case 'y':
      start = {
        y: 0
      };
      end = {
        y: gameObject.scaleY
      };
      break;
    default:
      start = 0;
      end = gameObject.scale;
      break;
  }
  var config = {
    mode: 0,
    start: start,
    end: end,
    duration: duration,
    ease: ease
  };
  if (scale === undefined) {
    scale = new _Scale.default(gameObject, config);
  } else {
    scale.resetFromJSON(config);
  }
  scale.restart();
  return scale;
};
var _default = PopUp;
exports.default = _default;
},{"./Scale.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/scale/Scale.js"}],"node_modules/phaser3-rex-plugins/plugins/popup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PopUp = _interopRequireDefault(require("./behaviors/scale/PopUp.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _PopUp.default;
exports.default = _default;
},{"./behaviors/scale/PopUp.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/scale/PopUp.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/scale/ScaleDownDestroy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Scale = _interopRequireDefault(require("./Scale.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ScaleDownDestroy = function (gameObject, duration, orientation, ease, destroyMode, scale) {
  if (ease === undefined) {
    ease = 'Linear';
  }

  // Ease from current scale to 0
  if (destroyMode instanceof _Scale.default) {
    scale = destroyMode;
    destroyMode = undefined;
  }
  if (destroyMode === undefined) {
    destroyMode = true;
  }
  var config = {};
  config.mode = destroyMode ? 1 : 0;
  switch (orientation) {
    case 0:
    case 'x':
      config.end = {
        x: 0
      };
      break;
    case 1:
    case 'y':
      config.end = {
        y: 0
      };
      break;
    default:
      config.end = 0;
      break;
  }
  config.duration = duration;
  config.ease = ease;
  if (scale === undefined) {
    scale = new _Scale.default(gameObject, config);
  } else {
    scale.resetFromJSON(config);
  }
  scale.restart();
  return scale;
};
var _default = ScaleDownDestroy;
exports.default = _default;
},{"./Scale.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/scale/Scale.js"}],"node_modules/phaser3-rex-plugins/plugins/scale-down-destroy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ScaleDownDestroy = _interopRequireDefault(require("./behaviors/scale/ScaleDownDestroy.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _ScaleDownDestroy.default;
exports.default = _default;
},{"./behaviors/scale/ScaleDownDestroy.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/scale/ScaleDownDestroy.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/scale/Yoyo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Scale = _interopRequireDefault(require("./Scale.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Yoyo = function (gameObject, duration, peakValue, repeat, orientation, ease, scale) {
  if (peakValue === undefined) {
    peakValue = 1.2;
  }
  if (repeat === undefined) {
    repeat = 0;
  }
  if (ease === undefined) {
    ease = 'Cubic';
  }

  // Ease scale from 0 to current scale
  var start, end;
  switch (orientation) {
    case 0:
    case 'x':
      start = {
        x: gameObject.scaleX
      };
      end = {
        x: peakValue
      };
      break;
    case 1:
    case 'y':
      start = {
        y: gameObject.scaleX
      };
      end = {
        y: peakValue
      };
      break;
    default:
      start = gameObject.scaleX;
      end = peakValue;
      break;
  }
  var config = {
    mode: 2,
    start: start,
    end: end,
    duration: duration / 2,
    ease: ease,
    repeat: repeat
  };
  if (scale === undefined) {
    scale = new _Scale.default(gameObject, config);
  } else {
    scale.resetFromJSON(config);
  }
  scale.restart();
  return scale;
};
var _default = Yoyo;
exports.default = _default;
},{"./Scale.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/scale/Scale.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/WaitEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "WaitComplete", {
  enumerable: true,
  get: function () {
    return _WaitEvent.WaitComplete;
  }
});
Object.defineProperty(exports, "WaitEvent", {
  enumerable: true,
  get: function () {
    return _WaitEvent.WaitEvent;
  }
});
var _WaitEvent = require("../../../plugins/utils/promise/WaitEvent.js");
},{"../../../plugins/utils/promise/WaitEvent.js":"node_modules/phaser3-rex-plugins/plugins/utils/promise/WaitEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ScaleMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _popup = _interopRequireDefault(require("../../../plugins/popup.js"));
var _scaleDownDestroy = _interopRequireDefault(require("../../../plugins/scale-down-destroy.js"));
var _Yoyo = _interopRequireDefault(require("../../../plugins/behaviors/scale/Yoyo.js"));
var _WaitEvent = require("../utils/WaitEvent.js");
var _GetParentSizerMethods = _interopRequireDefault(require("./GetParentSizerMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
var OnInitScale = function (gameObject, scale) {
  // Route 'complete' of scale to gameObject
  scale.completeEventName = undefined;
  scale.on('complete', function () {
    if (scale.completeEventName) {
      gameObject.emit(scale.completeEventName, gameObject);
      scale.completeEventName = undefined;
    }
  });

  // Update local state
  scale.on('update', function () {
    var parent = _GetParentSizerMethods.default.getParentSizer(gameObject);
    if (parent) {
      parent.resetChildPositionState(gameObject);
    }
  });
};
var _default = {
  popUp(duration, orientation, ease) {
    if (IsPlainObject(duration)) {
      var config = duration;
      duration = config.duration;
      orientation = config.orientation;
      ease = config.ease;
    }
    var isInit = this._scaleBehavior === undefined;
    this._scaleBehavior = (0, _popup.default)(this, duration, orientation, ease, this._scaleBehavior);
    if (isInit) {
      OnInitScale(this, this._scaleBehavior);
    }
    this._scaleBehavior.completeEventName = 'popup.complete';
    return this;
  },
  popUpPromise(duration, orientation, ease) {
    this.popUp(duration, orientation, ease);
    return (0, _WaitEvent.WaitComplete)(this._scaleBehavior);
  },
  scaleDownDestroy(duration, orientation, ease, destroyMode) {
    if (IsPlainObject(duration)) {
      var config = duration;
      duration = config.duration;
      orientation = config.orientation;
      ease = config.ease;
      destroyMode = config.destroy;
    }
    var isInit = this._scaleBehavior === undefined;
    this._scaleBehavior = (0, _scaleDownDestroy.default)(this, duration, orientation, ease, destroyMode, this._scaleBehavior);
    if (isInit) {
      OnInitScale(this, this._scaleBehavior);
    }
    this._scaleBehavior.completeEventName = 'scaledown.complete';
    return this;
  },
  scaleDownDestroyPromise(duration, orientation, ease, destroyMode) {
    this.scaleDownDestroy(duration, orientation, ease, destroyMode);
    return (0, _WaitEvent.WaitComplete)(this._scaleBehavior);
  },
  scaleDown(duration, orientation, ease) {
    this.scaleDownDestroy(duration, orientation, ease, false);
    return this;
  },
  scaleDownPromise(duration, orientation, ease) {
    this.scaleDown(duration, orientation, ease);
    return (0, _WaitEvent.WaitComplete)(this._scaleBehavior);
  },
  scaleYoyo(duration, peakValue, repeat, orientation, ease) {
    if (IsPlainObject(duration)) {
      var config = duration;
      duration = config.duration;
      peakValue = config.peakValue;
      repeat = config.repeat;
      orientation = config.orientation;
      ease = config.ease;
    }
    var isInit = this._scaleBehavior === undefined;
    this._scaleBehavior = (0, _Yoyo.default)(this, duration, peakValue, repeat, orientation, ease, this._scaleBehavior);
    if (isInit) {
      OnInitScale(this, this._scaleBehavior);
    }
    this._scaleBehavior.completeEventName = 'scaleyoyo.complete';
    return this;
  },
  scaleYoyoPromise(duration, peakValue, repeat, orientation, ease) {
    this.scaleYoyo(duration, peakValue, repeat, orientation, ease);
    return (0, _WaitEvent.WaitComplete)(this._scaleBehavior);
  }
};
exports.default = _default;
},{"../../../plugins/popup.js":"node_modules/phaser3-rex-plugins/plugins/popup.js","../../../plugins/scale-down-destroy.js":"node_modules/phaser3-rex-plugins/plugins/scale-down-destroy.js","../../../plugins/behaviors/scale/Yoyo.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/scale/Yoyo.js","../utils/WaitEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/WaitEvent.js","./GetParentSizerMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetParentSizerMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/fade/Fade.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseValueTaskBase = _interopRequireDefault(require("../../utils/componentbase/tweentask/EaseValueTaskBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const Linear = Phaser.Math.Linear;
class Fade extends _EaseValueTaskBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;
    // this.timer

    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this.setMode(GetValue(o, 'mode', 0));
    this.setAlphaRange(GetAdvancedValue(o, 'start', this.parent.alpha), GetAdvancedValue(o, 'end', 0));
    return this;
  }
  setMode(m) {
    if (typeof m === 'string') {
      m = MODE[m];
    }
    this.mode = m;
    return this;
  }
  setAlphaRange(start, end) {
    this.alphaStart = start;
    this.alphaEnd = end;
    return this;
  }
  start() {
    if (this.timer.isRunning) {
      return this;
    }
    var gameObject = this.parent;
    gameObject.setAlpha(this.alphaStart);
    this.timer.setDelay(this.delay).setDuration(this.duration).setRepeat(this.mode === 2 ? -1 : 0);
    super.start();
    return this;
  }
  updateGameObject(gameObject, timer) {
    var t = timer.t;
    if (timer.isOddIteration) {
      // Yoyo
      t = 1 - t;
    }
    gameObject.alpha = Linear(this.alphaStart, this.alphaEnd, t);
  }
  complete() {
    super.complete();
    if (this.mode === 1) {
      this.parent.destroy();
      // Will also destroy this behavior
    }

    return this;
  }
}
const MODE = {
  stop: 0,
  destroy: 1,
  yoyo: 2
};
var _default = Fade;
exports.default = _default;
},{"../../utils/componentbase/tweentask/EaseValueTaskBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/tweentask/EaseValueTaskBase.js"}],"node_modules/phaser3-rex-plugins/plugins/fade.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Fade = _interopRequireDefault(require("./behaviors/fade/Fade.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _Fade.default;
exports.default = _default;
},{"./behaviors/fade/Fade.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/fade/Fade.js"}],"node_modules/phaser3-rex-plugins/plugins/fade-in.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fade = _interopRequireDefault(require("./fade.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
var FadeIn = function (gameObject, duration, alpha, fade) {
  var startAlpha, endAlpha;
  if (IsPlainObject(alpha)) {
    startAlpha = alpha.start;
    endAlpha = alpha.end;
  } else {
    endAlpha = alpha;
  }
  if (startAlpha === undefined) {
    startAlpha = 0;
  }
  if (endAlpha === undefined) {
    endAlpha = 1;
  }
  var config = {
    mode: 0,
    start: startAlpha,
    end: endAlpha,
    duration: duration
  };
  if (fade === undefined) {
    fade = new _fade.default(gameObject, config);
  } else {
    fade.resetFromJSON(config);
  }
  fade.restart();
  return fade;
};
var _default = FadeIn;
exports.default = _default;
},{"./fade.js":"node_modules/phaser3-rex-plugins/plugins/fade.js"}],"node_modules/phaser3-rex-plugins/plugins/fade-out-destroy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fade = _interopRequireDefault(require("./fade.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var FadeOutDestroy = function (gameObject, duration, destroyMode, fade) {
  if (destroyMode instanceof _fade.default) {
    fade = destroyMode;
    destroyMode = undefined;
  }
  if (destroyMode === undefined) {
    destroyMode = true;
  }
  var config = {
    mode: destroyMode ? 1 : 0,
    end: 0,
    duration: duration
  };
  if (fade === undefined) {
    fade = new _fade.default(gameObject, config);
  } else {
    fade.resetFromJSON(config);
  }
  fade.restart();
  return fade;
};
var _default = FadeOutDestroy;
exports.default = _default;
},{"./fade.js":"node_modules/phaser3-rex-plugins/plugins/fade.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fade/Fade.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Fade", {
  enumerable: true,
  get: function () {
    return _fade.default;
  }
});
Object.defineProperty(exports, "FadeIn", {
  enumerable: true,
  get: function () {
    return _fadeIn.default;
  }
});
Object.defineProperty(exports, "FadeOutDestroy", {
  enumerable: true,
  get: function () {
    return _fadeOutDestroy.default;
  }
});
var _fade = _interopRequireDefault(require("../../../plugins/fade.js"));
var _fadeIn = _interopRequireDefault(require("../../../plugins/fade-in.js"));
var _fadeOutDestroy = _interopRequireDefault(require("../../../plugins/fade-out-destroy.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"../../../plugins/fade.js":"node_modules/phaser3-rex-plugins/plugins/fade.js","../../../plugins/fade-in.js":"node_modules/phaser3-rex-plugins/plugins/fade-in.js","../../../plugins/fade-out-destroy.js":"node_modules/phaser3-rex-plugins/plugins/fade-out-destroy.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/FadeMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Fade = require("../fade/Fade.js");
var _WaitEvent = require("../utils/WaitEvent.js");
var _GetParentSizerMethods = _interopRequireDefault(require("./GetParentSizerMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
var OnInitFade = function (gameObject, fade) {
  // Route 'complete' of fade to gameObject
  fade.completeEventName = undefined;
  fade.on('complete', function () {
    if (fade.completeEventName) {
      gameObject.emit(fade.completeEventName, gameObject);
      fade.completeEventName = undefined;
    }
  });

  // Update local state
  fade.on('update', function () {
    var parent = _GetParentSizerMethods.default.getParentSizer(gameObject);
    if (parent) {
      parent.resetChildAlphaState(gameObject);
    }
  });
};
var _default = {
  fadeIn(duration, alpha) {
    if (IsPlainObject(duration)) {
      var config = duration;
      duration = config.duration;
      alpha = config.alpha;
    }
    var isInit = this._fade === undefined;
    this._fade = (0, _Fade.FadeIn)(this, duration, alpha, this._fade);
    if (isInit) {
      OnInitFade(this, this._fade);
    }
    this._fade.completeEventName = 'fadein.complete';
    return this;
  },
  fadeInPromise(duration, alpha) {
    this.fadeIn(duration, alpha);
    return (0, _WaitEvent.WaitComplete)(this._fade);
  },
  fadeOutDestroy(duration, destroyMode) {
    if (IsPlainObject(duration)) {
      var config = duration;
      duration = config.duration;
      destroyMode = config.destroy;
    }
    var isInit = this._fade === undefined;
    this._fade = (0, _Fade.FadeOutDestroy)(this, duration, destroyMode, this._fade);
    if (isInit) {
      OnInitFade(this, this._fade);
    }
    this._fade.completeEventName = 'fadeout.complete';
    return this;
  },
  fadeOutDestroyPromise(duration, destroyMode) {
    this.fadeOutDestroy(duration, destroyMode);
    return (0, _WaitEvent.WaitComplete)(this._fade);
  },
  fadeOut(duration) {
    this.fadeOutDestroy(duration, false);
    return this;
  },
  fadeOutPromise(duration) {
    this.fadeOut(duration);
    return (0, _WaitEvent.WaitComplete)(this._fade);
  }
};
exports.default = _default;
},{"../fade/Fade.js":"node_modules/phaser3-rex-plugins/templates/ui/fade/Fade.js","../utils/WaitEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/WaitEvent.js","./GetParentSizerMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetParentSizerMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/easemove/EaseMove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseValueTaskBase = _interopRequireDefault(require("../../utils/componentbase/tweentask/EaseValueTaskBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const Linear = Phaser.Math.Linear;
class EaseMove extends _EaseValueTaskBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;
    // this.timer

    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this.setMode(GetValue(o, 'mode', 0));
    if (o && (o.hasOwnProperty('x') || o.hasOwnProperty('y'))) {
      var endX = GetAdvancedValue(o, 'x', undefined);
      var endY = GetAdvancedValue(o, 'y', undefined);
      this.setTargetPosition(endX, endY);
    } else {
      this.setTargetPosition(o);
    }
    return this;
  }
  setMode(m) {
    if (typeof m === 'string') {
      m = MODE[m];
    }
    this.mode = m;
    return this;
  }
  setTargetPosition(x, y) {
    if (typeof x === 'number' || typeof y === 'number') {
      // endX, endY
      // x,y : a number, or undefined
      this.startX = this.parent.x;
      this.startY = this.parent.y;
      this.endX = x;
      this.endY = y;
    } else {
      var config = x;
      this.startX = GetAdvancedValue(config, 'startX', undefined);
      this.startY = GetAdvancedValue(config, 'startY', undefined);
      this.endX = GetAdvancedValue(config, 'endX', undefined);
      this.endY = GetAdvancedValue(config, 'endY', undefined);
    }
    this.hasMoveX = this.startX !== undefined && this.endX !== undefined;
    this.hasMoveY = this.startY !== undefined && this.endY !== undefined;
    return this;
  }
  start() {
    if (this.timer.isRunning) {
      return this;
    }
    var gameObject = this.parent;
    if (this.hasMoveX) {
      gameObject.x = this.startX;
    }
    if (this.hasMoveY) {
      gameObject.y = this.startY;
    }
    this.timer.setDelay(this.delay).setDuration(this.duration).setRepeat(this.mode === 2 ? -1 : 0);
    super.start();
    return this;
  }
  updateGameObject(gameObject, timer) {
    var t = timer.t;
    if (timer.isOddIteration) {
      // Yoyo
      t = 1 - t;
    }
    t = this.easeFn(t);
    if (this.hasMoveX) {
      gameObject.x = Linear(this.startX, this.endX, t);
    }
    if (this.hasMoveY) {
      gameObject.y = Linear(this.startY, this.endY, t);
    }
  }
  complete() {
    super.complete();
    if (this.mode === 1) {
      this.parent.destroy();
      // Will also destroy this behavior
    }

    return this;
  }
}
const MODE = {
  stop: 0,
  destroy: 1,
  yoyo: 2
};
var _default = EaseMove;
exports.default = _default;
},{"../../utils/componentbase/tweentask/EaseValueTaskBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/tweentask/EaseValueTaskBase.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/easemove/ParseValue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ParseValue = function (propertyValue, startValue) {
  // propertyValue : number or string
  if (typeof propertyValue === 'number') {
    return propertyValue;
  } else {
    var op = propertyValue[0];
    var num = parseFloat(propertyValue.substr(2));
    switch (op) {
      case '+':
        return startValue + num;
      case '-':
        return startValue - num;
      case '*':
        return startValue * num;
      case '/':
        return startValue / num;
    }
  }
};
var _default = ParseValue;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/easemove/EaseMoveTo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseMove = _interopRequireDefault(require("./EaseMove.js"));
var _ParseValue = _interopRequireDefault(require("./ParseValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var EaseMoveTo = function (gameObject, duration, endX, endY, ease, destroyMode, easeMove) {
  if (destroyMode instanceof _EaseMove.default) {
    easeMove = destroyMode;
    destroyMode = undefined;
  }
  if (destroyMode === undefined) {
    destroyMode = false;
  }
  var config = {};
  config.mode = destroyMode ? 1 : 0;
  if (endX !== undefined) {
    config.startX = gameObject.x;
    config.endX = (0, _ParseValue.default)(endX, gameObject.x);
  }
  if (endY !== undefined) {
    config.startY = gameObject.y;
    config.endY = (0, _ParseValue.default)(endY, gameObject.y);
  }
  config.duration = duration;
  config.ease = ease === undefined ? 'Linear' : ease;
  if (easeMove === undefined) {
    easeMove = new _EaseMove.default(gameObject, config);
  } else {
    easeMove.resetFromJSON(config);
  }
  easeMove.restart();
  return easeMove;
};
var _default = EaseMoveTo;
exports.default = _default;
},{"./EaseMove.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/easemove/EaseMove.js","./ParseValue.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/easemove/ParseValue.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/easemove/EaseMoveFrom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseMove = _interopRequireDefault(require("./EaseMove.js"));
var _ParseValue = _interopRequireDefault(require("./ParseValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var EaseMoveFrom = function (gameObject, duration, startX, startY, ease, destroyMode, easeMove) {
  if (destroyMode instanceof _EaseMove.default) {
    easeMove = destroyMode;
    destroyMode = undefined;
  }
  if (destroyMode === undefined) {
    destroyMode = false;
  }
  var config = {};
  config.mode = destroyMode ? 1 : 0;
  if (startX !== undefined) {
    config.startX = (0, _ParseValue.default)(startX, gameObject.x);
    config.endX = gameObject.x;
  }
  if (startY !== undefined) {
    config.startY = (0, _ParseValue.default)(startY, gameObject.y);
    config.endY = gameObject.y;
  }
  config.duration = duration;
  config.ease = ease === undefined ? 'Linear' : ease;
  if (easeMove === undefined) {
    easeMove = new _EaseMove.default(gameObject, config);
  } else {
    easeMove.resetFromJSON(config);
  }
  easeMove.restart();
  return easeMove;
};
var _default = EaseMoveFrom;
exports.default = _default;
},{"./EaseMove.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/easemove/EaseMove.js","./ParseValue.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/easemove/ParseValue.js"}],"node_modules/phaser3-rex-plugins/plugins/easemove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "EaseMove", {
  enumerable: true,
  get: function () {
    return _EaseMove.default;
  }
});
Object.defineProperty(exports, "EaseMoveFrom", {
  enumerable: true,
  get: function () {
    return _EaseMoveFrom.default;
  }
});
exports.EaseMoveFromDestroy = void 0;
Object.defineProperty(exports, "EaseMoveTo", {
  enumerable: true,
  get: function () {
    return _EaseMoveTo.default;
  }
});
exports.EaseMoveToDestroy = void 0;
var _EaseMove = _interopRequireDefault(require("./behaviors/easemove/EaseMove.js"));
var _EaseMoveTo = _interopRequireDefault(require("./behaviors/easemove/EaseMoveTo.js"));
var _EaseMoveFrom = _interopRequireDefault(require("./behaviors/easemove/EaseMoveFrom.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var EaseMoveToDestroy = function (gameObject, duration, endX, endY, ease, easeMove) {
  return (0, _EaseMoveTo.default)(gameObject, duration, endX, endY, ease, true, easeMove);
};
exports.EaseMoveToDestroy = EaseMoveToDestroy;
var EaseMoveFromDestroy = function (gameObject, duration, startX, startY, ease, easeMove) {
  return (0, _EaseMoveFrom.default)(gameObject, duration, startX, startY, ease, true, easeMove);
};
exports.EaseMoveFromDestroy = EaseMoveFromDestroy;
},{"./behaviors/easemove/EaseMove.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/easemove/EaseMove.js","./behaviors/easemove/EaseMoveTo.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/easemove/EaseMoveTo.js","./behaviors/easemove/EaseMoveFrom.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/easemove/EaseMoveFrom.js"}],"node_modules/phaser3-rex-plugins/templates/ui/easemove/EaseMove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "EaseMove", {
  enumerable: true,
  get: function () {
    return _easemove.EaseMove;
  }
});
Object.defineProperty(exports, "EaseMoveFrom", {
  enumerable: true,
  get: function () {
    return _easemove.EaseMoveFrom;
  }
});
Object.defineProperty(exports, "EaseMoveTo", {
  enumerable: true,
  get: function () {
    return _easemove.EaseMoveTo;
  }
});
var _easemove = require("../../../plugins/easemove.js");
},{"../../../plugins/easemove.js":"node_modules/phaser3-rex-plugins/plugins/easemove.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/EaseMoveMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseMove = require("../easemove/EaseMove.js");
var _WaitEvent = require("../utils/WaitEvent.js");
var _GetParentSizerMethods = _interopRequireDefault(require("./GetParentSizerMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const DistanceBetween = Phaser.Math.Distance.Between;
var OnInitEaseMove = function (gameObject, easeMove) {
  // Route 'complete' of easeMove to gameObject
  easeMove.completeEventName = undefined;
  easeMove.on('complete', function () {
    if (easeMove.completeEventName) {
      gameObject.emit(easeMove.completeEventName, gameObject);
      easeMove.completeEventName = undefined;
    }
  });

  // Update local state
  easeMove.on('update', function () {
    var parent = _GetParentSizerMethods.default.getParentSizer(gameObject);
    if (parent) {
      parent.resetChildPositionState(gameObject);
    }
  });
};
var _default = {
  moveFrom(duration, x, y, ease, destroyMode) {
    if (IsPlainObject(duration)) {
      var config = duration;
      x = config.x;
      y = config.y;
      if (config.hasOwnProperty('speed')) {
        duration = DistanceBetween(x, y, this.x, this.y) * 1000 / config.speed;
      } else {
        duration = config.duration;
      }
      ease = config.ease;
    }
    var isInit = this._easeMove === undefined;
    this._easeMove = (0, _EaseMove.EaseMoveFrom)(this, duration, x, y, ease, destroyMode, this._easeMove);
    if (isInit) {
      OnInitEaseMove(this, this._easeMove);
    }
    this._easeMove.completeEventName = 'movefrom.complete';
    return this;
  },
  moveFromPromise(duration, x, y, ease, destroyMode) {
    this.moveFrom(duration, x, y, ease, destroyMode);
    return (0, _WaitEvent.WaitComplete)(this._easeMove);
  },
  moveFromDestroy(duration, x, y, ease) {
    this.moveFrom(duration, x, y, ease, true);
    return this;
  },
  moveFromDestroyPromise(duration, x, y, ease) {
    this.moveFromDestroy(duration, x, y, ease);
    return (0, _WaitEvent.WaitComplete)(this._easeMove);
  },
  moveTo(duration, x, y, ease, destroyMode) {
    if (IsPlainObject(duration)) {
      var config = duration;
      x = config.x;
      y = config.y;
      if (config.hasOwnProperty('speed')) {
        duration = DistanceBetween(x, y, this.x, this.y) * 1000 / config.speed;
      } else {
        duration = config.duration;
      }
      ease = config.ease;
    }
    var isInit = this._easeMove === undefined;
    this._easeMove = (0, _EaseMove.EaseMoveTo)(this, duration, x, y, ease, destroyMode, this._easeMove);
    if (isInit) {
      OnInitEaseMove(this, this._easeMove);
    }
    this._easeMove.completeEventName = 'moveto.complete';
    return this;
  },
  moveToPromise(duration, x, y, ease, destroyMode) {
    this.moveTo(duration, x, y, ease, destroyMode);
    return (0, _WaitEvent.WaitComplete)(this._easeMove);
  },
  moveToDestroy(duration, x, y, ease) {
    this.moveTo(duration, x, y, ease, true);
    return this;
  },
  moveToDestroyPromise(duration, x, y, ease) {
    this.moveToDestroy(duration, x, y, ease, true);
    return (0, _WaitEvent.WaitComplete)(this._easeMove);
  },
  moveStop(toEnd) {
    if (!this._easeMove) {
      return this;
    }
    this._easeMove.stop(toEnd);
    return this;
  }
};
exports.default = _default;
},{"../easemove/EaseMove.js":"node_modules/phaser3-rex-plugins/templates/ui/easemove/EaseMove.js","../utils/WaitEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/WaitEvent.js","./GetParentSizerMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetParentSizerMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/shake/ShakePosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TickTask = _interopRequireDefault(require("../../utils/componentbase/TickTask.js"));
var _Timer = _interopRequireDefault(require("../../utils/componentbase/timerticktask/Timer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class ShakePosition extends _TickTask.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;

    this.timer = new _Timer.default();
    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    this.timer.resetFromJSON(GetValue(o, 'timer'));
    this.setEnable(GetValue(o, 'enable', true));
    this.setMode(GetValue(o, 'mode', 1));
    this.isRunning = GetValue(o, 'isRunning', false);
    this.setMagnitudeMode(GetValue(o, 'magnitudeMode', 1));
    this.setAxisMode(GetValue(o, "axis", 0));
    this.setDuration(GetValue(o, 'duration', 500));
    this.setMagnitude(GetValue(o, 'magnitude', 10));
    this.ox = GetValue(o, 'ox', undefined);
    this.oy = GetValue(o, 'oy', undefined);
    return this;
  }
  toJSON() {
    return {
      timer: this.timer.toJSON(),
      enable: this.enable,
      mode: this.mode,
      isRunning: this.isRunning,
      magnitudeMode: magnitudeMode,
      duration: this.duration,
      magnitude: this.magnitude,
      ox: this.ox,
      oy: this.oy
    };
  }

  // override
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }
    super.shutdown(fromScene);
    this.timer.destroy();
    this.timer = undefined;
  }
  startTicking() {
    super.startTicking();
    if (this.mode === 0) {
      // Effect mode
      this.scene.game.events.on('poststep', this.update, this);
      this.scene.game.events.on('prestep', this.backToOrigin, this);
    } else {
      // Behavior Mode
      this.scene.sys.events.on('preupdate', this.update, this);
    }
  }
  stopTicking() {
    super.stopTicking();
    if (this.scene) {
      // Scene might be destoryed
      if (this.mode === 0) {
        // Effect mode
        this.scene.game.events.off('poststep', this.update, this);
        this.scene.game.events.off('prestep', this.backToOrigin, this);
      } else {
        // Behavior Mode
        this.scene.sys.events.off('preupdate', this.update, this);
      }
    }
  }
  setEnable(e) {
    if (e == undefined) {
      e = true;
    }
    this.enable = e;
    return this;
  }
  setMode(mode) {
    if (typeof mode === 'string') {
      mode = MODE[mode];
    }
    this.mode = mode;
    return this;
  }
  setMagnitudeMode(magnitudeMode) {
    if (typeof magnitudeMode === 'string') {
      magnitudeMode = MANITUDEMODE[magnitudeMode];
    }
    this.magnitudeMode = magnitudeMode;
    return this;
  }
  setAxisMode(m) {
    if (typeof m === 'string') {
      m = DIRECTIONNODE[m];
    }
    this.axisMode = m;
    return this;
  }
  setDuration(duration) {
    this.duration = duration;
    return this;
  }
  setMagnitude(magnitude) {
    this.magnitude = magnitude;
    return this;
  }
  start(duration, magnitude) {
    if (typeof duration !== 'number') {
      var config = duration;
      magnitude = GetValue(config, 'magnitude', undefined);
      duration = GetValue(config, 'duration', undefined);
    }
    if (magnitude !== undefined) {
      this.setMagnitude(magnitude);
    }
    if (duration !== undefined) {
      this.setDuration(duration);
    }
    this.timer.setDuration(this.duration).start();
    super.start();
    return this;
  }
  shake(duration, magnitude) {
    this.start(duration, magnitude);
    return this;
  }
  update(time, delta) {
    if (!this.isRunning || !this.enable) {
      return this;
    }
    var gameObject = this.parent;
    if (!gameObject.active) {
      return this;
    }
    this.timer.update(time, delta);
    if (this.timer.isDone) {
      this.backToOrigin();
      this.complete();
    } else {
      if (this.ox === undefined) {
        this.ox = gameObject.x;
        this.oy = gameObject.y;
      }
      var magnitude = this.magnitude;
      if (this.magnitudeMode === 1)
        // decay
        {
          magnitude *= 1 - this.timer.t;
        }
      var a = Math.random() * Math.PI * 2;
      var x = this.ox + Math.cos(a) * magnitude;
      var y = this.oy + Math.sin(a) * magnitude;
      switch (this.axisMode) {
        case 1:
          gameObject.x = x;
          break;
        case 2:
          gameObject.y = y;
          break;
        default:
          gameObject.x = x;
          gameObject.y = y;
          break;
      }
    }
    return this;
  }
  backToOrigin() {
    if (!this.isRunning || !this.enable) {
      return this;
    }
    if (this.ox === undefined) {
      return this;
    }
    var gameObject = this.parent;
    switch (this.axisMode) {
      case 1:
        gameObject.x = this.ox;
        break;
      case 2:
        gameObject.y = this.oy;
        break;
      default:
        gameObject.x = this.ox;
        gameObject.y = this.oy;
        break;
    }
    this.ox = undefined;
    this.oy = undefined;
    return this;
  }
}
const MODE = {
  effect: 0,
  behavior: 1
};
const DIRECTIONNODE = {
  'both': 0,
  'h&v': 0,
  'x&y': 0,
  'horizontal': 1,
  'h': 1,
  'x': 1,
  'vertical': 2,
  'v': 2,
  'y': 2
};
const MANITUDEMODE = {
  constant: 0,
  decay: 1
};
var _default = ShakePosition;
exports.default = _default;
},{"../../utils/componentbase/TickTask.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/TickTask.js","../../utils/componentbase/timerticktask/Timer.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/timerticktask/Timer.js"}],"node_modules/phaser3-rex-plugins/plugins/shakeposition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ShakePosition = _interopRequireDefault(require("./behaviors/shake/ShakePosition.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _ShakePosition.default;
exports.default = _default;
},{"./behaviors/shake/ShakePosition.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/shake/ShakePosition.js"}],"node_modules/phaser3-rex-plugins/templates/ui/shake/Shake.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _shakeposition = _interopRequireDefault(require("../../../plugins/shakeposition.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _shakeposition.default;
exports.default = _default;
},{"../../../plugins/shakeposition.js":"node_modules/phaser3-rex-plugins/plugins/shakeposition.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ShakeMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Shake = _interopRequireDefault(require("../shake/Shake.js"));
var _WaitEvent = require("../utils/WaitEvent.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
var OnInitShake = function (gameObject, shake) {
  // Route 'complete' of shake to gameObject
  shake.on('complete', function () {
    gameObject.emit('shake.complete', gameObject);
  });

  // Shake effect won't change position
};
var _default = {
  shake(duration, magnitude, magnitudeMode) {
    if (IsPlainObject(duration)) {
      var config = duration;
      duration = config.duration;
      magnitude = config.magnitude;
      magnitudeMode = config.magnitudeMode;
    }
    if (this._shake === undefined) {
      this._shake = new _Shake.default(this, {
        mode: 0,
        magnitudeMode: 1
      });
      OnInitShake(this, this._shake);
    }
    if (duration !== undefined) {
      this._shake.setDuration(duration);
    }
    if (magnitude !== undefined) {
      this._shake.setMagnitude(magnitude);
    }
    if (magnitudeMode !== undefined) {
      this._shake.setMagnitudeMode(magnitudeMode);
    }
    this._shake.shake();
    return this;
  },
  shakePromise(duration, alpha) {
    this.shake(duration, alpha);
    return (0, _WaitEvent.WaitComplete)(this._shake);
  }
};
exports.default = _default;
},{"../shake/Shake.js":"node_modules/phaser3-rex-plugins/templates/ui/shake/Shake.js","../utils/WaitEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/WaitEvent.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/easedata/EaseData.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
var _EaseValueTask = _interopRequireDefault(require("../../utils/ease/EaseValueTask.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class EaseData extends _ComponentBase.default {
  constructor(parent, config) {
    super(parent, config);
    this.parent.setDataEnabled();
    this.easeTasks = {};
  }
  complete(key) {
    this.emit(`complete-${key}`, this.parent, this);
    this.emit('complete', key, this.parent, this);
  }
  getEaseTask(key) {
    var easeTask = this.easeTasks[key];
    if (easeTask === undefined) {
      easeTask = new _EaseValueTask.default(this.parent);
      this.easeTasks[key] = easeTask;
      easeTask.setTarget(this.parent.data.values).on('complete', function () {
        this.complete(key);
      }, this);
    }
    return easeTask;
  }
  easeTo(key, value, duration, ease) {
    if (IsPlainObject(key)) {
      var config = key;
      key = config.key;
      value = config.value;
      duration = config.duration;
      ease = config.ease;
      var speed = config.speed;
      if (duration === undefined && speed !== undefined) {
        duration = Math.abs(value - this.parent.data.values[key]) / speed * 1000;
      }
    }
    if (duration === undefined) {
      duration = 1000;
    }
    if (ease === undefined) {
      ease = 'Linear';
    }
    var easeTask = this.getEaseTask(key);
    easeTask.restart({
      key: key,
      to: value,
      duration: duration,
      ease: ease
    });
    return this;
  }
  easeFrom(key, value, duration, ease) {
    if (IsPlainObject(key)) {
      var config = key;
      key = config.key;
      value = config.value;
      duration = config.duration;
      ease = config.ease;
      var speed = config.speed;
      if (duration === undefined && speed !== undefined) {
        duration = Math.abs(value - this.parent.data.values[key]) / speed * 1000;
      }
    }
    if (duration === undefined) {
      duration = 1000;
    }
    if (ease === undefined) {
      ease = 'Linear';
    }
    var easeTask = this.getEaseTask(key);
    easeTask.restart({
      key: key,
      from: value,
      duration: duration,
      ease: ease
    });
    return this;
  }
  stopEase(key, toEnd) {
    if (toEnd === undefined) {
      toEnd = true;
    }
    var easeTask = this.easeTasks[key];
    if (easeTask) {
      easeTask.stop(toEnd);
    }
    return this;
  }
  stopAll(toEnd) {
    if (toEnd === undefined) {
      toEnd = true;
    }
    for (var key in this.easeTasks) {
      this.stopEase(key, toEnd);
    }
    return this;
  }
}
var _default = EaseData;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js","../../utils/ease/EaseValueTask.js":"node_modules/phaser3-rex-plugins/plugins/utils/ease/EaseValueTask.js"}],"node_modules/phaser3-rex-plugins/plugins/easedata.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "EaseData", {
  enumerable: true,
  get: function () {
    return _EaseData.default;
  }
});
var _EaseData = _interopRequireDefault(require("./behaviors/easedata/EaseData.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./behaviors/easedata/EaseData.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/easedata/EaseData.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/EaseDataMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _easedata = require("../../../plugins/easedata.js");
var _WaitEvent = require("../utils/WaitEvent.js");
var OnInitEaseData = function (gameObject, easeData) {
  // Route 'complete' of easeData to gameObject
  easeData.on('complete', function (key) {
    gameObject.emit(`easedata.${key}.complete`, gameObject);
    gameObject.emit('easedata.complete', key, gameObject);
  });
};
var _default = {
  easeDataTo(key, value, duration, ease) {
    if (!this._easeData) {
      this._easeData = new _easedata.EaseData(this);
      OnInitEaseData(this, this._easeData);
    }
    this._easeData.easeTo(key, value, duration, ease);
    return this;
  },
  easeDataToPromise(key, value, duration, ease) {
    this.easeDataTo(key, value, duration, ease);
    return (0, _WaitEvent.WaitEvent)(this._easeData, `complete-${key}`);
  },
  stopEaseData(key, toEnd) {
    if (!this._easeData) {
      return this;
    }
    this._easeData.stopEase(key, toEnd);
    return this;
  },
  stopAllEaseData(toEnd) {
    if (!this._easeData) {
      return this;
    }
    this._easeData.stopAll(toEnd);
    return this;
  }
};
exports.default = _default;
},{"../../../plugins/easedata.js":"node_modules/phaser3-rex-plugins/plugins/easedata.js","../utils/WaitEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/WaitEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/Hide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Show = exports.IsShown = exports.Hide = void 0;
var _GetSizerConfig = _interopRequireDefault(require("./GetSizerConfig.js"));
var _GetParent = require("../../../plugins/gameobjects/container/containerlite/GetParent.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Show = function (gameObject) {
  _hide(gameObject, false);
};
exports.Show = Show;
var Hide = function (gameObject) {
  _hide(gameObject, true);
};
exports.Hide = Hide;
var IsShown = function (gameObject) {
  if (!gameObject) {
    return false;
  }
  var config = (0, _GetSizerConfig.default)(gameObject);
  return !config.hidden;
};
exports.IsShown = IsShown;
var _hide = function (gameObject, hidden) {
  if (!gameObject) {
    return;
  }
  var config = (0, _GetSizerConfig.default)(gameObject);
  config.hidden = hidden;
  var parent = (0, _GetParent.GetParent)(gameObject);
  if (parent) {
    parent.setChildVisible(gameObject, !hidden);
  } else {
    gameObject.setVisible(!hidden);
  }
};
},{"./GetSizerConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetSizerConfig.js","../../../plugins/gameobjects/container/containerlite/GetParent.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/GetParent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/HideMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Hide = require("../utils/Hide.js");
var _default = {
  show(gameObject) {
    if (gameObject === undefined) {
      gameObject = this;
    }
    (0, _Hide.Show)(gameObject, false);
    return this;
  },
  hide(gameObject) {
    if (gameObject === undefined) {
      gameObject = this;
    }
    (0, _Hide.Hide)(gameObject, true);
    return this;
  },
  isShow(gameObject) {
    if (gameObject === undefined) {
      gameObject = this;
    }
    return (0, _Hide.IsShown)(gameObject);
  }
};
exports.default = _default;
},{"../utils/Hide.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/Hide.js"}],"node_modules/phaser3-rex-plugins/plugins/logic/fsm/FSMBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EventEmitterMethods = _interopRequireDefault(require("../../utils/eventemitter/EventEmitterMethods.js"));
var _GetValue = _interopRequireDefault(require("../../utils/object/GetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const StateProperties = ['next', 'exit', 'enter'];
class FSM {
  /*
  var config = {
      start: 'A',   // default: undefined
      states: {
          A: {
              next: 'B',  // function() { return 'B'; }
              enter: function() {},
              exit: function() {},
          },
          // ...
      },        
      extend: {
          i: 0,
          name: 'abc'
          // ...
      },
      init: function() {},
      enable: true,
      eventEmitter: true,
  };
  */
  constructor(config) {
    // Attach get-next-state function
    var states = (0, _GetValue.default)(config, 'states', undefined);
    if (states) {
      this.addStates(states);
    }

    // Attach extend members
    var extend = (0, _GetValue.default)(config, 'extend', undefined);
    if (extend) {
      for (var name in extend) {
        if (!this.hasOwnProperty(name) || this[name] === undefined) {
          this[name] = extend[name];
        }
      }
    }

    // Event emitter
    var eventEmitter = (0, _GetValue.default)(config, 'eventEmitter', undefined);
    var EventEmitterClass = (0, _GetValue.default)(config, 'EventEmitterClass', undefined);
    this.setEventEmitter(eventEmitter, EventEmitterClass);
    this._stateLock = false;
    this.resetFromJSON(config);
  }
  shutdown() {
    this.destroyEventEmitter();
  }
  destroy() {
    this.shutdown();
  }
  resetFromJSON(o) {
    this.setEnable((0, _GetValue.default)(o, 'enable', true));
    this.start((0, _GetValue.default)(o, 'start', undefined));
    var init = (0, _GetValue.default)(o, 'init', undefined);
    if (init) {
      init.call(this);
    }
    return this;
  }
  toJSON() {
    return {
      curState: this.state,
      prevState: this.prevState,
      enable: this.enable,
      start: this._start
    };
  }
  setEnable(e) {
    if (e === undefined) {
      e = true;
    }
    this.enable = e;
    return this;
  }
  toggleEnable() {
    this.setEnable(!this.enable);
    return this;
  }
  set state(newState) {
    if (!this.enable || this._stateLock) {
      return;
    }
    if (this._state === newState) {
      return;
    }
    this._prevState = this._state;
    this._state = newState;
    this._stateLock = true; // lock state

    this.emit('statechange', this);
    if (this._prevState != null) {
      var exitEventName = 'exit_' + this._prevState;
      var exitCallback = this[exitEventName];
      if (exitCallback) {
        exitCallback.call(this);
      }
      this.emit(exitEventName, this);
    }
    this._stateLock = false;
    if (this._state != null) {
      var enterEventName = 'enter_' + this._state;
      var enterCallback = this[enterEventName];
      if (enterCallback) {
        enterCallback.call(this);
      }
      this.emit(enterEventName, this);
    }
  }
  get state() {
    return this._state;
  }
  get prevState() {
    return this._prevState;
  }
  start(state) {
    this._start = state;
    this._prevState = undefined;
    this._state = state; // Won't fire statechange events
    return this;
  }
  goto(nextState) {
    if (nextState != null) {
      this.state = nextState;
    }
    return this;
  }
  next() {
    var nextState;
    var getNextState = this['next_' + this.state];
    if (getNextState) {
      if (typeof getNextState === 'string') {
        nextState = getNextState;
      } else {
        nextState = getNextState.call(this);
      }
    }
    this.goto(nextState);
    return this;
  }
  get stateProperties() {
    return StateProperties;
  }
  addState(name, state) {
    if (typeof name !== 'string') {
      state = name;
      name = state.name;
    }
    var stateProperties = this.stateProperties;
    for (var i = 0, cnt = stateProperties.length; i < cnt; i++) {
      var propertyName = stateProperties[i];
      var propertyValue = state[propertyName];
      if (propertyValue) {
        this[`${propertyName}_${name}`] = propertyValue;
      }
    }
    return this;
  }
  addStates(states) {
    if (Array.isArray(states)) {
      for (var i = 0, cnt = states.length; i < cnt; i++) {
        this.addState(states[i]);
      }
    } else {
      for (var name in states) {
        this.addState(name, states[name]);
      }
    }
    return this;
  }
  runMethod(methodName, a1, a2, a3, a4, a5) {
    var fn = this[methodName + '_' + this.state];
    if (!fn) {
      return undefined;
    }

    // Copy from eventemitter3
    var len = arguments.length;
    switch (len) {
      case 1:
        return fn.call(this);
      case 2:
        return fn.call(this, a1);
      case 3:
        return fn.call(this, a1, a2);
      case 4:
        return fn.call(this, a1, a2, a3);
      case 5:
        return fn.call(this, a1, a2, a3, a4);
      case 6:
        return fn.call(this, a1, a2, a3, a4, a5);
    }
    var args = new Array(len - 1);
    for (var i = 1; i < len; i++) {
      args[i - 1] = arguments[i];
    }
    return fn.apply(this, args);
  }
}
Object.assign(FSM.prototype, _EventEmitterMethods.default);
var _default = FSM;
exports.default = _default;
},{"../../utils/eventemitter/EventEmitterMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/eventemitter/EventEmitterMethods.js","../../utils/object/GetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/GetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/eventemitter/HasListener.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var HasListener = function (eventEmitter, eventName, fn, context, once) {
  if (once === undefined) {
    once = false;
  }
  var listeners = eventEmitter._events[eventName];
  if (!listeners) {
    return false;
  }
  for (var i = 0, cnt = listeners.length; i < cnt; i++) {
    var listener = listeners[i];
    if (listener.fn === fn && listener.context === context && listener.once === once) {
      return true;
    }
  }
  return false;
};
var _default = HasListener;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/logic/fsm/FSM.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FSMBase = _interopRequireDefault(require("./FSMBase.js"));
var _GetValue = _interopRequireDefault(require("../../utils/object/GetValue.js"));
var _HasListener = _interopRequireDefault(require("../../utils/eventemitter/HasListener.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const StateProperties = ['next', 'exit', 'enter', 'update', 'preupdate', 'postupdate'];
class FSM extends _FSMBase.default {
  /*
  var config = {
      start: 'A',   // default: undefined
      states: {
          A: {
              next: 'B',  // function() { return 'B'; }
              enter: function() {},
              exit: function() {},
              update: function(time, delta) {},
              preupdate: function(time, delta) {},
              postupdate: function(time, delta) {},
          },
          // ...
      },        
      extend: {
          i: 0,
          name: 'abc'
          // ...
      },
      init: function() {},
      enable: true,
      scene: undefined,
      eventEmitter: true,
  };
  */
  shutdown() {
    this.stopUpdate();
    this.stopPreUpdate();
    this.stopPostUpdate();
    this._scene = undefined;
    super.shutdown();
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this._scene = (0, _GetValue.default)(o, 'scene', undefined);
    return this;
  }
  get stateProperties() {
    return StateProperties;
  }
  update(time, delta) {
    this.runMethod('update', time, delta);
  }
  preupdate(time, delta) {
    this.runMethod('preupdate', time, delta);
  }
  postupdate(time, delta) {
    this.runMethod('postupdate', time, delta);
  }
  startUpdate(scene) {
    if (!scene) {
      scene = this._scene;
    }
    var eventEmitter = scene.sys.events;
    if ((0, _HasListener.default)(eventEmitter, 'update', this.update, this)) {
      return this;
    }
    this._scene = scene;
    eventEmitter.on('update', this.update, this);
    return this;
  }
  stopUpdate() {
    if (!this._scene) {
      return this;
    }
    this._scene.sys.events.off('update', this.update, this);
    return this;
  }
  startPreUpdate(scene) {
    if (!scene) {
      scene = this._scene;
    }
    var eventEmitter = scene.sys.events;
    if ((0, _HasListener.default)(eventEmitter, 'preupdate', this.preupdate, this)) {
      return this;
    }
    this._scene = scene;
    eventEmitter.on('preupdate', this.preupdate, this);
    return this;
  }
  stopPreUpdate() {
    if (!this._scene) {
      return this;
    }
    this._scene.sys.events.off('preupdate', this.preupdate, this);
    return this;
  }
  startPostUpdate(scene) {
    if (!scene) {
      scene = this._scene;
    }
    var eventEmitter = scene.sys.events;
    if ((0, _HasListener.default)(eventEmitter, 'postupdate', this.postupdate, this)) {
      return this;
    }
    this._scene = scene;
    eventEmitter.on('postupdate', this.postupdate, this);
    return this;
  }
  stopPostUpdate() {
    if (!this._scene) {
      return this;
    }
    this._scene.sys.events.off('postupdate', this.postupdate, this);
    return this;
  }
}
var _default = FSM;
exports.default = _default;
},{"./FSMBase.js":"node_modules/phaser3-rex-plugins/plugins/logic/fsm/FSMBase.js","../../utils/object/GetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/GetValue.js","../../utils/eventemitter/HasListener.js":"node_modules/phaser3-rex-plugins/plugins/utils/eventemitter/HasListener.js"}],"node_modules/phaser3-rex-plugins/plugins/fsm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FSM = _interopRequireDefault(require("./logic/fsm/FSM.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _FSM.default;
exports.default = _default;
},{"./logic/fsm/FSM.js":"node_modules/phaser3-rex-plugins/plugins/logic/fsm/FSM.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/State.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fsm = _interopRequireDefault(require("../../fsm.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
graph TD

IDLE --> |"requestOpen()"| TRANS_OPNE["TRAN_OPEN<br>runTransitionInCallback()"]
TRANS_OPNE --> |transitInTime| OPEN
OPEN --> |"requestClose()"| TRANS_CLOSE["TRANS_CLOSE<br>runTransitionOutCallback()"]
TRANS_CLOSE --> |transitOutTime| CLOSE
CLOSE --> |"requestOpen()"| TRANS_OPNE
*/

class State extends _fsm.default {
  constructor(parent, config) {
    super(config);
    this.parent = parent;
    var initState = config.initState || 'IDLE';
    this.start(initState);
  }
  init() {
    this.start('IDLE');
  }

  // IDLE -> TRANS_OPNE
  next_IDLE() {
    return 'TRANS_OPNE';
  }
  // IDLE

  // TRANS_OPNE -> OPEN
  next_TRANS_OPNE() {
    return 'OPEN';
  }
  enter_TRANS_OPNE() {
    var transitionBehavior = this.parent;
    if (transitionBehavior.transitInTime > 0) {
      var delay = transitionBehavior.runTransitionInCallback();
      transitionBehavior.delayCall(delay, this.next, this);
    } else {
      this.next();
    }
  }
  exit_TRANS_OPNE() {
    var transitionBehavior = this.parent;
    transitionBehavior.removeDelayCall();
  }
  // TRANS_OPNE

  // OPEN -> TRANS_CLOSE
  next_OPEN() {
    return 'TRANS_CLOSE';
  }
  enter_OPEN() {
    var transitionBehavior = this.parent;
    transitionBehavior.onOpen();
  }
  exit_OPEN() {
    var transitionBehavior = this.parent;
    transitionBehavior.removeDelayCall();
  }
  // OPEN

  // TRANS_CLOSE -> CLOSE
  next_TRANS_CLOSE() {
    return 'CLOSE';
  }
  enter_TRANS_CLOSE() {
    var transitionBehavior = this.parent;
    if (transitionBehavior.transitOutTime > 0) {
      var delay = transitionBehavior.runTransitionOutCallback();
      transitionBehavior.delayCall(delay, this.next, this);
    } else {
      this.next();
    }
  }
  exit_TRANS_CLOSE() {
    var transitionBehavior = this.parent;
    transitionBehavior.removeDelayCall();
  }
  // TRANS_CLOSE

  // CLOSE -> TRANS_OPNE
  next_CLOSE() {
    return 'TRANS_OPNE';
  }
  enter_CLOSE() {
    var transitionBehavior = this.parent;
    transitionBehavior.onClose();
  }
  exit_CLOSE() {}
  // CLOSE

  canOpen() {
    return this.state === 'IDLE' || this.state === 'CLOSE';
  }
  canClose() {
    return this.state === 'IDLE' || this.state === 'OPEN';
  }
}
var _default = State;
exports.default = _default;
},{"../../fsm.js":"node_modules/phaser3-rex-plugins/plugins/fsm.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/time/PostUpdateDelayCall.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var PostUpdateDelayCall = function (gameObject, delay, callback, scope, args) {
  // Invoke callback under scene's 'postupdate' event
  var scene = gameObject.scene;
  var sceneEE = scene.sys.events;
  var timer = scene.time.delayedCall(delay,
  // delay
  sceneEE.once,
  // callback
  [
  // Event name of scene
  'postupdate',
  // Callback
  function () {
    callback.call(scope, args);
  }],
  // args
  sceneEE // scope, scene's EE
  );

  return timer;
};
var _default = PostUpdateDelayCall;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/methods/DelayCallMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PostUpdateDelayCall = _interopRequireDefault(require("../../../utils/time/PostUpdateDelayCall.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  delayCall(delay, callback, scope) {
    // Invoke callback under scene's 'postupdate' event
    this.delayCallTimer = (0, _PostUpdateDelayCall.default)(this, delay, callback, scope);
    return this;
  },
  removeDelayCall() {
    if (this.delayCallTimer) {
      this.delayCallTimer.remove(false);
      this.delayCallTimer = undefined;
    }
    return this;
  }
};
exports.default = _default;
},{"../../../utils/time/PostUpdateDelayCall.js":"node_modules/phaser3-rex-plugins/plugins/utils/time/PostUpdateDelayCall.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/methods/ConfigurationMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NOOP = _interopRequireDefault(require("../../../utils/object/NOOP.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  setTransitInTime(time) {
    this.transitInTime = time;
    return this;
  },
  setTransitOutTime(time) {
    this.transitOutTime = time;
    return this;
  },
  setTransitInCallback(callback) {
    if (!callback) {
      callback = _NOOP.default;
    }
    this.transitInCallback = callback;
    // callback = function(gameObject, duration) {}
    return this;
  },
  setTransitOutCallback(callback) {
    if (!callback) {
      callback = _NOOP.default;
    }
    this.transitOutCallback = callback;
    // callback = function(gameObject, duration) {}
    return this;
  }
};
exports.default = _default;
},{"../../../utils/object/NOOP.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/NOOP.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/methods/OpenMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  // Override
  runTransitionInCallback() {
    this.transitInCallback(this.parent, this.transitInTime);
    return this.transitInTime;
  },
  // Override
  onOpen() {},
  requestOpen(openEventData, duration) {
    if (!this._state.canOpen()) {
      return this;
    }
    this.openEventData = arguments.length > 0 ? openEventData : this.parent;
    var transitionTimeSave = this.transitInTime;
    if (duration !== undefined) {
      this.transitInTime = duration;
    }
    this._state.goto('TRANS_OPNE');
    this.transitInTime = transitionTimeSave;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/methods/CloseMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  // Override
  runTransitionOutCallback() {
    this.transitOutCallback(this.parent, this.transitOutTime);
    return this.transitOutTime;
  },
  // Override
  onClose() {
    // Destroy parent and this behavior
    if (this.oneShotMode) {
      this.parent.destroy();
      // Will invoke `this.destroy()`
    }
  },

  requestClose(closeEventData, duration) {
    if (!this._state.canClose) {
      return this;
    }
    this.closeEventData = arguments.length > 0 ? closeEventData : this.parent;
    var transitionTimeSave = this.transitOutTime;
    if (duration !== undefined) {
      this.transitOutTime = duration;
    }
    this._state.goto('TRANS_CLOSE');
    this.transitOutTime = transitionTimeSave;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DelayCallMethods = _interopRequireDefault(require("./DelayCallMethods.js"));
var _ConfigurationMethods = _interopRequireDefault(require("./ConfigurationMethods.js"));
var _OpenMethods = _interopRequireDefault(require("./OpenMethods.js"));
var _CloseMethods = _interopRequireDefault(require("./CloseMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {};
Object.assign(methods, _DelayCallMethods.default, _ConfigurationMethods.default, _OpenMethods.default, _CloseMethods.default);
var _default = methods;
exports.default = _default;
},{"./DelayCallMethods.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/methods/DelayCallMethods.js","./ConfigurationMethods.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/methods/ConfigurationMethods.js","./OpenMethods.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/methods/OpenMethods.js","./CloseMethods.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/methods/CloseMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/OpenCloseTransition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
var _State = _interopRequireDefault(require("./State.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class OpenCloseTransition extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;
    // this.scene

    this.setTransitInTime(GetValue(config, 'duration.in', 200));
    this.setTransitOutTime(GetValue(config, 'duration.out', 200));
    this.setTransitInCallback(GetValue(config, 'transitIn'));
    this.setTransitOutCallback(GetValue(config, 'transitOut'));
    this.oneShotMode = GetValue(config, 'destroy', false);
    this.delayCallTimer = undefined;
    this._state = new _State.default(this, {
      eventEmitter: false,
      initState: GetValue(config, 'initState', 'IDLE')
    });
    this.openEventData = undefined;
    this.closeEventData = undefined;
  }
  get state() {
    return this._state.state;
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }
    this.transitInCallback = undefined;
    this.transitOutCallback = undefined;
    this.openEventData = undefined;
    this.closeEventData = undefined;
    this.removeDelayCall();
    super.shutdown(fromScene);
  }
}
Object.assign(OpenCloseTransition.prototype, _Methods.default);
var _default = OpenCloseTransition;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js","./State.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/State.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/methods/Methods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/fullwindowrectangle/FullWindowRectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Rectangle = Phaser.GameObjects.Rectangle;
class FullWindowRectangle extends Rectangle {
  constructor(scene, color, alpha) {
    super(scene, 0, 0, 2, 2, color, 1);
    this.setAlpha(alpha);
    this.setScrollFactor(0);
    this.boot();
  }
  boot() {
    var scene = this.scene;
    scene.sys.events.on('prerender', this.resize, this);
  }
  destroy(fromScene) {
    // preDestroy method does not have fromScene parameter
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    this.scene.sys.events.off('prerender', this.resize, this);
    super.destroy(fromScene);
  }
  get tint() {
    return this.fillColor;
  }
  set tint(value) {
    this.setFillStyle(value, this.fillAlpha);
  }
  resize() {
    var scene = this.scene;
    var gameSize = scene.sys.scale.gameSize;
    var camera = scene.sys.cameras.main;
    var gameWidth = gameSize.width,
      gameHeight = gameSize.height,
      scale = 1 / camera.zoom;
    var x = gameWidth / 2,
      y = gameHeight / 2,
      width = gameWidth * scale,
      height = gameHeight * scale;
    if (this.x !== x || this.y !== y) {
      this.setPosition(x, y);
    }
    if (this.width !== width || this.height !== height) {
      this.setSize(width, height).setOrigin(0.5);
    }
  }
}
var _default = FullWindowRectangle;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/input/toucheventstop/TouchEventStop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class TouchEventStop extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject, {
      eventEmitter: false
    });
    // No event emitter
    // this.parent = gameObject;

    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    this.setHitAreaMode(GetValue(o, 'hitAreaMode', 0));
    this.setEnable(GetValue(o, 'enable', true));
    this.setStopMode(GetValue(o, 'stopAllLevels', true));
    return this;
  }
  boot() {
    this.parent.on('pointerdown', function (pointer, localX, localY, event) {
      if (this.stopAllLevels) {
        event.stopPropagation();
      }
    }, this).on('pointerup', function (pointer, localX, localY, event) {
      if (this.stopAllLevels) {
        event.stopPropagation();
      }
    }, this).on('pointermove', function (pointer, localX, localY, event) {
      if (this.stopAllLevels) {
        event.stopPropagation();
      }
    }, this).on('pointerover', function (pointer, localX, localY, event) {
      if (this.stopAllLevels) {
        event.stopPropagation();
      }
    }, this).on('pointerout', function (pointer, event) {
      if (this.stopAllLevels) {
        event.stopPropagation();
      }
    }, this);
  }
  setHitAreaMode(mode) {
    if (typeof mode === 'string') {
      mode = HitAreaMode[mode];
    }
    var gameObject = this.parent;
    if (gameObject.input) {
      gameObject.removeInteractive();
    }
    if (mode === 0) {
      gameObject.setInteractive();
    } else {
      gameObject.setInteractive({
        hitArea: {},
        hitAreaCallback: function () {
          return true;
        }
      });
    }
    return this;
  }
  setEnable(e) {
    if (e === undefined) {
      e = true;
    }
    if (e) {
      this.parent.setInteractive();
    } else {
      this.parent.disableInteractive();
    }
    this.enable = e;
    return this;
  }
  setStopMode(allLevels) {
    if (allLevels === undefined) {
      allLevels = true;
    }
    this.stopAllLevels = allLevels;
    return this;
  }
  toggleEnable() {
    this.setEnable(!this.enable);
    return this;
  }
}
var HitAreaMode = {
  default: 0,
  fullWindow: 1
};
var _default = TouchEventStop;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/cover/Cover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FullWindowRectangle = _interopRequireDefault(require("../fullwindowrectangle/FullWindowRectangle.js"));
var _TouchEventStop = _interopRequireDefault(require("../../../input/toucheventstop/TouchEventStop.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Cover extends _FullWindowRectangle.default {
  constructor(scene, config) {
    var fillColor = GetValue(config, 'color', 0x0);
    var fillAlpha = GetValue(config, 'alpha', 0.8);
    super(scene, fillColor, fillAlpha);
    this.touchEventStop = new _TouchEventStop.default(this, {
      hitAreaMode: 1
    });
  }
}
var _default = Cover;
exports.default = _default;
},{"../fullwindowrectangle/FullWindowRectangle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/fullwindowrectangle/FullWindowRectangle.js","../../../input/toucheventstop/TouchEventStop.js":"node_modules/phaser3-rex-plugins/plugins/input/toucheventstop/TouchEventStop.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/modal/CreateCover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Cover = _interopRequireDefault(require("../../gameobjects/shape/cover/Cover.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateCover = function (gameObject, config) {
  var scene = gameObject.scene;
  var cover = new _Cover.default(scene, config);
  scene.add.existing(cover);

  // Put cover behind game object
  if (gameObject.isRexContainerLite) {
    gameObject.moveDepthBelow(cover);
    gameObject.pin(cover, {
      syncPosition: false,
      syncRotation: false,
      syncScale: false,
      syncAlpha: false,
      syncScrollFactor: false
    });
  } else {
    scene.children.moveBelow(cover, gameObject);
  }
  return cover;
};
var _default = CreateCover;
exports.default = _default;
},{"../../gameobjects/shape/cover/Cover.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/cover/Cover.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/modal/DefaultTransitCallbacks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _popup = _interopRequireDefault(require("../../popup.js"));
var _scaleDownDestroy = _interopRequireDefault(require("../../scale-down-destroy.js"));
var _fadeIn = _interopRequireDefault(require("../../fade-in.js"));
var _fadeOutDestroy = _interopRequireDefault(require("../../fade-out-destroy.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  popUp(gameObject, duration) {
    if (gameObject._modalScaleSave !== undefined) {
      gameObject.scaleX = gameObject._modalScaleSave;
      gameObject.scaleY = gameObject._modalScaleSave;
    } else {
      gameObject._modalScaleSave = gameObject.scaleX;
    }
    (0, _popup.default)(gameObject, duration);
  },
  scaleDown(gameObject, duration) {
    // Don't destroy here
    (0, _scaleDownDestroy.default)(gameObject, duration, undefined, undefined, false);
  },
  fadeIn(gameObject, duration) {
    if (gameObject._modalAlphaSave !== undefined) {
      gameObject.alpha = gameObject._modalAlphaSave;
    } else {
      gameObject._modalAlphaSave = gameObject.alpha;
    }
    (0, _fadeIn.default)(gameObject, duration);
  },
  fadeOut(gameObject, duration) {
    // Don't destroy here
    (0, _fadeOutDestroy.default)(gameObject, duration, false);
  }
};
exports.default = _default;
},{"../../popup.js":"node_modules/phaser3-rex-plugins/plugins/popup.js","../../scale-down-destroy.js":"node_modules/phaser3-rex-plugins/plugins/scale-down-destroy.js","../../fade-in.js":"node_modules/phaser3-rex-plugins/plugins/fade-in.js","../../fade-out-destroy.js":"node_modules/phaser3-rex-plugins/plugins/fade-out-destroy.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/modal/DefaultCoverTransitCallbacks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultCoverTransitOutCallback = exports.DefaultCoverTransitInCallback = void 0;
var _fadeIn = _interopRequireDefault(require("../../fade-in.js"));
var _fadeOutDestroy = _interopRequireDefault(require("../../fade-out-destroy.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DefaultCoverTransitInCallback = function (cover, duration) {
  if (cover._modalAlphaSave !== undefined) {
    cover.alpha = cover._modalAlphaSave;
  } else {
    cover._modalAlphaSave = cover.alpha;
  }
  (0, _fadeIn.default)(cover, duration, cover.alpha);
};
exports.DefaultCoverTransitInCallback = DefaultCoverTransitInCallback;
var DefaultCoverTransitOutCallback = function (cover, duration) {
  (0, _fadeOutDestroy.default)(cover, duration, false);
};
exports.DefaultCoverTransitOutCallback = DefaultCoverTransitOutCallback;
},{"../../fade-in.js":"node_modules/phaser3-rex-plugins/plugins/fade-in.js","../../fade-out-destroy.js":"node_modules/phaser3-rex-plugins/plugins/fade-out-destroy.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/bounds/IsPointInBounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetBounds = require("./GetBounds.js");
var IsPointInBounds = function (gameObject, x, y, preTest, postTest) {
  // Can't get bounds
  if (!gameObject || !gameObject.getBounds) {
    return false;
  }
  if (preTest && !preTest(gameObject, x, y)) {
    return false;
  }
  var boundsRect = (0, _GetBounds.GetBounds)(gameObject, true);
  if (!boundsRect.contains(x, y)) {
    return false;
  }
  if (postTest && !postTest(gameObject, x, y)) {
    return false;
  }
  return true;
};
var _default = IsPointInBounds;
exports.default = _default;
},{"./GetBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/bounds/GetBounds.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/modal/Modal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OpenCloseTransition = _interopRequireDefault(require("../openclosetransition/OpenCloseTransition.js"));
var _CreateCover = _interopRequireDefault(require("./CreateCover.js"));
var _DefaultTransitCallbacks = _interopRequireDefault(require("./DefaultTransitCallbacks.js"));
var _DefaultCoverTransitCallbacks = require("./DefaultCoverTransitCallbacks.js");
var _IsPointInBounds = _interopRequireDefault(require("../../utils/bounds/IsPointInBounds.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Modal extends _OpenCloseTransition.default {
  constructor(gameObject, config) {
    if (config === undefined) {
      config = {};
    }
    if (config.transitIn == null) {
      config.transitIn = TransitionMode.popUp;
    }
    if (config.transitOut == null) {
      config.transitOut = TransitionMode.scaleDown;
    }
    config.destroy = GetValue(config, 'destroy', true);
    super(gameObject, config);
    // this.parent = gameObject;
    // this.scene

    // Cover : key of modal, to block touch input        
    var coverConfig = GetValue(config, 'cover');
    this.cover = coverConfig !== false ? (0, _CreateCover.default)(gameObject, coverConfig) : undefined;
    if (this.cover) {
      this.setCoverTransitInCallback(GetValue(coverConfig, 'transitIn', _DefaultCoverTransitCallbacks.DefaultCoverTransitInCallback));
      this.setCoverTransitOutCallback(GetValue(coverConfig, 'transitOut', _DefaultCoverTransitCallbacks.DefaultCoverTransitOutCallback));
    }

    // Close conditions:
    var touchOutsideClose = GetValue(config, 'touchOutsideClose', false);
    var timeOutDuration = GetValue(config, 'duration.hold', -1);
    var timeOutClose = GetValue(config, 'timeOutClose', timeOutDuration >= 0);
    var anyTouchClose = GetValue(config, 'anyTouchClose', false);
    var manualClose = GetValue(config, 'manualClose', false);
    if (manualClose) {
      touchOutsideClose = false;
      anyTouchClose = false;
      timeOutClose = false;
    }
    if (anyTouchClose) {
      touchOutsideClose = false;
    }
    if (timeOutClose) {
      this.setDisplayTime(timeOutDuration);
    } else {
      this.setDisplayTime(-1);
    }

    // Registet touch-close event after opened
    if (anyTouchClose) {
      this.once('open', this.anyTouchClose, this);
    } else if (touchOutsideClose) {
      this.once('open', this.touchOutsideClose, this);
    }
    this.requestOpen();
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }

    // Registered in touchOutsideClose(), or anyTouchClose()
    if (!this.cover) {
      this.scene.input.off('pointerup', this.touchCloseCallback, this);
    }
    if (this.cover && !fromScene) {
      this.cover.destroy();
      this.cover = undefined;
    }
    super.shutdown(fromScene);
  }
  touchOutsideClose() {
    if (this.cover) {
      this.cover.on('pointerup', this.touchCloseCallback, this);
    } else {
      this.scene.input.on('pointerup', this.touchCloseCallback, this);
    }
    this.clickOutsideTest = true;
    return this;
  }
  anyTouchClose() {
    if (this.cover) {
      this.cover.once('pointerup', this.touchCloseCallback, this);
    } else {
      this.scene.input.once('pointerup', this.touchCloseCallback, this);
    }
    return this;
  }
  touchCloseCallback(pointer) {
    if (this.clickOutsideTest && (0, _IsPointInBounds.default)(this.parent, pointer.worldX, pointer.worldY)) {
      return;
    }
    this.requestClose();
  }
  runTransitionInCallback() {
    var duration = super.runTransitionInCallback();
    var cover = this.cover;
    if (cover && this.coverTransitInCallback) {
      this.coverTransitInCallback(cover, duration);
    }
    return duration;
  }
  runTransitionOutCallback() {
    var duration = super.runTransitionOutCallback();
    var cover = this.cover;
    if (cover && this.coverTransitOutCallback) {
      this.coverTransitOutCallback(cover, duration);
    }
    return duration;
  }
  onOpen() {
    var duration = this.displayTime;
    if (duration >= 0) {
      this.delayCall(duration, this.requestClose,
      // callback
      this // scope
      );
    }

    this.emit('open', this.parent, this);
    super.onOpen();
  }
  onClose() {
    this.emit('close', this.closeEventData);
    super.onClose();
  }
  setDisplayTime(time) {
    this.displayTime = time;
    return this;
  }
  setTransitInCallback(callback) {
    if (typeof callback === 'string') {
      callback = TransitionMode[callback];
    }
    switch (callback) {
      case TransitionMode.popUp:
        callback = _DefaultTransitCallbacks.default.popUp;
        break;
      case TransitionMode.fadeIn:
        callback = _DefaultTransitCallbacks.default.fadeIn;
        break;
    }
    super.setTransitInCallback(callback);
    // callback = function(gameObject, duration) {}
    return this;
  }
  setTransitOutCallback(callback) {
    if (typeof callback === 'string') {
      callback = TransitionMode[callback];
    }
    switch (callback) {
      case TransitionMode.scaleDown:
        callback = _DefaultTransitCallbacks.default.scaleDown;
        break;
      case TransitionMode.fadeOut:
        callback = _DefaultTransitCallbacks.default.fadeOut;
        break;
    }
    super.setTransitOutCallback(callback);
    // callback = function(gameObject, duration) {}
    return this;
  }
  setCoverTransitInCallback(callback) {
    this.coverTransitInCallback = callback;
    return this;
  }
  setCoverTransitOutCallback(callback) {
    this.coverTransitOutCallback = callback;
    return this;
  }
}
const TransitionMode = {
  popUp: 0,
  fadeIn: 1,
  scaleDown: 0,
  fadeOut: 1
};
var _default = Modal;
exports.default = _default;
},{"../openclosetransition/OpenCloseTransition.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/OpenCloseTransition.js","./CreateCover.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/modal/CreateCover.js","./DefaultTransitCallbacks.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/modal/DefaultTransitCallbacks.js","./DefaultCoverTransitCallbacks.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/modal/DefaultCoverTransitCallbacks.js","../../utils/bounds/IsPointInBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/bounds/IsPointInBounds.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/modal/ModalPromise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalPromise = exports.ModalClose = exports.Modal = void 0;
var _Modal = _interopRequireDefault(require("./Modal.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Modal = function (gameObject, config) {
  var modalBehavior = new _Modal.default(gameObject, config);

  // Route modal's 'open', 'close' event
  modalBehavior.on('open', function () {
    gameObject.emit('modal.open', modalBehavior);
  });
  modalBehavior.on('close', function (closeEventData) {
    gameObject.emit('modal.close', closeEventData, modalBehavior);
  });

  // Reigster 'modal.requestClose' event for invoking modalBehavior.requestClose() method
  gameObject.on('modal.requestClose', modalBehavior.requestClose, modalBehavior);
  /*
  It is not necessary to turn off gameObject's 'modal.requestClose' event because that :
    - If `config.destroy` is `undefined` (or `true), gameObject and modalBehavior will be destroyed
  - If `config.destroy` is `false` (for reusing dialog), keeping gameObject and modalBehavior 
  */

  return modalBehavior;
};
exports.Modal = Modal;
var ModalPromise = function (gameObject, config) {
  var modalBehavior = Modal(gameObject, config);
  return new Promise(function (resolve, reject) {
    modalBehavior.once('close', function (closeEventData) {
      resolve(closeEventData);
    });
  });
};
exports.ModalPromise = ModalPromise;
var ModalClose = function (gameObject, closeEventData) {
  gameObject.emit('modal.requestClose', closeEventData);
};
exports.ModalClose = ModalClose;
},{"./Modal.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/modal/Modal.js"}],"node_modules/phaser3-rex-plugins/plugins/modal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Modal", {
  enumerable: true,
  get: function () {
    return _ModalPromise.Modal;
  }
});
Object.defineProperty(exports, "ModalBehavoir", {
  enumerable: true,
  get: function () {
    return _Modal.default;
  }
});
Object.defineProperty(exports, "ModalClose", {
  enumerable: true,
  get: function () {
    return _ModalPromise.ModalClose;
  }
});
Object.defineProperty(exports, "ModalPromise", {
  enumerable: true,
  get: function () {
    return _ModalPromise.ModalPromise;
  }
});
var _Modal = _interopRequireDefault(require("./behaviors/modal/Modal.js"));
var _ModalPromise = require("./behaviors/modal/ModalPromise.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./behaviors/modal/Modal.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/modal/Modal.js","./behaviors/modal/ModalPromise.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/modal/ModalPromise.js"}],"node_modules/phaser3-rex-plugins/templates/ui/modal/Modal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Modal", {
  enumerable: true,
  get: function () {
    return _modal.Modal;
  }
});
Object.defineProperty(exports, "ModalBehavoir", {
  enumerable: true,
  get: function () {
    return _modal.ModalBehavoir;
  }
});
Object.defineProperty(exports, "ModalClose", {
  enumerable: true,
  get: function () {
    return _modal.ModalClose;
  }
});
Object.defineProperty(exports, "ModalPromise", {
  enumerable: true,
  get: function () {
    return _modal.ModalPromise;
  }
});
var _modal = require("../../../plugins/modal.js");
},{"../../../plugins/modal.js":"node_modules/phaser3-rex-plugins/plugins/modal.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/object/IsFunction.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var IsFunction = function (obj) {
  return obj && typeof obj === 'function';
};
var _default = IsFunction;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ModalMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Modal = require("../modal/Modal.js");
var _IsFunction = _interopRequireDefault(require("../../../plugins/utils/object/IsFunction.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  // Override
  // onCreateModalBehavior(self, config) { },

  modal(config, onClose) {
    if ((0, _IsFunction.default)(config)) {
      onClose = config;
      config = undefined;
    }
    if (this._modalBehavior === undefined) {
      if (this.onCreateModalBehavior) {
        this.onCreateModalBehavior(this, config);
      }
      this._modalBehavior = (0, _Modal.Modal)(this, config);
    }
    if (onClose) {
      this._modalBehavior.once('close', onClose);
    }
    this._modalBehavior.requestOpen();
    return this;
  },
  modalPromise(config) {
    var self = this;
    return new Promise(function (resolve, reject) {
      self.modal(config, resolve);
    });
  },
  modalClose(closeEventData) {
    (0, _Modal.ModalClose)(this, closeEventData);
    return this;
  }
};
exports.default = _default;
},{"../modal/Modal.js":"node_modules/phaser3-rex-plugins/templates/ui/modal/Modal.js","../../../plugins/utils/object/IsFunction.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsFunction.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/input/IsPointerInBounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsPointInBounds = _interopRequireDefault(require("../bounds/IsPointInBounds.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var IsPointerInBounds = function (gameObject, pointer, preTest, postTest) {
  if (pointer) {
    return (0, _IsPointInBounds.default)(gameObject, pointer.worldX, pointer.worldY, preTest, postTest);
  } else {
    var inputManager = gameObject.scene.input.manager;
    var pointersTotal = inputManager.pointersTotal;
    var pointers = inputManager.pointers;
    for (var i = 0; i < pointersTotal; i++) {
      pointer = pointers[i];
      if ((0, _IsPointInBounds.default)(gameObject, pointer.worldX, pointer.worldY, preTest, postTest)) {
        return true;
      }
    }
    return false;
  }
};
var _default = IsPointerInBounds;
exports.default = _default;
},{"../bounds/IsPointInBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/bounds/IsPointInBounds.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/IsInTouching.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsPointerInBounds = _interopRequireDefault(require("../../../plugins/utils/input/IsPointerInBounds.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var IsInTouching = function (pointer, gameObject) {
  if (gameObject === undefined) {
    gameObject = this;
  }
  return (0, _IsPointerInBounds.default)(gameObject, pointer);
};
var _default = IsInTouching;
exports.default = _default;
},{"../../../plugins/utils/input/IsPointerInBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/input/IsPointerInBounds.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/object/IsArray.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var IsArray = function (obj) {
  return Object.prototype.toString.call(obj) === '[object Array]';
};
var _default = IsArray;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/ContainsPoint.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsPointInBounds = _interopRequireDefault(require("../../../plugins/utils/bounds/IsPointInBounds.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ContainsPoint = function (gameObject, x, y, preTest, postTest) {
  return (0, _IsPointInBounds.default)(gameObject, x, y, GetPreTestCallback(preTest), GetPostTestCallback(postTest));
};
var IsNotHiddenSizer = function (gameObject) {
  var isHiddenSizer = gameObject.rexSizer && gameObject.rexSizer.hidden;
  return !isHiddenSizer;
};
var GetPreTestCallback = function (preTest) {
  if (!preTest) {
    return IsNotHiddenSizer;
  }
  return function (gameObject, x, y) {
    if (!IsNotHiddenSizer(gameObject)) {
      return false;
    }
    preTest(gameObject, x, y);
    return true;
  };
};
var GetPostTestCallback = function (postTest) {
  return postTest;
};
var _default = ContainsPoint;
exports.default = _default;
},{"../../../plugins/utils/bounds/IsPointInBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/bounds/IsPointInBounds.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PointToChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsFunction = _interopRequireDefault(require("../../../plugins/utils/object/IsFunction.js"));
var _IsArray = _interopRequireDefault(require("../../../plugins/utils/object/IsArray.js"));
var _ContainsPoint = _interopRequireDefault(require("../utils/ContainsPoint.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PointToChild = function (x, y, preTest, postTest, children) {
  if (!(0, _IsFunction.default)(preTest)) {
    children = preTest;
    preTest = undefined;
    postTest = undefined;
  }
  if (children === undefined) {
    if (this.sizerChildren) {
      children = this.sizerChildren;
    } else {
      children = this.children;
    }
  }
  if ((0, _IsArray.default)(children)) {
    var child;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      child = children[i];
      if ((0, _ContainsPoint.default)(child, x, y, preTest, postTest)) {
        return child;
      }
    }
  } else {
    var child;
    for (var key in children) {
      child = children[key];
      if ((0, _ContainsPoint.default)(child, x, y, preTest, postTest)) {
        return child;
      }
    }
  }
  return null;
};
var _default = PointToChild;
exports.default = _default;
},{"../../../plugins/utils/object/IsFunction.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsFunction.js","../../../plugins/utils/object/IsArray.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsArray.js","../utils/ContainsPoint.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/ContainsPoint.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/size/ResizeGameObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ResizeGameObject = function (gameObject, newWidth, newHeight) {
  if (!gameObject || newWidth === undefined && newHeight === undefined) {
    return;
  }
  if (gameObject.resize) {
    // Has `resize` method
    if (newWidth === undefined) {
      newWidth = gameObject.width;
    }
    if (newHeight === undefined) {
      newHeight = gameObject.height;
    }
    gameObject.resize(newWidth, newHeight);
  } else {
    // Set display width/height
    if (newWidth !== undefined) {
      gameObject.displayWidth = newWidth;
    }
    if (newHeight !== undefined) {
      gameObject.displayHeight = newHeight;
    }
  }
};
var _default = ResizeGameObject;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/CopyState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var CopyState = function (gamObject, out) {
  if (out === undefined) {
    out = {};
  } else if (out === true) {
    out = GlobState;
  }
  out.x = gamObject.x;
  out.y = gamObject.y;
  out.scaleX = gamObject.scaleX;
  out.scaleY = gamObject.scaleY;
  out.width = gamObject.width;
  out.height = gamObject.height;
  out.displayWidth = gamObject.displayWidth;
  out.displayHeight = gamObject.displayHeight;
  return out;
};
var GlobState = {};
var _default = CopyState;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/PreLayoutChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CopyState = _interopRequireDefault(require("../../utils/CopyState"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PreLayoutChild = function (child) {
  if (this.sizerEventsEnable) {
    (0, _CopyState.default)(child, this.getChildPrevState(child));
    this.layoutedChildren.push(child);
  }
};
var _default = PreLayoutChild;
exports.default = _default;
},{"../../utils/CopyState":"node_modules/phaser3-rex-plugins/templates/ui/utils/CopyState.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/LayoutChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AlignIn = _interopRequireDefault(require("../../../../plugins/utils/actions/AlignIn.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var LayoutChild = function (child, x, y, width, height, align, offsetX, offsetY) {
  (0, _AlignIn.default)(child, x, y, width, height, align);
  if (offsetX !== undefined) {
    child.x += offsetX;
  }
  if (offsetY !== undefined) {
    child.y += offsetY;
  }
  this.resetChildPositionState(child);
  if (this.sizerEventsEnable) {
    child.emit('sizer.postlayout', child, this);
  }
};
var _default = LayoutChild;
exports.default = _default;
},{"../../../../plugins/utils/actions/AlignIn.js":"node_modules/phaser3-rex-plugins/plugins/utils/actions/AlignIn.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/LayoutBackgrounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResizeGameObject = _interopRequireDefault(require("../../../plugins/utils/size/ResizeGameObject.js"));
var _PreLayoutChild = _interopRequireDefault(require("./utils/PreLayoutChild.js"));
var _LayoutChild = _interopRequireDefault(require("./utils/LayoutChild.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ALIGN_CENTER = Phaser.Display.Align.CENTER;
var LayoutBackgrounds = function () {
  if (this.backgroundChildren === undefined) {
    return;
  }
  var backgrounds = this.backgroundChildren;
  var startX = this.left,
    startY = this.top;
  var parentWidth = this.width,
    parentHeight = this.height;
  var child, childConfig, padding, x, y, width, height;
  for (var i = 0, cnt = backgrounds.length; i < cnt; i++) {
    child = backgrounds[i];
    childConfig = child.rexSizer;
    if (childConfig.hidden) {
      continue;
    }
    padding = childConfig.padding;
    _PreLayoutChild.default.call(this, child);
    x = startX + padding.left;
    y = startY + padding.top;
    width = parentWidth - padding.left - padding.right;
    height = parentHeight - padding.top - padding.bottom;
    (0, _ResizeGameObject.default)(child, width, height);
    _LayoutChild.default.call(this, child, x, y, width, height, ALIGN_CENTER);
  }
};
var _default = LayoutBackgrounds;
exports.default = _default;
},{"../../../plugins/utils/size/ResizeGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/ResizeGameObject.js","./utils/PreLayoutChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/PreLayoutChild.js","./utils/LayoutChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/LayoutChild.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/SetDraggable.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetDraggable = function (senser, draggable) {
  var senserType = typeof senser;
  if (senserType === 'string') {
    var senserName = senser;
    senser = this.getElement(senserName);
    if (!senser) {
      console.error(`Can get element '${senserName}'`);
      return this;
    }
  } else if (senser === undefined || senserType != 'object') {
    draggable = senser;
    senser = this;
  }
  if (draggable === undefined) {
    draggable = true;
  }
  if (senser.input && senser.input._dragTopmostSizer) {
    // Draggable is already registered
    senser.input.draggable = draggable;
  } else if (draggable) {
    // Register draggable
    senser.setInteractive();
    senser.scene.input.setDraggable(senser);
    senser.on('drag', function (pointer, dragX, dragY) {
      var topmostParent = this.getTopmostSizer();
      topmostParent.x += dragX - senser.x;
      topmostParent.y += dragY - senser.y;
      topmostParent.emit('sizer.drag', pointer, dragX, dragY);
    }, this).on('dragstart', function (pointer, dragX, dragY) {
      var topmostParent = this.getTopmostSizer();
      topmostParent.emit('sizer.dragstart', pointer, dragX, dragY);
    }, this).on('dragend', function (pointer, dragX, dragY, dropped) {
      var topmostParent = this.getTopmostSizer();
      topmostParent.emit('sizer.dragend', pointer, dragX, dragY, dropped);
    }, this);
    senser.input._dragTopmostSizer = true;
  } else {
    // Not draggable and draggable is not registered yet, do nothing
  }
  return this;
};
var _default = SetDraggable;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/button.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Button = _interopRequireDefault(require("./input/button/Button.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _Button.default;
exports.default = _default;
},{"./input/button/Button.js":"node_modules/phaser3-rex-plugins/plugins/input/button/Button.js"}],"node_modules/phaser3-rex-plugins/templates/ui/click/Click.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _button = _interopRequireDefault(require("../../../plugins/button.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _button.default;
exports.default = _default;
},{"../../../plugins/button.js":"node_modules/phaser3-rex-plugins/plugins/button.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ClickMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Click = _interopRequireDefault(require("../click/Click.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  onClick(gameObject, callback, scope, config) {
    if (!gameObject) {
      return this;
    }
    if (typeof gameObject === 'function') {
      config = scope;
      scope = callback;
      callback = gameObject;
      gameObject = this;
    }
    if (gameObject._click === undefined) {
      gameObject._click = new _Click.default(gameObject, config);
    }
    gameObject._click.on('click', callback, scope);
    return this;
  },
  offClick(gameObject, callback, scope) {
    if (typeof gameObject === 'function') {
      scope = callback;
      callback = gameObject;
      gameObject = this;
    }
    if (gameObject._click === undefined) {
      return this;
    }
    gameObject._click.off('click', callback, scope);
    return this;
  },
  enableClick(gameObject, enabled) {
    if (gameObject && typeof gameObject !== 'object') {
      enabled = gameObject;
      gameObject = this;
    }
    if (gameObject._click === undefined) {
      return this;
    }
    gameObject._click.setEnable(enabled);
    return this;
  },
  disableClick(gameObject) {
    if (gameObject && typeof gameObject !== 'object') {
      gameObject = this;
    }
    if (gameObject._click === undefined) {
      return this;
    }
    gameObject._click.setEnable(false);
    return this;
  }
};
exports.default = _default;
},{"../click/Click.js":"node_modules/phaser3-rex-plugins/templates/ui/click/Click.js"}],"node_modules/phaser3-rex-plugins/plugins/input/clickoutside/ClickOutside.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
var _IsPointerInHitArea = _interopRequireDefault(require("../../utils/input/IsPointerInHitArea.js"));
var _IsPointerInBounds = _interopRequireDefault(require("../../utils/input/IsPointerInBounds.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class ClickOutside extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;

    this._enable = undefined;
    var inputConfig = GetValue(config, "inputConfig", undefined);
    if (inputConfig) {
      gameObject.setInteractive(inputConfig);
    }
    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    this.setEnable(GetValue(o, "enable", true));
    this.setMode(GetValue(o, "mode", 1));
    this.setClickInterval(GetValue(o, "clickInterval", 100));
    return this;
  }
  boot() {
    var scene = this.parent.scene;
    scene.input.on('pointerdown', this.onPress, this);
    scene.input.on('pointerup', this.onRelease, this);
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }
    var scene = this.parent.scene;
    scene.input.off('pointerdown', this.onPress, this);
    scene.input.off('pointerup', this.onRelease, this);
    super.shutdown(fromScene);
  }
  get enable() {
    return this._enable;
  }
  set enable(e) {
    if (this._enable === e) {
      return;
    }
    this._enable = e;
    var eventName = e ? 'enable' : 'disable';
    this.emit(eventName, this, this.parent);
  }
  setEnable(e) {
    if (e === undefined) {
      e = true;
    }
    this.enable = e;
    return this;
  }
  toggleEnable() {
    this.setEnable(!this.enable);
    return this;
  }
  setMode(m) {
    if (typeof m === 'string') {
      m = CLICKMODE[m];
    }
    this.mode = m;
    return this;
  }
  setClickInterval(interval) {
    this.clickInterval = interval; // ms
    return this;
  }
  isPointerInside(pointer) {
    var gameObject = this.parent;
    var isInsideCallback = gameObject.input ? _IsPointerInHitArea.default : _IsPointerInBounds.default;
    return isInsideCallback(gameObject, pointer);
  }

  // internal
  onPress(pointer) {
    if (this.mode === 0) {
      // Do nothing if game object is not visible
      if (!this.parent.willRender(pointer.camera)) {
        return;
      }
      if (!this.isPointerInside(pointer)) {
        this.click(pointer.downTime, pointer);
      }
    }
  }
  onRelease(pointer) {
    if (this.mode === 1) {
      // Do nothing if game object is not visible
      if (!this.parent.willRender(pointer.camera)) {
        return;
      }
      if (!this.isPointerInside(pointer)) {
        this.click(pointer.upTime, pointer);
      }
    }
  }
  click(nowTime, pointer) {
    if (!this.enable) {
      return this;
    }
    if (nowTime === undefined) {
      // fires 'clickoutside' event manually
      this.emit('clickoutside', this, this.parent, pointer);
      return this;
    }
    var lastClickTime = this.lastClickTime;
    if (lastClickTime !== undefined && nowTime - lastClickTime <= this.clickInterval) {
      return this;
    }
    this.lastClickTime = nowTime;
    this.emit('clickoutside', this, this.parent, pointer);
    return this;
  }
}
const CLICKMODE = {
  press: 0,
  pointerdown: 0,
  release: 1,
  pointerup: 1
};
var _default = ClickOutside;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js","../../utils/input/IsPointerInHitArea.js":"node_modules/phaser3-rex-plugins/plugins/utils/input/IsPointerInHitArea.js","../../utils/input/IsPointerInBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/input/IsPointerInBounds.js"}],"node_modules/phaser3-rex-plugins/plugins/clickoutside.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ClickOutside = _interopRequireDefault(require("./input/clickoutside/ClickOutside.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _ClickOutside.default;
exports.default = _default;
},{"./input/clickoutside/ClickOutside.js":"node_modules/phaser3-rex-plugins/plugins/input/clickoutside/ClickOutside.js"}],"node_modules/phaser3-rex-plugins/templates/ui/clickoutside/ClickOutside.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _clickoutside = _interopRequireDefault(require("../../../plugins/clickoutside.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _clickoutside.default;
exports.default = _default;
},{"../../../plugins/clickoutside.js":"node_modules/phaser3-rex-plugins/plugins/clickoutside.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ClickOutsideMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ClickOutside = _interopRequireDefault(require("../clickoutside/ClickOutside.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  onClickOutside(gameObject, callback, scope, config) {
    if (!gameObject) {
      return this;
    }
    if (typeof gameObject === 'function') {
      config = scope;
      scope = callback;
      callback = gameObject;
      gameObject = this;
    }
    if (gameObject._clickOutside === undefined) {
      gameObject._clickOutside = new _ClickOutside.default(gameObject, config);
    }
    gameObject._clickOutside.on('clickoutside', callback, scope);
    return this;
  },
  offClickOutside(gameObject, callback, scope) {
    if (typeof gameObject === 'function') {
      scope = callback;
      callback = gameObject;
      gameObject = this;
    }
    if (gameObject._clickOutside === undefined) {
      return this;
    }
    gameObject._clickOutside.off('clickoutside', callback, scope);
    return this;
  },
  enableClickOutside(gameObject, enabled) {
    if (gameObject && typeof gameObject !== 'object') {
      enabled = gameObject;
      gameObject = this;
    }
    if (gameObject._clickOutside === undefined) {
      return this;
    }
    gameObject._clickOutside.setEnable(enabled);
    return this;
  },
  disableClickOutside(gameObject) {
    if (gameObject && typeof gameObject !== 'object') {
      gameObject = this;
    }
    if (gameObject._clickOutside === undefined) {
      return this;
    }
    gameObject._clickOutside.setEnable(false);
    return this;
  }
};
exports.default = _default;
},{"../clickoutside/ClickOutside.js":"node_modules/phaser3-rex-plugins/templates/ui/clickoutside/ClickOutside.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/time/cooldown/Cooldown.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FSM = _interopRequireDefault(require("../../../logic/fsm/FSM.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Cooldown extends _FSM.default {
  constructor() {
    super({
      eventEmitter: false
    });
    this.goto('IDLE');
  }
  setCooldownTime(time) {
    this.cooldownTime = time;
    this.cooldownMode = time !== undefined;
    return this;
  }
  request() {
    return this.runMethod('request');
  }

  // IDLE state
  update_IDLE() {
    this.compensationTime = 0;
  }
  request_IDLE() {
    this.next();
    return true;
  }
  next_IDLE() {
    if (this.cooldownMode) {
      return 'COOLDOWN';
    }
  }

  // COOLDOWN state
  enter_COOLDOWN() {
    this.remainderTime = this.cooldownTime + this.compensationTime;
  }
  update_COOLDOWN(time, delta) {
    this.remainderTime -= delta;
    if (this.remainderTime < 0) {
      this.compensationTime = this.cooldownTime > delta ? -this.remainderTime : 0;
      this.goto('IDLE');
    }
  }
  request_COOLDOWN() {
    return false;
  }
}
var _default = Cooldown;
exports.default = _default;
},{"../../../logic/fsm/FSM.js":"node_modules/phaser3-rex-plugins/plugins/logic/fsm/FSM.js"}],"node_modules/phaser3-rex-plugins/plugins/input/intouching/InTouching.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
var _Cooldown = _interopRequireDefault(require("../../utils/time/cooldown/Cooldown.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class InTouching extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;

    this._enable = undefined;
    this.cooldown = new _Cooldown.default();
    this.parent.setInteractive(GetValue(config, 'inputConfig', undefined));
    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    this.pointer = undefined;
    this.prevIsInTouch = false;
    this.isInTouching = false;
    this.setEnable(GetValue(o, 'enable', true));
    this.setCooldown(GetValue(o, 'cooldown', undefined));
    return this;
  }
  boot() {
    var gameObject = this.parent;
    gameObject.on('pointerdown', this.onPointIn, this);
    gameObject.on('pointerover', this.onPointIn, this);
    gameObject.on('pointerup', this.onPointOut, this);
    gameObject.on('pointerout', this.onPointOut, this);
    this.scene.sys.events.on('preupdate', this.preupdate, this);
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }

    // GameObject events will be removed when this gameObject destroyed 
    // this.parent.off('pointerdown', this.onPointIn, this);
    // this.parent.off('pointerover', this.onPointIn, this);
    // this.parent.off('pointerup', this.onPointOut, this);
    // this.parent.off('pointerout', this.onPointOut, this);
    this.scene.sys.events.off('preupdate', this.preupdate, this);
    this.pointer = undefined;
    super.shutdown(fromScene);
  }
  get enable() {
    return this._enable;
  }
  set enable(e) {
    if (this._enable === e) {
      return;
    }
    if (!e) {
      this.prevIsInTouch = false;
      this.isInTouching = false;
      this.pointer = undefined;
    }
    this._enable = e;
    return this;
  }
  setEnable(e) {
    if (e === undefined) {
      e = true;
    }
    this.enable = e;
    return this;
  }
  get cooldownTime() {
    return this.cooldown.cooldownTime;
  }
  set cooldownTime(time) {
    this.cooldown.setCooldownTime(time);
  }
  setCooldown(time) {
    this.cooldownTime = time;
    return this;
  }
  toggleEnable() {
    this.setEnable(!this.enable);
    return this;
  }

  // internal
  onPointIn(pointer, localX, localY) {
    if (!this.enable || !pointer.isDown || this.pointer !== undefined) {
      return;
    }
    this.pointer = pointer;
    this.isInTouching = true;
  }
  onPointOut(pointer) {
    if (!this.enable || this.pointer !== pointer) {
      return;
    }
    this.pointer = undefined;
    this.isInTouching = false;
  }
  preupdate(time, delta) {
    this.cooldown.update(time, delta);
    if (!this.prevIsInTouch && this.isInTouching) {
      this.emit('touchstart', this, this.parent);
    }
    if (this.isInTouching && this.cooldown.request()) {
      this.emit('intouch', this, this.parent, this.pointer);
    }
    if (this.prevIsInTouch && !this.isInTouching) {
      this.emit('touchend', this, this.parent);
    }
    this.prevIsInTouch = this.isInTouching;
  }
}
var _default = InTouching;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js","../../utils/time/cooldown/Cooldown.js":"node_modules/phaser3-rex-plugins/plugins/utils/time/cooldown/Cooldown.js"}],"node_modules/phaser3-rex-plugins/plugins/intouching.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InTouching = _interopRequireDefault(require("./input/intouching/InTouching.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _InTouching.default;
exports.default = _default;
},{"./input/intouching/InTouching.js":"node_modules/phaser3-rex-plugins/plugins/input/intouching/InTouching.js"}],"node_modules/phaser3-rex-plugins/templates/ui/intouching/InTouching.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _intouching = _interopRequireDefault(require("../../../plugins/intouching.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _intouching.default;
exports.default = _default;
},{"../../../plugins/intouching.js":"node_modules/phaser3-rex-plugins/plugins/intouching.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/TouchingMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InTouching = _interopRequireDefault(require("../intouching/InTouching.js"));
var _IsPointerInBounds = _interopRequireDefault(require("../../../plugins/utils/input/IsPointerInBounds.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  isPointerInBounds(target) {
    if (target === undefined) {
      target = this;
    } else if (typeof target === 'string') {
      target = this.getElement(target);
    }
    if (!target) {
      return false;
    }
    return (0, _IsPointerInBounds.default)(target);
  },
  onTouching(gameObject, callback, scope, config) {
    if (!gameObject) {
      return this;
    }
    if (typeof gameObject === 'function') {
      config = scope;
      scope = callback;
      callback = gameObject;
      gameObject = this;
    }
    if (gameObject._inTouching === undefined) {
      gameObject._inTouching = new _InTouching.default(gameObject, config);
    }
    gameObject._inTouching.on('intouch', callback, scope);
    return this;
  },
  offTouching(gameObject, callback, scope) {
    if (typeof gameObject === 'function') {
      scope = callback;
      callback = gameObject;
      gameObject = this;
    }
    if (gameObject._inTouching === undefined) {
      return this;
    }
    gameObject._inTouching.off('intouch', callback, scope);
    return this;
  },
  onTouchingEnd(gameObject, callback, scope, config) {
    if (!gameObject) {
      return this;
    }
    if (typeof gameObject === 'function') {
      config = scope;
      scope = callback;
      callback = gameObject;
      gameObject = this;
    }
    if (gameObject._inTouching === undefined) {
      gameObject._inTouching = new _InTouching.default(gameObject, config);
    }
    gameObject._inTouching.on('touchend', callback, scope);
    return this;
  },
  offTouchingEnd(gameObject, callback, scope) {
    if (typeof gameObject === 'function') {
      scope = callback;
      callback = gameObject;
      gameObject = this;
    }
    if (gameObject._inTouching === undefined) {
      return this;
    }
    gameObject._inTouching.off('touchend', callback, scope);
    return this;
  },
  enableTouching(gameObject, enabled) {
    if (gameObject && typeof gameObject !== 'object') {
      enabled = gameObject;
      gameObject = this;
    }
    if (gameObject._inTouching === undefined) {
      return this;
    }
    gameObject._inTouching.setEnable(enabled);
    return this;
  },
  disableTouching(gameObject) {
    if (gameObject && typeof gameObject !== 'object') {
      gameObject = this;
    }
    if (gameObject._inTouching === undefined) {
      return this;
    }
    gameObject._inTouching.setEnable(false);
    return this;
  }
};
exports.default = _default;
},{"../intouching/InTouching.js":"node_modules/phaser3-rex-plugins/templates/ui/intouching/InTouching.js","../../../plugins/utils/input/IsPointerInBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/input/IsPointerInBounds.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/PointToChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ContainsPoint = _interopRequireDefault(require("../ContainsPoint.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PointToChild = function (parents, x, y) {
  var parent;
  for (var i = 0, cnt = parents.length; i < cnt; i++) {
    parent = parents[i];
    if (!(0, _ContainsPoint.default)(parent, x, y)) {
      continue;
    }
    return parent.pointToChild(x, y);
  }
  return null;
};
var _default = PointToChild;
exports.default = _default;
},{"../ContainsPoint.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/ContainsPoint.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/EmitChildEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PointToChild = _interopRequireDefault(require("./PointToChild.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var EmitChildEvent = function (eventEmitter, eventName, parents, x, y, pointer, event) {
  var child;
  if (y === undefined) {
    child = x;
  } else {
    child = (0, _PointToChild.default)(parents, x, y);
  }
  if (!child) {
    return;
  }
  eventEmitter.emit(eventName, child, pointer, event);
};
var _default = EmitChildEvent;
exports.default = _default;
},{"./PointToChild.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/PointToChild.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/DownChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EmitChildEvent = _interopRequireDefault(require("./EmitChildEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var DownChild = function (config) {
  var downConfig = GetValue(config, 'down', undefined);
  if (downConfig === false) {
    return;
  } else if (downConfig === true) {
    downConfig = undefined;
  }
  this.on('pointerdown', OnDown, this);
};
var OnDown = function (pointer, localX, localY, event) {
  var childrenInteractive = this._childrenInteractive;
  (0, _EmitChildEvent.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}down`, childrenInteractive.targetSizers, pointer.worldX, pointer.worldY, pointer, event);
};
var _default = DownChild;
exports.default = _default;
},{"./EmitChildEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/EmitChildEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/UpChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EmitChildEvent = _interopRequireDefault(require("./EmitChildEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var UpChild = function (config) {
  var upConfig = GetValue(config, 'up', undefined);
  if (upConfig === false) {
    return;
  } else if (upConfig === true) {
    upConfig = undefined;
  }
  this.on('pointerup', OnUp, this);
};
var OnUp = function (pointer, localX, localY, event) {
  var childrenInteractive = this._childrenInteractive;
  (0, _EmitChildEvent.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}up`, childrenInteractive.targetSizers, pointer.worldX, pointer.worldY, pointer, event);
};
var _default = UpChild;
exports.default = _default;
},{"./EmitChildEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/EmitChildEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/OverChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PointToChild = _interopRequireDefault(require("./PointToChild.js"));
var _EmitChildEvent = _interopRequireDefault(require("./EmitChildEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var OverChild = function (config) {
  var overConfig = GetValue(config, 'over', undefined);
  if (overConfig === false) {
    return;
  } else if (overConfig === true) {
    overConfig = undefined;
  }
  this.on('pointermove', OnMove, this).on('pointerover', OnMove, this).on('pointerout', OnOut, this); // pointer-up is included too
};

var OnMove = function (pointer, localX, localY, event) {
  var childrenInteractive = this._childrenInteractive;
  var child = (0, _PointToChild.default)(childrenInteractive.targetSizers, pointer.worldX, pointer.worldY);
  var preChild = childrenInteractive.lastOverChild;
  if (child && preChild && child === preChild) {
    return;
  }
  childrenInteractive.lastOverChild = child;
  (0, _EmitChildEvent.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}out`, childrenInteractive.targetSizers, preChild, undefined, pointer, event);
  (0, _EmitChildEvent.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}over`, childrenInteractive.targetSizers, child, undefined, pointer, event);
};
var OnOut = function (pointer, event) {
  var childrenInteractive = this._childrenInteractive;
  var child = childrenInteractive.lastOverChild;
  childrenInteractive.lastOverChild = null;
  (0, _EmitChildEvent.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}out`, childrenInteractive.targetSizers, child, undefined, pointer, event);
};
var _default = OverChild;
exports.default = _default;
},{"./PointToChild.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/PointToChild.js","./EmitChildEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/EmitChildEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/ClickChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Button = _interopRequireDefault(require("../../../../plugins/input/button/Button.js"));
var _EmitChildEvent = _interopRequireDefault(require("./EmitChildEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var ClickChild = function (config) {
  var clickConfig = GetValue(config, 'click', undefined);
  if (clickConfig === false) {
    return;
  } else if (clickConfig === true) {
    clickConfig = undefined;
  }
  if (clickConfig === undefined) {
    clickConfig = {};
  }
  if (!clickConfig.hasOwnProperty('threshold')) {
    clickConfig.threshold = 10;
  }
  var childrenInteractive = this._childrenInteractive;
  this._click = new _Button.default(this, clickConfig);
  this._click.on('click', function (button, gameObject, pointer, event) {
    (0, _EmitChildEvent.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}click`, childrenInteractive.targetSizers, pointer.worldX, pointer.worldY, pointer, event);
  }, this);
};
var _default = ClickChild;
exports.default = _default;
},{"../../../../plugins/input/button/Button.js":"node_modules/phaser3-rex-plugins/plugins/input/button/Button.js","./EmitChildEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/EmitChildEvent.js"}],"node_modules/phaser3-rex-plugins/plugins/input/gestures/onepointertracer/OnePointerTracer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TickTask = _interopRequireDefault(require("../../../utils/componentbase/TickTask.js"));
var _GetSceneObject = _interopRequireDefault(require("../../../utils/system/GetSceneObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class OnePointerTracer extends _TickTask.default {
  constructor(gameObject, config) {
    var scene = (0, _GetSceneObject.default)(gameObject);
    if (scene === gameObject) {
      gameObject = undefined;
    }
    super(scene, config);
    this.gameObject = gameObject;
    if (gameObject) {
      gameObject.setInteractive(GetValue(config, "inputConfig", undefined));
    }
    this._enable = undefined;
    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    this.setEnable(GetValue(o, 'enable', true));
    this.setDetectBounds();
    if (this.gameObject === undefined) {
      this.setDetectBounds(GetValue(o, 'bounds', undefined));
    } else {
      this.setDetectBounds();
    }
    this.tracerState = TOUCH0;
    // this.recongizedState = new stateClass(this);
    this.pointer = undefined;
    this.lastPointer = undefined; // Last catched pointer
    this.movedState = false;
    this.isTouchingAnyObject = false;
    return this;
  }
  boot() {
    super.boot();
    if (this.gameObject) {
      this.gameObject.on('pointerdown', this.onPointerDown, this);
    } else {
      this.scene.input.on('pointerdown', this.onPointerDown, this);
    }
    this.scene.input.on('pointerup', this.onPointerUp, this);
    this.scene.input.on('gameout', this.dragCancel, this);
    this.scene.input.on('pointermove', this.onPointerMove, this);
    this.scene.sys.events.once('shutdown', this.destroy, this);
  }
  shutdown(fromScene) {
    if (!this.scene) {
      return;
    }
    if (this.gameObject) {
      // GameObject events will be removed when this gameObject destroyed 
      // this.gameObject.off('pointerdown', this.onPointerDown, this);
    } else {
      this.scene.input.off('pointerdown', this.onPointerDown, this);
    }
    this.scene.input.off('pointerup', this.onPointerUp, this);
    this.scene.input.off('gameout', this.dragCancel, this);
    this.scene.input.off('pointermove', this.onPointerMove, this);
    this.scene.sys.events.off('shutdown', this.destroy, this);
    this.gameObject = undefined;
    this.bounds = undefined;
    this.pointer = undefined;
    this.lastPointer = undefined; // Last catched pointer
    this.movedState = false;
    super.shutdown(fromScene);
  }
  get enable() {
    return this._enable;
  }
  set enable(e) {
    if (this._enable === e) {
      return;
    }
    if (!e) {
      this.dragCancel();
    }
    this._enable = e;
    return this;
  }
  setEnable(e) {
    if (e === undefined) {
      e = true;
    }
    this.enable = e;
    return this;
  }
  setDetectBounds(bounds) {
    this.bounds = bounds;
    return this;
  }
  toggleEnable() {
    this.setEnable(!this.enable);
    return this;
  }
  onPointerDown(pointer, gameObjects) {
    if (!this.enable) {
      return;
    }
    if (this.pointer !== undefined) {
      return;
    }
    var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;
    if (!isInsideBounds) {
      return;
    }
    if (this.pointer === pointer) {
      return;
    }
    this.pointer = pointer;
    this.lastPointer = pointer;
    this.movedState = false;
    this.tracerState = TOUCH1;
    if (this.gameObject === undefined) {
      this.isTouchingAnyObject = gameObjects.length > 0;
    }
    this.onDragStart();
  }
  onPointerUp(pointer) {
    if (!this.enable) {
      return;
    }
    var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;
    if (!isInsideBounds) {
      return;
    }
    if (this.pointer !== pointer) {
      return;
    }
    this.pointer = undefined;
    this.movedState = false;
    this.tracerState = TOUCH0;
    this.onDragEnd();
  }
  onPointerMove(pointer) {
    if (!this.enable) {
      return;
    }
    if (pointer.isDown) {
      var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;
      var isCatchedPointer = this.pointer === pointer;
      if (!isCatchedPointer && isInsideBounds) {// Pointer moves into bounds
        // this.onPointerDown(pointer);
      } else if (isCatchedPointer && !isInsideBounds) {
        // Pointer moves out of bounds
        this.onPointerUp(pointer);
      } else {
        // Pointer drags in bounds
        if (!this.movedState) {
          this.movedState = pointer.x !== pointer.downX || pointer.y !== pointer.downY;
        }
        if (this.movedState) {
          this.onDrag();
        }
      }
    } else {
      // var isInsideBounds = (this.bounds) ? this.bounds.contains(pointer.x, pointer.y) : true;
      // var isLastCatchedPointer = (this.lastPointer === pointer);
      // if (isLastCatchedPointer && isInsideBounds) {
      //     this.onLastPointerMove();
      // }
    }
  }
  dragCancel() {
    if (this.tracerState === TOUCH1) {
      this.onDragEnd();
    }
    this.pointer = undefined;
    this.tracerState = TOUCH0;
    return this;
  }
  onDragStart() {
    this.emit('dragstart', this);
  }
  onDragEnd() {
    this.emit('dragend', this);
  }
  onDrag() {
    this.emit('drag', this);
  }

  // onLastPointerMove() { }

  preUpdate(time, delta) {}
  postUpdate(time, delta) {}
  startTicking() {
    super.startTicking();
    this.scene.sys.events.on('preupdate', this.preUpdate, this);
    this.scene.sys.events.on('postupdate', this.postUpdate, this);
  }
  stopTicking() {
    super.stopTicking();
    if (this.scene) {
      // Scene might be destoryed
      this.scene.sys.events.off('preupdate', this.preUpdate, this);
      this.scene.sys.events.off('postupdate', this.postUpdate, this);
    }
  }
  setRecongizedStateObject(stateObject) {
    this.recongizedState = stateObject;
    return this;
  }
  get state() {
    return this.recongizedState.state;
  }
  set state(newState) {
    this.recongizedState.state = newState;
  }
  cancel() {
    this.state = IDLE;
    return this;
  }
}
const TOUCH0 = 0;
const TOUCH1 = 1;
const IDLE = 'IDLE';
var _default = OnePointerTracer;
exports.default = _default;
},{"../../../utils/componentbase/TickTask.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/TickTask.js","../../../utils/system/GetSceneObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetSceneObject.js"}],"node_modules/phaser3-rex-plugins/plugins/input/gestures/tap/Tap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OnePointerTracer = _interopRequireDefault(require("../onepointertracer/OnePointerTracer.js"));
var _fsm = _interopRequireDefault(require("../../../fsm.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const DistanceBetween = Phaser.Math.Distance.Between;
class Tap extends _OnePointerTracer.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    var self = this;
    var stateConfig = {
      states: {
        IDLE: {
          enter: function () {
            self.stop();
            self.tapsCount = 0;
            self.x = 0;
            self.y = 0;
            self.worldX = 0;
            self.worldY = 0;
          },
          exit: function () {
            var pointer = self.lastPointer;
            self.x = pointer.x;
            self.y = pointer.y;
            self.worldX = pointer.worldX;
            self.worldY = pointer.worldY;
          }
        },
        BEGIN: {
          enter: function () {
            self.start();
            self.tapsCount = 0;
            self.emit('tappingstart', self, self.gameObject, self.lastPointer);
          }
        },
        RECOGNIZED: {
          enter: function () {
            self.start();
            self.emit('tap', self, self.gameObject, self.lastPointer);
            self.emit(`${self.tapsCount}tap`, self, self.gameObject, self.lastPointer);
          }
        }
      },
      init: function () {
        this.state = IDLE;
      },
      eventEmitter: false
    };
    this.setRecongizedStateObject(new _fsm.default(stateConfig));
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this.setHoldTime(GetValue(o, 'time', 250)); // min-hold-time of Press is 251
    this.setTapInterval(GetValue(o, 'tapInterval', 200));
    this.setDragThreshold(GetValue(o, 'threshold', 9));
    this.setTapOffset(GetValue(o, 'tapOffset', 10));
    var taps = GetValue(o, 'taps', undefined);
    if (taps !== undefined) {
      this.setTaps(taps);
    } else {
      this.setMaxTaps(GetValue(o, 'maxTaps', undefined));
      this.setMinTaps(GetValue(o, 'minTaps', undefined));
    }
    return this;
  }
  onDragStart() {
    switch (this.state) {
      case IDLE:
        this.state = BEGIN;
        break;
      case BEGIN:
        var pointer = this.lastPointer;
        var tapsOffset = DistanceBetween(pointer.upX, pointer.upY, pointer.x, pointer.y);
        if (tapsOffset > this.tapOffset) {
          // Can't recognize next level, restart here
          this.state = RECOGNIZED;
          this.state = BEGIN;
        }
        break;
      case RECOGNIZED:
        this.state = BEGIN;
        break;
    }
  }
  onDragEnd() {
    if (this.state === BEGIN) {
      this.tapsCount++; // Try recognize next level
      this.emit('tapping', this, this.gameObject, this.lastPointer);
      if (this.maxTaps !== undefined && this.tapsCount === this.maxTaps) {
        // Reach to maxTaps, stop here                
        this.state = RECOGNIZED;
      }
    }
  }
  onDrag() {
    if (this.state === IDLE) {
      return;
    }
    if (this.pointer.getDistance() > this.dragThreshold) {
      // Cancel
      this.state = IDLE;
    }
  }
  preUpdate(time, delta) {
    if (!this.isRunning || !this.enable) {
      return;
    }
    if (this.state === BEGIN) {
      var pointer = this.lastPointer;
      if (pointer.isDown) {
        var holdTime = time - pointer.downTime;
        if (holdTime > this.holdTime) {
          this.state = IDLE;
        }
      } else {
        // isUp
        var releasedTime = time - pointer.upTime;
        if (releasedTime > this.tapInterval) {
          if (this.minTaps === undefined || this.tapsCount >= this.minTaps) {
            this.state = RECOGNIZED;
          } else {
            this.state = IDLE;
          }
        }
      }
    }
  }
  postUpdate(time, delta) {
    if (!this.isRunning || !this.enable) {
      return;
    }
    // Clear RECOGNIZED after update()
    if (this.state === RECOGNIZED) {
      this.state = IDLE;
    }
  }
  get isTapped() {
    return this.state === RECOGNIZED;
  }
  setHoldTime(time) {
    this.holdTime = time; // ms
    return this;
  }
  setTapInterval(time) {
    this.tapInterval = time; // ms
    return this;
  }
  setDragThreshold(distance) {
    this.dragThreshold = distance;
    return this;
  }
  setTapOffset(distance) {
    this.tapOffset = distance;
    return this;
  }
  setMaxTaps(taps) {
    this.maxTaps = taps;
    return this;
  }
  setMinTaps(taps) {
    this.minTaps = taps;
    return this;
  }
  setTaps(minTaps, maxTaps) {
    if (maxTaps === undefined) {
      maxTaps = minTaps;
    }
    this.setMinTaps(minTaps).setMaxTaps(maxTaps);
    return this;
  }
}
const IDLE = 'IDLE';
const BEGIN = 'BEGIN';
const RECOGNIZED = 'RECOGNIZED';
var _default = Tap;
exports.default = _default;
},{"../onepointertracer/OnePointerTracer.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/onepointertracer/OnePointerTracer.js","../../../fsm.js":"node_modules/phaser3-rex-plugins/plugins/fsm.js"}],"node_modules/phaser3-rex-plugins/plugins/input/gestures/press/Press.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OnePointerTracer = _interopRequireDefault(require("../onepointertracer/OnePointerTracer.js"));
var _fsm = _interopRequireDefault(require("../../../fsm.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Press extends _OnePointerTracer.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    var self = this;
    var stateConfig = {
      states: {
        IDLE: {
          enter: function () {
            self.x = 0;
            self.y = 0;
            self.worldX = 0;
            self.worldY = 0;
          },
          exit: function () {
            var pointer = self.lastPointer;
            self.x = pointer.x;
            self.y = pointer.y;
            self.worldX = pointer.worldX;
            self.worldY = pointer.worldY;
          }
        },
        BEGIN: {
          enter: function () {
            self.start();
          },
          exit: function () {
            self.stop();
          }
        },
        RECOGNIZED: {
          enter: function () {
            self.emit('pressstart', self, self.gameObject, self.lastPointer);
          },
          exit: function () {
            self.emit('pressend', self, self.gameObject, self.lastPointer);
          }
        }
      },
      init: function () {
        this.state = IDLE;
      },
      eventEmitter: false
    };
    this.setRecongizedStateObject(new _fsm.default(stateConfig));
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this.setDragThreshold(GetValue(o, 'threshold', 9));
    this.setHoldTime(GetValue(o, 'time', 251));
    return this;
  }
  onDragStart() {
    this.state = BEGIN;
    if (this.holdTime === 0) {
      this.state = RECOGNIZED;
    }
  }
  onDragEnd() {
    this.state = IDLE;
  }
  onDrag() {
    if (this.state === IDLE) {
      return;
    }
    if (this.pointer.getDistance() > this.dragThreshold) {
      this.state = IDLE;
    }
  }
  preUpdate(time, delta) {
    if (!this.isRunning || !this.enable) {
      return;
    }
    if (this.state === BEGIN) {
      var holdTime = time - this.pointer.downTime;
      if (holdTime >= this.holdTime) {
        this.state = RECOGNIZED;
      }
    }
  }
  get isPressed() {
    return this.state === RECOGNIZED;
  }
  setHoldTime(time) {
    this.holdTime = time; // ms
    return this;
  }
  setDragThreshold(distance) {
    this.dragThreshold = distance;
    return this;
  }
}
const IDLE = 'IDLE';
const BEGIN = 'BEGIN';
const RECOGNIZED = 'RECOGNIZED';
var _default = Press;
exports.default = _default;
},{"../onepointertracer/OnePointerTracer.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/onepointertracer/OnePointerTracer.js","../../../fsm.js":"node_modules/phaser3-rex-plugins/plugins/fsm.js"}],"node_modules/phaser3-rex-plugins/plugins/input/gestures/pan/Pan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OnePointerTracer = _interopRequireDefault(require("../onepointertracer/OnePointerTracer.js"));
var _fsm = _interopRequireDefault(require("../../../fsm.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Pan extends _OnePointerTracer.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    var self = this;
    var stateConfig = {
      states: {
        IDLE: {},
        BEGIN: {
          enter: function () {
            var pointer = self.pointer;
            self.startX = pointer.x;
            self.startY = pointer.y;
            self.startWorldX = pointer.worldX;
            self.startWorldY = pointer.worldY;
          }
        },
        RECOGNIZED: {
          enter: function () {
            self.emit('panstart', self, self.gameObject, self.lastPointer);
          },
          exit: function () {
            var pointer = self.lastPointer;
            self.endX = pointer.x;
            self.endY = pointer.y;
            self.endWorldX = pointer.worldX;
            self.endWorldY = pointer.worldY;
            self.emit('panend', self, self.gameObject, self.lastPointer);
          }
        }
      },
      init: function () {
        this.state = IDLE;
      },
      eventEmitter: false
    };
    this.setRecongizedStateObject(new _fsm.default(stateConfig));
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this.setDragThreshold(GetValue(o, 'threshold', 10));
    return this;
  }
  onDragStart() {
    this.state = BEGIN;
    if (this.dragThreshold === 0) {
      this.state = RECOGNIZED;
    }
  }
  onDragEnd() {
    this.state = IDLE;
  }
  onDrag() {
    switch (this.state) {
      case BEGIN:
        if (this.pointer.getDistance() >= this.dragThreshold) {
          this.state = RECOGNIZED;
        }
        break;
      case RECOGNIZED:
        var p1 = this.pointer.position;
        var p0 = this.pointer.prevPosition;
        this.dx = p1.x - p0.x;
        this.dy = p1.y - p0.y;
        var pointer = this.pointer;
        this.x = pointer.x;
        this.y = pointer.y;
        this.worldX = pointer.worldX;
        this.worldY = pointer.worldY;
        this.emit('pan', this, this.gameObject, this.lastPointer);
        break;
    }
  }
  get isPanned() {
    return this.state === RECOGNIZED;
  }
  setDragThreshold(distance) {
    this.dragThreshold = distance;
    return this;
  }
}
const IDLE = 'IDLE';
const BEGIN = 'BEGIN';
const RECOGNIZED = 'RECOGNIZED';
var _default = Pan;
exports.default = _default;
},{"../onepointertracer/OnePointerTracer.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/onepointertracer/OnePointerTracer.js","../../../fsm.js":"node_modules/phaser3-rex-plugins/plugins/fsm.js"}],"node_modules/phaser3-rex-plugins/plugins/input/gestures/swipe/VelocityMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetTickDelta = _interopRequireDefault(require("../../../utils/system/GetTickDelta.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DistanceBetween = Phaser.Math.Distance.Between;
const AngleBetween = Phaser.Math.Angle.Between;
var _default = {
  getDt: function () {
    var dt = (0, _GetTickDelta.default)(this.scene);
    return dt;
  },
  getVelocity: function () {
    var p1 = this.pointer.position;
    var p0 = this.pointer.prevPosition;
    var d = DistanceBetween(p0.x, p0.y, p1.x, p1.y);
    var velocity = d / (this.getDt() * 0.001);
    return velocity;
  },
  getVelocityX: function () {
    var p1 = this.pointer.position;
    var p0 = this.pointer.prevPosition;
    var d = Math.abs(p1.x - p0.x);
    var velocity = d / (this.getDt() * 0.001);
    return velocity;
  },
  getVelocityY: function () {
    var p1 = this.pointer.position;
    var p0 = this.pointer.prevPosition;
    var d = Math.abs(p1.y - p0.y);
    var velocity = d / (this.getDt() * 0.001);
    return velocity;
  },
  getVelocityAngle: function () {
    var p1 = this.pointer.position;
    var p0 = this.pointer.prevPosition;
    var angle = AngleBetween(p0.x, p0.y, p1.x, p1.y);
    return angle;
  }
};
exports.default = _default;
},{"../../../utils/system/GetTickDelta.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetTickDelta.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/math/angle/angletodirections/Const.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  'up&down': 0,
  'left&right': 1,
  '4dir': 2,
  '8dir': 3
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/math/angle/angletodirections/AngleToDirections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var AngleToDirections = function (angle, dirMode, out) {
  if (out === undefined) {
    out = {};
  } else if (out === true) {
    out = globOut;
  }
  out.left = false;
  out.right = false;
  out.up = false;
  out.down = false;
  angle = (angle + 360) % 360;
  switch (dirMode) {
    case 0:
      // up & down
      if (angle < 180) {
        out.down = true;
      } else {
        out.up = true;
      }
      break;
    case 1:
      // left & right
      if (angle > 90 && angle <= 270) {
        out.left = true;
      } else {
        out.right = true;
      }
      break;
    case 2:
      // 4 dir
      if (angle > 45 && angle <= 135) {
        out.down = true;
      } else if (angle > 135 && angle <= 225) {
        out.left = true;
      } else if (angle > 225 && angle <= 315) {
        out.up = true;
      } else {
        out.right = true;
      }
      break;
    case 3:
      // 8 dir
      if (angle > 22.5 && angle <= 67.5) {
        out.down = true;
        out.right = true;
      } else if (angle > 67.5 && angle <= 112.5) {
        out.down = true;
      } else if (angle > 112.5 && angle <= 157.5) {
        out.down = true;
        out.left = true;
      } else if (angle > 157.5 && angle <= 202.5) {
        out.left = true;
      } else if (angle > 202.5 && angle <= 247.5) {
        out.left = true;
        out.up = true;
      } else if (angle > 247.5 && angle <= 292.5) {
        out.up = true;
      } else if (angle > 292.5 && angle <= 337.5) {
        out.up = true;
        out.right = true;
      } else {
        out.right = true;
      }
      break;
  }
  return out;
};
var globOut = {};
var _default = AngleToDirections;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/input/gestures/swipe/Swipe.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OnePointerTracer = _interopRequireDefault(require("../onepointertracer/OnePointerTracer.js"));
var _fsm = _interopRequireDefault(require("../../../fsm.js"));
var _VelocityMethods = _interopRequireDefault(require("./VelocityMethods.js"));
var _Const = _interopRequireDefault(require("../../../utils/math/angle/angletodirections/Const.js"));
var _AngleToDirections = _interopRequireDefault(require("../../../utils/math/angle/angletodirections/AngleToDirections.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const RadToDeg = Phaser.Math.RadToDeg;
class Swipe extends _OnePointerTracer.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    var self = this;
    var stateConfig = {
      states: {
        IDLE: {
          enter: function () {
            self.x = 0;
            self.y = 0;
            self.worldX = 0;
            self.worldY = 0;
          },
          exit: function () {
            var pointer = self.lastPointer;
            self.x = pointer.x;
            self.y = pointer.y;
            self.worldX = pointer.worldX;
            self.worldY = pointer.worldY;
          }
        },
        BEGIN: {
          enter: function () {
            self.validDrag = false;
          }
        },
        RECOGNIZED: {
          enter: function () {
            self.start();
            self.updateDirectionStates();
            self.emit('swipe', self, self.gameObject, self.lastPointer);
          },
          exit: function () {
            self.stop();
            self.clearDirectionStates();
          }
        }
      },
      init: function () {
        this.state = IDLE;
      },
      eventEmitter: false
    };
    this.setRecongizedStateObject(new _fsm.default(stateConfig));
    this.clearDirectionStates();
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this.setDragThreshold(GetValue(o, 'threshold', 10));
    this.setVelocityThreshold(GetValue(o, 'velocityThreshold', 1000));
    this.setDirectionMode(GetValue(o, 'dir', '8dir'));
    return this;
  }
  onDragStart() {
    this.state = BEGIN;
  }
  onDragEnd() {
    this.state = IDLE;
  }
  onDrag() {
    if (this.state === BEGIN) {
      if (!this.validDrag) {
        this.validDrag = this.dragThreshold === 0 || this.pointer.getDistance() >= this.dragThreshold;
      }
      if (this.validDrag && this.dragVelocity > this.velocityThreshold) {
        this.state = RECOGNIZED;
      }
    }
  }
  postUpdate(time, delta) {
    if (!this.isRunning || !this.enable) {
      return;
    }
    // Clear RECOGNIZED after update()
    if (this.state === RECOGNIZED) {
      this.state = IDLE;
    }
  }
  get isSwiped() {
    return this.state === RECOGNIZED;
  }
  get dragVelocity() {
    var velocity;
    switch (this.dirMode) {
      case 0:
        velocity = this.getVelocityY();
        break;
      // up & down
      case 1:
        velocity = this.getVelocityX();
        break;
      // left & right
      default:
        velocity = this.getVelocity();
        break;
      // 4 dir, 8 dir
    }

    return velocity;
  }
  setDragThreshold(distance) {
    this.dragThreshold = distance;
    return this;
  }
  setVelocityThreshold(velocity) {
    this.velocityThreshold = velocity;
    return this;
  }
  setDirectionMode(m) {
    if (typeof m === 'string') {
      m = _Const.default[m];
    }
    this.dirMode = m;
    return this;
  }
  updateDirectionStates() {
    var angle = RadToDeg(this.getVelocityAngle());
    (0, _AngleToDirections.default)(angle, this.dirMode, this);
    return this;
  }
  clearDirectionStates() {
    this.left = false;
    this.right = false;
    this.up = false;
    this.down = false;
    return this;
  }
}
Object.assign(Swipe.prototype, _VelocityMethods.default);
const IDLE = 'IDLE';
const BEGIN = 'BEGIN';
const RECOGNIZED = 'RECOGNIZED';
var _default = Swipe;
exports.default = _default;
},{"../onepointertracer/OnePointerTracer.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/onepointertracer/OnePointerTracer.js","../../../fsm.js":"node_modules/phaser3-rex-plugins/plugins/fsm.js","./VelocityMethods.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/swipe/VelocityMethods.js","../../../utils/math/angle/angletodirections/Const.js":"node_modules/phaser3-rex-plugins/plugins/utils/math/angle/angletodirections/Const.js","../../../utils/math/angle/angletodirections/AngleToDirections.js":"node_modules/phaser3-rex-plugins/plugins/utils/math/angle/angletodirections/AngleToDirections.js"}],"node_modules/phaser3-rex-plugins/plugins/input/gestures/twopointerstracer/TwoPointersTracer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EventEmitterMethods = _interopRequireDefault(require("../../../utils/eventemitter/EventEmitterMethods.js"));
var _Clear = _interopRequireDefault(require("../../../utils/object/Clear.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const SpliceOne = Phaser.Utils.Array.SpliceOne;
const DistanceBetween = Phaser.Math.Distance.Between;
const AngleBetween = Phaser.Math.Angle.Between;
class TwoPointersTracer {
  constructor(scene, config) {
    var amount = scene.input.manager.pointersTotal - 1;
    if (amount < 2) {
      scene.input.addPointer(2 - amount);
    }
    this.scene = scene;
    // Event emitter
    this.setEventEmitter(GetValue(config, 'eventEmitter', undefined));
    this._enable = undefined;
    this.pointers = [];
    this.movedState = {};
    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    this.setEnable(GetValue(o, "enable", true));
    this.bounds = GetValue(o, 'bounds', undefined);
    this.tracerState = TOUCH0;
    this.pointers.length = 0;
    (0, _Clear.default)(this.movedState);
    return this;
  }
  boot() {
    this.scene.input.on('pointerdown', this.onPointerDown, this);
    this.scene.input.on('pointerup', this.onPointerUp, this);
    this.scene.input.on('gameout', this.dragCancel, this);
    this.scene.input.on('pointermove', this.onPointerMove, this);
    this.scene.sys.events.once('shutdown', this.destroy, this);
  }
  shutdown() {
    if (!this.scene) {
      return;
    }
    this.destroyEventEmitter();
    this.pointers.length = 0;
    (0, _Clear.default)(this.movedState);
    this.scene.input.off('pointerdown', this.onPointerDown, this);
    this.scene.input.off('pointerup', this.onPointerUp, this);
    this.scene.input.off('gameout', this.dragCancel, this);
    this.scene.input.off('pointermove', this.onPointerMove, this);
    this.scene.sys.events.off('shutdown', this.destroy, this);
    this.scene = undefined;
  }
  destroy() {
    this.shutdown();
  }
  get enable() {
    return this._enable;
  }
  set enable(e) {
    if (this._enable === e) {
      return;
    }
    if (!e) {
      this.dragCancel();
    }
    this._enable = e;
    return this;
  }
  setEnable(e) {
    if (e === undefined) {
      e = true;
    }
    this.enable = e;
    return this;
  }
  toggleEnable() {
    this.setEnable(!this.enable);
    return this;
  }
  onPointerDown(pointer) {
    if (!this.enable) {
      return;
    }
    if (this.pointers.length === 2) {
      return;
    }
    var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;
    if (!isInsideBounds) {
      return;
    }
    var index = this.pointers.indexOf(pointer);
    if (index !== -1) {
      // Already in catched pointers
      return;
    }
    this.movedState[pointer.id] = false;
    this.pointers.push(pointer);
    switch (this.tracerState) {
      case TOUCH0:
        this.tracerState = TOUCH1;
        this.onDrag1Start();
        break;
      case TOUCH1:
        this.tracerState = TOUCH2;
        this.onDrag2Start();
        break;
    }
  }
  onPointerUp(pointer) {
    if (!this.enable) {
      return;
    }
    var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;
    if (!isInsideBounds) {
      return;
    }
    var index = this.pointers.indexOf(pointer);
    if (index === -1) {
      // Not in catched pointers
      return;
    } else {
      delete this.movedState[pointer.id];
      SpliceOne(this.pointers, index);
    }
    switch (this.tracerState) {
      case TOUCH1:
        this.tracerState = TOUCH0;
        this.onDrag1End();
        break;
      case TOUCH2:
        this.tracerState = TOUCH1;
        this.onDrag2End();
        this.onDrag1Start();
        break;
    }
  }
  onPointerMove(pointer) {
    if (!this.enable) {
      return;
    }
    if (pointer.isDown) {
      var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;
      var isCatchedPointer = this.pointers.indexOf(pointer) !== -1;
      if (!isCatchedPointer && isInsideBounds) {// Pointer moves into bounds
        // this.onPointerDown(pointer);
      } else if (isCatchedPointer && !isInsideBounds) {
        // Pointer moves out of bounds, lose pointer
        this.onPointerUp(pointer);
      } else {
        // Pointer drags in bounds
        if (!this.movedState[pointer.id]) {
          this.movedState[pointer.id] = pointer.x !== pointer.downX || pointer.y !== pointer.downY;
        }
        if (this.movedState[pointer.id]) {
          switch (this.tracerState) {
            case TOUCH1:
              this.onDrag1();
              break;
            case TOUCH2:
              this.onDrag2();
              break;
          }
        }
      }
    }
  }
  dragCancel() {
    if (this.tracerState === TOUCH2) {
      this.onDrag2End();
    }
    this.pointers.length = 0;
    (0, _Clear.default)(this.movedState);
    this.tracerState = TOUCH0;
    return this;
  }
  onDrag1Start() {
    this.emit('drag1start', this);
  }
  onDrag1End() {
    this.emit('drag1end', this);
  }
  onDrag1() {
    this.emit('drag1', this);
  }
  onDrag2Start() {
    this.emit('drag2start', this);
  }
  onDrag2End() {
    this.emit('drag2end', this);
  }
  onDrag2() {
    this.emit('drag2', this);
  }
  get distanceBetween() {
    if (this.tracerState !== TOUCH2) {
      return 0;
    }
    var p0 = this.pointers[0],
      p1 = this.pointers[1];
    return DistanceBetween(p0.x, p0.y, p1.x, p1.y);
  }
  get angleBetween() {
    if (this.tracerState !== TOUCH2) {
      return 0;
    }
    var p0 = this.pointers[0],
      p1 = this.pointers[1];
    return AngleBetween(p0.x, p0.y, p1.x, p1.y);
  }
  get drag1Vector() {
    var pointer = this.pointers[0];
    if (pointer && this.movedState[pointer.id]) {
      var p1 = pointer.position;
      var p0 = pointer.prevPosition;
      tmpDragVector.x = p1.x - p0.x;
      tmpDragVector.y = p1.y - p0.y;
    } else {
      tmpDragVector.x = 0;
      tmpDragVector.y = 0;
    }
    return tmpDragVector;
  }
  get centerX() {
    if (this.tracerState !== TOUCH2) {
      return 0;
    }
    var p0 = this.pointers[0].position;
    var p1 = this.pointers[1].position;
    return (p0.x + p1.x) / 2;
  }
  get centerY() {
    if (this.tracerState !== TOUCH2) {
      return 0;
    }
    var p0 = this.pointers[0].position;
    var p1 = this.pointers[1].position;
    return (p0.y + p1.y) / 2;
  }
  get prevCenterX() {
    if (this.tracerState !== TOUCH2) {
      return 0;
    }
    var preP0 = this.movedState[this.pointers[0].id] ? this.pointers[0].prevPosition : this.pointers[0].position;
    var preP1 = this.movedState[this.pointers[1].id] ? this.pointers[1].prevPosition : this.pointers[1].position;
    return (preP0.x + preP1.x) / 2;
  }
  get prevCenterY() {
    if (this.tracerState !== TOUCH2) {
      return 0;
    }
    var preP0 = this.movedState[this.pointers[0].id] ? this.pointers[0].prevPosition : this.pointers[0].position;
    var preP1 = this.movedState[this.pointers[1].id] ? this.pointers[1].prevPosition : this.pointers[1].position;
    return (preP0.y + preP1.y) / 2;
  }
  get movementCenterX() {
    return this.centerX - this.prevCenterX;
  }
  get movementCenterY() {
    return this.centerY - this.prevCenterY;
  }
  setRecongizedStateObject(stateObject) {
    this.recongizedState = stateObject;
    return this;
  }
  get state() {
    return this.recongizedState.state;
  }
  set state(newState) {
    this.recongizedState.state = newState;
  }
  cancel() {
    this.state = IDLE;
    return this;
  }
}
Object.assign(TwoPointersTracer.prototype, _EventEmitterMethods.default);
var tmpDragVector = {};
const TOUCH0 = 0;
const TOUCH1 = 1;
const TOUCH2 = 2;
const IDLE = 'IDLE';
var _default = TwoPointersTracer;
exports.default = _default;
},{"../../../utils/eventemitter/EventEmitterMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/eventemitter/EventEmitterMethods.js","../../../utils/object/Clear.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/Clear.js"}],"node_modules/phaser3-rex-plugins/plugins/input/gestures/pinch/Pinch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TwoPointersTracer = _interopRequireDefault(require("../twopointerstracer/TwoPointersTracer.js"));
var _fsm = _interopRequireDefault(require("../../../fsm.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Pinch extends _TwoPointersTracer.default {
  constructor(scene, config) {
    super(scene, config);
    var self = this;
    var stateConfig = {
      states: {
        IDLE: {
          enter: function () {
            self.prevDistance = undefined;
            self.scaleFactor = 1;
          }
        },
        BEGIN: {},
        RECOGNIZED: {
          enter: function () {
            self.emit('pinchstart', self);
          },
          exit: function () {
            self.emit('pinchend', self);
          }
        }
      },
      init: function () {
        this.state = IDLE;
      },
      eventEmitter: false
    };
    this.setRecongizedStateObject(new _fsm.default(stateConfig));
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this.setDragThreshold(GetValue(o, 'threshold', 0));
    return this;
  }
  onDrag2Start() {
    this.scaleFactor = 1;
    this.prevDistance = this.distanceBetween;
    this.state = BEGIN;
    if (this.dragThreshold === 0) {
      this.state = RECOGNIZED;
    }
  }
  onDrag2End() {
    this.state = IDLE;
  }
  onDrag2() {
    switch (this.state) {
      case BEGIN:
        if (this.pointers[0].getDistance() >= this.dragThreshold && this.pointers[1].getDistance() >= this.dragThreshold) {
          var curDistance = this.distanceBetween;
          this.scaleFactor = curDistance / this.prevDistance;
          this.prevDistance = curDistance;
          this.state = RECOGNIZED;
        }
        break;
      case RECOGNIZED:
        var curDistance = this.distanceBetween;
        this.scaleFactor = curDistance / this.prevDistance;
        this.emit('pinch', this);
        this.prevDistance = curDistance;
        break;
    }
  }
  get isPinched() {
    return this.state === RECOGNIZED;
  }
  setDragThreshold(distance) {
    this.dragThreshold = distance;
    return this;
  }
}
const IDLE = 'IDLE';
const BEGIN = 'BEGIN';
const RECOGNIZED = 'RECOGNIZED';
var _default = Pinch;
exports.default = _default;
},{"../twopointerstracer/TwoPointersTracer.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/twopointerstracer/TwoPointersTracer.js","../../../fsm.js":"node_modules/phaser3-rex-plugins/plugins/fsm.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/actions/RotateObjectAround.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const RotateAround = Phaser.Math.RotateAround;
var RotateObjectAround = function (gameObject, x, y, angle) {
  RotateAround(gameObject, x, y, angle);
  gameObject.rotation += angle;
  return gameObject;
};
var _default = RotateObjectAround;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/position/ScreenXYToWorldXY.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ScreenXYToWorldXY = function (screenX, screenY, camera, out) {
  if (out === undefined) {
    out = {};
  } else if (out === true) {
    out = globalOut;
  }
  camera.getWorldPoint(screenX, screenY, out);
  return out;
};
var globalOut = {};
var _default = ScreenXYToWorldXY;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/input/gestures/rotate/SpinObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RotateObjectAround = _interopRequireDefault(require("../../../utils/actions/RotateObjectAround.js"));
var _ScreenXYToWorldXY = _interopRequireDefault(require("../../../utils/position/ScreenXYToWorldXY.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var SpinObject = function (gameObject, camera) {
  if (!this.isRotation) {
    return this;
  }
  if (camera === undefined) {
    camera = this.pointers[0].camera;
  }
  var movementX = this.movementCenterX,
    movementY = this.movementCenterY;
  var worldXY = (0, _ScreenXYToWorldXY.default)(this.centerX, this.centerY, camera, true);
  var centerWorldX = worldXY.x;
  var centerWorldY = worldXY.y;
  var angle = this.rotation;
  if (Array.isArray(gameObject)) {
    var gameObjects = gameObject;
    for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
      gameObject = gameObjects[i];
      gameObject.x += movementX;
      gameObject.y += movementY;
      (0, _RotateObjectAround.default)(gameObject, centerWorldX, centerWorldY, angle);
    }
  } else {
    gameObject.x += movementX;
    gameObject.y += movementY;
    (0, _RotateObjectAround.default)(gameObject, centerWorldX, centerWorldY, angle);
  }
  return this;
};
var _default = SpinObject;
exports.default = _default;
},{"../../../utils/actions/RotateObjectAround.js":"node_modules/phaser3-rex-plugins/plugins/utils/actions/RotateObjectAround.js","../../../utils/position/ScreenXYToWorldXY.js":"node_modules/phaser3-rex-plugins/plugins/utils/position/ScreenXYToWorldXY.js"}],"node_modules/phaser3-rex-plugins/plugins/input/gestures/rotate/Rotate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TwoPointersTracer = _interopRequireDefault(require("../twopointerstracer/TwoPointersTracer.js"));
var _fsm = _interopRequireDefault(require("../../../fsm.js"));
var _SpinObject = _interopRequireDefault(require("./SpinObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const WrapDegrees = Phaser.Math.Angle.WrapDegrees; // Wrap degrees: -180 to 180 
const ShortestBetween = Phaser.Math.Angle.ShortestBetween;
const RadToDeg = Phaser.Math.RadToDeg;
const DegToRad = Phaser.Math.DegToRad;
class Rotate extends _TwoPointersTracer.default {
  constructor(scene, config) {
    super(scene, config);
    var self = this;
    var stateConfig = {
      states: {
        IDLE: {
          enter: function () {
            self.prevAngle = undefined;
            self.angle = 0;
          }
        },
        BEGIN: {},
        RECOGNIZED: {
          enter: function () {
            self.emit('rotatestart', self);
          },
          exit: function () {
            self.emit('rotateend', self);
          }
        }
      },
      init: function () {
        this.state = IDLE;
      },
      eventEmitter: false
    };
    this.setRecongizedStateObject(new _fsm.default(stateConfig));
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this.setDragThreshold(GetValue(o, 'threshold', 0));
    return this;
  }
  onDrag2Start() {
    this.prevAngle = WrapDegrees(RadToDeg(this.angleBetween)); // Degrees
    this.state = BEGIN;
    if (this.dragThreshold === 0) {
      this.state = RECOGNIZED;
    }
  }
  onDrag2End() {
    this.state = IDLE;
  }
  onDrag2() {
    switch (this.state) {
      case BEGIN:
        if (this.pointers[0].getDistance() >= this.dragThreshold && this.pointers[1].getDistance() >= this.dragThreshold) {
          var curAngle = WrapDegrees(RadToDeg(this.angleBetween));
          this.angle = ShortestBetween(this.prevAngle, curAngle);
          this.prevAngle = curAngle;
          this.state = RECOGNIZED;
        }
        break;
      case RECOGNIZED:
        var curAngle = WrapDegrees(RadToDeg(this.angleBetween));
        this.angle = ShortestBetween(this.prevAngle, curAngle);
        this.prevAngle = curAngle;
        this.emit('rotate', this);
        break;
    }
  }
  get isRotated() {
    return this.state === RECOGNIZED;
  }
  get rotation() {
    return DegToRad(this.angle);
  }
  setDragThreshold(distance) {
    this.dragThreshold = distance;
    return this;
  }
}
var methods = {
  spinObject: _SpinObject.default
};
Object.assign(Rotate.prototype, methods);
const IDLE = 'IDLE';
const BEGIN = 'BEGIN';
const RECOGNIZED = 'RECOGNIZED';
var _default = Rotate;
exports.default = _default;
},{"../twopointerstracer/TwoPointersTracer.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/twopointerstracer/TwoPointersTracer.js","../../../fsm.js":"node_modules/phaser3-rex-plugins/plugins/fsm.js","./SpinObject.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/rotate/SpinObject.js"}],"node_modules/phaser3-rex-plugins/plugins/gestures.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Pan", {
  enumerable: true,
  get: function () {
    return _Pan.default;
  }
});
Object.defineProperty(exports, "Pinch", {
  enumerable: true,
  get: function () {
    return _Pinch.default;
  }
});
Object.defineProperty(exports, "Press", {
  enumerable: true,
  get: function () {
    return _Press.default;
  }
});
Object.defineProperty(exports, "Rotate", {
  enumerable: true,
  get: function () {
    return _Rotate.default;
  }
});
Object.defineProperty(exports, "Swipe", {
  enumerable: true,
  get: function () {
    return _Swipe.default;
  }
});
Object.defineProperty(exports, "Tap", {
  enumerable: true,
  get: function () {
    return _Tap.default;
  }
});
var _Tap = _interopRequireDefault(require("./input/gestures/tap/Tap.js"));
var _Press = _interopRequireDefault(require("./input/gestures/press/Press.js"));
var _Pan = _interopRequireDefault(require("./input/gestures/pan/Pan.js"));
var _Swipe = _interopRequireDefault(require("./input/gestures/swipe/Swipe.js"));
var _Pinch = _interopRequireDefault(require("./input/gestures/pinch/Pinch.js"));
var _Rotate = _interopRequireDefault(require("./input/gestures/rotate/Rotate.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./input/gestures/tap/Tap.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/tap/Tap.js","./input/gestures/press/Press.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/press/Press.js","./input/gestures/pan/Pan.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/pan/Pan.js","./input/gestures/swipe/Swipe.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/swipe/Swipe.js","./input/gestures/pinch/Pinch.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/pinch/Pinch.js","./input/gestures/rotate/Rotate.js":"node_modules/phaser3-rex-plugins/plugins/input/gestures/rotate/Rotate.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tap/Tap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _gestures = require("../../../plugins/gestures.js");
var _default = _gestures.Tap;
exports.default = _default;
},{"../../../plugins/gestures.js":"node_modules/phaser3-rex-plugins/plugins/gestures.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/TapChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Tap = _interopRequireDefault(require("../../tap/Tap.js"));
var _EmitChildEvent = _interopRequireDefault(require("./EmitChildEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var TapChild = function (config) {
  var tapConfig = GetValue(config, 'tap', undefined);
  if (tapConfig === false) {
    return;
  } else if (tapConfig === true) {
    tapConfig = undefined;
  }
  var childrenInteractive = this._childrenInteractive;
  this._tap = new _Tap.default(this, tapConfig);
  this._tap.on('tap', function (tap, gameObject, lastPointer) {
    (0, _EmitChildEvent.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}${tap.tapsCount}tap`, childrenInteractive.targetSizers, tap.worldX, tap.worldY, lastPointer);
  }, this);
};
var _default = TapChild;
exports.default = _default;
},{"../../tap/Tap.js":"node_modules/phaser3-rex-plugins/templates/ui/tap/Tap.js","./EmitChildEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/EmitChildEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/press/Press.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _gestures = require("../../../plugins/gestures.js");
var _default = _gestures.Press;
exports.default = _default;
},{"../../../plugins/gestures.js":"node_modules/phaser3-rex-plugins/plugins/gestures.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/PressChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Press = _interopRequireDefault(require("../../press/Press.js"));
var _EmitChildEvent = _interopRequireDefault(require("./EmitChildEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var PressChild = function (config) {
  var pressConfig = GetValue(config, 'press', undefined);
  if (pressConfig === false) {
    return;
  } else if (pressConfig === true) {
    pressConfig = undefined;
  }
  var childrenInteractive = this._childrenInteractive;
  this._press = new _Press.default(this, pressConfig);
  this._press.on('pressstart', function (press, gameObject, lastPointer) {
    (0, _EmitChildEvent.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}pressstart`, childrenInteractive.targetSizers, press.worldX, press.worldY, lastPointer);
  }, this).on('pressend', function (press, gameObject, lastPointer) {
    (0, _EmitChildEvent.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}pressend`, childrenInteractive.targetSizers, press.worldX, press.worldY, lastPointer);
  }, this);
};
var _default = PressChild;
exports.default = _default;
},{"../../press/Press.js":"node_modules/phaser3-rex-plugins/templates/ui/press/Press.js","./EmitChildEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/EmitChildEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/swipe/Swipe.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _gestures = require("../../../plugins/gestures.js");
var _default = _gestures.Swipe;
exports.default = _default;
},{"../../../plugins/gestures.js":"node_modules/phaser3-rex-plugins/plugins/gestures.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/SwipeChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Swipe = _interopRequireDefault(require("../../swipe/Swipe.js"));
var _EmitChildEvent = _interopRequireDefault(require("./EmitChildEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var SwipeChild = function (config) {
  var swipeConfig = GetValue(config, 'swipe', undefined);
  if (swipeConfig === false) {
    return;
  } else if (swipeConfig === true) {
    swipeConfig = undefined;
  }
  if (swipeConfig === undefined) {
    swipeConfig = {};
  }
  if (!swipeConfig.hasOwnProperty('dir')) {
    swipeConfig.dir = '4dir';
  }
  var childrenInteractive = this._childrenInteractive;
  this._swipe = new _Swipe.default(this, swipeConfig);
  this._swipe.on('swipe', function (swipe, gameObject, lastPointer) {
    var dirName = swipe.left ? 'left' : swipe.right ? 'right' : swipe.up ? 'up' : 'down';
    (0, _EmitChildEvent.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}swipe${dirName}`, childrenInteractive.targetSizers, swipe.worldX, swipe.worldY, lastPointer);
  }, this);
};
var _default = SwipeChild;
exports.default = _default;
},{"../../swipe/Swipe.js":"node_modules/phaser3-rex-plugins/templates/ui/swipe/Swipe.js","./EmitChildEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/EmitChildEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/SetChildrenInteractive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DownChild = _interopRequireDefault(require("./DownChild.js"));
var _UpChild = _interopRequireDefault(require("./UpChild.js"));
var _OverChild = _interopRequireDefault(require("./OverChild.js"));
var _ClickChild = _interopRequireDefault(require("./ClickChild.js"));
var _TapChild = _interopRequireDefault(require("./TapChild.js"));
var _PressChild = _interopRequireDefault(require("./PressChild.js"));
var _SwipeChild = _interopRequireDefault(require("./SwipeChild.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var SetChildrenInteractive = function (gameObject, config) {
  gameObject.setInteractive();
  gameObject._childrenInteractive = {
    targetSizers: GetValue(config, 'targets', [gameObject]),
    eventEmitter: GetValue(config, 'eventEmitter', gameObject),
    eventNamePrefix: GetValue(config, 'inputEventPrefix', 'child.')
  };
  _DownChild.default.call(gameObject, config);
  _UpChild.default.call(gameObject, config);
  _OverChild.default.call(gameObject, config);
  _ClickChild.default.call(gameObject, config);
  _TapChild.default.call(gameObject, config);
  _PressChild.default.call(gameObject, config);
  _SwipeChild.default.call(gameObject, config);
  return gameObject;
};
var _default = SetChildrenInteractive;
exports.default = _default;
},{"./DownChild.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/DownChild.js","./UpChild.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/UpChild.js","./OverChild.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/OverChild.js","./ClickChild.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/ClickChild.js","./TapChild.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/TapChild.js","./PressChild.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/PressChild.js","./SwipeChild.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/SwipeChild.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/SetChildrenInteractive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SetChildrenInteractive = _interopRequireDefault(require("../utils/setchildreninteractive/SetChildrenInteractive.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var SetChildrenInteractiveWrap = function (config) {
  (0, _SetChildrenInteractive.default)(this, config);
  return this;
};
var _default = SetChildrenInteractiveWrap;
exports.default = _default;
},{"../utils/setchildreninteractive/SetChildrenInteractive.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/SetChildrenInteractive.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/BroadcastEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var BroadcastEvent = function () {
  var gameObjects = this.getAllChildren([this]);
  for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
    var gameObject = gameObjects[i];
    gameObject.emit.apply(gameObject, arguments);
  }
  return this;
};
var _default = BroadcastEvent;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetSizerConfig = _interopRequireDefault(require("./GetSizerConfig.js"));
var _GetChildPrevState = _interopRequireDefault(require("../utils/GetChildPrevState.js"));
var _PushIntoBounds = _interopRequireDefault(require("./PushIntoBounds.js"));
var _DrawBounds = _interopRequireDefault(require("./DrawBounds.js"));
var _AddChildMethods = _interopRequireDefault(require("./AddChildMethods.js"));
var _RemoveChildMethods = _interopRequireDefault(require("./RemoveChildMethods.js"));
var _AddChildrenMap = _interopRequireDefault(require("./AddChildrenMap.js"));
var _RemoveChildrenMap = _interopRequireDefault(require("./RemoveChildrenMap.js"));
var _GetElement = _interopRequireDefault(require("./GetElement.js"));
var _PaddingMethods = _interopRequireDefault(require("./PaddingMethods.js"));
var _ResolveWidth = _interopRequireDefault(require("./ResolveWidth.js"));
var _ResolveChildrenWidth = _interopRequireDefault(require("./ResolveChildrenWidth.js"));
var _ResolveHeight = _interopRequireDefault(require("./ResolveHeight.js"));
var _PostResolveSize = _interopRequireDefault(require("./PostResolveSize.js"));
var _GetChildWidth = _interopRequireDefault(require("./GetChildWidth.js"));
var _GetChildHeight = _interopRequireDefault(require("./GetChildHeight.js"));
var _GetExpandedChildWidth = _interopRequireDefault(require("./GetExpandedChildWidth.js"));
var _GetExpandedChildHeight = _interopRequireDefault(require("./GetExpandedChildHeight.js"));
var _GetChildrenWidth = _interopRequireDefault(require("./GetChildrenWidth.js"));
var _GetChildrenHeight = _interopRequireDefault(require("./GetChildrenHeight.js"));
var _GetAllChildrenSizers = _interopRequireDefault(require("./GetAllChildrenSizers.js"));
var _GetChildrenSizers = _interopRequireDefault(require("./GetChildrenSizers.js"));
var _GetShownChildrenMethods = _interopRequireDefault(require("./GetShownChildrenMethods.js"));
var _PreLayout = _interopRequireDefault(require("./PreLayout.js"));
var _Layout = _interopRequireDefault(require("./Layout.js"));
var _RunLayout = _interopRequireDefault(require("./RunLayout.js"));
var _LayoutChildren = _interopRequireDefault(require("./LayoutChildren.js"));
var _PostLayout = _interopRequireDefault(require("./PostLayout.js"));
var _RunWidthWrap = _interopRequireDefault(require("./RunWidthWrap.js"));
var _SetAnchor = _interopRequireDefault(require("./SetAnchor.js"));
var _ScaleMethods = _interopRequireDefault(require("./ScaleMethods.js"));
var _FadeMethods = _interopRequireDefault(require("./FadeMethods.js"));
var _EaseMoveMethods = _interopRequireDefault(require("./EaseMoveMethods.js"));
var _ShakeMethods = _interopRequireDefault(require("./ShakeMethods.js"));
var _EaseDataMethods = _interopRequireDefault(require("./EaseDataMethods.js"));
var _HideMethods = _interopRequireDefault(require("./HideMethods.js"));
var _ModalMethods = _interopRequireDefault(require("./ModalMethods.js"));
var _IsInTouching = _interopRequireDefault(require("./IsInTouching.js"));
var _PointToChild = _interopRequireDefault(require("./PointToChild.js"));
var _GetParentSizerMethods = _interopRequireDefault(require("./GetParentSizerMethods.js"));
var _LayoutBackgrounds = _interopRequireDefault(require("./LayoutBackgrounds.js"));
var _SetDraggable = _interopRequireDefault(require("./SetDraggable.js"));
var _ClickMethods = _interopRequireDefault(require("./ClickMethods.js"));
var _ClickOutsideMethods = _interopRequireDefault(require("./ClickOutsideMethods.js"));
var _TouchingMethods = _interopRequireDefault(require("./TouchingMethods.js"));
var _SetChildrenInteractive = _interopRequireDefault(require("./SetChildrenInteractive.js"));
var _BroadcastEvent = _interopRequireDefault(require("./BroadcastEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  getSizerConfig: _GetSizerConfig.default,
  getChildPrevState: _GetChildPrevState.default,
  pushIntoBounds: _PushIntoBounds.default,
  drawBounds: _DrawBounds.default,
  resolveWidth: _ResolveWidth.default,
  resolveChildrenWidth: _ResolveChildrenWidth.default,
  resolveHeight: _ResolveHeight.default,
  postResolveSize: _PostResolveSize.default,
  getChildWidth: _GetChildWidth.default,
  getChildHeight: _GetChildHeight.default,
  getExpandedChildWidth: _GetExpandedChildWidth.default,
  getExpandedChildHeight: _GetExpandedChildHeight.default,
  getChildrenWidth: _GetChildrenWidth.default,
  getChildrenHeight: _GetChildrenHeight.default,
  addChildrenMap: _AddChildrenMap.default,
  addElement: _AddChildrenMap.default,
  removeChildrenMap: _RemoveChildrenMap.default,
  getElement: _GetElement.default,
  getAllChildrenSizers: _GetAllChildrenSizers.default,
  getChildrenSizers: _GetChildrenSizers.default,
  preLayout: _PreLayout.default,
  layout: _Layout.default,
  runLayout: _RunLayout.default,
  layoutChildren: _LayoutChildren.default,
  runWidthWrap: _RunWidthWrap.default,
  layoutBackgrounds: _LayoutBackgrounds.default,
  postLayout: _PostLayout.default,
  setAnchor: _SetAnchor.default,
  isInTouching: _IsInTouching.default,
  pointToChild: _PointToChild.default,
  setDraggable: _SetDraggable.default,
  setChildrenInteractive: _SetChildrenInteractive.default,
  broadcastEvent: _BroadcastEvent.default
};
Object.assign(methods, _PaddingMethods.default, _AddChildMethods.default, _RemoveChildMethods.default, _GetParentSizerMethods.default, _ScaleMethods.default, _FadeMethods.default, _EaseMoveMethods.default, _ShakeMethods.default, _EaseDataMethods.default, _ClickMethods.default, _ClickOutsideMethods.default, _TouchingMethods.default, _HideMethods.default, _ModalMethods.default, _GetShownChildrenMethods.default);
var _default = methods;
exports.default = _default;
},{"./GetSizerConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetSizerConfig.js","../utils/GetChildPrevState.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetChildPrevState.js","./PushIntoBounds.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PushIntoBounds.js","./DrawBounds.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/DrawBounds.js","./AddChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/AddChildMethods.js","./RemoveChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/RemoveChildMethods.js","./AddChildrenMap.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/AddChildrenMap.js","./RemoveChildrenMap.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/RemoveChildrenMap.js","./GetElement.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetElement.js","./PaddingMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PaddingMethods.js","./ResolveWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ResolveWidth.js","./ResolveChildrenWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ResolveChildrenWidth.js","./ResolveHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ResolveHeight.js","./PostResolveSize.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PostResolveSize.js","./GetChildWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetChildWidth.js","./GetChildHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetChildHeight.js","./GetExpandedChildWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetExpandedChildWidth.js","./GetExpandedChildHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetExpandedChildHeight.js","./GetChildrenWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetChildrenWidth.js","./GetChildrenHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetChildrenHeight.js","./GetAllChildrenSizers.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetAllChildrenSizers.js","./GetChildrenSizers.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetChildrenSizers.js","./GetShownChildrenMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetShownChildrenMethods.js","./PreLayout.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PreLayout.js","./Layout.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/Layout.js","./RunLayout.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/RunLayout.js","./LayoutChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/LayoutChildren.js","./PostLayout.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PostLayout.js","./RunWidthWrap.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/RunWidthWrap.js","./SetAnchor.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/SetAnchor.js","./ScaleMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ScaleMethods.js","./FadeMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/FadeMethods.js","./EaseMoveMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/EaseMoveMethods.js","./ShakeMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ShakeMethods.js","./EaseDataMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/EaseDataMethods.js","./HideMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/HideMethods.js","./ModalMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ModalMethods.js","./IsInTouching.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/IsInTouching.js","./PointToChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PointToChild.js","./GetParentSizerMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/GetParentSizerMethods.js","./LayoutBackgrounds.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/LayoutBackgrounds.js","./SetDraggable.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/SetDraggable.js","./ClickMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ClickMethods.js","./ClickOutsideMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ClickOutsideMethods.js","./TouchingMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/TouchingMethods.js","./SetChildrenInteractive.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/SetChildrenInteractive.js","./BroadcastEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/BroadcastEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/BaseSizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Container = _interopRequireDefault(require("../container/Container.js"));
var _Methods = _interopRequireDefault(require("./Methods.js"));
var _GetDisplaySize = require("../../../plugins/utils/size/GetDisplaySize.js");
var _Clear = _interopRequireDefault(require("../../../plugins/utils/object/Clear.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Base extends _Container.default {
  constructor(scene, x, y, minWidth, minHeight, config) {
    super(scene, x, y, 1, 1);
    this.isRexSizer = true;
    this.setMinSize(minWidth, minHeight);
    this.setName(GetValue(config, 'name', ''));
    this.rexSizer = {};
    this.space = {};
    this.backgroundChildren = undefined;
    this.sizerChildren = undefined; // [] or {}
    this.childrenMap = {};
    this.layoutedChildren = undefined;
    var anchorConfig = GetValue(config, 'anchor', undefined);
    if (anchorConfig) {
      this.setAnchor(anchorConfig);
    }
    this.setInnerPadding(GetValue(config, 'space', 0));
    var draggable = GetValue(config, 'draggable', false);
    if (draggable) {
      this.setDraggable(draggable);
    }
    this.setSizerEventsEnable(GetValue(config, 'sizerEvents', false));
    this.setDirty(true);
    if (GetValue(config, 'enableLayer', false)) {
      this.enableLayer();
    }
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    if (fromScene) {
      // In this case, children will be cleared and destroy in scene level
      var sizers = this.getAllChildrenSizers([this]);
      for (var i = 0, cnt = sizers.length; i < cnt; i++) {
        sizers[i].sizerEventsEnable = false;
      }
    }
    super.destroy(fromScene);
    (0, _Clear.default)(this.backgroundChildren);
    (0, _Clear.default)(this.sizerChildren);
    this.childrenMap = undefined;
    this.space = undefined;
    this.rexSizer = undefined;
    this.layoutedChildren = undefined;
  }
  setMinSize(minWidth, minHeight) {
    this.setMinWidth(minWidth).setMinHeight(minHeight);
    return this;
  }
  setMinWidth(minWidth) {
    if (minWidth == null) {
      minWidth = 0;
    }
    this.minWidth = minWidth;
    return this;
  }
  setMinHeight(minHeight) {
    if (minHeight == null) {
      minHeight = 0;
    }
    this.minHeight = minHeight;
    return this;
  }
  setDirty(dirty) {
    if (dirty === undefined) {
      dirty = true;
    }
    this.dirty = dirty;
    return this;
  }
  setSizerEventsEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.sizerEventsEnable = enable;
    return this;
  }
  get ignoreLayout() {
    // Skip hidden or !dirty sizer
    return this.rexSizer.hidden || !this.dirty;
  }
  get childrenWidth() {
    if (this._childrenWidth === undefined) {
      this._childrenWidth = this.getChildrenWidth();
    }
    return this._childrenWidth;
  }
  get childrenHeight() {
    if (this._childrenHeight === undefined) {
      this._childrenHeight = this.getChildrenHeight();
    }
    return this._childrenHeight;
  }
  get left() {
    return this.x - (0, _GetDisplaySize.GetDisplayWidth)(this) * this.originX;
  }
  set left(value) {
    this.x += value - this.left;
  }
  alignLeft(value) {
    this.left = value;
    return this;
  }
  get right() {
    return this.left + (0, _GetDisplaySize.GetDisplayWidth)(this);
  }
  set right(value) {
    this.x += value - this.right;
  }
  alignRight(value) {
    this.right = value;
    return this;
  }
  get centerX() {
    return this.left + (0, _GetDisplaySize.GetDisplayWidth)(this) / 2;
  }
  set centerX(value) {
    this.x += value - this.centerX;
  }
  alignCenterX(value) {
    this.centerX = value;
    return this;
  }
  get top() {
    return this.y - (0, _GetDisplaySize.GetDisplayHeight)(this) * this.originY;
  }
  set top(value) {
    this.y += value - this.top;
  }
  alignTop(value) {
    this.top = value;
    return this;
  }
  get bottom() {
    return this.top + (0, _GetDisplaySize.GetDisplayHeight)(this);
  }
  set bottom(value) {
    this.y += value - this.bottom;
  }
  alignBottom(value) {
    this.bottom = value;
    return this;
  }
  get centerY() {
    return this.top + (0, _GetDisplaySize.GetDisplayHeight)(this) / 2;
  }
  set centerY(value) {
    this.y += value - this.centerY;
  }
  alignCenterY(value) {
    this.centerY = value;
    return this;
  }
  get innerLeft() {
    return this.left + this.space.left;
  }
  get innerRight() {
    return this.right - this.space.right;
  }
  get innerTop() {
    return this.top + this.space.top;
  }
  get innerBottom() {
    return this.bottom - this.space.bottom;
  }
  get innerWidth() {
    return this.width - this.space.left - this.space.right;
  }
  get innerHeight() {
    return this.height - this.space.top - this.space.bottom;
  }
  get minInnerWidth() {
    var result = this.minWidth - this.space.left - this.space.right;
    return Math.max(result, 0);
  }
  get minInnerHeight() {
    var result = this.minHeight - this.space.top - this.space.bottom;
    return Math.max(result, 0);
  }
}
Object.assign(Base.prototype, _Methods.default);
var _default = Base;
exports.default = _default;
},{"../container/Container.js":"node_modules/phaser3-rex-plugins/templates/ui/container/Container.js","./Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/Methods.js","../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js","../../../plugins/utils/object/Clear.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/Clear.js"}],"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/GetChildrenWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildrenWidth = function () {
  if (this.rexSizer.hidden) {
    return 0;
  }
  var result = 0;
  var children = this.sizerChildren;
  var child, padding, childWidth;
  for (var key in children) {
    child = children[key];
    padding = child.rexSizer.padding;
    childWidth = this.getChildWidth(child) + padding.left + padding.right;
    result = Math.max(childWidth, result);
  }
  return result + this.space.left + this.space.right;
};
var _default = GetChildrenWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/GetChildrenHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../../plugins/utils/size/GetDisplaySize.js");
var GetChildrenHeight = function () {
  if (this.rexSizer.hidden) {
    return 0;
  }
  var result = 0;
  var children = this.sizerChildren;
  var child, padding, childHeight;
  for (var key in children) {
    child = children[key];
    childHeight = child.isRexSizer ? Math.max(child.minHeight, child.childrenHeight) : child.minHeight !== undefined ? child.minHeight : (0, _GetDisplaySize.GetDisplayHeight)(child);
    padding = child.rexSizer.padding;
    childHeight += padding.top + padding.bottom;
    result = Math.max(childHeight, result);
  }
  return result + this.space.top + this.space.bottom;
};
var _default = GetChildrenHeight;
exports.default = _default;
},{"../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/GetExpandedChildWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetExpandedChildWidth = function (child, parentWidth) {
  if (parentWidth === undefined) {
    parentWidth = this.width;
  }
  var childWidth;
  var childConfig = child.rexSizer;
  if (childConfig.expandWidth) {
    var innerWidth = parentWidth - this.space.left - this.space.right;
    var padding = childConfig.padding;
    childWidth = innerWidth - padding.left - padding.right;
  }
  return childWidth;
};
var _default = GetExpandedChildWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/GetExpandedChildHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetExpandedChildHeight = function (child, parentHeight) {
  if (parentHeight === undefined) {
    parentHeight = this.height;
  }
  var childHeight;
  var childConfig = child.rexSizer;
  if (childConfig.expandHeight) {
    var innerHeight = parentHeight - this.space.top - this.space.bottom;
    var padding = childConfig.padding;
    childHeight = innerHeight - padding.top - padding.bottom;
  }
  return childHeight;
};
var _default = GetExpandedChildHeight;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/GetChildrenSizers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildrenSizers = function (out) {
  if (out === undefined) {
    out = [];
  }
  var children = this.sizerChildren,
    child;
  for (var key in children) {
    child = children[key];
    if (child.isRexSizer) {
      out.push(child);
    }
  }
  return out;
};
var _default = GetChildrenSizers;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/CheckSize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var CheckSize = function (child, parent) {
  if (child.width < child.childrenWidth) {
    // Warning
    console.warn(`Layout width error: Parent=${parent.constructor.name}, Child=${child.constructor.name}`);
  }
  if (child.height < child.childrenHeight) {
    // Warning
    console.warn(`Layout height error: Parent=${parent.constructor.name}, Child=${child.constructor.name}`);
  }
};
var _default = CheckSize;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/LayoutChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResizeGameObject = _interopRequireDefault(require("../../../plugins/utils/size/ResizeGameObject.js"));
var _PreLayoutChild = _interopRequireDefault(require("../basesizer/utils/PreLayoutChild.js"));
var _LayoutChild = _interopRequireDefault(require("../basesizer/utils/LayoutChild.js"));
var _CheckSize = _interopRequireDefault(require("../basesizer/utils/CheckSize.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var LayoutChildren = function () {
  var child, childConfig, padding;
  var startX = this.innerLeft,
    startY = this.innerTop;
  var innerWidth = this.innerWidth,
    innerHeight = this.innerHeight;
  var x, y, width, height; // Align zone
  var childWidth, childHeight;
  // Layout current page
  var children = this.sizerChildren;
  for (var key in children) {
    child = children[key];
    if (child.rexSizer.hidden) {
      continue;
    }
    childConfig = child.rexSizer;
    padding = childConfig.padding;
    _PreLayoutChild.default.call(this, child);

    // Set size
    if (child.isRexSizer) {
      child.runLayout(this, this.getExpandedChildWidth(child), this.getExpandedChildHeight(child));
      (0, _CheckSize.default)(child, this);
    } else {
      childWidth = undefined;
      childHeight = undefined;
      if (childConfig.expandWidth) {
        // Expand width
        childWidth = innerWidth - padding.left - padding.right;
      }
      if (childConfig.expandHeight) {
        // Expand height
        childHeight = innerHeight - padding.top - padding.bottom;
      }
      (0, _ResizeGameObject.default)(child, childWidth, childHeight);
    }

    // Set position
    x = startX + padding.left;
    width = innerWidth - padding.left - padding.right;
    y = startY + padding.top;
    height = innerHeight - padding.top - padding.bottom;
    _LayoutChild.default.call(this, child, x, y, width, height, childConfig.align, childConfig.alignOffsetX, childConfig.alignOffsetY);
  }
};
var _default = LayoutChildren;
exports.default = _default;
},{"../../../plugins/utils/size/ResizeGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/ResizeGameObject.js","../basesizer/utils/PreLayoutChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/PreLayoutChild.js","../basesizer/utils/LayoutChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/LayoutChild.js","../basesizer/utils/CheckSize.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/CheckSize.js"}],"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/AddChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddChild = _interopRequireDefault(require("../basesizer/utils/AddChild.js"));
var _AlignConst = _interopRequireDefault(require("../utils/AlignConst.js"));
var _GetBoundsConfig = _interopRequireDefault(require("../utils/GetBoundsConfig.js"));
var _GetDisplaySize = require("../../../plugins/utils/size/GetDisplaySize.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const ALIGN_CENTER = Phaser.Display.Align.CENTER;
const UUID = Phaser.Utils.String.UUID;
var Add = function (gameObject, childKey, align, padding, expand, minWidth, minHeight, offsetX, offsetY) {
  _AddChild.default.call(this, gameObject);
  if (IsPlainObject(childKey)) {
    var config = childKey;
    childKey = GetValue(config, 'key', undefined);
    align = GetValue(config, 'align', ALIGN_CENTER);
    offsetX = GetValue(config, 'offsetX', 0);
    offsetY = GetValue(config, 'offsetY', 0);
    padding = GetValue(config, 'padding', 0);
    expand = GetValue(config, 'expand', true);
    if (!gameObject.isRexSizer) {
      // Get minWidth,minHeight from config
      minWidth = GetValue(config, 'minWidth', gameObject._minWidth);
      minHeight = GetValue(config, 'minHeight', gameObject._minHeighted);
    }
  }
  var hasValidKey = childKey !== undefined;
  if (!hasValidKey) {
    childKey = UUID();
  }
  if (typeof align === 'string') {
    align = _AlignConst.default[align];
  }
  if (align === undefined) {
    align = ALIGN_CENTER;
  }
  if (offsetX === undefined) {
    offsetX = 0;
  }
  if (offsetY === undefined) {
    offsetY = 0;
  }
  if (padding === undefined) {
    padding = 0;
  }
  if (expand === undefined) {
    expand = true;
  }
  if (!gameObject.isRexSizer) {
    // Get minWidth,minHeight from game object
    if (minWidth === undefined) {
      minWidth = gameObject._minWidth;
    }
    if (minHeight === undefined) {
      minHeight = gameObject._minHeight;
    }
  }
  var config = this.getSizerConfig(gameObject);
  config.align = align;
  config.alignOffsetX = offsetX;
  config.alignOffsetY = offsetY;
  config.padding = (0, _GetBoundsConfig.default)(padding);
  if (IsPlainObject(expand)) {
    config.expandWidth = GetValue(expand, 'width', false);
    config.expandHeight = GetValue(expand, 'height', false);
  } else {
    config.expandWidth = expand;
    config.expandHeight = expand;
  }
  if (!gameObject.isRexSizer) {
    // Expand normal game object
    if (config.expandWidth) {
      // minWidth is still undefined, uses current display width
      gameObject.minWidth = minWidth === undefined ? (0, _GetDisplaySize.GetDisplayWidth)(gameObject) : minWidth;
    }
    if (config.expandHeight) {
      // minHeight is still undefined, uses current display height
      gameObject.minHeight = minHeight === undefined ? (0, _GetDisplaySize.GetDisplayHeight)(gameObject) : minHeight;
    }
  }
  if (this.sizerChildren.hasOwnProperty(childKey)) {
    this.sizerChildren[childKey].destroy();
  }
  this.sizerChildren[childKey] = gameObject;
  if (hasValidKey) {
    this.addChildrenMap(childKey, gameObject);
  }
  return this;
};
var _default = {
  add: Add
};
exports.default = _default;
},{"../basesizer/utils/AddChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/AddChild.js","../utils/AlignConst.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/AlignConst.js","../utils/GetBoundsConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetBoundsConfig.js","../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/ClearChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Container = _interopRequireDefault(require("../../container/Container.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ContainerClear = _Container.default.prototype.clear;
var ClearChildren = function (destroyChild) {
  if (this.backgroundChildren) {
    this.backgroundChildren.length = 0;
  }
  var fireRemoveEvent = !destroyChild && this.sizerEventsEnable;
  var children;
  if (fireRemoveEvent) {
    children = this.getChildren([]);
  }
  ContainerClear.call(this, destroyChild);
  if (fireRemoveEvent) {
    var gameObject;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      gameObject = children[i];
      gameObject.emit('sizer.remove', gameObject, this);
      this.emit('remove', gameObject, this);
    }
  }
  return this;
};
var _default = ClearChildren;
exports.default = _default;
},{"../../container/Container.js":"node_modules/phaser3-rex-plugins/templates/ui/container/Container.js"}],"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/RemoveChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RemoveChild = _interopRequireDefault(require("../basesizer/utils/RemoveChild.js"));
var _ClearChildren = _interopRequireDefault(require("../basesizer/utils/ClearChildren.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  remove(gameObject, destroyChild) {
    var key;
    if (typeof gameObject === 'string') {
      key = gameObject;
      gameObject = this.sizerChildren[key];
      if (!gameObject) {
        return this;
      }
    } else if (this.getParentSizer(gameObject) !== this) {
      return this;
    } else {
      key = this.childToKey(gameObject);
    }
    if (key) {
      delete this.sizerChildren[key];
      if (this.childrenMap.hasOwnProperty(key)) {
        delete this.childrenMap[key];
      }
    }
    _RemoveChild.default.call(this, gameObject, destroyChild);
    return this;
  },
  removeAll(destroyChild) {
    for (var key in this.sizerChildren) {
      this.remove(key, destroyChild);
    }
    return this;
  },
  clear(destroyChild) {
    for (var key in this.sizerChildren) {
      delete this.sizerChildren[key];
      if (this.childrenMap.hasOwnProperty(key)) {
        delete this.childrenMap[key];
      }
    }
    _ClearChildren.default.call(this, destroyChild);
    return this;
  }
};
exports.default = _default;
},{"../basesizer/utils/RemoveChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/RemoveChild.js","../basesizer/utils/ClearChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/ClearChildren.js"}],"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetChildrenWidth = _interopRequireDefault(require("./GetChildrenWidth.js"));
var _GetChildrenHeight = _interopRequireDefault(require("./GetChildrenHeight.js"));
var _GetExpandedChildWidth = _interopRequireDefault(require("./GetExpandedChildWidth.js"));
var _GetExpandedChildHeight = _interopRequireDefault(require("./GetExpandedChildHeight.js"));
var _GetChildrenSizers = _interopRequireDefault(require("./GetChildrenSizers.js"));
var _LayoutChildren = _interopRequireDefault(require("./LayoutChildren.js"));
var _AddChildMethods = _interopRequireDefault(require("./AddChildMethods.js"));
var _RemoveChildMethods = _interopRequireDefault(require("./RemoveChildMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  getChildrenWidth: _GetChildrenWidth.default,
  getChildrenHeight: _GetChildrenHeight.default,
  getExpandedChildWidth: _GetExpandedChildWidth.default,
  getExpandedChildHeight: _GetExpandedChildHeight.default,
  getChildrenSizers: _GetChildrenSizers.default,
  layoutChildren: _LayoutChildren.default
};
Object.assign(methods, _AddChildMethods.default, _RemoveChildMethods.default);
var _default = methods;
exports.default = _default;
},{"./GetChildrenWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/GetChildrenWidth.js","./GetChildrenHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/GetChildrenHeight.js","./GetExpandedChildWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/GetExpandedChildWidth.js","./GetExpandedChildHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/GetExpandedChildHeight.js","./GetChildrenSizers.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/GetChildrenSizers.js","./LayoutChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/LayoutChildren.js","./AddChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/AddChildMethods.js","./RemoveChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/RemoveChildMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/object/IndexOf.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var IndexOf = function (obj, child) {
  if (Array.isArray(obj)) {
    return obj.indexOf(child);
  } else {
    for (var key in obj) {
      if (obj[key] === child) {
        return key;
      }
    }
    return null;
  }
};
var _default = IndexOf;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/OverlapSizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseSizer = _interopRequireDefault(require("../basesizer/BaseSizer.js"));
var _Methods = _interopRequireDefault(require("./Methods.js"));
var _Clear = _interopRequireDefault(require("../../../plugins/utils/object/Clear.js"));
var _IndexOf = _interopRequireDefault(require("../../../plugins/utils/object/IndexOf.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class OverlapSizer extends _BaseSizer.default {
  constructor(scene, x, y, minWidth, minHeight, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      minWidth = GetValue(config, 'width', undefined);
      minHeight = GetValue(config, 'height', undefined);
    } else if (IsPlainObject(minWidth)) {
      config = minWidth;
      minWidth = GetValue(config, 'width', undefined);
      minHeight = GetValue(config, 'height', undefined);
    }
    super(scene, x, y, minWidth, minHeight, config);
    this.type = 'rexOverlapSizer';
    this.sizerChildren = {};
    this.addChildrenMap('items', this.sizerChildren);
  }
  childToKey(gameObject) {
    if (typeof gameObject === 'string') {
      var key = gameObject;
      if (this.sizerChildren.hasOwnPropery(key)) {
        return key;
      }
    } else {
      return (0, _IndexOf.default)(this.sizerChildren, gameObject);
    }
    return null;
  }
}
Object.assign(OverlapSizer.prototype, _Methods.default);
var _default = OverlapSizer;
exports.default = _default;
},{"../basesizer/BaseSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/BaseSizer.js","./Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/Methods.js","../../../plugins/utils/object/Clear.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/Clear.js","../../../plugins/utils/object/IndexOf.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IndexOf.js"}],"node_modules/phaser3-rex-plugins/templates/ui/knob/input/IsLocalPointInKnob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetDistance = Phaser.Math.Distance.Between;
var IsLocalPointInKnob = function (knob, localX, localY) {
  var centerX = knob.width / 2;
  return GetDistance(centerX, centerX, localX, localY) <= centerX;
};
var _default = IsLocalPointInKnob;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/knob/input/OnTouchPad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsLocalPointInKnob = _interopRequireDefault(require("./IsLocalPointInKnob.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetAngle = Phaser.Math.Angle.Between;
const NormalizeAngle = Phaser.Math.Angle.Normalize;
var OnTouchPad = function (pointer, localX, localY) {
  if (!this.enable) {
    return;
  }
  if (!pointer.isDown) {
    return;
  }
  var knob = this.sizerChildren.knob;
  if (!(0, _IsLocalPointInKnob.default)(knob, localX, localY)) {
    return;
  }
  var centerX = knob.width / 2;
  var startAngle = knob.startAngle;
  var endAngle = GetAngle(centerX, centerX, localX, localY);
  var deltaAngle = knob.anticlockwise ? startAngle - endAngle : endAngle - startAngle;
  var value = NormalizeAngle(deltaAngle) / (2 * Math.PI);
  this.stopEaseValue();
  if (this.easeValueDuration === 0 || Math.abs(this.value - value) < 0.1) {
    this.value = value;
  } else {
    this.easeValueTo(value);
  }
};
var InstallEvents = function () {
  var knob = this.sizerChildren.knob;
  knob.on('pointerdown', OnTouchPad, this).on('pointermove', OnTouchPad, this).setInteractive();
};
var _default = InstallEvents;
exports.default = _default;
},{"./IsLocalPointInKnob.js":"node_modules/phaser3-rex-plugins/templates/ui/knob/input/IsLocalPointInKnob.js"}],"node_modules/phaser3-rex-plugins/templates/ui/knob/input/OnPanPad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsLocalPointInKnob = _interopRequireDefault(require("./IsLocalPointInKnob.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetAngle = Phaser.Math.Angle.Between;
const WrapAngle = Phaser.Math.Angle.Wrap;
var OnPointerDown = function (pointer, localX, localY) {
  if (!this.enable || this.panPointer) {
    return;
  }
  var knob = this.sizerChildren.knob;
  if (!(0, _IsLocalPointInKnob.default)(knob, localX, localY)) {
    return;
  }
  OnPanStart.call(this, pointer);
};
var OnPointerMove = function (pointer, localX, localY) {
  if (!this.enable) {
    return;
  }
  if (!pointer.isDown) {
    return;
  }
  var knob = this.sizerChildren.knob;
  switch (this.panState) {
    case TOUCH0:
      if ((0, _IsLocalPointInKnob.default)(knob, localX, localY)) {
        OnPanStart.call(this, pointer);
      }
      break;
    case TOUCH1:
      if ((0, _IsLocalPointInKnob.default)(knob, localX, localY)) {
        OnPan.call(this);
      } else {
        OnPanEnd.call(this);
      }
      break;
  }
};
var OnPointerUp = function (pointer, localX, localY) {
  if (!this.enable || this.panPointer !== pointer) {
    return;
  }
  OnPanEnd.call(this);
};
var OnPanStart = function (pointer) {
  this.panPointer = pointer;
  this.panState = TOUCH1;
};
var OnPanEnd = function () {
  this.panPointer = undefined;
  this.panState = TOUCH0;
};
var OnPan = function () {
  var p0 = this.panPointer.prevPosition,
    p1 = this.panPointer.position;
  var knob = this.sizerChildren.knob;
  var startAngle = GetAngle(knob.x, knob.y, p0.x, p0.y),
    endAngle = GetAngle(knob.x, knob.y, p1.x, p1.y);
  var deltaAngle = knob.anticlockwise ? startAngle - endAngle : endAngle - startAngle;
  var deltaValue = WrapAngle(deltaAngle) / (Math.PI * 2);
  this.stopEaseValue();
  this.value += deltaValue;
};
const TOUCH0 = 0;
const TOUCH1 = 1;
var InstallEvents = function () {
  var knob = this.sizerChildren.knob;
  knob.on('pointerdown', OnPointerDown, this).on('pointermove', OnPointerMove, this).on('pointerup', OnPointerUp, this).setInteractive();
  this.panPointer = undefined;
  this.panState = TOUCH0;
};
var _default = InstallEvents;
exports.default = _default;
},{"./IsLocalPointInKnob.js":"node_modules/phaser3-rex-plugins/templates/ui/knob/input/IsLocalPointInKnob.js"}],"node_modules/phaser3-rex-plugins/templates/ui/knob/TextObjectMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetTextFormatCallback = function (callback, scope) {
  this.textFormatCallback = callback;
  this.textFormatCallbackScope = scope;
  return this;
};
var GetFormatText = function (value) {
  if (value === undefined) {
    value = this.value;
  }
  var text;
  if (this.textFormatCallbackScope) {
    text = this.textFormatCallback(value);
  } else {
    text = this.textFormatCallback.call(this.textFormatCallbackScope, value);
  }
  return text;
};
var UpdateText = function (value) {
  var textObject = this.sizerChildren.text;
  if (textObject && this.textFormatCallback) {
    textObject.setText(GetFormatText.call(this, value));
    if (textObject.layout) {
      textObject.layout();
    }
  }
  return this;
};
var _default = {
  setTextFormatCallback: SetTextFormatCallback,
  getFormatText: GetFormatText,
  updateText: UpdateText
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/knob/Knob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OverlapSizer = _interopRequireDefault(require("../overlapsizer/OverlapSizer.js"));
var _ProgressBase = _interopRequireDefault(require("../../../plugins/utils/progressbase/ProgressBase.js"));
var _CircularProgress = _interopRequireDefault(require("../circularprogress/CircularProgress.js"));
var _OnTouchPad = _interopRequireDefault(require("./input/OnTouchPad.js"));
var _OnPanPad = _interopRequireDefault(require("./input/OnPanPad.js"));
var _TextObjectMethods = _interopRequireDefault(require("./TextObjectMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const SnapTo = Phaser.Math.Snap.To;
class Knob extends (0, _ProgressBase.default)(_OverlapSizer.default) {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }

    // Create sizer
    super(scene, config);
    this.type = 'rexKnob';
    this.bootProgressBase(config);

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var textObject = GetValue(config, 'text', undefined);
    if (background) {
      this.addBackground(background);
    }
    // Get text object
    if (textObject) {
      // Don't draw text on knob directly
      config.textColor = undefined;
      config.textStrokeColor = undefined;
      this.setTextFormatCallback(GetValue(config, 'textFormatCallback', undefined), GetValue(config, 'textFormatCallbackScope', undefined));
    }
    // Create circular progress object
    var knob = new _CircularProgress.default(scene, config);
    knob.setDepth(GetValue(config, 'knobDepth', 0));
    knob._value = -1; // To trigger text updating
    scene.add.existing(knob);
    this.add(knob, 'knob');
    if (textObject) {
      this.add(textObject, 'text', 'center', 0, false);
      scene.children.moveBelow(knob, textObject); // Move knob below textObject
    }

    this.addChildrenMap('background', background);
    this.addChildrenMap('knob', knob);
    this.addChildrenMap('text', textObject);
    this.setEnable(GetValue(config, 'enable', undefined));
    this.setGap(GetValue(config, 'gap', undefined));
    this.setValue(GetValue(config, 'value', 0), GetValue(config, 'min', undefined), GetValue(config, 'max', undefined));

    // Input
    var inputMode = GetValue(config, 'input', 0);
    if (typeof inputMode === 'string') {
      inputMode = INPUTMODE[inputMode];
    }
    switch (inputMode) {
      case 0:
        // 'pan'
        _OnPanPad.default.call(this);
        break;
      case 1:
        // 'click'
        _OnTouchPad.default.call(this);
        break;
    }
  }
  setEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.enable = enable;
    return this;
  }
  setGap(gap) {
    this.gap = gap;
    return this;
  }

  // Override
  get value() {
    return this.sizerChildren.knob.value;
  }

  // Override
  set value(value) {
    if (this.gap !== undefined) {
      value = SnapTo(value, this.gap);
    }
    var oldValue = this.value;
    this.sizerChildren.knob.value = value;
    var newValue = this.value;
    if (oldValue !== newValue) {
      this.updateText();
      this.eventEmitter.emit('valuechange', newValue, oldValue, this.eventEmitter);
    }
  }
}
const INPUTMODE = {
  pan: 0,
  drag: 0,
  click: 1,
  none: -1
};
Object.assign(Knob.prototype, _TextObjectMethods.default);
var _default = Knob;
exports.default = _default;
},{"../overlapsizer/OverlapSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/OverlapSizer.js","../../../plugins/utils/progressbase/ProgressBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/progressbase/ProgressBase.js","../circularprogress/CircularProgress.js":"node_modules/phaser3-rex-plugins/templates/ui/circularprogress/CircularProgress.js","./input/OnTouchPad.js":"node_modules/phaser3-rex-plugins/templates/ui/knob/input/OnTouchPad.js","./input/OnPanPad.js":"node_modules/phaser3-rex-plugins/templates/ui/knob/input/OnPanPad.js","./TextObjectMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/knob/TextObjectMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/knob/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Knob = _interopRequireDefault(require("./Knob.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('knob', function (config) {
  var gameObject = new _Knob.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Knob', _Knob.default);
var _default = _Knob.default;
exports.default = _default;
},{"./Knob.js":"node_modules/phaser3-rex-plugins/templates/ui/knob/Knob.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/customshapes/ShapesUpdateMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _geoms = require("../shapes/geoms");
const ShapeClasses = {
  arc: _geoms.Arc,
  circle: _geoms.Circle,
  curve: _geoms.Curve,
  ellipse: _geoms.Ellipse,
  line: _geoms.Line,
  lines: _geoms.Lines,
  rectangle: _geoms.Rectangle,
  roundRectangle: _geoms.RoundRectangle,
  triangle: _geoms.Triangle
};
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const ClearAll = function () {
  var shapes = this.getShapes();
  for (var i = 0, cnt = shapes.length; i < cnt; i++) {
    shapes[i].lineStyle().fillStyle();
  }
};
var _default = {
  createShape(shapeType, name) {
    var ShapeClass = ShapeClasses[shapeType];
    var shape = new ShapeClass();
    if (name) {
      shape.setName(name);
    }
    return shape;
  },
  buildShapes(config) {
    var createCallback = GetValue(config, 'create', undefined);
    if (IsPlainObject(createCallback)) {
      var shapes = createCallback;
      for (var shapeType in shapes) {
        var name = shapes[shapeType];
        switch (typeof name) {
          case 'number':
            for (var i = 0; i < name; i++) {
              this.addShape(this.createShape(shapeType));
            }
            break;
          case 'string':
            this.addShape(this.createShape(shapeType, name));
            break;
          default:
            //Array
            var names = name;
            for (var i = 0, cnt = names.length; i < cnt; i++) {
              this.addShape(this.createShape(shapeType, names[i]));
            }
            break;
        }
      }
    } else if (Array.isArray(createCallback)) {
      var shapes = createCallback;
      for (var i = 0, cnt = shapes.length; i < cnt; i++) {
        var shape = shapes[i];
        this.addShape(this.createShape(shape.type, shape.name));
      }
    } else if (typeof createCallback === 'function') {
      createCallback.call(this);
    }
    this.setUpdateShapesCallback(GetValue(config, 'update'));
  },
  setUpdateShapesCallback(callback) {
    if (callback === undefined) {
      callback = ClearAll;
    }
    this.dirty = this.dirty || this.updateCallback !== callback;
    this.updateCallback = callback;
    return this;
  },
  updateShapes() {
    this.updateCallback.call(this);
  }
};
exports.default = _default;
},{"../shapes/geoms":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/geoms/index.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/position/WorldXYToGameObjectLocalXY.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const TransformMatrix = Phaser.GameObjects.Components.TransformMatrix;
const TransformXY = Phaser.Math.TransformXY;
var WorldXYToGameObjectLocalXY = function (gameObject, worldX, worldY, camera, out) {
  if (camera === undefined) {
    camera = gameObject.scene.cameras.main;
  }
  if (out === undefined) {
    out = {};
  } else if (out === true) {
    out = globOut;
  }
  var csx = camera.scrollX;
  var csy = camera.scrollY;
  var px = worldX + csx * gameObject.scrollFactorX - csx;
  var py = worldY + csy * gameObject.scrollFactorY - csy;
  if (gameObject.parentContainer) {
    if (tempMatrix === undefined) {
      tempMatrix = new TransformMatrix();
      parentMatrix = new TransformMatrix();
    }
    gameObject.getWorldTransformMatrix(tempMatrix, parentMatrix);
    tempMatrix.applyInverse(px, py, out);
  } else {
    TransformXY(px, py, gameObject.x, gameObject.y, gameObject.rotation, gameObject.scaleX, gameObject.scaleY, out);
  }
  out.x += gameObject.displayOriginX;
  out.y += gameObject.displayOriginY;
  return out;
};
var tempMatrix, parentMatrix;
var globOut = {};
var _default = WorldXYToGameObjectLocalXY;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/customshapes/CustomShapes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseShapes = _interopRequireDefault(require("../shapes/BaseShapes.js"));
var _ShapesUpdateMethods = _interopRequireDefault(require("./ShapesUpdateMethods.js"));
var _WorldXYToGameObjectLocalXY = _interopRequireDefault(require("../../../utils/position/WorldXYToGameObjectLocalXY.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class CustomShapes extends _BaseShapes.default {
  constructor(scene, x, y, width, height, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      width = GetValue(config, 'width', 2);
      height = GetValue(config, 'height', 2);
    }
    super(scene, x, y, width, height);
    this.type = GetValue(config, 'type', 'rexCustomShapes');
    this.buildShapes(config);
  }
  get centerX() {
    return this.width / 2;
  }
  get centerY() {
    return this.height / 2;
  }
  worldToLocalXY(worldX, worldY, camera, out) {
    if (typeof camera === 'boolean') {
      out = camera;
      camera = undefined;
    }
    return (0, _WorldXYToGameObjectLocalXY.default)(this, worldX, worldY, camera, out);
  }
}
Object.assign(CustomShapes.prototype, _ShapesUpdateMethods.default);
var _default = CustomShapes;
exports.default = _default;
},{"../shapes/BaseShapes.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/shapes/BaseShapes.js","./ShapesUpdateMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/customshapes/ShapesUpdateMethods.js","../../../utils/position/WorldXYToGameObjectLocalXY.js":"node_modules/phaser3-rex-plugins/plugins/utils/position/WorldXYToGameObjectLocalXY.js"}],"node_modules/phaser3-rex-plugins/plugins/customshapes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CustomShapes = _interopRequireDefault(require("./gameobjects/shape/customshapes/CustomShapes.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _CustomShapes.default;
exports.default = _default;
},{"./gameobjects/shape/customshapes/CustomShapes.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/customshapes/CustomShapes.js"}],"node_modules/phaser3-rex-plugins/templates/ui/customshapes/CustomShapes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _customshapes = _interopRequireDefault(require("../../../plugins/customshapes.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _customshapes.default;
exports.default = _default;
},{"../../../plugins/customshapes.js":"node_modules/phaser3-rex-plugins/plugins/customshapes.js"}],"node_modules/phaser3-rex-plugins/templates/ui/customshapes/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CustomShapes = _interopRequireDefault(require("./CustomShapes.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('customShapes', function (x, y, width, height, config) {
  var gameObject = new _CustomShapes.default(this.scene, x, y, width, height, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.CustomShapes', _CustomShapes.default);
var _default = _CustomShapes.default;
exports.default = _default;
},{"./CustomShapes.js":"node_modules/phaser3-rex-plugins/templates/ui/customshapes/CustomShapes.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/customprogress/CustomProgress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CustomShapes = _interopRequireDefault(require("../customshapes/CustomShapes.js"));
var _ProgressBase = _interopRequireDefault(require("../../../utils/progressbase/ProgressBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class CustomProgress extends (0, _ProgressBase.default)(_CustomShapes.default) {
  constructor(scene, x, y, width, height, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      width = GetValue(config, 'width', 2);
      height = GetValue(config, 'height', 2);
    }
    if (config === undefined) {
      config = {};
    }
    if (!config.type) {
      config.type = 'rexCustomProgress';
    }
    super(scene, x, y, width, height, config);
    this.bootProgressBase(config);
    this.setValue(GetValue(config, 'value', 0));
  }
  get centerX() {
    return this.width / 2;
    ;
  }
  get centerY() {
    return this.height / 2;
  }
  get radius() {
    return Math.min(this.centerX, this.centerY);
  }
}
var _default = CustomProgress;
exports.default = _default;
},{"../customshapes/CustomShapes.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/customshapes/CustomShapes.js","../../../utils/progressbase/ProgressBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/progressbase/ProgressBase.js"}],"node_modules/phaser3-rex-plugins/plugins/customprogress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CustomProgress = _interopRequireDefault(require("./gameobjects/shape/customprogress/CustomProgress.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _CustomProgress.default;
exports.default = _default;
},{"./gameobjects/shape/customprogress/CustomProgress.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/customprogress/CustomProgress.js"}],"node_modules/phaser3-rex-plugins/templates/ui/customprogress/CustomProgress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _customprogress = _interopRequireDefault(require("../../../plugins/customprogress.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _customprogress.default;
exports.default = _default;
},{"../../../plugins/customprogress.js":"node_modules/phaser3-rex-plugins/plugins/customprogress.js"}],"node_modules/phaser3-rex-plugins/templates/ui/customprogress/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CustomProgress = _interopRequireDefault(require("./CustomProgress.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('customProgress', function (x, y, width, height, config) {
  var gameObject = new _CustomProgress.default(this.scene, x, y, width, height, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.CustomProgress', _CustomProgress.default);
var _default = _CustomProgress.default;
exports.default = _default;
},{"./CustomProgress.js":"node_modules/phaser3-rex-plugins/templates/ui/customprogress/CustomProgress.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/methods/SetTransitionCallbackMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setTransitionStartCallback(callback, scope) {
    this.onStartCallback = callback;
    this.onStartCallbackScope = scope;
    return this;
  },
  setTransitionProgressCallback(callback, scope) {
    this.onProgressCallback = callback;
    this.onProgressCallbackScope = scope;
    return this;
  },
  setTransitionCompleteCallback(callback, scope) {
    this.onCompleteCallback = callback;
    this.onCompleteCallbackScope = scope;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/methods/TransitionMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseValueTask = _interopRequireDefault(require("../../../../utils/ease/EaseValueTask.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
var DirMode = {
  out: 0,
  in: 1
};
var _default = {
  setTransitionDirection(dir) {
    if (typeof dir === 'string') {
      dir = DirMode[dir];
    }
    this.dir = dir;
    return this;
  },
  setDuration(duration) {
    this.duration = duration;
    return this;
  },
  setEaseFunction(ease) {
    this.easeFunction = ease;
    return this;
  },
  setNextTexture(texture, frame) {
    this.nextImage.setTexture(texture, frame);
    return this;
  },
  transit(texture, frame) {
    if (this.isRunning) {
      this.ignoreCompleteEvent = true;
      this.stop();
      this.ignoreCompleteEvent = false;
    }
    if (IsPlainObject(texture)) {
      var config = texture;
      texture = GetValue(config, 'key', undefined);
      frame = GetValue(config, 'frame', undefined);
      this.setDuration(GetValue(config, 'duration', this.duration)).setEaseFunction(GetValue(config, 'ease', this.easeFunction)).setTransitionDirection(GetValue(config, 'dir', this.dir));
      var maskGameObject = GetValue(config, 'mask', undefined);
      if (maskGameObject) {
        this.setMaskGameObject(maskGameObject);
      }
      this.setMaskEnable(maskGameObject === true);
      var onStart = GetValue(config, 'onStart', undefined);
      var onProgress = GetValue(config, 'onProgress', undefined);
      var onComplete = GetValue(config, 'onComplete', undefined);
      if (onStart !== undefined || onProgress !== undefined || onComplete !== undefined) {
        this.setTransitionStartCallback(onStart, GetValue(config, 'onStartScope', undefined)).setTransitionProgressCallback(onProgress, GetValue(config, 'onProgressScope', undefined)).setTransitionCompleteCallback(onComplete, GetValue(config, 'onCompleteScope', undefined));
      }
    }
    this.setNextTexture(texture, frame);
    this.start();
    return this;
  },
  start() {
    if (this.easeValueTask === undefined) {
      this.easeValueTask = new _EaseValueTask.default(this, {
        eventEmitter: null
      });
    }
    this.easeValueTask.restart({
      key: 't',
      from: 0,
      to: 1,
      duration: this.duration,
      ease: this.easeFunction
    });
    return this;
  },
  pause() {
    if (this.easeValueTask) {
      this.easeValueTask.pause();
    }
    return this;
  },
  resume() {
    if (this.easeValueTask) {
      this.easeValueTask.resume();
    }
    return this;
  },
  stop() {
    if (this.easeValueTask) {
      this.easeValueTask.stop();
    }
    this.setT(1);
    return this;
  }
};
exports.default = _default;
},{"../../../../utils/ease/EaseValueTask.js":"node_modules/phaser3-rex-plugins/plugins/utils/ease/EaseValueTask.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/mask/defaultmaskgraphics/DrawShape.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var DrawShape = function (width, height, padding, originX, originY) {
  this.clear().fillStyle(0xffffff);
  switch (this.shape) {
    case 1:
      // circle
      var radius = Math.min(width, height) / 2;
      this.fillCircle(-width * (originX - 0.5), -height * (originY - 0.5), radius + padding);
      break;
    default:
      // 0|'rectangle'
      this.fillRect(-(width * originX) - padding, -(height * originY) - padding, width + 2 * padding, height + 2 * padding);
      break;
  }
};
var _default = DrawShape;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/mask/defaultmaskgraphics/DefaultMaskGraphics.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DrawShape = _interopRequireDefault(require("./DrawShape.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Graphics = Phaser.GameObjects.Graphics;
class DefaultMaskGraphics extends Graphics {
  constructor(parent, shape, padding) {
    if (shape === undefined) {
      shape = 0;
    }
    if (typeof shape === 'string') {
      shape = SHAPEMODE[shape];
    }
    if (padding === undefined) {
      padding = 0;
    }
    super(parent.scene);
    this.parent = parent;
    this.shape = shape;
    this.padding = padding;
    this.setPosition().resize().setVisible(false);
    // Don't add it to display list
  }

  destroy() {
    this.parent = undefined;
    super.destroy();
    return this;
  }
  setPosition(x, y) {
    var parent = this.parent;
    if (x === undefined) {
      x = parent.x;
    }
    if (y === undefined) {
      y = parent.y;
    }
    super.setPosition(x, y);
    return this;
  }
  resize(width, height, padding) {
    var parent = this.parent;
    if (width === undefined) {
      width = parent.width;
    }
    if (height === undefined) {
      height = parent.height;
    }
    if (padding === undefined) {
      padding = this.padding;
    }
    if (this.widthSave === width && this.heightSave === height && this.paddingSave === padding) {
      return this;
    }
    this.widthSave = width;
    this.heightSave = height;
    this.paddingSave = padding;
    this.originXSave = parent.originX;
    this.originYSave = parent.originY;
    _DrawShape.default.call(this, width, height, padding, parent.originX, parent.originY);
    return this;
  }
  setOrigin(originX, originY) {
    if (originY === undefined) {
      originY = originX;
    }
    var parent = this.parent;
    if (originX === undefined) {
      originX = parent.originX;
    }
    if (originY === undefined) {
      originY = parent.originY;
    }
    if (this.originXSave === originX && this.originYSave === originY) {
      return this;
    }
    this.originXSave = originX;
    this.originYSave = originY;
    _DrawShape.default.call(this, this.widthSave, this.heightSave, this.paddingSave, originX, originY);
    return this;
  }
}
const SHAPEMODE = {
  rectangle: 0,
  circle: 1
};
var _default = DefaultMaskGraphics;
exports.default = _default;
},{"./DrawShape.js":"node_modules/phaser3-rex-plugins/plugins/utils/mask/defaultmaskgraphics/DrawShape.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/methods/MaskMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DefaultMaskGraphics = _interopRequireDefault(require("../../../../utils/mask/defaultmaskgraphics/DefaultMaskGraphics.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  setMaskGameObject(gameObject) {
    if (!gameObject) {
      this.removeMaskGameObject();
      return this;
    }
    if (this.maskGameObject) {
      if (gameObject === true && this.maskGameObject instanceof _DefaultMaskGraphics.default) {
        return this;
      }
      if (this.maskGameObject === gameObject) {
        return this;
      }

      // Remove previous Mask Game Object
      this.removeMaskGameObject();
    }

    // Add new Mask Game Object
    if (gameObject === true) {
      gameObject = new _DefaultMaskGraphics.default(this);
    }
    this.maskGameObject = gameObject;
    this.maskGameObject.resize(this.width, this.height).setOrigin(this.originX, this.originY).setPosition(0, 0).setScale(1).setVisible(false);
    this.addLocal(this.maskGameObject);
    this.childrenMask = this.maskGameObject.createGeometryMask();
    return this;
  },
  removeMaskGameObject() {
    this.backImage.clearMask();
    this.frontImage.clearMask();
    this.childrenMask = undefined;
    this.remove(this.maskGameObject, true);
    this.maskGameObject = undefined;
    return this;
  },
  setImageMaskEnable(gameObject, enable, invertAlpha) {
    if (enable === undefined) {
      enable = true;
    }

    // Use DefaultMaskGraphics if not given
    if (!this.childrenMask) {
      this.setMaskGameObject(true);
    }
    if (enable) {
      gameObject.setMask(this.childrenMask);
      if (invertAlpha) {
        this.childrenMask.setInvertAlpha();
      }
    } else {
      gameObject.clearMask();
    }
    return this;
  },
  setCurrentImageMaskEnable(enable, invertAlpha) {
    this.setImageMaskEnable(this.currentImage, enable, invertAlpha);
    return this;
  },
  setNextImageMaskEnable(enable, invertAlpha) {
    this.setImageMaskEnable(this.nextImage, enable, invertAlpha);
    return this;
  },
  setCellImagesMaskEnable(enable, invertAlpha) {
    var cellImages = this.getCellImages();
    for (var i = 0, cnt = cellImages.length; i < cnt; i++) {
      this.setImageMaskEnable(cellImages[i], enable, invertAlpha);
    }
    return this;
  },
  setMaskEnable(enable, invertAlpha) {
    this.setImageMaskEnable(this.backImage, enable, invertAlpha);
    this.setImageMaskEnable(this.frontImage, enable, invertAlpha);
    this.setCellImagesMaskEnable(enable, invertAlpha);
    return this;
  }
};
exports.default = _default;
},{"../../../../utils/mask/defaultmaskgraphics/DefaultMaskGraphics.js":"node_modules/phaser3-rex-plugins/plugins/utils/mask/defaultmaskgraphics/DefaultMaskGraphics.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/texture/gridcut/GetFrameNameCallback.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetFrameNameCallback = function (baseFrameName, delimiter) {
  if (delimiter === undefined) {
    delimiter = ',';
  }
  var callback;
  if (baseFrameName === '__BASE') {
    callback = function (colIndex, rowIndex) {
      return `${colIndex}${delimiter}${rowIndex}`;
    };
  } else {
    callback = function (colIndex, rowIndex) {
      return `${baseFrameName}_${colIndex}${delimiter}${rowIndex}`;
    };
  }
  return callback;
};
var _default = GetFrameNameCallback;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/texture/gridcut/GridCut.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetFrameNameCallback = _interopRequireDefault(require("./GetFrameNameCallback"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GridCut = function (scene, key, frame, columns, rows, getFrameNameCallback) {
  if (frame == null) {
    frame = '__BASE';
  }
  if (!getFrameNameCallback) {
    getFrameNameCallback = (0, _GetFrameNameCallback.default)(frame, getFrameNameCallback);
  }
  var texture = scene.sys.textures.get(key);
  var isRenderTexture = texture.source[0].isRenderTexture;
  var baseFrame = typeof frame === 'object' ? frame : texture.get(frame);
  var baseWidth = baseFrame.width,
    baseHeight = baseFrame.height;
  var cellX, cellY, cellName;
  var cellWidth = baseWidth / columns,
    cellHeight = baseHeight / rows;
  var offsetX = 0,
    offsetY = 0;
  for (var y = 0; y < rows; y++) {
    offsetX = 0;
    for (var x = 0; x < columns; x++) {
      cellName = getFrameNameCallback(x, y);
      cellX = offsetX + baseFrame.cutX;
      if (!isRenderTexture) {
        cellY = offsetY + baseFrame.cutY;
      } else {
        cellY = baseHeight - offsetY - cellHeight + baseFrame.cutY;
      }
      texture.add(cellName, 0, cellX, cellY, cellWidth, cellHeight);
      offsetX += cellWidth;
    }
    offsetY += cellHeight;
  }
  return {
    getFrameNameCallback: getFrameNameCallback,
    cellWidth: cellWidth,
    cellHeight: cellHeight,
    columns: columns,
    rows: rows
  };
};
var _default = GridCut;
exports.default = _default;
},{"./GetFrameNameCallback":"node_modules/phaser3-rex-plugins/plugins/utils/texture/gridcut/GetFrameNameCallback.js"}],"node_modules/phaser3-rex-plugins/plugins/actions/GridCutImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GridCut = _interopRequireDefault(require("../utils/texture/gridcut/GridCut.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const DefaultImageClass = Phaser.GameObjects.Image;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const RotateAround = Phaser.Math.RotateAround;
var GridCutImage = function (gameObject, columns, rows, config) {
  if (IsPlainObject(columns)) {
    config = columns;
    columns = GetValue(config, 'columns', 1);
    rows = GetValue(config, 'rows', 1);
  }
  var createImageCallback = GetValue(config, 'onCreateImage');
  if (!createImageCallback) {
    var ImageClass = GetValue(config, 'ImageClass', DefaultImageClass);
    createImageCallback = function (scene, key, frame) {
      return new ImageClass(scene, 0, 0, key, frame);
    };
  }
  var originX = GetValue(config, 'originX', 0.5);
  var originY = GetValue(config, 'originY', 0.5);
  var addToScene = GetValue(config, 'add', true);
  var align = GetValue(config, 'align', addToScene);
  var imageObjectPool = GetValue(config, 'objectPool', undefined);
  var scene = gameObject.scene;
  var texture = gameObject.texture;
  var frame = gameObject.frame;
  var result = (0, _GridCut.default)(scene, texture, frame, columns, rows);
  var getFrameNameCallback = result.getFrameNameCallback;
  var scaleX = gameObject.scaleX,
    scaleY = gameObject.scaleY;
  var rotation = gameObject.rotation;
  var topLeft = gameObject.getTopLeft(),
    startX = topLeft.x,
    startY = topLeft.y;
  var cellGameObjects = [];
  var cellWidth = result.cellWidth * scaleX,
    cellHeight = result.cellHeight * scaleY;
  for (var y = 0; y < rows; y++) {
    for (var x = 0; x < columns; x++) {
      var cellGameObject;
      var frameName = getFrameNameCallback(x, y);
      if (imageObjectPool && imageObjectPool.length > 0) {
        cellGameObject = imageObjectPool.pop().setTexture(texture, frameName);
      } else {
        cellGameObject = createImageCallback(scene, texture, frameName);
      }
      if (addToScene) {
        scene.add.existing(cellGameObject);
      }
      var cellTLX = startX + cellWidth * x;
      var cellTLY = startY + cellHeight * y;
      var cellX = cellTLX + originX * cellWidth;
      var cellY = cellTLY + originY * cellHeight;
      if (align) {
        cellGameObject.setOrigin(originX, originY).setPosition(cellX, cellY).setScale(scaleX, scaleY).setRotation(rotation);
        RotateAround(cellGameObject, startX, startY, rotation);
      }
      cellGameObjects.push(cellGameObject);
    }
  }
  return cellGameObjects;
};
var _default = GridCutImage;
exports.default = _default;
},{"../utils/texture/gridcut/GridCut.js":"node_modules/phaser3-rex-plugins/plugins/utils/texture/gridcut/GridCut.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/methods/GridCutMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GridCutImage = _interopRequireDefault(require("../../../../actions/GridCutImage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  gridCutImage(gameObject, columns, rows, config) {
    if (config === undefined) {
      config = {};
    }
    config.objectPool = this.imagesPool;
    var cellImages = (0, _GridCutImage.default)(gameObject, columns, rows, config),
      cellImage;
    for (var i = 0, cnt = cellImages.length; i < cnt; i++) {
      cellImage = cellImages[i];
      cellImage.setVisible(true);
      this.add(cellImage);
    }
    this.cellImages = cellImages;
    this.setChildLocalVisible(gameObject, false); // Set cut target to invisible
    return cellImages;
  },
  gridCutCurrentImage(columns, rows, config) {
    return this.gridCutImage(this.currentImage, columns, rows, config);
  },
  gridCutNextImage(columns, rows, config) {
    return this.gridCutImage(this.nextImage, columns, rows, config);
  },
  getCellImages() {
    return this.cellImages;
  },
  freeCellImages() {
    if (this.cellImages.length === 0) {
      return this;
    }
    var texture = this.cellImages[0].texture;
    var cellImages = this.cellImages,
      cellImage,
      frameName;
    for (var i = 0, cnt = cellImages.length; i < cnt; i++) {
      cellImage = cellImages[i];

      // Reset property of cell image
      this.setChildLocalAlpha(cellImage, 1).setChildLocalScale(cellImage, 1).setChildLocalVisible(cellImage, false);
      cellImage.clearMask();

      // Remove frame object
      frameName = cellImage.frame.name;
      cellImage.setTexture();
      texture.remove(frameName);
    }
    this.imagesPool.push(...cellImages);
    cellImages.length = 0;
    return this;
  }
};
exports.default = _default;
},{"../../../../actions/GridCutImage.js":"node_modules/phaser3-rex-plugins/plugins/actions/GridCutImage.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/utils/FlipMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setFlipX(value) {
    this.flipX = value;
    return this;
  },
  setFlipY(value) {
    this.flipY = value;
    return this;
  },
  toggleFlipX() {
    this.flipX = !this.flipX;
    return this;
  },
  toggleFlipY() {
    this.flipY = !this.flipY;
    return this;
  },
  setFlip(x, y) {
    this.flipX = x;
    this.flipY = y;
    return this;
  },
  resetFlip() {
    this.flipX = false;
    this.flipY = false;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SetTransitionCallbackMethods = _interopRequireDefault(require("./SetTransitionCallbackMethods.js"));
var _TransitionMethods = _interopRequireDefault(require("./TransitionMethods.js"));
var _MaskMethods = _interopRequireDefault(require("./MaskMethods.js"));
var _GridCutMethods = _interopRequireDefault(require("./GridCutMethods.js"));
var _FlipMethods = _interopRequireDefault(require("../../utils/FlipMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {};
Object.assign(methods, _SetTransitionCallbackMethods.default, _TransitionMethods.default, _MaskMethods.default, _GridCutMethods.default, _FlipMethods.default);
var _default = methods;
exports.default = _default;
},{"./SetTransitionCallbackMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/methods/SetTransitionCallbackMethods.js","./TransitionMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/methods/TransitionMethods.js","./MaskMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/methods/MaskMethods.js","./GridCutMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/methods/GridCutMethods.js","../../utils/FlipMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/utils/FlipMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/methods/CrossFadeTransition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OnStart = exports.OnProgress = exports.OnComplete = void 0;
var OnStart = function (parent, currentImage, nextImage, t) {};
exports.OnStart = OnStart;
var OnProgress = function (parent, currentImage, nextImage, t) {
  parent.setChildLocalAlpha(currentImage, 1 - t).setChildLocalAlpha(nextImage, t);
};
exports.OnProgress = OnProgress;
var OnComplete = function (parent, currentImage, nextImage, t) {
  parent.setChildLocalAlpha(currentImage, 1);
};
exports.OnComplete = OnComplete;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/TransitionImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ContainerLite = _interopRequireDefault(require("../containerlite/ContainerLite.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
var _CrossFadeTransition = require("./methods/CrossFadeTransition.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const Clamp = Phaser.Math.Clamp;
class TransitionImage extends _ContainerLite.default {
  constructor(scene, x, y, texture, frame, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      texture = GetValue(config, 'key', undefined);
      frame = GetValue(config, 'frame', undefined);
    } else if (IsPlainObject(frame)) {
      config = frame;
      frame = undefined;
    }
    var backImage = GetValue(config, 'back', undefined);
    var frontImage = GetValue(config, 'front', undefined);
    if (!backImage) {
      backImage = scene.add.image(x, y, texture, frame);
    }
    if (!frontImage) {
      frontImage = scene.add.image(x, y, texture, frame);
    }
    var width = GetValue(config, 'width', frontImage.width);
    var height = GetValue(config, 'height', frontImage.height);
    super(scene, x, y, width, height);
    this.type = 'rexTransitionImage';
    backImage.setVisible(false);
    this.addMultiple([backImage, frontImage]);
    this.backImage = backImage;
    this.frontImage = frontImage;
    this.maskGameObject = undefined;
    this.cellImages = [];
    this.imagesPool = [];

    // Transition parameters
    var onStart = GetValue(config, 'onStart', undefined);
    var onProgress = GetValue(config, 'onProgress', undefined);
    var onComplete = GetValue(config, 'onComplete', undefined);
    var dir = GetValue(config, 'dir', 0);
    if (onStart === undefined && onProgress === undefined && onComplete === undefined) {
      onStart = _CrossFadeTransition.OnStart;
      onProgress = _CrossFadeTransition.OnProgress;
      onComplete = _CrossFadeTransition.OnComplete;
      dir = 0;
    }
    this.setTransitionStartCallback(onStart, GetValue(config, 'onStartScope', undefined)).setTransitionProgressCallback(onProgress, GetValue(config, 'onProgressScope', undefined)).setTransitionCompleteCallback(onComplete, GetValue(config, 'onCompleteScope', undefined)).setTransitionDirection(dir).setDuration(GetValue(config, 'duration', 1000)).setEaseFunction(GetValue(config, 'ease', 'Linear'));
    var maskGameObject = GetValue(config, 'mask', undefined);
    if (maskGameObject) {
      this.setMaskGameObject(maskGameObject);
    }
    this.setMaskEnable(false);
    this.ignoreCompleteEvent = false;
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    if (this.childrenMask) {
      this.childrenMask.destroy();
      this.childrenMask = undefined;
    }
    this.backImage = undefined;
    this.frontImage = undefined;
    this.maskGameObject = undefined;
    this.cellImages.length = 0;
    this.imagesPool.length = 0;
    super.destroy(fromScene);
    this.onStartCallback = undefined;
    this.onStartCallbackScope = undefined;
    this.onProgressCallback = undefined;
    this.onProgressCallbackScope = undefined;
    this.onCompleteCallback = undefined;
    this.onCompleteCallbackScope = undefined;
    this.easeValueTask = undefined;
  }
  get currentImage() {
    return this.dir === 0 ? this.frontImage : this.backImage;
  }
  get nextImage() {
    return this.dir === 0 ? this.backImage : this.frontImage;
  }
  get texture() {
    return this.nextImage.texture;
  }
  get frame() {
    return this.nextImage.frame;
  }
  get flipX() {
    return this._flipX;
  }
  set flipX(value) {
    if (this._flipX === value) {
      return;
    }
    this._flipX = value;
    this.backImage.setFlipX(value);
    this.frontImage.setFlipX(value);
  }
  get flipY() {
    return this._flipY;
  }
  set flipY(value) {
    if (this._flipY === value) {
      return;
    }
    this._flipY = value;
    this.backImage.setFlipY(value);
    this.frontImage.setFlipY(value);
  }
  get t() {
    return this._t;
  }
  set t(value) {
    value = Clamp(value, 0, 1);
    if (this._t === value) {
      return;
    }
    this._t = value;
    var currentImage = this.currentImage;
    var nextImage = this.nextImage;

    // Start
    if (value === 0) {
      this.setChildVisible(this.frontImage, true).setChildVisible(this.backImage, true);
      RunCallback(this.onStartCallback, this.onStartCallbackScope, this, currentImage, nextImage, value);
    }

    // Progress
    RunCallback(this.onProgressCallback, this.onProgressCallbackScope, this, currentImage, nextImage, value);

    // Complete
    if (value === 1) {
      RunCallback(this.onCompleteCallback, this.onCompleteCallbackScope, this, currentImage, nextImage, value);
      var key = nextImage.texture.key,
        frame = nextImage.frame.name;
      this.frontImage.setTexture(key, frame);
      this.backImage.setTexture(key, frame);
      this.setChildVisible(this.frontImage, true).setChildVisible(this.backImage, false).setMaskEnable(false).freeCellImages();
    }
    if (value === 1 && !this.ignoreCompleteEvent) {
      this.emit('complete');
    }
  }
  setT(value) {
    this.t = value;
    return this;
  }
  get isRunning() {
    return this.easeValueTask ? this.easeValueTask.isRunning : false;
  }
  setOrigin(originX, originY) {
    super.setOrigin(originX, originY);
    this.backImage.setOrigin(originX, originY);
    this.frontImage.setOrigin(originX, originY);
    if (this.maskGameObject) {
      this.maskGameObject.setOrigin(originX, originY);
    }
    return this;
  }
  setTexture(texture, frame) {
    // Without transition
    this.frontImage.setTexture(texture, frame);
    this.backImage.setTexture(texture, frame).setVisible(false);
    return this;
  }
}
var RunCallback = function (callback, scope, parent, currentImage, nextImage, t) {
  if (!callback) {
    return;
  }
  if (scope) {
    callback.call(scope, parent, currentImage, nextImage, t);
  } else {
    callback(parent, currentImage, nextImage, t);
  }
};

// mixin
Object.assign(TransitionImage.prototype, _Methods.default);
var _default = TransitionImage;
exports.default = _default;
},{"../containerlite/ContainerLite.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/ContainerLite.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/methods/Methods.js","./methods/CrossFadeTransition.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/methods/CrossFadeTransition.js"}],"node_modules/phaser3-rex-plugins/plugins/transitionimage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TransitionImage = _interopRequireDefault(require("./gameobjects/container/transitionimage/TransitionImage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _TransitionImage.default;
exports.default = _default;
},{"./gameobjects/container/transitionimage/TransitionImage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/transitionimage/TransitionImage.js"}],"node_modules/phaser3-rex-plugins/templates/ui/transitionimage/TransitionImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _transitionimage = _interopRequireDefault(require("../../../plugins/transitionimage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _transitionimage.default;
exports.default = _default;
},{"../../../plugins/transitionimage.js":"node_modules/phaser3-rex-plugins/plugins/transitionimage.js"}],"node_modules/phaser3-rex-plugins/templates/ui/transitionimage/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TransitionImage = _interopRequireDefault(require("./TransitionImage.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('transitionImage', function (x, y, texture, frame, config) {
  var gameObject = new _TransitionImage.default(this.scene, x, y, texture, frame, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.TransitionImage', _TransitionImage.default);
var _default = _TransitionImage.default;
exports.default = _default;
},{"./TransitionImage.js":"node_modules/phaser3-rex-plugins/templates/ui/transitionimage/TransitionImage.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/size/FitTo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var FitTo = function (child, parent, out) {
  if (out === undefined) {
    out = {};
  } else if (out === true) {
    out = globalSize;
  }
  if (child.width <= parent.width && child.height <= parent.height) {
    out.width = child.width;
    out.height = child.height;
    return out;
  }
  var childRatio = child.width / child.height;
  out.width = Math.min(child.width, parent.width);
  out.height = Math.min(child.height, parent.height);
  var ratio = out.width / out.height;
  if (ratio < childRatio) {
    out.height = out.width / childRatio;
  } else if (ratio > childRatio) {
    out.width = out.height * childRatio;
  }
  return out;
};
var globalSize = {};
var _default = FitTo;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/texture/HasTexture.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetGame = _interopRequireDefault(require("../system/GetGame.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var HasTexture = function (game, key, frame) {
  game = (0, _GetGame.default)(game);
  var cache = game.textures;
  var hasTexture = cache.exists(key);
  if (frame === undefined) {
    return hasTexture;
  }
  return cache.get(key).has(frame);
};
var _default = HasTexture;
exports.default = _default;
},{"../system/GetGame.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetGame.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/imagebox/ImageBox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ContainerLite = _interopRequireDefault(require("../containerlite/ContainerLite.js"));
var _FitTo = _interopRequireDefault(require("../../../utils/size/FitTo.js"));
var _FlipMethods = _interopRequireDefault(require("../utils/FlipMethods.js"));
var _HasTexture = _interopRequireDefault(require("../../../utils/texture/HasTexture.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class ImageBox extends _ContainerLite.default {
  constructor(scene, x, y, texture, frame, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      texture = GetValue(config, 'key', undefined);
      frame = GetValue(config, 'frame', undefined);
    } else if (IsPlainObject(frame)) {
      config = frame;
      frame = undefined;
    }
    var image = GetValue(config, 'image');
    if (!image) {
      image = scene.add.image(x, y, texture, frame);
      if (texture === undefined) {
        image.setVisible(false);
      }
    } else {
      image.setPosition(x, y).setOrigin(0.5);
    }
    super(scene, x, y, 1, 1);
    this.type = 'rexImageBox';
    this.add(image);
    this.image = image;
    var width = GetValue(config, 'width', image.width);
    var height = GetValue(config, 'height', image.height);
    this.resize(width, height);
  }
  get texture() {
    return this.image.texture;
  }
  get frame() {
    return this.image.frame;
  }
  get flipX() {
    return this._flipX;
  }
  set flipX(value) {
    if (this._flipX === value) {
      return;
    }
    this._flipX = value;
    this.image.setFlipX(value);
  }
  get flipY() {
    return this._flipY;
  }
  set flipY(value) {
    if (this._flipY === value) {
      return;
    }
    this._flipY = value;
    this.image.setFlipY(value);
  }
  scaleImage() {
    var image = this.image;
    var result = (0, _FitTo.default)(image, {
      width: this.width,
      height: this.height
    }, true);
    image.setDisplaySize(result.width, result.height);
    this.resetChildScaleState(image);
    return this;
  }
  resize(width, height) {
    super.resize(width, height);
    this.scaleImage();
    return this;
  }
  setTexture(texture, frame) {
    var image = this.image;
    image.setTexture(texture, frame);
    if (texture !== null) {
      this.setChildVisible(image, true);
      this.scaleImage();
    } else {
      this.setChildVisible(image, false);
    }
    return this;
  }
}
Object.assign(ImageBox.prototype, _FlipMethods.default);
var _default = ImageBox;
exports.default = _default;
},{"../containerlite/ContainerLite.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/ContainerLite.js","../../../utils/size/FitTo.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/FitTo.js","../utils/FlipMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/utils/FlipMethods.js","../../../utils/texture/HasTexture.js":"node_modules/phaser3-rex-plugins/plugins/utils/texture/HasTexture.js"}],"node_modules/phaser3-rex-plugins/plugins/imagebox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ImageBox = _interopRequireDefault(require("./gameobjects/container/imagebox/ImageBox.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _ImageBox.default;
exports.default = _default;
},{"./gameobjects/container/imagebox/ImageBox.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/imagebox/ImageBox.js"}],"node_modules/phaser3-rex-plugins/templates/ui/imagebox/ImageBox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _imagebox = _interopRequireDefault(require("../../../plugins/imagebox.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _imagebox.default;
exports.default = _default;
},{"../../../plugins/imagebox.js":"node_modules/phaser3-rex-plugins/plugins/imagebox.js"}],"node_modules/phaser3-rex-plugins/templates/ui/imagebox/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ImageBox = _interopRequireDefault(require("./ImageBox.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('imageBox', function (x, y, texture, frame, config) {
  var gameObject = new _ImageBox.default(this.scene, x, y, texture, frame, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.ImageBox', _ImageBox.default);
var _default = _ImageBox.default;
exports.default = _default;
},{"./ImageBox.js":"node_modules/phaser3-rex-plugins/templates/ui/imagebox/ImageBox.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/fullwindowrectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FullWindowRectangle = _interopRequireDefault(require("./gameobjects/shape/fullwindowrectangle/FullWindowRectangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _FullWindowRectangle.default;
exports.default = _default;
},{"./gameobjects/shape/fullwindowrectangle/FullWindowRectangle.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/fullwindowrectangle/FullWindowRectangle.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fullwindowrectangle/FullWindowRectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fullwindowrectangle = _interopRequireDefault(require("../../../plugins/fullwindowrectangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _fullwindowrectangle.default;
exports.default = _default;
},{"../../../plugins/fullwindowrectangle.js":"node_modules/phaser3-rex-plugins/plugins/fullwindowrectangle.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fullwindowrectangle/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FullWindowRectangle = _interopRequireDefault(require("./FullWindowRectangle.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('fullWindowRectangle', function (fillColor, fillAlpha) {
  var gameObject = new _FullWindowRectangle.default(this.scene, fillColor, fillAlpha);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.FullWindowRectangle', _FullWindowRectangle.default);
var _default = _FullWindowRectangle.default;
exports.default = _default;
},{"./FullWindowRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/fullwindowrectangle/FullWindowRectangle.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/cover/Cover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Cover = _interopRequireDefault(require("../../../plugins/gameobjects/shape/cover/Cover.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _Cover.default;
exports.default = _default;
},{"../../../plugins/gameobjects/shape/cover/Cover.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/shape/cover/Cover.js"}],"node_modules/phaser3-rex-plugins/templates/ui/cover/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Cover = _interopRequireDefault(require("./Cover.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('cover', function (config) {
  var gameObject = new _Cover.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Cover', _Cover.default);
var _default = _Cover.default;
exports.default = _default;
},{"./Cover.js":"node_modules/phaser3-rex-plugins/templates/ui/cover/Cover.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/Resize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Resize = function (width, height) {
  if (this.scene.sys.scale.autoRound) {
    width = Math.floor(width);
    height = Math.floor(height);
  }
  if (this.width === width && this.height === height) {
    return this;
  }
  var style = this.node.style;
  style.width = `${width}px`;
  style.height = `${height}px`;
  this.updateSize();
  return this;
};
var _default = Resize;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/inputtext/InputTextProperties.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyleProperties = exports.ElementProperties = exports.ElementEvents = void 0;
const ElementProperties = {
  id: ['id', undefined],
  text: ['value', undefined],
  maxLength: ['maxLength', undefined],
  minLength: ['minLength', undefined],
  placeholder: ['placeholder', undefined],
  tooltip: ['title', undefined],
  readOnly: ['readOnly', false],
  spellCheck: ['spellcheck', false],
  autoComplete: ['autocomplete', 'off']
};
exports.ElementProperties = ElementProperties;
const StyleProperties = {
  align: ['textAlign', undefined],
  paddingLeft: ['padding-left', undefined],
  paddingRight: ['padding-right', undefined],
  paddingTop: ['padding-top', undefined],
  paddingBottom: ['padding-bottom', undefined],
  fontFamily: ['fontFamily', undefined],
  fontSize: ['font-size', undefined],
  color: ['color', '#ffffff'],
  backgroundColor: ['backgroundColor', 'transparent'],
  border: ['border', 0],
  borderColor: ['borderColor', 'transparent'],
  outline: ['outline', 'none'],
  direction: ['direction', undefined]
};
exports.StyleProperties = StyleProperties;
const ElementEvents = {
  input: 'textchange',
  click: 'click',
  dblclick: 'dblclick',
  mousedown: 'pointerdown',
  mousemove: 'pointermove',
  mouseup: 'pointerup',
  touchstart: 'pointerdown',
  touchmove: 'pointermove',
  touchend: 'pointerup',
  keydown: 'keydown',
  keyup: 'keyup',
  keypress: 'keypress',
  compositionstart: 'compositionStart',
  compositionend: 'compositionEnd',
  compositionupdate: 'compositionUpdate',
  focus: 'focus',
  blur: 'blur',
  select: 'select'
};
exports.ElementEvents = ElementEvents;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/RouteEvents.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetValue = Phaser.Utils.Objects.GetValue;
var RouteEvents = function (gameObject, element, elementEvents, config) {
  var preventDefault = GetValue(config, 'preventDefault', false);
  var preTest = GetValue(config, 'preTest');
  for (let elementEventName in elementEvents) {
    // Note: Don't use `var` here
    element.addEventListener(elementEventName, function (e) {
      if (!preTest || preTest(gameObject, elementEventName)) {
        gameObject.emit(elementEvents[elementEventName], gameObject, e);
      }
      if (preventDefault) {
        e.preventDefault();
      }
    });
  }
};
var _default = RouteEvents;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/inputtext/InputText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Resize = _interopRequireDefault(require("../utils/Resize.js"));
var _InputTextProperties = require("./InputTextProperties.js");
var _SetProperties = _interopRequireDefault(require("../utils/SetProperties.js"));
var _RouteEvents = _interopRequireDefault(require("../utils/RouteEvents.js"));
var _StopPropagationTouchEvents = _interopRequireDefault(require("../utils/StopPropagationTouchEvents.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DOMElement = Phaser.GameObjects.DOMElement;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class InputText extends DOMElement {
  constructor(scene, x, y, width, height, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      width = GetValue(config, 'width', 0);
      height = GetValue(config, 'height', 0);
    } else if (IsPlainObject(width)) {
      config = width;
      width = GetValue(config, 'width', 0);
      height = GetValue(config, 'height', 0);
    }
    if (config === undefined) {
      config = {};
    }
    var element;
    var textType = GetValue(config, 'type', 'text');
    if (textType === 'textarea') {
      element = document.createElement('textarea');
      element.style.resize = 'none';
    } else {
      element = document.createElement('input');
      element.type = textType;
    }
    (0, _SetProperties.default)(_InputTextProperties.ElementProperties, config, element);
    var style = GetValue(config, 'style', undefined);
    style = (0, _SetProperties.default)(_InputTextProperties.StyleProperties, config, style);
    // Apply other style properties
    var elementStyle = element.style;
    for (var key in config) {
      if (key in _InputTextProperties.ElementProperties || key in _InputTextProperties.StyleProperties) {
        continue;
      } else if (key in elementStyle) {
        style[key] = config[key];
      }
    }
    style['box-sizing'] = 'border-box';
    super(scene, x, y, element, style);
    this.type = 'rexInputText';
    this.resize(width, height);

    // Apply events
    (0, _RouteEvents.default)(this, element, _InputTextProperties.ElementEvents);

    // Don't propagate touch/mouse events to parent(game canvas)
    (0, _StopPropagationTouchEvents.default)(element);
    if (GetValue(config, 'selectAll', false)) {
      this.selectAll();
    }
    this._isFocused = false;
    this.on('focus', function () {
      this._isFocused = true;
    }, this).on('blur', function () {
      this._isFocused = false;
    }, this);
  }
  get text() {
    return this.node.value;
  }
  set text(value) {
    this.node.value = value;
  }
  setText(value) {
    // Override
    this.text = value;
    return this;
  }
  get maxLength() {
    return this.node.maxLength;
  }
  set maxLength(value) {
    this.node.maxLength = value;
  }
  setMaxLength(value) {
    this.maxLength = value;
    return this;
  }
  get minLength() {
    return this.node.minLength;
  }
  set minLength(value) {
    this.node.minLength = value;
  }
  setMinLength(value) {
    this.minLength = value;
    return this;
  }
  get placeholder() {
    return this.node.placeholder;
  }
  set placeholder(value) {
    this.node.placeholder = value;
  }
  setPlaceholder(value) {
    this.placeholder = value;
    return this;
  }
  selectText(selectionStart, selectionEnd) {
    if (selectionStart === undefined) {
      this.node.select();
    } else {
      this.node.setSelectionRange(selectionStart, selectionEnd);
    }
    return this;
  }
  selectAll() {
    this.selectText();
    return this;
  }
  get selectionStart() {
    return this.node.selectionStart;
  }
  get selectionEnd() {
    return this.node.selectionEnd;
  }
  get selectedText() {
    var node = this.node;
    return node.value.substring(node.selectionStart, node.selectionEnd);
  }
  get cursorPosition() {
    return this.node.selectionStart;
  }
  set cursorPosition(value) {
    this.node.setSelectionRange(value, value);
  }
  setCursorPosition(value) {
    if (value === undefined) {
      value = this.text.length;
    } else if (value < 0) {
      value = this.text.length + value;
    }
    this.cursorPosition = value;
    return this;
  }
  get tooltip() {
    return this.node.title;
  }
  set tooltip(value) {
    this.node.title = value;
  }
  setTooltip(value) {
    this.tooltip = value;
    return this;
  }
  setTextChangedCallback(callback) {
    this.onTextChanged = callback;
    return this;
  }
  get readOnly() {
    return this.node.readOnly;
  }
  set readOnly(value) {
    this.node.readOnly = value;
  }
  setReadOnly(value) {
    if (value === undefined) {
      value = true;
    }
    this.readOnly = value;
    return this;
  }
  get spellCheck() {
    return this.node.spellcheck;
  }
  set spellCheck(value) {
    this.node.spellcheck = value;
  }
  setSpellCheck(value) {
    this.spellCheck = value;
    return this;
  }
  get fontColor() {
    return this.node.style.color;
  }
  set fontColor(value) {
    this.node.style.color = value;
  }
  setFontColor(value) {
    this.fontColor = value;
    return this;
  }
  setStyle(key, value) {
    this.node.style[key] = value;
    return this;
  }
  getStyle(key) {
    return this.node.style[key];
  }
  scrollToBottom() {
    this.node.scrollTop = this.node.scrollHeight;
    return this;
  }
  setEnabled(enabled) {
    if (enabled === undefined) {
      enabled = true;
    }
    this.node.disabled = !enabled;
    return this;
  }
  setBlur() {
    this.node.blur();
    return this;
  }
  setFocus() {
    this.node.focus();
    return this;
  }
  get isFocused() {
    return this._isFocused;
  }
}
var methods = {
  resize: _Resize.default
};
Object.assign(InputText.prototype, methods);
var _default = InputText;
exports.default = _default;
},{"../utils/Resize.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/Resize.js","./InputTextProperties.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/inputtext/InputTextProperties.js","../utils/SetProperties.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/SetProperties.js","../utils/RouteEvents.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/RouteEvents.js","../utils/StopPropagationTouchEvents.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/StopPropagationTouchEvents.js"}],"node_modules/phaser3-rex-plugins/plugins/inputtext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputText = _interopRequireDefault(require("./gameobjects/dom/inputtext/InputText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _InputText.default;
exports.default = _default;
},{"./gameobjects/dom/inputtext/InputText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/inputtext/InputText.js"}],"node_modules/phaser3-rex-plugins/templates/ui/inputtext/InputText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _inputtext = _interopRequireDefault(require("../../../plugins/inputtext.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _inputtext.default;
exports.default = _default;
},{"../../../plugins/inputtext.js":"node_modules/phaser3-rex-plugins/plugins/inputtext.js"}],"node_modules/phaser3-rex-plugins/templates/ui/inputtext/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputText = _interopRequireDefault(require("./InputText.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('inputText', function (config) {
  var gameObject = new _InputText.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.InputText', _InputText.default);
var _default = _InputText.default;
exports.default = _default;
},{"./InputText.js":"node_modules/phaser3-rex-plugins/templates/ui/inputtext/InputText.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/filechooser/CreateFileInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateFileInput = function (config) {
  var fileInput = document.createElement('input');
  fileInput.type = 'file';
  var accept = GetValue(config, 'accept', '');
  var multiple = GetValue(config, 'multiple', false);
  fileInput.setAttribute('accept', accept);
  if (multiple) {
    fileInput.setAttribute('multiple', '');
  } else {
    fileInput.removeAttribute('multiple');
  }
  return fileInput;
};
var _default = CreateFileInput;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/promise/Delay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Delay = function (time, result) {
  if (time === undefined) {
    time = 0;
  }
  return new Promise(function (resolve, reject) {
    setTimeout(function () {
      resolve(result);
    }, time);
  });
};
var _default = Delay;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filechooser/ClickPromise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetGame = _interopRequireDefault(require("../../../utils/system/GetGame.js"));
var _WaitEvent = require("../../../utils/promise/WaitEvent.js");
var _Delay = _interopRequireDefault(require("../../../utils/promise/Delay.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ClickPromise = function ({
  game,
  fileInput,
  closeDelay
}) {
  return (0, _WaitEvent.WaitEvent)((0, _GetGame.default)(game).events, 'focus').then(function () {
    return (0, _Delay.default)(closeDelay);
  }).then(function () {
    var result = {
      files: fileInput.files
    };
    return Promise.resolve(result);
  });
};
var _default = ClickPromise;
exports.default = _default;
},{"../../../utils/system/GetGame.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetGame.js","../../../utils/promise/WaitEvent.js":"node_modules/phaser3-rex-plugins/plugins/utils/promise/WaitEvent.js","../../../utils/promise/Delay.js":"node_modules/phaser3-rex-plugins/plugins/utils/promise/Delay.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/filechooser/Open.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateFileInput = _interopRequireDefault(require("./CreateFileInput.js"));
var _ClickPromise = _interopRequireDefault(require("../../gameobjects/dom/filechooser/ClickPromise.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// Note: Not working in iOS9+

const GetValue = Phaser.Utils.Objects.GetValue;
var Open = function (game, config) {
  // game: game, scene, or game object
  var closeDelay = GetValue(config, 'closeDelay', 200);
  var fileInput = (0, _CreateFileInput.default)(config);
  fileInput.click();
  return (0, _ClickPromise.default)({
    game,
    fileInput,
    closeDelay
  }).then(function (result) {
    fileInput.remove();
    return Promise.resolve(result);
  });
};
var _default = Open;
exports.default = _default;
},{"./CreateFileInput.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/filechooser/CreateFileInput.js","../../gameobjects/dom/filechooser/ClickPromise.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filechooser/ClickPromise.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/SyncTo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SyncTo = function (gameObject) {
  this.setOrigin(gameObject.originX, gameObject.originY);
  this.setPosition(gameObject.x, gameObject.y);
  this.resize(gameObject.displayWidth, gameObject.displayHeight);
  return this;
};
var _default = SyncTo;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/system/GetCache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetGame = _interopRequireDefault(require("./GetGame.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetCache = function (game, loaderType, cacheType) {
  if (cacheType === undefined) {
    switch (loaderType) {
      case 'image':
      case 'svg':
        cacheType = 'textures';
        break;
      case 'animation':
        cacheType = 'json';
        break;
      case 'tilemapTiledJSON':
      case 'tilemapCSV':
        cacheType = 'tilemap';
        break;
      case 'glsl':
        cacheType = 'shader';
        break;
      default:
        cacheType = loaderType;
        break;
    }
  }
  game = (0, _GetGame.default)(game);
  var cache;
  if (cacheType === 'textures') {
    cache = game.textures;
  } else {
    cache = game.cache[cacheType];
  }
  return cache;
};
var _default = GetCache;
exports.default = _default;
},{"./GetGame.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetGame.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/loader/FileObjectToCache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetCache = _interopRequireDefault(require("../system/GetCache.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var FileObjectToCache = function (scene, file, loaderType, key, cacheType, onComplete) {
  var cache = (0, _GetCache.default)(scene, loaderType, cacheType);
  if (cache.exists(key)) {
    cache.remove(key);
  }
  var url = window.URL.createObjectURL(file);
  var loader = scene.load;
  if (onComplete) {
    loader.once(`filecomplete-${loaderType}-${key}`, function (key, type, data) {
      onComplete(data);
    });
  }
  loader[loaderType](key, url);
  loader.start();
};
var _default = FileObjectToCache;
exports.default = _default;
},{"../system/GetCache.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetCache.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/LoadFileMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FileObjectToCache = _interopRequireDefault(require("../../../utils/loader/FileObjectToCache"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var LoadFile = function (file, loaderType, key, cacheType, onComplete) {
  var scene = this.scene;
  (0, _FileObjectToCache.default)(scene, file, loaderType, key, cacheType, onComplete);
  return this;
};
var LoadFilePromise = function (file, loaderType, key, cacheType) {
  var scene = this.scene;
  return new Promise(function (resolve, reject) {
    var onComplete = function (data) {
      resolve(data);
    };
    (0, _FileObjectToCache.default)(scene, file, loaderType, key, cacheType, onComplete);
  });
};
var _default = {
  loadFile: LoadFile,
  loadFilePromise: LoadFilePromise
};
exports.default = _default;
},{"../../../utils/loader/FileObjectToCache":"node_modules/phaser3-rex-plugins/plugins/utils/loader/FileObjectToCache.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filechooser/FileChooser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Resize = _interopRequireDefault(require("../utils/Resize.js"));
var _SyncTo = _interopRequireDefault(require("../utils/SyncTo.js"));
var _LoadFileMethods = _interopRequireDefault(require("../utils/LoadFileMethods.js"));
var _ClickPromise = _interopRequireDefault(require("./ClickPromise.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DOMElement = Phaser.GameObjects.DOMElement;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class FileChooser extends DOMElement {
  constructor(scene, x, y, width, height, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      width = GetValue(config, 'width', 0);
      height = GetValue(config, 'height', 0);
    } else if (IsPlainObject(width)) {
      config = width;
      width = GetValue(config, 'width', 0);
      height = GetValue(config, 'height', 0);
    }

    // Create a hidden file input
    var inputElement = document.createElement('input');
    inputElement.type = 'file';
    var inputStyle = inputElement.style;
    inputStyle.display = 'none';

    // Create a label parent
    var labelElement = document.createElement('label');
    labelElement.appendChild(inputElement);
    var style = GetValue(config, 'style', undefined);
    super(scene, x, y, labelElement, style);
    this.type = 'rexFileChooser';
    this.resetFromJSON(config);
    this.resize(width, height);

    // Register events
    var self = this;
    inputElement.onchange = function () {
      self.emit('change', self);
    };
    this.setCloseDelay(GetValue(config, 'closeDelay', 200));
    inputElement.onclick = function () {
      (0, _ClickPromise.default)({
        game: scene,
        fileInput: inputElement,
        closeDelay: self.closeDelay
      }).then(function () {
        self.emit('select', self);
      });
    };
  }
  resetFromJSON(config) {
    this.setAccept(GetValue(config, 'accept', ''));
    this.setMultiple(GetValue(config, 'multiple', false));
    return this;
  }
  setAccept(accept) {
    if (accept === undefined) {
      accept = '';
    }
    this.fileInput.setAttribute('accept', accept);
    return this;
  }
  setMultiple(enabled) {
    if (enabled === undefined) {
      enabled = true;
    }
    if (enabled) {
      this.fileInput.setAttribute('multiple', '');
    } else {
      this.fileInput.removeAttribute('multiple');
    }
    return this;
  }
  setCloseDelay(delay) {
    if (delay === undefined) {
      delay = 200;
    }
    this.closeDelay = delay;
    return this;
  }
  get fileInput() {
    return this.node.children[0];
  }
  open() {
    // Only work under any touch event
    this.fileInput.click();
    return this;
  }
  get files() {
    return this.fileInput.files;
  }
}
var methods = {
  resize: _Resize.default,
  syncTo: _SyncTo.default
};
Object.assign(FileChooser.prototype, methods, _LoadFileMethods.default);
var _default = FileChooser;
exports.default = _default;
},{"../utils/Resize.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/Resize.js","../utils/SyncTo.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/SyncTo.js","../utils/LoadFileMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/LoadFileMethods.js","./ClickPromise.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filechooser/ClickPromise.js"}],"node_modules/phaser3-rex-plugins/plugins/filechooser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "FileChooser", {
  enumerable: true,
  get: function () {
    return _FileChooser.default;
  }
});
Object.defineProperty(exports, "OpenFileChooser", {
  enumerable: true,
  get: function () {
    return _Open.default;
  }
});
var _Open = _interopRequireDefault(require("./behaviors/filechooser/Open.js"));
var _FileChooser = _interopRequireDefault(require("./gameobjects/dom/filechooser/FileChooser.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./behaviors/filechooser/Open.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/filechooser/Open.js","./gameobjects/dom/filechooser/FileChooser.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filechooser/FileChooser.js"}],"node_modules/phaser3-rex-plugins/templates/ui/filechooser/FileChooser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "FileChooser", {
  enumerable: true,
  get: function () {
    return _filechooser.FileChooser;
  }
});
Object.defineProperty(exports, "OpenFileChooser", {
  enumerable: true,
  get: function () {
    return _filechooser.OpenFileChooser;
  }
});
var _filechooser = require("../../../plugins/filechooser.js");
},{"../../../plugins/filechooser.js":"node_modules/phaser3-rex-plugins/plugins/filechooser.js"}],"node_modules/phaser3-rex-plugins/templates/ui/filechooser/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FileChooser = require("./FileChooser.js");
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('fileChooser', function (config) {
  var gameObject = new _FileChooser.FileChooser(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.FileChooser', _FileChooser.FileChooser);
var _default = _FileChooser.FileChooser;
exports.default = _default;
},{"./FileChooser.js":"node_modules/phaser3-rex-plugins/templates/ui/filechooser/FileChooser.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filedropzone/methods/DropEnableMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setDropEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.dropEnable = enable;
    return this;
  },
  toggleDropEnable() {
    this.dropEnable = !this.dropEnable;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filedropzone/methods/FilterMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  addFilter(name, callback) {
    if (!this.filters) {
      this.filters = {};
    }
    this.filters[name] = callback;
    return this;
  },
  addFilters(filters) {
    if (!this.filters) {
      this.filters = {};
    }
    for (var name in filters) {
      this.filters[name] = filters[name];
    }
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filedropzone/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Resize = _interopRequireDefault(require("../../utils/Resize.js"));
var _SyncTo = _interopRequireDefault(require("../../utils/SyncTo.js"));
var _LoadFileMethods = _interopRequireDefault(require("../../utils/LoadFileMethods.js"));
var _DropEnableMethods = _interopRequireDefault(require("./DropEnableMethods.js"));
var _FilterMethods = _interopRequireDefault(require("./FilterMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {
  resize: _Resize.default,
  syncTo: _SyncTo.default
};
Object.assign(Methods, _DropEnableMethods.default, _FilterMethods.default, _LoadFileMethods.default);
var _default = Methods;
exports.default = _default;
},{"../../utils/Resize.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/Resize.js","../../utils/SyncTo.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/SyncTo.js","../../utils/LoadFileMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/LoadFileMethods.js","./DropEnableMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filedropzone/methods/DropEnableMethods.js","./FilterMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filedropzone/methods/FilterMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filedropzone/FileDropZoneProperties.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DragDropEvents = void 0;
const DragDropEvents = {
  dragenter: 'dragenter',
  dragleave: 'dragleave',
  dragover: 'dragover',
  drop: 'drop'
};
exports.DragDropEvents = DragDropEvents;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filedropzone/FileDropZone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
var _FileDropZoneProperties = require("./FileDropZoneProperties.js");
var _RouteEvents = _interopRequireDefault(require("../utils/RouteEvents.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DOMElement = Phaser.GameObjects.DOMElement;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class FileDropZone extends DOMElement {
  constructor(scene, x, y, width, height, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      width = GetValue(config, 'width', 0);
      height = GetValue(config, 'height', 0);
    } else if (IsPlainObject(width)) {
      config = width;
      width = GetValue(config, 'width', 0);
      height = GetValue(config, 'height', 0);
    }
    if (config === undefined) {
      config = {};
    }
    var element = document.createElement('div');
    var style = GetValue(config, 'style', undefined);
    super(scene, x, y, element, style);
    this.type = 'rexFileDropZone';
    this.resize(width, height);
    this._files = [];
    this.setDropEnable(GetValue(config, 'dropEnable', true));
    var filters = GetValue(config, 'filters');
    if (filters) {
      this.addFilters(filters);
    }

    // Apply events
    (0, _RouteEvents.default)(this, element, _FileDropZoneProperties.DragDropEvents, {
      preventDefault: true,
      preTest(gameObject) {
        return gameObject.dropEnable;
      }
    });
    this.on('drop', function (gameObject, e) {
      this._files = e.dataTransfer.files;
      if (this._files && this.filters) {
        for (var filterType in this.filters) {
          var filterCallback = this.filters[filterType];
          var filteredFiles = [];
          for (var i = 0, cnt = this._files.length; i < cnt; i++) {
            var file = this._files[i];
            if (filterCallback(file)) {
              filteredFiles.push(file);
            }
          }
          if (filteredFiles.length > 0) {
            this.emit(`drop.${filterType}`, filteredFiles);
          }
        }
      }
    }, this);
  }
  get files() {
    return this._files;
  }
}
Object.assign(FileDropZone.prototype, _Methods.default);
var _default = FileDropZone;
exports.default = _default;
},{"./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filedropzone/methods/Methods.js","./FileDropZoneProperties.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filedropzone/FileDropZoneProperties.js","../utils/RouteEvents.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/RouteEvents.js"}],"node_modules/phaser3-rex-plugins/plugins/filedropzone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FileDropZone = _interopRequireDefault(require("./gameobjects/dom/filedropzone/FileDropZone.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _FileDropZone.default;
exports.default = _default;
},{"./gameobjects/dom/filedropzone/FileDropZone.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/filedropzone/FileDropZone.js"}],"node_modules/phaser3-rex-plugins/templates/ui/filedropzone/FileDropZone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _filedropzone = _interopRequireDefault(require("../../../plugins/filedropzone.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _filedropzone.default;
exports.default = _default;
},{"../../../plugins/filedropzone.js":"node_modules/phaser3-rex-plugins/plugins/filedropzone.js"}],"node_modules/phaser3-rex-plugins/templates/ui/filedropzone/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FileDropZone = _interopRequireDefault(require("./FileDropZone.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('fileDropZone', function (config) {
  var gameObject = new _FileDropZone.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.FileDropZone', _FileDropZone.default);
var _default = _FileDropZone.default;
exports.default = _default;
},{"./FileDropZone.js":"node_modules/phaser3-rex-plugins/templates/ui/filedropzone/FileDropZone.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/chart/SetChart.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetChart = function (config) {
  if (!window.Chart) {
    var msg = `Can not find chartjs! Load chartjs in preload stage.
scene.load.script('chartjs', 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/Chart.min.js');`;
    console.error(msg);
    return this;
  }
  if (this.chart) {
    this.chart.destroy();
  }
  this.chart = new Chart(this.context, FillConfig(this, config));
  return this;
};
var FillConfig = function (canvas, config) {
  // Get options
  if (config === undefined) {
    config = {};
  }
  if (config.options === undefined) {
    config.options = {};
  }
  var options = config.options;

  // Fill options
  options.responsive = false;
  options.maintainAspectRatio = false;
  if (!options.hasOwnProperty('devicePixelRatio')) {
    options.devicePixelRatio = 1;
  }

  // Get animation config
  var noAnimation = false;
  if (options.animation === undefined) {
    options.animation = {};
  } else if (options.animation === false) {
    noAnimation = true;
    options.animation = {};
  }
  var animationConfig = options.animation;

  // Fill animation config
  if (noAnimation) {
    animationConfig.duration = 0;
  }
  var onProgress = animationConfig.onProgress;
  animationConfig.onProgress = function (animation) {
    if (onProgress) {
      onProgress(animation);
    }
    canvas.needRedraw();
  };
  var onComplete = animationConfig.onComplete;
  animationConfig.onComplete = function (animation) {
    if (onComplete) {
      onComplete(animation);
    }
    canvas.needRedraw();
  };
  return config;
};
var _default = SetChart;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/chart/GetChartDataset.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChartDataset = function (datasetIndex) {
  if (this.chart === undefined) {
    return undefined;
  }
  if (typeof datasetIndex === 'string') {
    var datasets = this.chart.data.datasets,
      dataset;
    for (var i = 0, cnt = datasets.length; i < cnt; i++) {
      dataset = datasets[i];
      if (dataset.label === datasetIndex) {
        return dataset;
      }
    }
  } else {
    return this.chart.data.datasets[datasetIndex];
  }
  return undefined;
};
var _default = GetChartDataset;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/chart/GetChartData.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChartData = function (datasetIndex, dataIndex) {
  var dataset = this.getChartDataset(datasetIndex);
  if (dataset === undefined) {
    return undefined;
  }
  if (typeof dataIndex === 'string') {
    var labels = this.chart.data.labels;
    dataIndex = labels.indexOf(dataIndex);
    if (dataIndex === -1) {
      return undefined;
    }
  }
  return dataset.data[dataIndex];
};
var _default = GetChartData;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/chart/SetChartData.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetChartData = function (datasetIndex, dataIndex, value) {
  if (this.chart === undefined) {
    return this;
  }
  var dataset = this.getChartDataset(datasetIndex);
  if (typeof dataIndex === 'string') {
    var labels = this.chart.data.labels;
    dataIndex = labels.indexOf(dataIndex);
    if (dataIndex === -1) {
      return this;
    }
  }
  dataset.data[dataIndex] = value;
  return this;
};
var _default = SetChartData;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/chart/UpdateChart.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var UpdateChart = function () {
  if (this.chart === undefined) {
    return this;
  }
  this.chart.update();
  return this;
};
var _default = UpdateChart;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/chart/Chart.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Canvas = _interopRequireDefault(require("../canvas/Canvas.js"));
var _SetChart = _interopRequireDefault(require("./SetChart.js"));
var _GetChartDataset = _interopRequireDefault(require("./GetChartDataset.js"));
var _GetChartData = _interopRequireDefault(require("./GetChartData.js"));
var _SetChartData = _interopRequireDefault(require("./SetChartData.js"));
var _UpdateChart = _interopRequireDefault(require("./UpdateChart.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// This plugin does not contain chart.js
// Load chart.js in preload stage -
// scene.load.script('chartjs', 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/Chart.min.js');

class Chart extends _Canvas.default {
  constructor(scene, x, y, width, height, config) {
    super(scene, x, y, width, height);
    this.type = 'rexChart';
    this.chart = undefined;
    if (config !== undefined) {
      this.setChart(config);
    }
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    if (this.chart) {
      this.chart.destroy();
      this.chart = undefined;
    }
    super.destroy(fromScene);
  }
  resize(width, height) {
    if (width === this.width && height === this.height) {
      return this;
    }
    super.resize(width, height);
    if (this.chart) {
      var chart = this.chart;
      chart.height = this.canvas.height;
      chart.width = this.canvas.width;
      chart.aspectRatio = chart.height ? chart.width / chart.height : null;
      chart.update();
    }
    return this;
  }
}
var methods = {
  setChart: _SetChart.default,
  getChartDataset: _GetChartDataset.default,
  getChartData: _GetChartData.default,
  setChartData: _SetChartData.default,
  updateChart: _UpdateChart.default
};
Object.assign(Chart.prototype, methods);
var _default = Chart;
exports.default = _default;
},{"../canvas/Canvas.js":"node_modules/phaser3-rex-plugins/templates/ui/canvas/Canvas.js","./SetChart.js":"node_modules/phaser3-rex-plugins/templates/ui/chart/SetChart.js","./GetChartDataset.js":"node_modules/phaser3-rex-plugins/templates/ui/chart/GetChartDataset.js","./GetChartData.js":"node_modules/phaser3-rex-plugins/templates/ui/chart/GetChartData.js","./SetChartData.js":"node_modules/phaser3-rex-plugins/templates/ui/chart/SetChartData.js","./UpdateChart.js":"node_modules/phaser3-rex-plugins/templates/ui/chart/UpdateChart.js"}],"node_modules/phaser3-rex-plugins/templates/ui/chart/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Chart = _interopRequireDefault(require("./Chart.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('chart', function (x, y, width, height, config) {
  var gameObject = new _Chart.default(this.scene, x, y, width, height, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Chart', _Chart.default);
var _default = _Chart.default;
exports.default = _default;
},{"./Chart.js":"node_modules/phaser3-rex-plugins/templates/ui/chart/Chart.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/container/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Container = _interopRequireDefault(require("./Container.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('container', function (x, y, width, height, children) {
  var gameObject = new _Container.default(this.scene, x, y, width, height, children);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Container', _Container.default);
var _default = _Container.default;
exports.default = _default;
},{"./Container.js":"node_modules/phaser3-rex-plugins/templates/ui/container/Container.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetChildrenWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildrenWidth = function (minimumMode) {
  if (this.rexSizer.hidden) {
    return 0;
  }
  if (minimumMode === undefined) {
    minimumMode = true;
  }
  var result = 0;
  var children = this.sizerChildren;
  var child, padding, childWidth;
  if (this.orientation === 0) {
    // x
    // Get summation of minimum width
    var itemSpace = this.space.item;
    var isFirstChild = true;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      child = children[i];
      if (child.rexSizer.hidden) {
        continue;
      }
      if (child.rexSizer.proportion === 0 || minimumMode) {
        childWidth = this.getChildWidth(child);
      } else {
        childWidth = 0;
      }
      padding = child.rexSizer.padding;
      childWidth += padding.left + padding.right;
      if (isFirstChild) {
        isFirstChild = false;
      } else {
        childWidth += itemSpace;
      }
      result += childWidth;
    }
  } else {
    // Get maximun width
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      child = children[i];
      if (!child.hasOwnProperty('rexSizer')) {
        continue;
      }
      if (child.rexSizer.hidden) {
        continue;
      }
      padding = child.rexSizer.padding;
      childWidth = this.getChildWidth(child) + padding.left + padding.right;
      result = Math.max(childWidth, result);
    }
  }
  return result + this.space.left + this.space.right;
};
var _default = GetChildrenWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetChildrenHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildrenHeight = function (minimumMode) {
  if (this.rexSizer.hidden) {
    return 0;
  }
  if (minimumMode === undefined) {
    minimumMode = true;
  }
  var result = 0;
  var children = this.sizerChildren;
  var child, padding, childHeight;
  if (this.orientation === 0) {
    // x
    // Get maximun height
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      child = children[i];
      if (child.rexSizer.hidden) {
        continue;
      }
      padding = child.rexSizer.padding;
      childHeight = this.getChildHeight(child) + padding.top + padding.bottom;
      result = Math.max(childHeight, result);
    }
  } else {
    // Get summation of minimum height
    var itemSpace = this.space.item;
    var isFirstChild = true;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      child = children[i];
      if (!child.hasOwnProperty('rexSizer')) {
        continue;
      }
      if (child.rexSizer.hidden) {
        continue;
      }
      if (child.rexSizer.proportion === 0 || minimumMode) {
        childHeight = this.getChildHeight(child);
      } else {
        childHeight = 0;
      }
      padding = child.rexSizer.padding;
      childHeight += padding.top + padding.bottom;
      if (isFirstChild) {
        isFirstChild = false;
      } else {
        childHeight += itemSpace;
      }
      result += childHeight;
    }
  }
  return result + this.space.top + this.space.bottom;
};
var _default = GetChildrenHeight;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetExpandedChildWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetExpandedChildWidth = function (child, parentWidth) {
  if (parentWidth === undefined) {
    parentWidth = this.width;
  }
  var childWidth;
  var childConfig = child.rexSizer;
  var padding = childConfig.padding;
  if (this.orientation === 0) {
    // x
    if (childConfig.proportion > 0 && this.proportionLength > 0) {
      childWidth = childConfig.proportion * this.proportionLength;
    }
  } else {
    // y
    if (childConfig.expand) {
      var innerWidth = parentWidth - this.space.left - this.space.right;
      childWidth = innerWidth - padding.left - padding.right;
    }
  }
  return childWidth;
};
var _default = GetExpandedChildWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetExpandedChildHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetExpandedChildHeight = function (child, parentHeight) {
  if (parentHeight === undefined) {
    parentHeight = this.height;
  }
  var childHeight;
  var childConfig = child.rexSizer;
  var padding = childConfig.padding;
  if (this.orientation === 0) {
    // x
    if (childConfig.expand) {
      var innerHeight = parentHeight - this.space.top - this.space.bottom;
      childHeight = innerHeight - padding.top - padding.bottom;
    }
  } else {
    // y
    if (childConfig.proportion > 0 && this.proportionLength > 0) {
      childHeight = childConfig.proportion * this.proportionLength;
    }
  }
  return childHeight;
};
var _default = GetExpandedChildHeight;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetChildrenSizers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildrenSizers = function (out) {
  if (out === undefined) {
    out = [];
  }
  var children = this.sizerChildren,
    child;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    child = children[i];
    if (child.isRexSizer) {
      out.push(child);
    }
  }
  return out;
};
var _default = GetChildrenSizers;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/PreLayout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PreLayout = _interopRequireDefault(require("../basesizer/PreLayout.js"));
var _ResizeGameObject = _interopRequireDefault(require("../../../plugins/utils/size/ResizeGameObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PreLayout = function () {
  // Resize child to 1x1 for ratio-fit 
  this.hasRatioFitChild = false;
  var children = this.sizerChildren;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (child.rexSizer.hidden) {
      continue;
    }
    if (!child.rexSizer.fitRatio) {
      continue;
    }
    (0, _ResizeGameObject.default)(child, 1, 1);
    this.hasRatioFitChild = true;
  }
  this._childrenProportion = undefined;
  this.proportionLength = undefined;
  _PreLayout.default.call(this);
  return this;
};
var _default = PreLayout;
exports.default = _default;
},{"../basesizer/PreLayout.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PreLayout.js","../../../plugins/utils/size/ResizeGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/ResizeGameObject.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/PostResolveSize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResizeGameObject = _interopRequireDefault(require("../../../plugins/utils/size/ResizeGameObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PostResolveSize = function (width, height) {
  if (this.hasRatioFitChild) {
    // Resize child for ratio-fit 
    var innerHeight, innerWidth;
    if (this.orientation === 0) {
      innerHeight = height - this.getInnerPadding('top') - this.getInnerPadding('bottom');
    } else {
      innerWidth = width - this.getInnerPadding('left') - this.getInnerPadding('right');
    }
    var children = this.sizerChildren,
      childWidth,
      childHeight;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      var child = children[i];
      if (child.rexSizer.hidden) {
        continue;
      }
      var fitRatio = child.rexSizer.fitRatio;
      if (!fitRatio) {
        continue;
      }
      if (this.orientation === 0) {
        childHeight = innerHeight - this.getChildOuterPadding(child, 'top') - this.getChildOuterPadding(child, 'bottom');
        childWidth = childHeight * fitRatio;
      } else {
        childWidth = innerHeight - this.getChildOuterPadding(child, 'top') - this.getChildOuterPadding(child, 'bottom');
        childHeight = childWidth / fitRatio;
      }
      (0, _ResizeGameObject.default)(child, childWidth, childHeight);
      if (child.isRexSizer) {
        child.setMinSize(childWidth, childHeight);
      }
    }
    this.proportionLength = undefined;
    this._childrenWidth = undefined;
    this.resolveWidth(width, true);
  }
};
var _default = PostResolveSize;
exports.default = _default;
},{"../../../plugins/utils/size/ResizeGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/ResizeGameObject.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/LayoutChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResizeGameObject = _interopRequireDefault(require("../../../plugins/utils/size/ResizeGameObject.js"));
var _PreLayoutChild = _interopRequireDefault(require("../basesizer/utils/PreLayoutChild.js"));
var _LayoutChild = _interopRequireDefault(require("../basesizer/utils/LayoutChild.js"));
var _GetDisplaySize = require("../../../plugins/utils/size/GetDisplaySize.js");
var _CheckSize = _interopRequireDefault(require("../basesizer/utils/CheckSize.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Wrap = Phaser.Math.Wrap;
var LayoutChildren = function () {
  var children = this.sizerChildren;
  var child, childConfig, padding;
  var startX = this.innerLeft,
    startY = this.innerTop;
  var innerWidth = this.innerWidth;
  var innerHeight = this.innerHeight;
  var itemX = startX,
    itemY = startY;
  var x, y, width, height; // Align zone
  var childWidth, childHeight;
  var childIndex,
    startChildIndex = this.startChildIndex;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    if (startChildIndex === 0) {
      childIndex = i;
    } else {
      childIndex = Wrap(i + startChildIndex, 0, cnt);
    }
    if (this.rtl) {
      childIndex = cnt - childIndex - 1;
    }
    child = children[childIndex];
    if (child.rexSizer.hidden) {
      continue;
    }
    childConfig = child.rexSizer;
    padding = childConfig.padding;
    _PreLayoutChild.default.call(this, child);

    // Set size
    if (child.isRexSpace) {
      childWidth = 0;
      childHeight = 0;
    } else {
      childWidth = this.getExpandedChildWidth(child);
      childHeight = this.getExpandedChildHeight(child);
    }
    if (child.isRexSizer) {
      child.runLayout(this, childWidth, childHeight);
      (0, _CheckSize.default)(child, this);
    } else {
      (0, _ResizeGameObject.default)(child, childWidth, childHeight);
    }
    if (childWidth === undefined) {
      childWidth = (0, _GetDisplaySize.GetDisplayWidth)(child);
    }
    if (childHeight === undefined) {
      childHeight = (0, _GetDisplaySize.GetDisplayHeight)(child);
    }

    // Set position
    if (this.orientation === 0) {
      // x
      x = itemX + padding.left;
      if (childConfig.proportion === 0 || this.proportionLength === 0) {
        width = childWidth;
      } else {
        width = childConfig.proportion * this.proportionLength;
      }
      y = itemY + padding.top;
      height = innerHeight - padding.top - padding.bottom;
    } else {
      // y
      x = itemX + padding.left;
      width = innerWidth - padding.left - padding.right;
      y = itemY + padding.top;
      if (childConfig.proportion === 0 || this.proportionLength === 0) {
        height = childHeight;
      } else {
        height = childConfig.proportion * this.proportionLength;
      }
    }
    _LayoutChild.default.call(this, child, x, y, width, height, childConfig.align);
    if (this.orientation === 0) {
      // x
      itemX += width + padding.left + padding.right + this.space.item;
    } else {
      // y
      itemY += height + padding.top + padding.bottom + this.space.item;
    }
  }
};
var _default = LayoutChildren;
exports.default = _default;
},{"../../../plugins/utils/size/ResizeGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/ResizeGameObject.js","../basesizer/utils/PreLayoutChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/PreLayoutChild.js","../basesizer/utils/LayoutChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/LayoutChild.js","../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js","../basesizer/utils/CheckSize.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/CheckSize.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/ResolveWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResolveWidth = _interopRequireDefault(require("../basesizer/ResolveWidth.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ResolveWidth = function (width) {
  var width = _ResolveWidth.default.call(this, width);

  // Calculate proportionLength
  if (this.proportionLength === undefined && this.orientation === 0) {
    var remainder = width - this.childrenWidth;
    if (remainder > 0) {
      remainder = width - this.getChildrenWidth(false);
      this.proportionLength = remainder / this.childrenProportion;
    } else {
      this.proportionLength = 0;
      if (remainder < 0) {
        // Warning
      }
    }
  }
  return width;
};
var _default = ResolveWidth;
exports.default = _default;
},{"../basesizer/ResolveWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ResolveWidth.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/ResolveHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResolveHeight = _interopRequireDefault(require("../basesizer/ResolveHeight.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ResolveHeight = function (height) {
  var height = _ResolveHeight.default.call(this, height);

  // Get proportionLength
  if (this.proportionLength === undefined && this.orientation === 1) {
    var remainder = height - this.childrenHeight;
    if (remainder > 0) {
      remainder = height - this.getChildrenHeight(false);
      this.proportionLength = remainder / this.childrenProportion;
    } else {
      this.proportionLength = 0;
      if (remainder < 0) {
        // Warning
      }
    }
  }
  return height;
};
var _default = ResolveHeight;
exports.default = _default;
},{"../basesizer/ResolveHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ResolveHeight.js"}],"node_modules/phaser3-rex-plugins/templates/ui/space/Space.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Zone = Phaser.GameObjects.Zone;
class Space extends Zone {
  constructor(scene) {
    super(scene, 0, 0, 1, 1);
    // Don't add Zone into scene
    this.isRexSpace = true;
  }
}
var _default = Space;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetNearestChildIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetNearestChildIndex = function (x, y) {
  var children = this.sizerChildren;
  if (children.length === 0) {
    return -1;
  }
  var nearestIndex = -1,
    minDistance = Infinity;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    var distance;
    if (this.orientation === 0) {
      // x
      distance = Math.abs(child.left - x);
    } else {
      distance = Math.abs(child.top - y);
    }
    if (minDistance > distance) {
      minDistance = distance;
      nearestIndex = i;
    }
  }

  // Check right bound of last child
  var child = children[children.length - 1];
  var distance;
  if (this.orientation === 0) {
    // x
    distance = Math.abs(child.right - x);
  } else {
    distance = Math.abs(child.bottom - y);
  }
  if (minDistance > distance) {
    minDistance = distance;
    nearestIndex = i + 1;
  }
  return nearestIndex;
};
var _default = GetNearestChildIndex;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/AddChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddChild = _interopRequireDefault(require("../basesizer/utils/AddChild.js"));
var _GetBoundsConfig = _interopRequireDefault(require("../utils/GetBoundsConfig.js"));
var _AlignConst = _interopRequireDefault(require("../utils/AlignConst.js"));
var _Space = _interopRequireDefault(require("../space/Space.js"));
var _GetDisplaySize = require("../../../plugins/utils/size/GetDisplaySize.js");
var _GetNearestChildIndex = _interopRequireDefault(require("./GetNearestChildIndex.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const ALIGN_CENTER = Phaser.Display.Align.CENTER;
const PROPORTIONMODE = {
  min: 0,
  full: -1
};
var Add = function (gameObject, proportion, align, paddingConfig, expand, childKey, index, minWidth, minHeight, fitRatio) {
  _AddChild.default.call(this, gameObject);
  var isRexSpace = gameObject.isRexSpace;
  var proportionType = typeof proportion;
  if (proportion === null) {
    return this;
  } else if (proportionType === 'number') {} else if (proportionType === 'string') {
    proportion = PROPORTIONMODE[proportion];
  } else if (IsPlainObject(proportion)) {
    var config = proportion;
    proportion = GetValue(config, 'proportion', undefined);
    align = GetValue(config, 'align', ALIGN_CENTER);
    paddingConfig = GetValue(config, 'padding', 0);
    expand = GetValue(config, 'expand', false);
    childKey = GetValue(config, 'key', undefined);
    index = GetValue(config, 'index', undefined);
    if (!gameObject.isRexSizer) {
      minWidth = GetValue(config, 'minWidth', undefined);
      minHeight = GetValue(config, 'minHeight', undefined);
    }
    fitRatio = GetValue(config, 'fitRatio', 0); // width/height
  }

  if (typeof align === 'string') {
    align = _AlignConst.default[align];
  }
  if (proportion === undefined) {
    proportion = isRexSpace ? 1 : 0;
  }
  if (align === undefined) {
    align = ALIGN_CENTER;
  }
  if (paddingConfig === undefined) {
    paddingConfig = 0;
  }
  if (expand === undefined) {
    expand = false;
  }
  if (minWidth === undefined) {
    if (isRexSpace) {
      minWidth = 0;
    } else if (!gameObject.isRexSizer) {
      minWidth = gameObject._minWidth;
    }
  }
  if (minHeight === undefined) {
    if (isRexSpace) {
      minHeight = 0;
    } else if (!gameObject.isRexSizer) {
      minHeight = gameObject._minHeight;
    }
  }
  if (fitRatio === undefined) {
    fitRatio = 0;
  }
  var config = this.getSizerConfig(gameObject);
  config.proportion = proportion;
  config.align = align;
  config.padding = (0, _GetBoundsConfig.default)(paddingConfig);
  config.expand = expand;
  config.fitRatio = proportion === 0 ? fitRatio : 0;
  if (index === undefined || index >= this.sizerChildren.length) {
    this.sizerChildren.push(gameObject);
  } else {
    this.sizerChildren.splice(index, 0, gameObject);
  }
  if (!gameObject.isRexSizer) {
    // Expand normal game object
    if (proportion > 0) {
      if (this.orientation === 0) {
        // x
        // minWidth is still undefined, uses current display width
        gameObject.minWidth = minWidth === undefined ? (0, _GetDisplaySize.GetDisplayWidth)(gameObject) : minWidth;
      } else {
        // minHeight is still undefined, uses current display height
        gameObject.minHeight = minHeight === undefined ? (0, _GetDisplaySize.GetDisplayHeight)(gameObject) : minHeight;
      }
    }
    if (expand) {
      if (this.orientation === 0) {
        // x
        // Might have minHeight value, or still undefined
        gameObject.minHeight = minHeight;
      } else {
        // Might have minWidth value, or still undefined
        gameObject.minWidth = minWidth;
      }
    }
  }
  if (childKey !== undefined) {
    this.addChildrenMap(childKey, gameObject);
  }
  return this;
};
var _default = {
  add: Add,
  // sizer.add could be override

  addSpace(proportion) {
    this.insertSpace(undefined, proportion);
    return this;
  },
  insertSpace(index, proportion) {
    if (proportion === undefined) {
      proportion = 1;
    }
    Add.call(this, new _Space.default(this.scene), {
      proportion: proportion,
      minWidth: 0,
      minHeight: 0,
      index: index
    });
    // No problem if sizer.add is override
    return this;
  },
  insert(index, gameObject, proportion, align, paddingConfig, expand, childKey, minSize) {
    if (IsPlainObject(proportion)) {
      proportion.index = index;
    }
    Add.call(this, gameObject, proportion, align, paddingConfig, expand, childKey, index, minSize);
    // No problem if sizer.add is override
    return this;
  },
  insertAtPosition(x, y, gameObject, proportion, align, paddingConfig, expand, childKey, minSize) {
    var index = _GetNearestChildIndex.default.call(this, x, y);
    if (index === -1) {
      index = undefined;
    }
    this.insert(index, gameObject, proportion, align, paddingConfig, expand, childKey, minSize);
    return this;
  }
};
exports.default = _default;
},{"../basesizer/utils/AddChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/AddChild.js","../utils/GetBoundsConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetBoundsConfig.js","../utils/AlignConst.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/AlignConst.js","../space/Space.js":"node_modules/phaser3-rex-plugins/templates/ui/space/Space.js","../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js","./GetNearestChildIndex.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetNearestChildIndex.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/RemoveChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RemoveChild = _interopRequireDefault(require("../basesizer/utils/RemoveChild.js"));
var _ClearChildren = _interopRequireDefault(require("../basesizer/utils/ClearChildren.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const RemoveItem = Phaser.Utils.Array.Remove;
var _default = {
  remove(gameObject, destroyChild) {
    if (this.getParentSizer(gameObject) !== this) {
      return this;
    }
    RemoveItem(this.sizerChildren, gameObject);
    _RemoveChild.default.call(this, gameObject, destroyChild);
    return this;
  },
  removeAll(destroyChild) {
    for (var i = this.sizerChildren.length - 1; i >= 0; i--) {
      this.remove(this.sizerChildren[i], destroyChild);
    }
    return this;
  },
  clear(destroyChild) {
    this.sizerChildren.length = 0;
    _ClearChildren.default.call(this, destroyChild);
    return this;
  }
};
exports.default = _default;
},{"../basesizer/utils/RemoveChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/RemoveChild.js","../basesizer/utils/ClearChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/ClearChildren.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/AlignMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AlignConst = _interopRequireDefault(require("../utils/AlignConst.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  getChildAlign(gameObject) {
    return this.getSizerConfig(gameObject).align;
  },
  setChildAlign(gameObject, align) {
    if (typeof align === 'string') {
      align = _AlignConst.default[align];
    }
    this.getSizerConfig(gameObject).align = align;
    return this;
  }
};
exports.default = _default;
},{"../utils/AlignConst.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/AlignConst.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/ProportionMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  getChildProportion(gameObject) {
    return this.getSizerConfig(gameObject).proportion;
  },
  setChildProportion(gameObject, proportion) {
    this.getSizerConfig(gameObject).proportion = proportion;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/ExpandMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  getChildExpand(gameObject) {
    return this.getSizerConfig(gameObject).expand;
  },
  setChildExpand(gameObject, expand) {
    this.getSizerConfig(gameObject).expand = expand;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetChildrenWidth = _interopRequireDefault(require("./GetChildrenWidth.js"));
var _GetChildrenHeight = _interopRequireDefault(require("./GetChildrenHeight.js"));
var _GetExpandedChildWidth = _interopRequireDefault(require("./GetExpandedChildWidth.js"));
var _GetExpandedChildHeight = _interopRequireDefault(require("./GetExpandedChildHeight.js"));
var _GetChildrenSizers = _interopRequireDefault(require("./GetChildrenSizers.js"));
var _PreLayout = _interopRequireDefault(require("./PreLayout.js"));
var _PostResolveSize = _interopRequireDefault(require("./PostResolveSize.js"));
var _LayoutChildren = _interopRequireDefault(require("./LayoutChildren.js"));
var _ResolveWidth = _interopRequireDefault(require("./ResolveWidth.js"));
var _ResolveHeight = _interopRequireDefault(require("./ResolveHeight.js"));
var _AddChildMethods = _interopRequireDefault(require("./AddChildMethods.js"));
var _RemoveChildMethods = _interopRequireDefault(require("./RemoveChildMethods.js"));
var _AlignMethods = _interopRequireDefault(require("./AlignMethods.js"));
var _ProportionMethods = _interopRequireDefault(require("./ProportionMethods.js"));
var _ExpandMethods = _interopRequireDefault(require("./ExpandMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  getChildrenWidth: _GetChildrenWidth.default,
  getChildrenHeight: _GetChildrenHeight.default,
  getExpandedChildWidth: _GetExpandedChildWidth.default,
  getExpandedChildHeight: _GetExpandedChildHeight.default,
  getChildrenSizers: _GetChildrenSizers.default,
  preLayout: _PreLayout.default,
  postResolveSize: _PostResolveSize.default,
  layoutChildren: _LayoutChildren.default,
  resolveWidth: _ResolveWidth.default,
  resolveHeight: _ResolveHeight.default
};
Object.assign(methods, _AddChildMethods.default, _RemoveChildMethods.default, _AlignMethods.default, _ProportionMethods.default, _ExpandMethods.default);
var _default = methods;
exports.default = _default;
},{"./GetChildrenWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetChildrenWidth.js","./GetChildrenHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetChildrenHeight.js","./GetExpandedChildWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetExpandedChildWidth.js","./GetExpandedChildHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetExpandedChildHeight.js","./GetChildrenSizers.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetChildrenSizers.js","./PreLayout.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/PreLayout.js","./PostResolveSize.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/PostResolveSize.js","./LayoutChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/LayoutChildren.js","./ResolveWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/ResolveWidth.js","./ResolveHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/ResolveHeight.js","./AddChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/AddChildMethods.js","./RemoveChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/RemoveChildMethods.js","./AlignMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/AlignMethods.js","./ProportionMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/ProportionMethods.js","./ExpandMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/ExpandMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetChildrenProportion.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildrenProportion = function () {
  var result = 0;
  var children = this.sizerChildren;
  var child, proportion;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    child = children[i];
    if (child.rexSizer.hidden) {
      continue;
    }
    proportion = child.rexSizer.proportion;
    if (proportion > 0) {
      result += proportion;
    }
  }
  return result;
};
var _default = GetChildrenProportion;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/GetOrientationMode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var OrientationMode = {
  x: 0,
  h: 0,
  horizontal: 0,
  'left-to-right': 0,
  y: 1,
  v: 1,
  vertical: 1,
  'top-to-bottom': 1
};
var GetOrientationMode = function (orientation) {
  if (typeof orientation === 'string') {
    orientation = OrientationMode[orientation];
  }
  return orientation;
};
var _default = GetOrientationMode;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseSizer = _interopRequireDefault(require("../basesizer/BaseSizer.js"));
var _Methods = _interopRequireDefault(require("./Methods.js"));
var _GetChildrenProportion = _interopRequireDefault(require("./GetChildrenProportion.js"));
var _GetOrientationMode = _interopRequireDefault(require("../utils/GetOrientationMode.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class Sizer extends _BaseSizer.default {
  constructor(scene, x, y, minWidth, minHeight, orientation, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      minWidth = GetValue(config, 'width', undefined);
      minHeight = GetValue(config, 'height', undefined);
      orientation = GetValue(config, 'orientation', 0);
    } else if (IsPlainObject(minWidth)) {
      config = minWidth;
      minWidth = GetValue(config, 'width', undefined);
      minHeight = GetValue(config, 'height', undefined);
      orientation = GetValue(config, 'orientation', 0);
    } else if (IsPlainObject(orientation)) {
      config = orientation;
      orientation = GetValue(config, 'orientation', 0);
    }
    if (orientation === undefined) {
      orientation = 0;
    }
    super(scene, x, y, minWidth, minHeight, config);
    this.type = 'rexSizer';
    this.sizerChildren = [];
    this.setOrientation(orientation);
    this.setItemSpacing(GetValue(config, 'space.item', 0));
    this.setStartChildIndex(GetValue(config, 'startChildIndex', 0));
    this.setRTL(GetValue(config, 'rtl', false));
    this.addChildrenMap('items', this.sizerChildren);
  }
  setOrientation(orientation) {
    this.orientation = (0, _GetOrientationMode.default)(orientation);
    return this;
  }
  setItemSpacing(space) {
    this.space.item = space;
    return this;
  }
  setStartChildIndex(index) {
    this.startChildIndex = index;
    return this;
  }
  setRTL(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.rtl = enable;
    return this;
  }
  get childrenProportion() {
    if (this._childrenProportion === undefined) {
      this._childrenProportion = _GetChildrenProportion.default.call(this);
    }
    return this._childrenProportion;
  }
}
Object.assign(Sizer.prototype, _Methods.default);
var _default = Sizer;
exports.default = _default;
},{"../basesizer/BaseSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/BaseSizer.js","./Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Methods.js","./GetChildrenProportion.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/GetChildrenProportion.js","../utils/GetOrientationMode.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetOrientationMode.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sizer/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("./Sizer.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('sizer', function (x, y, minWidth, minHeight, orientation, config) {
  var gameObject = new _Sizer.default(this.scene, x, y, minWidth, minHeight, orientation, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Sizer', _Sizer.default);
var _default = _Sizer.default;
exports.default = _default;
},{"./Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/math/Sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Sum = function () {
  return Array.prototype.reduce.call(arguments, Add, 0);
};
var Add = function (a, b) {
  return a + b;
};
var _default = Sum;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetChildrenWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sum = _interopRequireDefault(require("../../../plugins/utils/math/Sum.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetChildrenWidth = function (minimumMode) {
  if (this.rexSizer.hidden) {
    return 0;
  }
  if (minimumMode === undefined) {
    minimumMode = true;
  }
  var result = 0,
    columnWidth;
  var children = this.sizerChildren;
  var child, padding, childWidth, proportion;
  for (var i = 0; i < this.columnCount; i++) {
    proportion = this.columnProportions[i];
    columnWidth = 0;
    if (proportion === 0 || minimumMode) {
      for (var j = 0; j < this.rowCount; j++) {
        child = children[j * this.columnCount + i];
        if (!child) {
          continue;
        }
        if (child.rexSizer.hidden) {
          continue;
        }
        padding = child.rexSizer.padding;
        childWidth = this.getChildWidth(child) + padding.left + padding.right;
        columnWidth = Math.max(columnWidth, childWidth);
      }
      result += columnWidth;
    }
    // else,(proportion > 0) : columnWidth is 0
    this.columnWidth[i] = columnWidth;
  }
  var space = this.space;
  var indentLeft = Math.max(space.indentLeftOdd, space.indentLeftEven);
  return result + (0, _Sum.default)(space.left, indentLeft, ...space.column, space.right);
};
var _default = GetChildrenWidth;
exports.default = _default;
},{"../../../plugins/utils/math/Sum.js":"node_modules/phaser3-rex-plugins/plugins/utils/math/Sum.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetChildrenHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../../plugins/utils/size/GetDisplaySize.js");
var _Sum = _interopRequireDefault(require("../../../plugins/utils/math/Sum.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetChildrenHeight = function (minimumMode) {
  if (this.rexSizer.hidden) {
    return 0;
  }
  if (minimumMode === undefined) {
    minimumMode = true;
  }
  var result = 0,
    rowHeight;
  var children = this.sizerChildren;
  var child, padding, childHeight, proportion;
  for (var i = 0; i < this.rowCount; i++) {
    proportion = this.rowProportions[i];
    rowHeight = 0;
    if (proportion === 0 || minimumMode) {
      for (var j = 0; j < this.columnCount; j++) {
        child = children[i * this.columnCount + j];
        if (!child) {
          continue;
        }
        if (child.rexSizer.hidden) {
          continue;
        }
        childHeight = child.isRexSizer ? Math.max(child.minHeight, child.childrenHeight) : child.hasOwnProperty('minHeight') ? child.minHeight : (0, _GetDisplaySize.GetDisplayHeight)(child);
        padding = child.rexSizer.padding;
        childHeight += padding.top + padding.bottom;
        rowHeight = Math.max(rowHeight, childHeight);
      }
      result += rowHeight;
    }
    // else,(proportion > 0) : rowHeight is 0
    this.rowHeight[i] = rowHeight;
  }
  var space = this.space;
  var indentTop = Math.max(space.indentTopOdd, space.indentTopEven);
  return result + (0, _Sum.default)(space.top, indentTop, ...space.row, space.bottom);
};
var _default = GetChildrenHeight;
exports.default = _default;
},{"../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js","../../../plugins/utils/math/Sum.js":"node_modules/phaser3-rex-plugins/plugins/utils/math/Sum.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetExpandedChildWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetExpandedChildWidth = function (child, colWidth) {
  var childWidth;
  var childConfig = child.rexSizer;
  if (childConfig.expand) {
    var padding = childConfig.padding;
    childWidth = colWidth - padding.left - padding.right;
  }
  return childWidth;
};
var _default = GetExpandedChildWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetExpandedChildHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetExpandedChildHeight = function (child, rowHeight) {
  var childHeight;
  var childConfig = child.rexSizer;
  if (childConfig.expand) {
    var padding = childConfig.padding;
    childHeight = rowHeight - padding.top - padding.bottom;
  }
  return childHeight;
};
var _default = GetExpandedChildHeight;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetChildrenSizers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildrenSizers = function (out) {
  if (out === undefined) {
    out = [];
  }
  var children = this.sizerChildren,
    child;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    child = children[i];
    if (child && child.isRexSizer) {
      out.push(child);
    }
  }
  return out;
};
var _default = GetChildrenSizers;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/PreLayout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PreLayout = _interopRequireDefault(require("../basesizer/PreLayout.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PreLayout = function () {
  this._totalColumnProportions = undefined;
  this._totalRowProportions = undefined;
  this.proportionWidthLength = undefined;
  this.proportionHeightLength = undefined;
  _PreLayout.default.call(this);
  return this;
};
var _default = PreLayout;
exports.default = _default;
},{"../basesizer/PreLayout.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PreLayout.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/LayoutChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResizeGameObject = _interopRequireDefault(require("../../../plugins/utils/size/ResizeGameObject.js"));
var _PreLayoutChild = _interopRequireDefault(require("../basesizer/utils/PreLayoutChild.js"));
var _LayoutChild = _interopRequireDefault(require("../basesizer/utils/LayoutChild.js"));
var _CheckSize = _interopRequireDefault(require("../basesizer/utils/CheckSize.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var LayoutChildren = function () {
  var child, childConfig, padding;
  var startX = this.innerLeft,
    startY = this.innerTop;
  var itemX,
    itemY = startY;
  var x, y, width, height; // Align zone
  var childWidth, childHeight;
  // Layout grid children
  var columnSpace = this.space.column,
    rowSpace = this.space.row,
    indentLeftOdd = this.space.indentLeftOdd,
    indentLeftEven = this.space.indentLeftEven,
    indentTopOdd = this.space.indentTopOdd,
    indentTopEven = this.space.indentTopEven;
  var colWidth, rowHeight;
  var indentLeft, indentTop;
  for (var rowIndex = 0; rowIndex < this.rowCount; rowIndex++) {
    rowHeight = this.getRowHeight(rowIndex);
    indentLeft = rowIndex % 2 ? indentLeftEven : indentLeftOdd;
    itemX = startX + indentLeft;
    for (var columnIndex = 0; columnIndex < this.columnCount; columnIndex++) {
      colWidth = this.getColumnWidth(columnIndex);
      child = this.getChildAt(columnIndex, rowIndex);
      if (!child || child.rexSizer.hidden) {
        itemX += colWidth + columnSpace[columnIndex];
        continue;
      }
      _PreLayoutChild.default.call(this, child);
      childWidth = this.getExpandedChildWidth(child, colWidth);
      childHeight = this.getExpandedChildHeight(child, rowHeight);
      if (child.isRexSizer) {
        child.runLayout(this, childWidth, childHeight);
        (0, _CheckSize.default)(child, this);
      } else {
        (0, _ResizeGameObject.default)(child, childWidth, childHeight);
      }
      childConfig = child.rexSizer;
      padding = childConfig.padding;
      x = itemX + padding.left;
      width = colWidth - padding.left - padding.right;
      indentTop = columnIndex % 2 ? indentTopEven : indentTopOdd;
      y = itemY + indentTop + padding.top;
      height = rowHeight - padding.top - padding.bottom;
      _LayoutChild.default.call(this, child, x, y, width, height, childConfig.align);
      itemX += colWidth + columnSpace[columnIndex];
    }
    itemY += rowHeight + rowSpace[rowIndex];
  }
};
var _default = LayoutChildren;
exports.default = _default;
},{"../../../plugins/utils/size/ResizeGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/ResizeGameObject.js","../basesizer/utils/PreLayoutChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/PreLayoutChild.js","../basesizer/utils/LayoutChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/LayoutChild.js","../basesizer/utils/CheckSize.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/CheckSize.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/ResolveWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResolveWidth = _interopRequireDefault(require("../basesizer/ResolveWidth.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ResolveWidth = function (width) {
  var width = _ResolveWidth.default.call(this, width);

  // Get proportionLength
  if (this.proportionWidthLength === undefined) {
    var totalColumnProportions = this.totalColumnProportions;
    if (totalColumnProportions > 0) {
      var remainder = width - this.getChildrenWidth(false);
      if (remainder >= 0) {
        this.proportionWidthLength = remainder / totalColumnProportions;
      } else {
        // Warning
      }
    } else {
      this.proportionWidthLength = 0;
    }
  }
  return width;
};
var _default = ResolveWidth;
exports.default = _default;
},{"../basesizer/ResolveWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ResolveWidth.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/ResolveHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResolveHeight = _interopRequireDefault(require("../basesizer/ResolveHeight.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ResolveHeight = function (height) {
  var height = _ResolveHeight.default.call(this, height);

  // Get proportionLength    
  if (this.proportionHeightLength === undefined) {
    var totalRowProportions = this.totalRowProportions;
    if (totalRowProportions > 0) {
      var remainder = height - this.getChildrenHeight(false);
      if (remainder >= 0) {
        this.proportionHeightLength = remainder / totalRowProportions;
      } else {
        // Warning
      }
    } else {
      this.proportionHeightLength = 0;
    }
  }
  return height;
};
var _default = ResolveHeight;
exports.default = _default;
},{"../basesizer/ResolveHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ResolveHeight.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/ResolveChildrenWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ResolveChildrenWidth = function (parentWidth) {
  // Resolve width of sizer children
  var child, childWidth;
  var colWidth;
  for (var i in this.sizerChildren) {
    child = this.sizerChildren[i];
    if (child && child.isRexSizer && !child.ignoreLayout) {
      colWidth = this.getColumnWidth(parseInt(i) % this.columnCount);
      childWidth = this.getExpandedChildWidth(child, colWidth);
      childWidth = child.resolveWidth(childWidth);
      child.resolveChildrenWidth(childWidth);
    }
  }
};
var _default = ResolveChildrenWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/RunWidthWrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Default method
var RunWidthWrap = function (width) {
  var child, childWidth;
  var colWidth;
  for (var i in this.sizerChildren) {
    child = this.sizerChildren[i];
    if (!child || child.isRexSizer && child.ignoreLayout || !child.runWidthWrap) {
      continue;
    }
    colWidth = this.getColumnWidth(parseInt(i) % this.columnCount);
    childWidth = this.getExpandedChildWidth(child, colWidth);
    if (child.isRexSizer) {
      childWidth = child.resolveWidth(childWidth);
    }
    child.runWidthWrap(childWidth);
  }
  return this;
};
var _default = RunWidthWrap;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/AddChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddChild = _interopRequireDefault(require("../basesizer/utils/AddChild.js"));
var _GetBoundsConfig = _interopRequireDefault(require("../utils/GetBoundsConfig.js"));
var _AlignConst = _interopRequireDefault(require("../utils/AlignConst.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const ALIGN_CENTER = Phaser.Display.Align.CENTER;
var GetEmptyCellIndex = function (columnIndex, rowIndex, cells, columnCount, rowCount) {
  if (typeof columnIndex === 'number' || typeof rowIndex === 'number') {
    if (columnIndex === undefined) {
      var idx;
      for (var i = 0; i < columnCount; i++) {
        idx = rowIndex * columnCount + i;
        if (!cells[idx]) {
          return idx;
        }
      }
    } else if (rowIndex === undefined) {
      var idx;
      for (var i = 0; i < rowCount; i++) {
        idx = i * columnCount + columnIndex;
        if (!cells[idx]) {
          return idx;
        }
      }
    } else {
      var idx = rowIndex * columnCount + columnIndex;
      if (!cells[idx]) {
        return idx;
      }
    }
  } else if (rowIndex === true) {
    var idx;
    for (var i = 0; i < columnCount; i++) {
      for (var j = 0; j < rowCount; j++) {
        idx = j * columnCount + i;
        if (!cells[idx]) {
          return idx;
        }
      }
    }
  } else {
    for (var i = 0, cnt = cells.length; i < cnt; i++) {
      if (!cells[i]) {
        return i;
      }
    }
  }
  return null;
};
var Add = function (gameObject, columnIndex, rowIndex, align, paddingConfig, expand, childKey) {
  _AddChild.default.call(this, gameObject);
  if (IsPlainObject(columnIndex)) {
    var config = columnIndex;
    columnIndex = GetValue(config, 'column', undefined);
    rowIndex = GetValue(config, 'row', undefined);
    align = GetValue(config, 'align', ALIGN_CENTER);
    paddingConfig = GetValue(config, 'padding', 0);
    expand = GetValue(config, 'expand', false);
    childKey = GetValue(config, 'key', undefined);
  }

  // Get insert index
  var itemIndex = GetEmptyCellIndex(columnIndex, rowIndex, this.sizerChildren, this.columnCount, this.rowCount);
  if (itemIndex === null) {
    // Specific index mode
    if (typeof columnIndex === 'number' && typeof rowIndex === 'number') {
      return this;
    }
    if (rowIndex === true || typeof rowIndex === 'number') {
      this.addEmptyColumn();
    } else {
      this.addEmptyRow();
    }

    // Get insert index again
    itemIndex = GetEmptyCellIndex(columnIndex, rowIndex, this.sizerChildren, this.columnCount, this.rowCount);
  }
  if (typeof align === 'string') {
    align = _AlignConst.default[align];
  }
  if (align === undefined) {
    align = ALIGN_CENTER;
  }
  if (paddingConfig === undefined) {
    paddingConfig = 0;
  }
  if (expand === undefined) {
    expand = true;
  }
  var config = this.getSizerConfig(gameObject);
  config.align = align;
  config.padding = (0, _GetBoundsConfig.default)(paddingConfig);
  config.expand = expand;
  this.sizerChildren[itemIndex] = gameObject;
  if (childKey !== undefined) {
    this.addChildrenMap(childKey, gameObject);
  }
  return this;
};
var _default = {
  add: Add
};
exports.default = _default;
},{"../basesizer/utils/AddChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/AddChild.js","../utils/GetBoundsConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetBoundsConfig.js","../utils/AlignConst.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/AlignConst.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/array/Fill.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Fill = function (arr, value, startIdx, endIdx) {
  if (startIdx === undefined) {
    startIdx = 0;
  }
  if (endIdx === undefined) {
    endIdx = arr.length - 1;
  }
  for (var i = startIdx; i <= endIdx; i++) {
    arr[i] = value;
  }
  return arr;
};
var _default = Fill;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/RemoveChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RemoveChild = _interopRequireDefault(require("../basesizer/utils/RemoveChild.js"));
var _ClearChildren = _interopRequireDefault(require("../basesizer/utils/ClearChildren.js"));
var _Fill = _interopRequireDefault(require("../../../plugins/utils/array/Fill.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  remove(gameObject, destroyChild) {
    if (this.getParentSizer(gameObject) !== this) {
      return this;
    }
    var idx = this.sizerChildren.indexOf(gameObject);
    if (idx !== -1) {
      this.sizerChildren[idx] = null;
    }
    _RemoveChild.default.call(this, gameObject, destroyChild);
    return this;
  },
  removeAt(columnIndex, rowIndex, destroyChild) {
    var child = this.getChildAt(columnIndex, rowIndex);
    if (child) {
      this.remove(child, destroyChild);
    }
    return this;
  },
  removeAll(destroyChild) {
    for (var i = this.sizerChildren.length - 1; i >= 0; i--) {
      var child = this.sizerChildren[i];
      if (!child) {
        continue;
      }
      this.remove(child, destroyChild);
    }
    return this;
  },
  clear(destroyChild) {
    (0, _Fill.default)(this.sizerChildren, null);
    _ClearChildren.default.call(this, destroyChild);
    return this;
  }
};
exports.default = _default;
},{"../basesizer/utils/RemoveChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/RemoveChild.js","../basesizer/utils/ClearChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/ClearChildren.js","../../../plugins/utils/array/Fill.js":"node_modules/phaser3-rex-plugins/plugins/utils/array/Fill.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/ResetGrid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Fill = _interopRequireDefault(require("../../../plugins/utils/array/Fill.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var ResetGrid = function (columnCount, rowCount, columnProportions, rowProportions, space) {
  if (columnProportions === undefined) {
    columnProportions = 0;
  }
  if (rowProportions === undefined) {
    rowProportions = 0;
  }
  this.columnCount = columnCount;
  this.rowCount = rowCount;
  this.gridCount = columnCount * rowCount;

  // children
  if (this.sizerChildren === undefined) {
    this.sizerChildren = [];
  } else {
    this.removeAll();
  }
  this.sizerChildren.length = columnCount * rowCount;
  (0, _Fill.default)(this.sizerChildren, null);

  // proportions
  this.columnProportions = [];
  this.columnProportions.length = columnCount;
  if (typeof columnProportions === 'number') {
    (0, _Fill.default)(this.columnProportions, columnProportions);
  } else {
    for (var i = 0; i < columnCount; i++) {
      this.columnProportions[i] = columnProportions[i] || 0;
    }
  }
  this.rowProportions = [];
  this.rowProportions.length = rowCount;
  if (typeof rowProportions === 'number') {
    (0, _Fill.default)(this.rowProportions, rowProportions);
  } else {
    for (var i = 0; i < rowCount; i++) {
      this.rowProportions[i] = rowProportions[i] || 0;
    }
  }

  // width & height
  this.columnWidth = [];
  this.columnWidth.length = columnCount;
  this.rowHeight = [];
  this.rowHeight.length = rowCount;

  // space
  this.space.column = [];
  this.space.column.length = columnCount - 1;
  var columnSpace = GetValue(space, 'column', 0);
  if (typeof columnSpace === 'number') {
    (0, _Fill.default)(this.space.column, columnSpace);
  } else {
    for (var i = 0, cnt = this.space.column.length; i < cnt; i++) {
      this.space.column[i] = columnSpace[i] || 0;
    }
  }
  this.space.row = [];
  this.space.row.length = rowCount - 1;
  var rowSpace = GetValue(space, 'row', 0);
  if (typeof rowSpace === 'number') {
    (0, _Fill.default)(this.space.row, rowSpace);
  } else {
    for (var i = 0, cnt = this.space.row.length; i < cnt; i++) {
      this.space.row[i] = rowSpace[i] || 0;
    }
  }
  return this;
};
var _default = ResetGrid;
exports.default = _default;
},{"../../../plugins/utils/array/Fill.js":"node_modules/phaser3-rex-plugins/plugins/utils/array/Fill.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/InsertEmptyRow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InseryEmptyRow = exports.AddEmptyRow = void 0;
var InseryEmptyRow = function (rowIndex, proportion, space) {
  if (proportion === undefined) {
    proportion = this.rowProportions[0] || 0;
  }
  if (space === undefined) {
    space = this.space.row[0] || 0;
  }
  this.rowCount += 1;
  this.gridCount += this.columnCount;
  var args = [rowIndex * this.columnCount, 0];
  for (var i = 0; i < this.columnCount; i++) {
    args.push(null);
  }
  this.sizerChildren.splice.apply(this.sizerChildren, args);
  this.rowProportions.push(proportion);
  this.rowHeight.length += 1; // this.rowHeight will be recalculated when layout()    

  this.space.row.splice(rowIndex, 0, space);
  return this;
};
exports.InseryEmptyRow = InseryEmptyRow;
var AddEmptyRow = function (proportion, space) {
  InseryEmptyRow.call(this, this.rowCount, proportion, space);
  return this;
};
exports.AddEmptyRow = AddEmptyRow;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/InsertEmptyColumn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InsertEmptyColumn = exports.AddEmptyColumn = void 0;
var InsertEmptyColumn = function (colIndex, proportion, space) {
  if (proportion === undefined) {
    proportion = this.columnProportions[0] || 0;
  }
  if (space === undefined) {
    space = this.space.column[0] || 0;
  }
  this.columnCount += 1;
  this.gridCount += this.rowCount;
  for (var i = this.rowCount - 1; i >= 0; i--) {
    var insertIndex = i * this.columnCount + colIndex;
    this.sizerChildren.splice(insertIndex, 0, null);
  }
  this.columnProportions.push(proportion);
  this.columnWidth.length += 1; // this.columnWidth will be recalculated when layout()    

  this.space.column.splice(colIndex, 0, space);
  return this;
};
exports.InsertEmptyColumn = InsertEmptyColumn;
var AddEmptyColumn = function (proportion, space) {
  InsertEmptyColumn.call(this, this.columnCount, proportion, space);
  return this;
};
exports.AddEmptyColumn = AddEmptyColumn;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetChildrenWidth = _interopRequireDefault(require("./GetChildrenWidth.js"));
var _GetChildrenHeight = _interopRequireDefault(require("./GetChildrenHeight.js"));
var _GetExpandedChildWidth = _interopRequireDefault(require("./GetExpandedChildWidth.js"));
var _GetExpandedChildHeight = _interopRequireDefault(require("./GetExpandedChildHeight.js"));
var _GetChildrenSizers = _interopRequireDefault(require("./GetChildrenSizers.js"));
var _PreLayout = _interopRequireDefault(require("./PreLayout.js"));
var _LayoutChildren = _interopRequireDefault(require("./LayoutChildren.js"));
var _ResolveWidth = _interopRequireDefault(require("./ResolveWidth.js"));
var _ResolveHeight = _interopRequireDefault(require("./ResolveHeight.js"));
var _ResolveChildrenWidth = _interopRequireDefault(require("./ResolveChildrenWidth.js"));
var _RunWidthWrap = _interopRequireDefault(require("./RunWidthWrap.js"));
var _AddChildMethods = _interopRequireDefault(require("./AddChildMethods.js"));
var _RemoveChildMethods = _interopRequireDefault(require("./RemoveChildMethods.js"));
var _ResetGrid = _interopRequireDefault(require("./ResetGrid.js"));
var _InsertEmptyRow = require("./InsertEmptyRow.js");
var _InsertEmptyColumn = require("./InsertEmptyColumn.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  getChildrenWidth: _GetChildrenWidth.default,
  getChildrenHeight: _GetChildrenHeight.default,
  getExpandedChildWidth: _GetExpandedChildWidth.default,
  getExpandedChildHeight: _GetExpandedChildHeight.default,
  getChildrenSizers: _GetChildrenSizers.default,
  preLayout: _PreLayout.default,
  layoutChildren: _LayoutChildren.default,
  resolveWidth: _ResolveWidth.default,
  resolveHeight: _ResolveHeight.default,
  resolveChildrenWidth: _ResolveChildrenWidth.default,
  runWidthWrap: _RunWidthWrap.default,
  resetGrid: _ResetGrid.default,
  inseryEmptyRow: _InsertEmptyRow.InseryEmptyRow,
  addEmptyRow: _InsertEmptyRow.AddEmptyRow,
  insertEmptyColumn: _InsertEmptyColumn.InsertEmptyColumn,
  addEmptyColumn: _InsertEmptyColumn.AddEmptyColumn
};
Object.assign(methods, _AddChildMethods.default, _RemoveChildMethods.default);
var _default = methods;
exports.default = _default;
},{"./GetChildrenWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetChildrenWidth.js","./GetChildrenHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetChildrenHeight.js","./GetExpandedChildWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetExpandedChildWidth.js","./GetExpandedChildHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetExpandedChildHeight.js","./GetChildrenSizers.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetChildrenSizers.js","./PreLayout.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/PreLayout.js","./LayoutChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/LayoutChildren.js","./ResolveWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/ResolveWidth.js","./ResolveHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/ResolveHeight.js","./ResolveChildrenWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/ResolveChildrenWidth.js","./RunWidthWrap.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/RunWidthWrap.js","./AddChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/AddChildMethods.js","./RemoveChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/RemoveChildMethods.js","./ResetGrid.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/ResetGrid.js","./InsertEmptyRow.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/InsertEmptyRow.js","./InsertEmptyColumn.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/InsertEmptyColumn.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetTotalColumnProportions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetTotalColumnProportions = function () {
  var result = 0,
    proportion;
  for (var i = 0; i < this.columnCount; i++) {
    proportion = this.columnProportions[i];
    if (proportion > 0) {
      result += proportion;
    }
  }
  return result;
};
var _default = GetTotalColumnProportions;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetTotalRowProportions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetTotalRowProportions = function () {
  var result = 0,
    proportion;
  for (var i = 0; i < this.rowCount; i++) {
    proportion = this.rowProportions[i];
    if (proportion > 0) {
      result += proportion;
    }
  }
  return result;
};
var _default = GetTotalRowProportions;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GridSizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseSizer = _interopRequireDefault(require("../basesizer/BaseSizer.js"));
var _Methods = _interopRequireDefault(require("./Methods.js"));
var _GetTotalColumnProportions = _interopRequireDefault(require("./GetTotalColumnProportions.js"));
var _GetTotalRowProportions = _interopRequireDefault(require("./GetTotalRowProportions.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class GridSizer extends _BaseSizer.default {
  constructor(scene, x, y, minWidth, minHeight, columnCount, rowCount, columnProportions, rowProportions, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      minWidth = GetValue(config, 'width', undefined);
      minHeight = GetValue(config, 'height', undefined);
      columnCount = GetValue(config, 'column', config.col || 0);
      rowCount = GetValue(config, 'row', 0);
      columnProportions = GetValue(config, 'columnProportions', 0);
      rowProportions = GetValue(config, 'rowProportions', 0);
    } else if (IsPlainObject(minWidth)) {
      config = minWidth;
      minWidth = GetValue(config, 'width', undefined);
      minHeight = GetValue(config, 'height', undefined);
      columnCount = GetValue(config, 'column', config.col || 0);
      rowCount = GetValue(config, 'row', 0);
      columnProportions = GetValue(config, 'columnProportions', 0);
      rowProportions = GetValue(config, 'rowProportions', 0);
    } else if (IsPlainObject(columnCount)) {
      config = columnCount;
      columnCount = GetValue(config, 'column', config.col || 0);
      rowCount = GetValue(config, 'row', 0);
      columnProportions = GetValue(config, 'columnProportions', 0);
      rowProportions = GetValue(config, 'rowProportions', 0);
    } else if (IsPlainObject(columnProportions)) {
      config = columnProportions;
      columnProportions = GetValue(config, 'columnProportions', 0);
      rowProportions = GetValue(config, 'rowProportions', 0);
    }
    super(scene, x, y, minWidth, minHeight, config);
    this.type = 'rexGridSizer';
    this.resetGrid(columnCount, rowCount, columnProportions, rowProportions, GetValue(config, 'space', undefined));
    this.setIndentLeft(GetValue(config, 'space.indentLeftOdd', 0), GetValue(config, 'space.indentLeftEven', 0));
    this.setIndentTop(GetValue(config, 'space.indentTopOdd', 0), GetValue(config, 'space.indentTopEven', 0));
    this.addChildrenMap('items', this.sizerChildren);
    var createCellContainerCallback = GetValue(config, 'createCellContainerCallback');
    if (createCellContainerCallback) {
      for (var y = 0, ycnt = this.rowCount; y < ycnt; y++) {
        for (var x = 0, xcnt = this.columnCount; x < xcnt; x++) {
          var addConfig = {
            column: x,
            row: y
          };
          var child = createCellContainerCallback(scene, x, y, addConfig);
          if (child) {
            this.add(child, addConfig);
          }
        }
      }
    }
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    super.destroy(fromScene);

    // More free resources
    this.columnProportions = undefined;
    this.rowProportions = undefined;
    this.columnWidth = undefined;
    this.rowHeight = undefined;
  }
  setIndentLeft(odd, even) {
    this.space.indentLeftOdd = odd;
    this.space.indentLeftEven = even;
    return this;
  }
  setIndentTop(odd, even) {
    this.space.indentTopOdd = odd;
    this.space.indentTopEven = even;
    return this;
  }
  setColumnProportion(columnIndex, proportion) {
    if (columnIndex >= this.columnProportions.length) {
      return this;
    }
    this.columnProportions[columnIndex] = proportion;
    return this;
  }
  setRowProportion(rowIndex, proportion) {
    if (rowIndex >= this.rowProportions.length) {
      return this;
    }
    this.rowProportions[rowIndex] = proportion;
    return this;
  }
  get totalColumnProportions() {
    if (this._totalColumnProportions === undefined) {
      this._totalColumnProportions = _GetTotalColumnProportions.default.call(this);
    }
    return this._totalColumnProportions;
  }
  get totalRowProportions() {
    if (this._totalRowProportions === undefined) {
      this._totalRowProportions = _GetTotalRowProportions.default.call(this);
    }
    return this._totalRowProportions;
  }
  getChildAt(columnIndex, rowIndex) {
    return this.sizerChildren[rowIndex * this.columnCount + columnIndex];
  }
  childToGridIndex(child, out) {
    if (!child) {
      return null;
    }
    var index = this.sizerChildren.indexOf(child);
    if (index === -1) {
      return null;
    }
    if (out === undefined) {
      out = {};
    }
    out.x = index % this.columnCount;
    out.y = Math.floor(index / this.columnCount);
    return out;
  }
  getColumnWidth(columnIndex) {
    var colProportion = this.columnProportions[columnIndex];
    var colWidth = colProportion === 0 ? this.columnWidth[columnIndex] : colProportion * this.proportionWidthLength;
    return colWidth;
  }
  getRowHeight(rowIndex) {
    var rowProportion = this.rowProportions[rowIndex];
    var rowHeight = rowProportion === 0 ? this.rowHeight[rowIndex] : rowProportion * this.proportionHeightLength;
    return rowHeight;
  }
}
Object.assign(GridSizer.prototype, _Methods.default);
var _default = GridSizer;
exports.default = _default;
},{"../basesizer/BaseSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/BaseSizer.js","./Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/Methods.js","./GetTotalColumnProportions.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetTotalColumnProportions.js","./GetTotalRowProportions.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GetTotalRowProportions.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GridSizer = _interopRequireDefault(require("./GridSizer.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('gridSizer', function (x, y, minWidth, minHeight, columnCount, rowCount, columnProportions, rowProportion, config) {
  var gameObject = new _GridSizer.default(this.scene, x, y, minWidth, minHeight, columnCount, rowCount, columnProportions, rowProportion, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.GridSizer', _GridSizer.default);
var _default = _GridSizer.default;
exports.default = _default;
},{"./GridSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GridSizer.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/GetChildrenWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildrenWidth = function () {
  if (this.rexSizer.hidden) {
    return 0;
  }

  // Before RunChildrenWrap
  return this.maxChildWidth + this.space.left + this.space.right;
};
var _default = GetChildrenWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/GetChildrenHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildrenHeight = function () {
  if (this.rexSizer.hidden) {
    return 0;
  }

  // After RunChildrenWrap
  return this.widthWrapResult.height + this.space.top + this.space.bottom;
};
var _default = GetChildrenHeight;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/GetChildrenSizers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildrenSizers = function (out) {
  if (out === undefined) {
    out = [];
  }
  var children = this.sizerChildren,
    child;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    child = children[i];
    if (child === '\n') {
      continue;
    }
    if (child.isRexSizer) {
      out.push(child);
    }
  }
  return out;
};
var _default = GetChildrenSizers;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/PreLayout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PreLayout = _interopRequireDefault(require("../basesizer/PreLayout.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PreLayout = function () {
  this._maxChildWidth = undefined;
  this._maxChildHeight = undefined;
  _PreLayout.default.call(this);
  return this;
};
var _default = PreLayout;
exports.default = _default;
},{"../basesizer/PreLayout.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PreLayout.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/LayoutChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PreLayoutChild = _interopRequireDefault(require("../basesizer/utils/PreLayoutChild.js"));
var _LayoutChild = _interopRequireDefault(require("../basesizer/utils/LayoutChild.js"));
var _GetDisplaySize = require("../../../plugins/utils/size/GetDisplaySize.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var LayoutChildren = function () {
  var innerLineWidth = this.innerWidth;
  var justifyPercentage = this.justifyPercentage;
  var itemSpace = this.space.item,
    lineSpace = this.space.line,
    indentLeftOdd = this.space.indentLeftOdd,
    indentLeftEven = this.space.indentLeftEven,
    indentTopOdd = this.space.indentTopOdd,
    indentTopEven = this.space.indentTopEven;
  var child,
    childConfig,
    padding,
    justifySpace = 0,
    indentLeft,
    indentTop;
  var startX = this.innerLeft,
    startY = this.innerTop;
  var x, y, width, height; // Align zone
  var lines = this.widthWrapResult.lines;
  var line, lineChlidren, remainderLineWidth;
  var itemX,
    itemY = startY;
  for (var i = 0, icnt = lines.length; i < icnt; i++) {
    // Layout this line
    line = lines[i];
    lineChlidren = line.children;
    if (this.rtl) {
      lineChlidren.reverse();
    }
    indentLeft = i % 2 ? indentLeftEven : indentLeftOdd;
    itemX = startX + indentLeft;
    remainderLineWidth = innerLineWidth - line.width;
    switch (this.align) {
      case 0:
        // left
        break;
      case 1:
        // right
        itemX += remainderLineWidth;
        break;
      case 2:
        // center
        itemX += remainderLineWidth / 2;
        break;
      case 3:
        // justify-left
        justifySpace = GetJustifySpace(innerLineWidth, remainderLineWidth, justifyPercentage, lineChlidren.length);
        break;
      case 4:
        // justify-right
        justifySpace = GetJustifySpace(innerLineWidth, remainderLineWidth, justifyPercentage, lineChlidren.length);
        if (justifySpace === 0) {
          // Align right
          itemX += remainderLineWidth;
        }
        break;
      case 5:
        // justify-center
        justifySpace = GetJustifySpace(innerLineWidth, remainderLineWidth, justifyPercentage, lineChlidren.length);
        if (justifySpace === 0) {
          // Align center
          itemX += remainderLineWidth / 2;
        }
        break;
    }
    var isFirstChild = true;
    for (var j = 0, jcnt = lineChlidren.length; j < jcnt; j++) {
      child = lineChlidren[j];
      if (child.rexSizer.hidden) {
        continue;
      }
      childConfig = child.rexSizer;
      padding = childConfig.padding;
      _PreLayoutChild.default.call(this, child);
      x = itemX + padding.left;
      if (isFirstChild) {
        isFirstChild = false;
      } else {
        x += itemSpace;
      }
      indentTop = j % 2 ? indentTopEven : indentTopOdd;
      y = itemY + indentTop + padding.top;
      width = (0, _GetDisplaySize.GetDisplayWidth)(child);
      height = (0, _GetDisplaySize.GetDisplayHeight)(child);
      itemX = x + width + padding.right + justifySpace;
      _LayoutChild.default.call(this, child, x, y, width, height, childConfig.align);
    }
    itemY += line.height + lineSpace;
  }
};
var GetJustifySpace = function (total, remainder, justifyPercentage, childCount) {
  return remainder / total <= justifyPercentage ? remainder / (childCount - 1) : 0;
};
var _default = LayoutChildren;
exports.default = _default;
},{"../basesizer/utils/PreLayoutChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/PreLayoutChild.js","../basesizer/utils/LayoutChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/LayoutChild.js","../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/RunChildrenWrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../../plugins/utils/size/GetDisplaySize.js");
var RunChildrenWrap = function (lineWidth, out) {
  if (out === undefined) {
    out = {
      lines: [],
      width: 0,
      height: 0
    };
  } else {
    out.lines.length = 0;
    out.width = 0;
    out.height = 0;
  }
  var children = this.sizerChildren;
  var itemSpace = this.space.item,
    lineSpace = this.space.line,
    indentLeftOdd = this.space.indentLeftOdd,
    indentLeftEven = this.space.indentLeftEven,
    indentTopOdd = this.space.indentTopOdd,
    indentTopEven = this.space.indentTopEven;
  var child,
    childWidth,
    childHeight,
    remainder = 0,
    indentLeft;
  var lines = out.lines,
    lastLine = undefined,
    newLine;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    child = children[i];
    if (child === '\n') {
      child = undefined;
      childWidth = 0;
      newLine = true;
    } else {
      if (child.rexSizer.hidden) {
        continue;
      }
      if (child.isRexSizer) {
        child.layout(); // Use original size
      }

      childWidth = GetChildWidth(child);
      newLine = remainder < childWidth || lastLine === undefined;
    }
    // New line
    if (newLine) {
      if (lastLine) {
        lastLine.width = lineWidth - (remainder + itemSpace);
        out.width = Math.max(out.width, lastLine.width);
        out.height += lastLine.height + lineSpace;
      }
      lastLine = {
        children: [],
        // width: 0,
        height: 0
      };
      lines.push(lastLine);
      var indentLeft = lines.length % 2 ? indentLeftOdd : indentLeftEven;
      remainder = lineWidth - indentLeft;
    }
    remainder -= childWidth + itemSpace;
    if (child) {
      lastLine.children.push(child);
      childHeight = GeChildHeight(child);
      lastLine.height = Math.max(lastLine.height, childHeight);
    }
  }
  if (lastLine) {
    lastLine.width = lineWidth - (remainder + itemSpace);
    out.width = Math.max(out.width, lastLine.width);
    out.height += lastLine.height;
  }
  out.height += Math.max(indentTopOdd, indentTopEven);
  return out;
};
var GetChildWidth = function (child) {
  var padding = child.rexSizer.padding;
  return (0, _GetDisplaySize.GetDisplayWidth)(child) + padding.left + padding.right;
};
var GeChildHeight = function (child) {
  var padding = child.rexSizer.padding;
  return (0, _GetDisplaySize.GetDisplayHeight)(child) + padding.top + padding.bottom;
};
var _default = RunChildrenWrap;
exports.default = _default;
},{"../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/RunWidthWrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RunWidthWrap = _interopRequireDefault(require("../basesizer/RunWidthWrap.js"));
var _RunChildrenWrap = _interopRequireDefault(require("./RunChildrenWrap.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var RunWidthWrap = function (width) {
  var innerWidth = width - this.space.left - this.space.right;
  this.widthWrapResult = _RunChildrenWrap.default.call(this, innerWidth, this.widthWrapResult);
  _RunWidthWrap.default.call(this, width);
};
var _default = RunWidthWrap;
exports.default = _default;
},{"../basesizer/RunWidthWrap.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/RunWidthWrap.js","./RunChildrenWrap.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/RunChildrenWrap.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/GetNearestChildIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const DistanceBetween = Phaser.Math.Distance.Between;
var GetNearestChildIndex = function (x, y) {
  var children = this.sizerChildren;
  if (children.length === 0) {
    return -1;
  }
  var nearestIndex = -1,
    minDistance = Infinity;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    // position is not at this line
    if (Math.abs(child.centerY - y) > child.height / 2) {
      continue;
    }

    // Check left bound
    var distance = DistanceBetween(child.left, child.centerY, x, y);
    if (minDistance > distance) {
      minDistance = distance;
      nearestIndex = i;
    }

    // Is last child of this line
    var nextChild = children[i + 1];
    if (nextChild && nextChild.y === child.y) {
      continue;
    }
    var distance = DistanceBetween(child.right, child.centerY, x, y);
    if (minDistance > distance) {
      minDistance = distance;
      nearestIndex = i + 1;
    }
  }
  return nearestIndex;
};
var _default = GetNearestChildIndex;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/AddChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddChild = _interopRequireDefault(require("../basesizer/utils/AddChild.js"));
var _GetBoundsConfig = _interopRequireDefault(require("../utils/GetBoundsConfig.js"));
var _IsArray = _interopRequireDefault(require("../../../plugins/utils/object/IsArray.js"));
var _GetNearestChildIndex = _interopRequireDefault(require("./GetNearestChildIndex.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const ALIGN_CENTER = Phaser.Display.Align.CENTER;
var Add = function (gameObject, paddingConfig, childKey, index) {
  if (gameObject === '\n') {
    this.addNewLine();
    return this;
  }
  _AddChild.default.call(this, gameObject);
  if (IsPlainObject(paddingConfig)) {
    var config = paddingConfig;
    paddingConfig = GetValue(config, 'padding', 0);
    childKey = GetValue(config, 'key', undefined);
    index = GetValue(config, 'index', undefined);
  }
  if (paddingConfig === undefined) {
    paddingConfig = 0;
  }
  var config = this.getSizerConfig(gameObject);
  config.align = ALIGN_CENTER;
  config.padding = (0, _GetBoundsConfig.default)(paddingConfig);
  if (index === undefined || index >= this.sizerChildren.length) {
    this.sizerChildren.push(gameObject);
  } else {
    this.sizerChildren.splice(index, 0, gameObject);
  }
  if (childKey !== undefined) {
    this.addChildrenMap(childKey, gameObject);
  }
  return this;
};
var _default = {
  add(gameObject, paddingConfig, childKey) {
    if ((0, _IsArray.default)(gameObject)) {
      var gameObjects = gameObject;
      for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
        Add.call(this, gameObjects[i], paddingConfig);
      }
    } else {
      Add.call(this, gameObject, paddingConfig, childKey);
    }
    return this;
  },
  addNewLine() {
    this.sizerChildren.push('\n');
    return this;
  },
  insert(index, gameObject, paddingConfig, childKey) {
    Add.call(this, gameObject, paddingConfig, childKey, index);
    return this;
  },
  insertAtPosition(x, y, gameObject, paddingConfig, childKey) {
    var index = _GetNearestChildIndex.default.call(this, x, y);
    if (index === -1) {
      index = undefined;
    }
    this.insert(index, gameObject, paddingConfig, childKey);
    return this;
  }
};
exports.default = _default;
},{"../basesizer/utils/AddChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/AddChild.js","../utils/GetBoundsConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetBoundsConfig.js","../../../plugins/utils/object/IsArray.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsArray.js","./GetNearestChildIndex.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/GetNearestChildIndex.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/RemoveChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RemoveChild = _interopRequireDefault(require("../basesizer/utils/RemoveChild.js"));
var _ClearChildren = _interopRequireDefault(require("../basesizer/utils/ClearChildren.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const RemoveItem = Phaser.Utils.Array.Remove;
var _default = {
  remove(gameObject, destroyChild) {
    if (this.getParentSizer(gameObject) !== this) {
      return this;
    }
    RemoveItem(this.sizerChildren, gameObject);
    _RemoveChild.default.call(this, gameObject, destroyChild);
    return this;
  },
  removeAll(destroyChild) {
    for (var i = this.sizerChildren.length - 1; i >= 0; i--) {
      this.remove(this.sizerChildren[i], destroyChild);
    }
    return this;
  },
  clear(destroyChild) {
    this.sizerChildren.length = 0;
    _ClearChildren.default.call(this, destroyChild);
    return this;
  }
};
exports.default = _default;
},{"../basesizer/utils/RemoveChild.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/RemoveChild.js","../basesizer/utils/ClearChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/utils/ClearChildren.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetChildrenWidth = _interopRequireDefault(require("./GetChildrenWidth.js"));
var _GetChildrenHeight = _interopRequireDefault(require("./GetChildrenHeight.js"));
var _GetChildrenSizers = _interopRequireDefault(require("./GetChildrenSizers.js"));
var _PreLayout = _interopRequireDefault(require("./PreLayout.js"));
var _LayoutChildren = _interopRequireDefault(require("./LayoutChildren.js"));
var _RunWidthWrap = _interopRequireDefault(require("./RunWidthWrap.js"));
var _AddChildMethods = _interopRequireDefault(require("./AddChildMethods.js"));
var _RemoveChildMethods = _interopRequireDefault(require("./RemoveChildMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  getChildrenWidth: _GetChildrenWidth.default,
  getChildrenHeight: _GetChildrenHeight.default,
  getChildrenSizers: _GetChildrenSizers.default,
  preLayout: _PreLayout.default,
  layoutChildren: _LayoutChildren.default,
  runWidthWrap: _RunWidthWrap.default
};
Object.assign(methods, _AddChildMethods.default, _RemoveChildMethods.default);
var _default = methods;
exports.default = _default;
},{"./GetChildrenWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/GetChildrenWidth.js","./GetChildrenHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/GetChildrenHeight.js","./GetChildrenSizers.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/GetChildrenSizers.js","./PreLayout.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/PreLayout.js","./LayoutChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/LayoutChildren.js","./RunWidthWrap.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/RunWidthWrap.js","./AddChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/AddChildMethods.js","./RemoveChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/RemoveChildMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/GetMaxChildWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetMaxChildWidth = function (children) {
  if (children === undefined) {
    children = this.sizerChildren;
  }
  var result = 0;
  var child, childWidth;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    child = children[i];
    if (child === '\n') {
      continue;
    }
    childWidth = this.getChildWidth(child);
    result = Math.max(childWidth, result);
  }
  return result;
};
var _default = GetMaxChildWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/GetMaxChildHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../../plugins/utils/size/GetDisplaySize.js");
var GetMaxChildHeight = function (children) {
  if (children === undefined) {
    children = this.sizerChildren;
  }
  var result = 0;
  var child, childHeight;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    child = children[i];
    if (child === '\n') {
      continue;
    }
    childHeight = child.isRexSizer ? Math.max(child.minHeight, child.childrenHeight) : child.hasOwnProperty('minHeight') ? child.minHeight : (0, _GetDisplaySize.GetDisplayHeight)(child);
    result = Math.max(childHeight, result);
  }
  return result;
};
var _default = GetMaxChildHeight;
exports.default = _default;
},{"../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/FixWidthSizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseSizer = _interopRequireDefault(require("../basesizer/BaseSizer.js"));
var _Methods = _interopRequireDefault(require("./Methods.js"));
var _GetOrientationMode = _interopRequireDefault(require("../utils/GetOrientationMode.js"));
var _GetMaxChildWidth = _interopRequireDefault(require("./GetMaxChildWidth.js"));
var _GetMaxChildHeight = _interopRequireDefault(require("./GetMaxChildHeight.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class FixWidthSizer extends _BaseSizer.default {
  constructor(scene, x, y, minWidth, minHeight, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      minWidth = GetValue(config, 'width', undefined);
      minHeight = GetValue(config, 'height', undefined);
    } else if (IsPlainObject(minWidth)) {
      config = minWidth;
      minWidth = GetValue(config, 'width', undefined);
      minHeight = GetValue(config, 'height', undefined);
    }
    super(scene, x, y, minWidth, minHeight, config);
    this.type = 'rexFixWidthSizer';
    this.sizerChildren = [];
    this.setOrientation(GetValue(config, 'orientation', 0));
    this.setItemSpacing(GetValue(config, 'space.item', 0));
    this.setLineSpacing(GetValue(config, 'space.line', 0));
    this.setIntentLeft(GetValue(config, 'space.indentLeftOdd', 0), GetValue(config, 'space.indentLeftEven', 0));
    this.setIntentTop(GetValue(config, 'space.indentTopOdd', 0), GetValue(config, 'space.indentTopEven', 0));
    this.setAlign(GetValue(config, 'align', 0));
    this.setJustifyPercentage(GetValue(config, 'justifyPercentage', 0.25));
    this.setRTL(GetValue(config, 'rtl', false));
    this.addChildrenMap('items', this.sizerChildren);
  }
  setOrientation(orientation) {
    this.orientation = (0, _GetOrientationMode.default)(orientation);
    return this;
  }
  setItemSpacing(space) {
    this.space.item = space;
    return this;
  }
  setLineSpacing(space) {
    this.space.line = space;
    return this;
  }
  setIntentLeft(odd, even) {
    this.space.indentLeftOdd = odd;
    this.space.indentLeftEven = even;
    return this;
  }
  setIntentTop(odd, even) {
    this.space.indentTopOdd = odd;
    this.space.indentTopEven = even;
    return this;
  }
  setAlign(align) {
    if (typeof align === 'string') {
      align = ALIGN[align];
    }
    this.align = align;
    return this;
  }
  setJustifyPercentage(value) {
    this.justifyPercentage = value;
    return this;
  }
  setRTL(enabled) {
    if (enabled === undefined) {
      enabled = true;
    }
    this.rtl = enabled;
    return this;
  }
  get maxChildWidth() {
    if (this._maxChildWidth === undefined) {
      this._maxChildWidth = _GetMaxChildWidth.default.call(this);
    }
    return this._maxChildWidth;
  }
  get maxChildHeight() {
    if (this._maxChildHeight === undefined) {
      this._maxChildHeight = _GetMaxChildHeight.default.call(this);
    }
    return this._maxChildHeight;
  }
}
const ALIGN = {
  left: 0,
  top: 0,
  right: 1,
  bottom: 1,
  center: 2,
  justify: 3,
  'justify-left': 3,
  'justify-top': 3,
  'justify-right': 4,
  'justify-bottom': 4,
  'justify-center': 5
};
Object.assign(FixWidthSizer.prototype, _Methods.default);
var _default = FixWidthSizer;
exports.default = _default;
},{"../basesizer/BaseSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/BaseSizer.js","./Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/Methods.js","../utils/GetOrientationMode.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetOrientationMode.js","./GetMaxChildWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/GetMaxChildWidth.js","./GetMaxChildHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/GetMaxChildHeight.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FixWidthSizer = _interopRequireDefault(require("./FixWidthSizer.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('fixWidthSizer', function (x, y, minWidth, minHeight, config) {
  var gameObject = new _FixWidthSizer.default(this.scene, x, y, minWidth, minHeight, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.FixWidthSizer', _FixWidthSizer.default);
var _default = _FixWidthSizer.default;
exports.default = _default;
},{"./FixWidthSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/FixWidthSizer.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OverlapSizer = _interopRequireDefault(require("./OverlapSizer.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('overlapSizer', function (x, y, minWidth, minHeight, config) {
  var gameObject = new _OverlapSizer.default(this.scene, x, y, minWidth, minHeight, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.OverlapSizer', _OverlapSizer.default);
var _default = _OverlapSizer.default;
exports.default = _default;
},{"./OverlapSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/OverlapSizer.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/space/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Space = _interopRequireDefault(require("./Space.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('space', function () {
  var gameObject = new _Space.default(this.scene);
  // Don't add Zone into scene
  // this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Space', _Space.default);
var _default = _Space.default;
exports.default = _default;
},{"./Space.js":"node_modules/phaser3-rex-plugins/templates/ui/space/Space.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/mask/AddChildMask.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DefaultMaskGraphics = _interopRequireDefault(require("../../../../utils/mask/defaultmaskgraphics/DefaultMaskGraphics.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var AddChildMask = function (maskTarget, sizeTarget, shape, padding) {
  var maskGameObject = new _DefaultMaskGraphics.default(sizeTarget, shape, padding); // A Graphics game object
  if (maskTarget && !maskTarget.isRexSizer) {
    // Sizer game object can't apply mask
    var mask = maskGameObject.createGeometryMask();
    maskTarget.setMask(mask);
    this.once('destroy', function () {
      maskTarget.setMask();
      mask.destroy();
    });
  }
  this.pin(maskGameObject);
  return maskGameObject;
};
var _default = AddChildMask;
exports.default = _default;
},{"../../../../utils/mask/defaultmaskgraphics/DefaultMaskGraphics.js":"node_modules/phaser3-rex-plugins/plugins/utils/mask/defaultmaskgraphics/DefaultMaskGraphics.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/size/SetDisplaySize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetDisplaySize = function (gameObject, width, height) {
  if (!gameObject) {
    return;
  }
  var unknownWidth = width == null;
  var unknownHeight = height == null;
  if (unknownWidth && unknownHeight) {
    return gameObject;
  }
  if (!unknownWidth) {
    gameObject.displayWidth = width;
  }
  if (!unknownHeight) {
    gameObject.displayHeight = height;
  }
  if (unknownWidth) {
    gameObject.scaleX = gameObject.scaleY;
  }
  if (unknownHeight) {
    gameObject.scaleY = gameObject.scaleX;
  }
  return gameObject;
};
var _default = SetDisplaySize;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/label/methods/ResetDisplayContent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ResetDisplayContent = function (config) {
  if (config === undefined) {
    config = {};
  } else if (typeof config === 'string') {
    config = {
      text: config
    };
  }
  var text = config.text || '';
  this.setText(text);
  var iconGameObjct = this.childrenMap.icon;
  if (iconGameObjct) {
    if (config.icon === undefined) {
      this.hide(iconGameObjct);
    } else {
      this.show(iconGameObjct);
    }
    var iconSize = config.iconSize;
    if (iconSize) {
      this.setChildDisplaySize(iconGameObjct, iconSize, iconSize);
      if (this.iconWidth !== undefined) {
        this.setIconSize(iconSize);
      }
    }
    this.setIconTexture(config.icon, config.iconFrame);
  }
  var actionGameObjct = this.childrenMap.action;
  if (actionGameObjct) {
    if (config.action === undefined) {
      this.hide(actionGameObjct);
    } else {
      this.show(actionGameObjct);
    }
    var actionSize = config.actionSize;
    if (actionSize) {
      this.setChildDisplaySize(actionGameObjct, actionSize, actionSize);
      if (this.actionWidth !== undefined) {
        this.setActionSize(actionSize);
      }
    }
    this.setActionTexture(config.action, config.actionFrame);
  }
  return this;
};
var _default = ResetDisplayContent;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/label/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResetDisplayContent = _interopRequireDefault(require("./ResetDisplayContent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  resetDisplayContent: _ResetDisplayContent.default
};
var _default = methods;
exports.default = _default;
},{"./ResetDisplayContent.js":"node_modules/phaser3-rex-plugins/templates/ui/label/methods/ResetDisplayContent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/label/Label.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer.js"));
var _AddChildMask = _interopRequireDefault(require("../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js"));
var _SetDisplaySize = _interopRequireDefault(require("../../../plugins/utils/size/SetDisplaySize.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Label extends _Sizer.default {
  constructor(scene, config) {
    // Create sizer
    super(scene, config);
    this.type = 'rexLabel';

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var icon = GetValue(config, 'icon', undefined);
    var iconMask = GetValue(config, 'iconMask', undefined);
    var text = GetValue(config, 'text', undefined);
    var action = GetValue(config, 'action', undefined);
    var actionMask = GetValue(config, 'actionMask', undefined);
    // Align
    var align = GetValue(config, 'align', undefined); // undefined/left/top: no space

    if (background) {
      this.addBackground(background);
    }

    // Add space
    if (align === 'right' || align === 'bottom' || align === 'center') {
      this.addSpace();
    }
    if (icon) {
      var iconSpace = GetValue(config, 'space.icon', 0);
      var padding;
      if (this.orientation === 0) {
        if (text || action) {
          padding = {
            right: iconSpace
          };
        }
      } else {
        if (text || action) {
          padding = {
            bottom: iconSpace
          };
        }
      }
      var fitRatio = GetValue(config, 'squareFitIcon', false) ? 1 : 0;
      this.add(icon, {
        proportion: 0,
        padding: padding,
        fitRatio: fitRatio
      });
      if (iconMask) {
        iconMask = _AddChildMask.default.call(this, icon, icon, 1); // Circle mask
      }

      if (!fitRatio) {
        var iconSize = GetValue(config, 'iconSize', undefined);
        this.setIconSize(GetValue(config, 'iconWidth', iconSize), GetValue(config, 'iconHeight', iconSize));
      }
    }
    if (text) {
      var textSpace = GetValue(config, 'space.text', 0);
      var expandTextWidth = GetValue(config, 'expandTextWidth', false);
      var expandTextHeight = GetValue(config, 'expandTextHeight', false);
      var proportion, padding, expand;
      if (this.orientation === 0) {
        proportion = expandTextWidth ? 1 : 0;
        if (action) {
          padding = {
            right: textSpace
          };
        }
        expand = expandTextHeight;
      } else {
        proportion = expandTextHeight ? 1 : 0;
        if (action) {
          padding = {
            bottom: textSpace
          };
        }
        expand = expandTextWidth;
      }
      this.add(text, {
        proportion: proportion,
        expand: expand,
        padding: padding
      });
    }
    if (action) {
      var fitRatio = GetValue(config, 'squareFitAction', false) ? 1 : 0;
      this.add(action, {
        proportion: 0,
        fitRatio: fitRatio
      });
      if (actionMask) {
        actionMask = _AddChildMask.default.call(this, action, action, 1); // Circle mask
      }

      if (!fitRatio) {
        var actionSize = GetValue(config, 'actionSize');
        this.setActionSize(GetValue(config, 'actionWidth', actionSize), GetValue(config, 'actionHeight', actionSize));
      }
    }

    // Add space
    if (align === 'center') {
      this.addSpace();
    }
    this.addChildrenMap('background', background);
    this.addChildrenMap('icon', icon);
    this.addChildrenMap('iconMask', iconMask);
    this.addChildrenMap('text', text);
    this.addChildrenMap('action', action);
    this.addChildrenMap('actionMask', actionMask);
  }

  // Access text game object
  get text() {
    var textObject = this.childrenMap.text;
    if (textObject === undefined) {
      return '';
    }
    return textObject.text;
  }
  set text(value) {
    var textObject = this.childrenMap.text;
    if (textObject === undefined) {
      return;
    }
    textObject.setText(value);
  }
  setText(value) {
    this.text = value;
    return this;
  }
  appendText(value) {
    this.text += value;
    return this;
  }

  // Access icon game object
  setIconTexture(key, frame) {
    var imageObject = this.childrenMap.icon;
    if (imageObject === undefined) {
      return this;
    }
    imageObject.setTexture(key, frame);
    if (this.iconWidth !== undefined) {
      (0, _SetDisplaySize.default)(imageObject, this.iconWidth, this.iconHeight);
      this.resetChildScaleState(imageObject);
    }
    return this;
  }
  setTexture(key, frame) {
    this.setIconTexture(key, frame);
    return this;
  }
  setIconSize(width, height) {
    if (height === undefined) {
      height = width;
    }
    this.iconWidth = width;
    this.iconHeight = height;
    return this;
  }
  get texture() {
    var imageObject = this.childrenMap.icon;
    if (imageObject === undefined) {
      return undefined;
    }
    return imageObject.texture;
  }
  get frame() {
    var imageObject = this.childrenMap.icon;
    if (imageObject === undefined) {
      return undefined;
    }
    return imageObject.frame;
  }
  setActionTexture(key, frame) {
    var imageObject = this.childrenMap.action;
    if (imageObject === undefined) {
      return this;
    }
    imageObject.setTexture(key, frame);
    if (this.actionWidth !== undefined) {
      (0, _SetDisplaySize.default)(imageObject, this.actionWidth, this.actionHeight);
      this.resetChildScaleState(imageObject);
    }
    return this;
  }
  get actionTexture() {
    var imageObject = this.childrenMap.action;
    if (imageObject === undefined) {
      return undefined;
    }
    return imageObject.texture;
  }
  get actionFrame() {
    var imageObject = this.childrenMap.action;
    if (imageObject === undefined) {
      return undefined;
    }
    return imageObject.frame;
  }
  setActionSize(width, height) {
    if (height === undefined) {
      height = width;
    }
    this.actionWidth = width;
    this.actionHeight = height;
    return this;
  }
  preLayout() {
    var icon = this.childrenMap.icon;
    if (icon && this.iconWidth !== undefined) {
      (0, _SetDisplaySize.default)(icon, this.iconWidth, this.iconHeight);
    }
    var action = this.childrenMap.action;
    if (action && this.actionWidth !== undefined) {
      (0, _SetDisplaySize.default)(action, this.actionWidth, this.actionHeight);
    }
    super.preLayout();
  }
  runLayout(parent, newWidth, newHeight) {
    if (this.ignoreLayout) {
      return this;
    }
    super.runLayout(parent, newWidth, newHeight);
    // Pin icon-mask to icon game object
    var iconMask = this.childrenMap.iconMask;
    if (iconMask) {
      iconMask.setPosition();
      this.resetChildPositionState(iconMask);
    }
    // Pin action-mask to action game object
    var actionMask = this.childrenMap.actionMask;
    if (actionMask) {
      actionMask.setPosition();
      this.resetChildPositionState(actionMask);
    }
    return this;
  }
  resize(width, height) {
    super.resize(width, height);
    // Resize icon-mask to icon game object
    var iconMask = this.childrenMap.iconMask;
    if (iconMask) {
      iconMask.resize();
    }
    // Resize action-mask to icon game object
    var actionMask = this.childrenMap.actionMask;
    if (actionMask) {
      actionMask.resize();
    }
    return this;
  }
}
Object.assign(Label.prototype, _Methods.default);
var _default = Label;
exports.default = _default;
},{"../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/mask/AddChildMask.js","../../../plugins/utils/size/SetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/SetDisplaySize.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/label/methods/Methods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/label/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Label = _interopRequireDefault(require("./Label.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('label', function (config) {
  var gameObject = new _Label.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Label', _Label.default);
var _default = _Label.default;
exports.default = _default;
},{"./Label.js":"node_modules/phaser3-rex-plugins/templates/ui/label/Label.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateRoundRectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RoundRectangle = _interopRequireDefault(require("../../roundrectangle/RoundRectangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateRoundRectangle = function (scene, config) {
  var gameObject = new _RoundRectangle.default(scene, config);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateRoundRectangle;
exports.default = _default;
},{"../../roundrectangle/RoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/roundrectangle/RoundRectangle.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateBackground.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateRoundRectangle = _interopRequireDefault(require("./CreateRoundRectangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateBackground = function (scene, config) {
  var gameObject = (0, _CreateRoundRectangle.default)(scene, config);
  // TODO: Create nine-slice background game object
  return gameObject;
};
var _default = CreateBackground;
exports.default = _default;
},{"./CreateRoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateRoundRectangle.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BBCodeText = _interopRequireDefault(require("../../bbcodetext/BBCodeText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const PhaserText = Phaser.GameObjects.Text;
const PhaserBitmapText = Phaser.GameObjects.BitmapText;
var CreateText = function (scene, config) {
  var type = GetValue(config, '$type');
  if (type === undefined) {
    if (!!GetValue(config, 'key')) {
      type = 'bitmaptext';
    }
  }
  var gameObject;
  switch (type) {
    case 'bitmaptext':
      var key = GetValue(config, 'key');
      var size = GetValue(config, 'size');
      if (size === undefined) {
        size = GetValue(config, 'fontSize');
      }
      gameObject = new PhaserBitmapText(scene, 0, 0, key, '', size);
      var color = GetValue(config, 'color');
      if (color !== undefined) {
        gameObject.setTint(color);
      }
      break;
    case 'text':
      gameObject = new PhaserText(scene, 0, 0, '', config);
      break;
    default:
      gameObject = new _BBCodeText.default(scene, 0, 0, '', config);
      break;
  }
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateText;
exports.default = _default;
},{"../../bbcodetext/BBCodeText.js":"node_modules/phaser3-rex-plugins/templates/ui/bbcodetext/BBCodeText.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/bitmaptext/IsBitmapTextGameObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const BitmapTextKlass = Phaser.GameObjects.BitmapText;
var IsBitmapTextGameObject = function (gameObject) {
  return gameObject instanceof BitmapTextKlass;
};
var _default = IsBitmapTextGameObject;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/text/IsTextGameObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const TextKlass = Phaser.GameObjects.Text;
var IsTextGameObject = function (gameObject) {
  return gameObject instanceof TextKlass;
};
var _default = IsTextGameObject;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/wrapexpandtext/TextRunWidthWrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsTextGameObject = _interopRequireDefault(require("../../../../plugins/utils/text/IsTextGameObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var TextRunWidthWrap = function (textObject) {
  var RunWidthWrap = function (width) {
    var padding = textObject.padding;
    var wrapWidth = width - padding.left - padding.right;
    var style = textObject.style;
    if ((0, _IsTextGameObject.default)(textObject)) {
      style.wordWrapWidth = wrapWidth;
      style.maxLines = 0;
    } else {
      // BBCode text, Tag text
      if (style.wrapMode === 0) {
        // Turn no-wrap to word-wrap
        style.wrapMode = 1;
      }
      style.wrapWidth = wrapWidth;
      style.maxLines = 0;
    }
    style.fixedWidth = width;
    style.fixedHeight = 0;
    textObject.updateText(); // Redraw text

    textObject.minHeight = textObject.height;
    return textObject;
  };
  return RunWidthWrap;
};
var _default = TextRunWidthWrap;
exports.default = _default;
},{"../../../../plugins/utils/text/IsTextGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/IsTextGameObject.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/wrapexpandtext/DynamicTextRunWidthWrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var DynamicTextRunWidthWrap = function (textObject) {
  var RunWidthWrap = function (width) {
    textObject.setFixedSize(width, 0).runWordWrap();
    textObject.minHeight = textObject.height;
    return textObject;
  };
  return RunWidthWrap;
};
var _default = DynamicTextRunWidthWrap;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/wrapexpandtext/BitmapTextRunWidthWrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var BitmapTextRunWidthWrap = function (textObject) {
  var RunWidthWrap = function (width) {
    textObject.setMaxWidth(width);
    textObject.minHeight = textObject.height;
    return textObject;
  };
  return RunWidthWrap;
};
var _default = BitmapTextRunWidthWrap;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/wrapexpandtext/WrapExpandText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DynamicText = _interopRequireDefault(require("../../dynamictext/DynamicText.js"));
var _IsBitmapTextGameObject = _interopRequireDefault(require("../../../../plugins/utils/bitmaptext/IsBitmapTextGameObject.js"));
var _TextRunWidthWrap = _interopRequireDefault(require("./TextRunWidthWrap.js"));
var _DynamicTextRunWidthWrap = _interopRequireDefault(require("./DynamicTextRunWidthWrap.js"));
var _BitmapTextRunWidthWrap = _interopRequireDefault(require("./BitmapTextRunWidthWrap.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var IsDynamicTextGameObject = function (gameObject) {
  return gameObject instanceof _DynamicText.default;
};
var WrapExpandText = function (textObject, minWidth) {
  if (minWidth === undefined) {
    minWidth = 0;
  }
  textObject._minWidth = minWidth;
  textObject.runWidthWrap = IsDynamicTextGameObject(textObject) ? (0, _DynamicTextRunWidthWrap.default)(textObject) : (0, _IsBitmapTextGameObject.default)(textObject) ? (0, _BitmapTextRunWidthWrap.default)(textObject) : (0, _TextRunWidthWrap.default)(textObject);
  return textObject;
};
var _default = WrapExpandText;
exports.default = _default;
},{"../../dynamictext/DynamicText.js":"node_modules/phaser3-rex-plugins/templates/ui/dynamictext/DynamicText.js","../../../../plugins/utils/bitmaptext/IsBitmapTextGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/bitmaptext/IsBitmapTextGameObject.js","./TextRunWidthWrap.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/wrapexpandtext/TextRunWidthWrap.js","./DynamicTextRunWidthWrap.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/wrapexpandtext/DynamicTextRunWidthWrap.js","./BitmapTextRunWidthWrap.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/wrapexpandtext/BitmapTextRunWidthWrap.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const PhaserImage = Phaser.GameObjects.Image;
var CreateImage = function (scene, config) {
  var gameObject = new PhaserImage(scene, 0, 0, '');
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateImage;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/BuildDisplayLabelConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DeepClone = _interopRequireDefault(require("../../../../plugins/utils/object/DeepClone.js"));
var _SetValue = _interopRequireDefault(require("../../../../plugins/utils/object/SetValue.js"));
var _CreateBackground = _interopRequireDefault(require("./CreateBackground.js"));
var _CreateText = _interopRequireDefault(require("./CreateText.js"));
var _WrapExpandText = _interopRequireDefault(require("../wrapexpandtext/WrapExpandText.js"));
var _CreateImage = _interopRequireDefault(require("./CreateImage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var BuildDisplayLabelConfig = function (scene, config, creators) {
  config = config ? (0, _DeepClone.default)(config) : {};
  var createBackground = GetValue(creators, 'background', _CreateBackground.default);
  var createText = GetValue(creators, 'text', _CreateText.default);
  var createIcon = GetValue(creators, 'icon', _CreateImage.default);
  var createAction = GetValue(creators, 'action', _CreateImage.default);
  if (createBackground) {
    config.background = createBackground(scene, config.background);
  } else {
    delete config.background;
  }
  if (createText) {
    var wrapText = GetValue(config, 'wrapText', false);
    if (wrapText) {
      if (wrapText === true) {
        wrapText = 'word';
      }
      (0, _SetValue.default)(config, 'text.wrap.mode', wrapText);
      config.expandTextWidth = true;
    }
    config.text = createText(scene, config.text);
    if (wrapText) {
      config.text = (0, _WrapExpandText.default)(config.text);
    }
  } else {
    delete config.text;
  }
  if (createIcon && config.icon !== null) {
    config.icon = createIcon(scene, config.icon);
  } else {
    delete config.icon;
  }
  if (createAction && config.action !== null) {
    config.action = createAction(scene, config.action);
  } else {
    delete config.action;
  }
  return config;
};
var _default = BuildDisplayLabelConfig;
exports.default = _default;
},{"../../../../plugins/utils/object/DeepClone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js","../../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js","./CreateBackground.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateBackground.js","./CreateText.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateText.js","../wrapexpandtext/WrapExpandText.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/wrapexpandtext/WrapExpandText.js","./CreateImage.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateImage.js"}],"node_modules/phaser3-rex-plugins/templates/ui/simplelabel/SimpleLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Label = _interopRequireDefault(require("../label/Label.js"));
var _BuildDisplayLabelConfig = _interopRequireDefault(require("../utils/build/BuildDisplayLabelConfig.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class SimpleLabel extends _Label.default {
  constructor(scene, config, creators) {
    config = (0, _BuildDisplayLabelConfig.default)(scene, config, creators);
    super(scene, config);
    this.type = 'rexSimpleLabel';
  }
}
var _default = SimpleLabel;
exports.default = _default;
},{"../label/Label.js":"node_modules/phaser3-rex-plugins/templates/ui/label/Label.js","../utils/build/BuildDisplayLabelConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/BuildDisplayLabelConfig.js"}],"node_modules/phaser3-rex-plugins/templates/ui/simplelabel/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SimpleLabel = _interopRequireDefault(require("./SimpleLabel.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('simpleLabel', function (config, creators) {
  var gameObject = new _SimpleLabel.default(this.scene, config, creators);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.SimpleLabel', _SimpleLabel.default);
var _default = _SimpleLabel.default;
exports.default = _default;
},{"./SimpleLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/simplelabel/SimpleLabel.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/titlelabel/TitleLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer.js"));
var _AddChildMask = _interopRequireDefault(require("../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class TitleLabel extends _Sizer.default {
  constructor(scene, config) {
    // Create sizer
    super(scene, config);
    this.type = 'rexTitleLabel';

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var icon = GetValue(config, 'icon', undefined);
    var iconMask = GetValue(config, 'iconMask', undefined);
    var title = GetValue(config, 'title', undefined);
    var separator = GetValue(config, 'separator', undefined);
    var text = GetValue(config, 'text', undefined);
    var action = GetValue(config, 'action', undefined);
    var actionMask = GetValue(config, 'actionMask', undefined);
    var hasTextSizer = text || title || separator;
    if (background) {
      this.addBackground(background);
    }
    if (icon) {
      var padding = undefined;
      if (this.orientation === 0) {
        if (hasTextSizer || action) {
          padding = {
            right: GetValue(config, 'space.icon', 0),
            top: GetValue(config, 'space.iconTop', 0),
            bottom: GetValue(config, 'space.iconBottom', 0)
          };
        }
      } else {
        if (hasTextSizer || action) {
          padding = {
            bottom: GetValue(config, 'space.icon', 0),
            left: GetValue(config, 'space.iconLeft', 0),
            right: GetValue(config, 'space.iconRight', 0)
          };
        }
      }
      this.add(icon, {
        proportion: 0,
        padding: padding
      });
      if (iconMask) {
        iconMask = _AddChildMask.default.call(this, icon, icon, 1); // Circle mask
      }
    }

    if (hasTextSizer) {
      var textSizer = new _Sizer.default(scene, {
        orientation: 1
      });
      var separatorSpace = GetValue(config, 'space.separator', 0);
      if (title) {
        var titleAlign = GetValue(config, 'align.title', 'right');
        var padding = {
          bottom: !separator && text ? separatorSpace : 0
        };
        textSizer.add(title, {
          align: titleAlign
        });
      }
      if (separator) {
        var padding = {
          top: title ? separatorSpace : 0,
          bottom: text ? separatorSpace : 0,
          left: GetValue(config, 'space.separatorLeft', 0),
          right: GetValue(config, 'space.separatorRight', 0)
        };
        textSizer.add(separator, {
          expand: true,
          padding: padding
        });
      }
      if (text) {
        var textAlign = GetValue(config, 'align.text', 'right');
        textSizer.add(text, {
          align: textAlign
        });
      }
      var padding = undefined;
      if (action) {
        padding = {
          right: GetValue(config, 'space.text', 0)
        };
      }
      this.add(textSizer, {
        proportion: 1,
        padding: padding
      });
    }
    if (action) {
      var padding;
      if (this.orientation === 0) {
        padding = {
          top: GetValue(config, 'space.actionTop', 0),
          bottom: GetValue(config, 'space.actionBottom', 0)
        };
      } else {
        padding = {
          left: GetValue(config, 'space.actionLeft', 0),
          right: GetValue(config, 'space.actionRight', 0)
        };
      }
      this.add(action, {
        proportion: 0,
        padding: padding
      });
      if (actionMask) {
        actionMask = _AddChildMask.default.call(this, action, action, 1); // Circle mask
      }
    }

    this.addChildrenMap('background', background);
    this.addChildrenMap('icon', icon);
    this.addChildrenMap('iconMask', iconMask);
    this.addChildrenMap('title', title);
    this.addChildrenMap('separator', separator);
    this.addChildrenMap('text', text);
    this.addChildrenMap('action', action);
    this.addChildrenMap('actionMask', actionMask);
  }

  // Access title game object
  get title() {
    var textObject = this.childrenMap.title;
    if (textObject === undefined) {
      return '';
    }
    return textObject.title;
  }
  set title(value) {
    var textObject = this.childrenMap.title;
    if (textObject === undefined) {
      return;
    }
    textObject.setText(value);
  }
  setTitle(value) {
    this.title = value;
    return this;
  }
  appendTitle(value) {
    this.title += value;
    return this;
  }

  // Access text game object
  get text() {
    var textObject = this.childrenMap.text;
    if (textObject === undefined) {
      return '';
    }
    return textObject.text;
  }
  set text(value) {
    var textObject = this.childrenMap.text;
    if (textObject === undefined) {
      return;
    }
    textObject.setText(value);
  }
  setText(value) {
    this.text = value;
    return this;
  }
  appendText(value) {
    this.text += value;
    return this;
  }

  // Access icon game object
  setTexture(key, frame) {
    var imageObject = this.childrenMap.icon;
    if (imageObject === undefined) {
      return;
    }
    imageObject.setTexture(key, frame);
    return this;
  }
  get texture() {
    var imageObject = this.childrenMap.icon;
    if (imageObject === undefined) {
      return undefined;
    }
    return imageObject.texture;
  }
  get frame() {
    var imageObject = this.childrenMap.icon;
    if (imageObject === undefined) {
      return undefined;
    }
    return imageObject.frame;
  }
  runLayout(parent, newWidth, newHeight) {
    if (this.ignoreLayout) {
      return this;
    }
    super.runLayout(parent, newWidth, newHeight);
    // Pin icon-mask to icon game object
    var iconMask = this.childrenMap.iconMask;
    if (iconMask) {
      iconMask.setPosition();
      this.resetChildPositionState(iconMask);
    }
    // Pin action-mask to action game object
    var actionMask = this.childrenMap.actionMask;
    if (actionMask) {
      actionMask.setPosition();
      this.resetChildPositionState(actionMask);
    }
    return this;
  }
  resize(width, height) {
    super.resize(width, height);
    // Resize icon-mask to icon game object
    var iconMask = this.childrenMap.iconMask;
    if (iconMask) {
      iconMask.resize();
    }
    // Resize action-mask to icon game object
    var actionMask = this.childrenMap.actionMask;
    if (actionMask) {
      actionMask.resize();
    }
    return this;
  }
}
var _default = TitleLabel;
exports.default = _default;
},{"../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/mask/AddChildMask.js"}],"node_modules/phaser3-rex-plugins/templates/ui/titlelabel/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TitleLabel = _interopRequireDefault(require("./TitleLabel.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('titleLabel', function (config) {
  var gameObject = new _TitleLabel.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.TitleLabel', _TitleLabel.default);
var _default = _TitleLabel.default;
exports.default = _default;
},{"./TitleLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/titlelabel/TitleLabel.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/namevaluelabel/methods/Build.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../../sizer/Sizer.js"));
var _LineProgressCanvas = _interopRequireDefault(require("../../lineprogresscanvas/LineProgressCanvas.js"));
var _AddChildMask = _interopRequireDefault(require("../../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
var Build = function (scene, config) {
  // Add elements
  var background = GetValue(config, 'background', undefined);
  var icon = GetValue(config, 'icon', undefined);
  var iconMask = GetValue(config, 'iconMask', undefined);
  var nameText = GetValue(config, 'nameText', undefined);
  var valueText = GetValue(config, 'valueText', undefined);
  var bar = GetValue(config, 'bar', undefined);
  var action = GetValue(config, 'action', undefined);
  var actionMask = GetValue(config, 'actionMask', undefined);
  if (IsPlainObject(bar)) {
    bar = new _LineProgressCanvas.default(scene, bar);
    scene.add.existing(bar);
    // Move bar game object below nameText and valueText
    if (nameText) {
      scene.children.moveBelow(bar, nameText);
    }
    if (valueText) {
      scene.children.moveBelow(bar, valueText);
    }
  }
  var hasTextSizer = nameText || valueText || bar;
  if (background) {
    this.addBackground(background);
  }
  if (icon) {
    var padding = undefined;
    if (this.orientation === 0) {
      if (hasTextSizer || action) {
        padding = {
          right: GetValue(config, 'space.icon', 0),
          top: GetValue(config, 'space.iconTop', 0),
          bottom: GetValue(config, 'space.iconBottom', 0)
        };
      }
    } else {
      if (hasTextSizer || action) {
        padding = {
          bottom: GetValue(config, 'space.icon', 0),
          left: GetValue(config, 'space.iconLeft', 0),
          right: GetValue(config, 'space.iconRight', 0)
        };
      }
    }
    this.add(icon, {
      proportion: 0,
      padding: padding
    });
    if (iconMask) {
      iconMask = _AddChildMask.default.call(this, icon, icon, 1); // Circle mask
    }
  }

  if (hasTextSizer) {
    var textSizer = new _Sizer.default(scene, {
      orientation: 1
    });
    var nameValueSizer;
    if (nameText || valueText) {
      nameValueSizer = new _Sizer.default(scene, {
        orientation: 0
      });
      if (nameText) {
        // A space character to reserve text height
        if (nameText.text === '') {
          nameText.setText(' ');
        }
        nameText.setOrigin(0, nameText.originY);
        var padding = {
          left: GetValue(config, 'space.name', 0)
        };
        nameValueSizer.add(nameText, {
          padding: padding
        });
      }
      if (valueText) {
        // A space character to reserve text height
        if (valueText.text === '') {
          valueText.setText(' ');
        }
        valueText.setOrigin(1, valueText.originY);
        nameValueSizer.addSpace();
        var padding = {
          right: GetValue(config, 'space.value', 0)
        };
        nameValueSizer.add(valueText, {
          padding: padding
        });
        this.setValueTextFormatCallback(GetValue(config, 'valueTextFormatCallback', DefaultValueTextFormatCallback), GetValue(config, 'valueTextFormatCallbackScope', undefined));
      }
      textSizer.add(nameValueSizer, {
        expand: true
      });
    }
    if (bar) {
      var padding = {
        top: nameValueSizer ? GetValue(config, 'space.bar', 0) : 0,
        bottom: GetValue(config, 'space.barBottom', 0),
        left: GetValue(config, 'space.barLeft', 0),
        right: GetValue(config, 'space.barRight', 0)
      };
      textSizer.add(bar, {
        expand: true,
        padding: padding
      });
    }
    var padding = undefined;
    if (action) {
      padding = {
        right: GetValue(config, 'space.text', 0)
      };
    }
    var textAlign = GetValue(config, 'align.text', 'bottom');
    this.add(textSizer, {
      proportion: 1,
      align: textAlign,
      padding: padding
    });
  }
  if (action) {
    var padding;
    if (this.orientation === 0) {
      padding = {
        top: GetValue(config, 'space.actionTop', 0),
        bottom: GetValue(config, 'space.actionBottom', 0)
      };
    } else {
      padding = {
        left: GetValue(config, 'space.actionLeft', 0),
        right: GetValue(config, 'space.actionRight', 0)
      };
    }
    this.add(action, {
      proportion: 0,
      padding: padding
    });
    if (actionMask) {
      actionMask = _AddChildMask.default.call(this, action, action, 1); // Circle mask
    }
  }

  this.addChildrenMap('background', background);
  this.addChildrenMap('icon', icon);
  this.addChildrenMap('iconMask', iconMask);
  this.addChildrenMap('name', nameText);
  this.addChildrenMap('value', valueText);
  this.addChildrenMap('bar', bar);
  this.addChildrenMap('action', action);
  this.addChildrenMap('actionMask', actionMask);
};
var DefaultValueTextFormatCallback = function (value, min, max) {
  return value.toString();
};
var _default = Build;
exports.default = _default;
},{"../../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../../lineprogresscanvas/LineProgressCanvas.js":"node_modules/phaser3-rex-plugins/templates/ui/lineprogresscanvas/LineProgressCanvas.js","../../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/mask/AddChildMask.js"}],"node_modules/phaser3-rex-plugins/templates/ui/namevaluelabel/methods/SetValueMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Clamp = Phaser.Math.Clamp;
var _default = {
  setValueTextFormatCallback(callback, scope) {
    this.valueTextFormatCallback = callback;
    this.valueTextFormatCallbackScope = scope;
    return this;
  },
  getFormatValueText(value, min, max) {
    if (value === undefined) {
      value = this.value;
    }
    if (min === undefined) {
      min = this.minValue;
    }
    if (max === undefined) {
      max = this.maxValue;
    }
    var text;
    if (this.valueTextFormatCallbackScope) {
      text = this.valueTextFormatCallback(value, min, max);
    } else {
      text = this.valueTextFormatCallback.call(this.valueTextFormatCallbackScope, value, min, max);
    }
    return text;
  },
  updateValueText(value, min, max) {
    var textObject = this.childrenMap.value;
    if (textObject && this.valueTextFormatCallback) {
      textObject.setText(this.getFormatValueText(value, min, max));
      if (textObject.layout) {
        textObject.layout();
      }
    }
    return this;
  },
  setValue(value, min, max) {
    value = Clamp(value, min, max);
    this.value = value;
    this.minValue = min;
    this.maxValue = max;
    this.updateValueText(value, min, max);
    this.setBarValue(value, min, max);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/namevaluelabel/NameValueLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer.js"));
var _Build = _interopRequireDefault(require("./methods/Build.js"));
var _SetValueMethods = _interopRequireDefault(require("./methods/SetValueMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class NameValueLabel extends _Sizer.default {
  constructor(scene, config) {
    // Create sizer
    super(scene, config);
    this.type = 'rexNameValueLabel';
    _Build.default.call(this, scene, config);
  }

  // Access nameText game object
  get nameText() {
    var textObject = this.childrenMap.name;
    if (textObject === undefined) {
      return '';
    }
    return textObject.text;
  }
  set nameText(value) {
    var textObject = this.childrenMap.name;
    if (textObject === undefined) {
      return;
    }
    textObject.setText(value);
  }
  setNameText(value) {
    this.nameText = value;
    return this;
  }

  // Access valueText game object
  get valueText() {
    var textObject = this.childrenMap.value;
    if (textObject === undefined) {
      return '';
    }
    return textObject.text;
  }
  set valueText(value) {
    var textObject = this.childrenMap.value;
    if (textObject === undefined) {
      return;
    }
    textObject.setText(value);
  }
  setValueText(value) {
    this.valueText = value;
    return this;
  }

  // Accrss bar game object
  get barValue() {
    var bar = this.childrenMap.bar;
    if (bar === undefined) {
      return;
    }
    return bar.value;
  }
  set barValue(value) {
    var bar = this.childrenMap.bar;
    if (bar === undefined) {
      return;
    }
    bar.setValue(value);
  }
  setBarValue(value, min, max) {
    var bar = this.childrenMap.bar;
    if (bar === undefined) {
      return this;
    }
    bar.setValue(value, min, max);
    return this;
  }
  easeBarValueTo(value, min, max) {
    var bar = this.childrenMap.bar;
    if (bar === undefined) {
      return this;
    }
    bar.easeValueTo(value, min, max);
    return this;
  }

  // Access icon game object
  setTexture(key, frame) {
    var imageObject = this.childrenMap.icon;
    if (imageObject === undefined) {
      return;
    }
    imageObject.setTexture(key, frame);
    return this;
  }
  get texture() {
    var imageObject = this.childrenMap.icon;
    if (imageObject === undefined) {
      return undefined;
    }
    return imageObject.texture;
  }
  get frame() {
    var imageObject = this.childrenMap.icon;
    if (imageObject === undefined) {
      return undefined;
    }
    return imageObject.frame;
  }
  runLayout(parent, newWidth, newHeight) {
    if (this.ignoreLayout) {
      return this;
    }
    super.runLayout(parent, newWidth, newHeight);
    // Pin icon-mask to icon game object
    var iconMask = this.childrenMap.iconMask;
    if (iconMask) {
      iconMask.setPosition();
      this.resetChildPositionState(iconMask);
    }
    // Pin action-mask to action game object
    var actionMask = this.childrenMap.actionMask;
    if (actionMask) {
      actionMask.setPosition();
      this.resetChildPositionState(actionMask);
    }
    return this;
  }
  resize(width, height) {
    super.resize(width, height);
    // Resize icon-mask to icon game object
    var iconMask = this.childrenMap.iconMask;
    if (iconMask) {
      iconMask.resize();
    }
    // Resize action-mask to icon game object
    var actionMask = this.childrenMap.actionMask;
    if (actionMask) {
      actionMask.resize();
    }
    return this;
  }
}
Object.assign(NameValueLabel.prototype, _SetValueMethods.default);
var _default = NameValueLabel;
exports.default = _default;
},{"../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","./methods/Build.js":"node_modules/phaser3-rex-plugins/templates/ui/namevaluelabel/methods/Build.js","./methods/SetValueMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/namevaluelabel/methods/SetValueMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/namevaluelabel/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NameValueLabel = _interopRequireDefault(require("./NameValueLabel.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('nameValueLabel', function (config) {
  var gameObject = new _NameValueLabel.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.NameValueLabel', _NameValueLabel.default);
var _default = _NameValueLabel.default;
exports.default = _default;
},{"./NameValueLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/namevaluelabel/NameValueLabel.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/buttons/AddChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer.js"));
var _IsArray = _interopRequireDefault(require("../../../plugins/utils/object/IsArray.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SizerAdd = _Sizer.default.prototype.add;
const SizerAddSpace = _Sizer.default.prototype.addSpace;
var Add = function (gameObject) {
  var isNormalGameObject = !gameObject.isRexSpace;
  var proportion = !isNormalGameObject || this.buttonsExpand ? 1 : 0;
  if (this.sizerChildren.length === 0) {
    // First element
    if (isNormalGameObject) {
      // Add space at head
      var hasHeadSpace = !this.buttonsExpand && (this.buttonsAlign === 'right' || this.buttonsAlign === 'center' || this.buttonsAlign === 'bottom');
      if (hasHeadSpace) {
        SizerAddSpace.call(this);
      }
      SizerAdd.call(this, gameObject, {
        proportion: proportion,
        expand: true
      });

      // Add space at tail
      var hasTailSpace = !this.buttonsExpand && this.buttonsAlign === 'center';
      if (hasTailSpace) {
        SizerAddSpace.call(this);
      }
      this.hasTailSpace = hasTailSpace;
    } else {
      // A space
      SizerAdd.call(this, gameObject, {
        proportion: proportion,
        expand: true
      });
      this.hasTailSpace = false;
    }
  } else {
    // Others
    if (this.hasTailSpace) {
      var lastIndex = this.sizerChildren.length - 1;
      SizerAdd.call(this, gameObject, {
        index: lastIndex,
        proportion: proportion,
        expand: true
      });
    } else {
      SizerAdd.call(this, gameObject, {
        proportion: proportion,
        expand: true
      });
    }
  }

  // Space or other game object as button
  if (isNormalGameObject) {
    this.buttonGroup.add(gameObject);
  }
  return this;
};
var _default = {
  addButton(gameObject) {
    if ((0, _IsArray.default)(gameObject)) {
      var gameObjects = gameObject;
      for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
        Add.call(this, gameObjects[i]);
      }
    } else {
      Add.call(this, gameObject);
    }
    return this;
  },
  addButtons(gameObjects) {
    for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
      Add.call(this, gameObjects[i]);
    }
    return this;
  }
};
exports.default = _default;
},{"../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../../../plugins/utils/object/IsArray.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsArray.js"}],"node_modules/phaser3-rex-plugins/templates/ui/buttons/RemoveChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer.js"));
var _IsArray = _interopRequireDefault(require("../../../plugins/utils/object/IsArray.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SizerRmove = _Sizer.default.prototype.remove;
const SizerClear = _Sizer.default.prototype.clear;
var Remove = function (gameObject, destroyChild) {
  if (this.getParentSizer(gameObject) !== this) {
    return this;
  }
  this.buttonGroup.remove(gameObject);
  SizerRmove.call(this, gameObject, destroyChild);
  return this;
};
var _default = {
  remove(gameObject, destroyChild) {
    // Remove gameObject no matter it is a button or not
    if ((0, _IsArray.default)(gameObject)) {
      var gameObjects = gameObject;
      for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
        Remove.call(this, gameObjects[i], destroyChild);
      }
    } else {
      Remove.call(this, gameObject, destroyChild);
    }
    return this;
  },
  clear(destroyChild) {
    var buttons = this.buttonGroup.buttons;
    buttons.length = 0;
    SizerClear.call(this, destroyChild);
    return this;
  },
  removeButton(gameObject, destroyChild) {
    var gameObject = this.getButton(gameObject);
    // Don't remove this gameObject, it is not a button
    if (!gameObject) {
      return this;
    }
    this.remove(gameObject, destroyChild);
    return this;
  },
  clearButtons(destroyChild) {
    var buttons = this.buttonGroup.buttons;
    for (var i = buttons.length - 1; i >= 0; i--) {
      Remove.call(this, buttons[i], destroyChild);
    }
    return this;
  }
};
exports.default = _default;
},{"../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../../../plugins/utils/object/IsArray.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsArray.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/AddMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Click = _interopRequireDefault(require("../../click/Click.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  add(gameObject) {
    this.buttons.push(gameObject);
    if (this.buttonsType) {
      var key = gameObject.name;
      if (key === '') {
        console.error(`${this.parent.constructor.name}: Button key is an empty string`);
      } else if (this.buttonMap.hasOwnProperty(key)) {
        console.error(`${this.parent.constructor.name}: Duplicate button key '${key}'`);
      }
      this.buttonMap[key] = gameObject;
      this.dataManager.set(key, undefined).set(key, false); // Trigger data event 'changedata'
    }

    //Default: Fire 'click' event when touch released after pressed.
    gameObject._buttonBehavior = new _Click.default(gameObject, this.clickConfig);
    gameObject._buttonBehavior.on('click', function (buttonBehavior, gameObject, pointer, event) {
      this.fireEvent('button.click', gameObject, pointer, event);
    }, this).on('enable', function (buttonBehavior, gameObject) {
      this.fireEvent('button.enable', gameObject);
    }, this).on('disable', function (buttonBehavior, gameObject) {
      this.fireEvent('button.disable', gameObject);
    }, this);
    gameObject.on('pointerover', function (pointer, localX, localY, event) {
      this.fireEvent('button.over', gameObject, pointer, event);
    }, this).on('pointerout', function (pointer, event) {
      this.fireEvent('button.out', gameObject, pointer, event);
    }, this);
    return this;
  },
  addMultiple(gameObjects) {
    for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
      this.add(gameObject[i]);
    }
    return this;
  }
};
exports.default = _default;
},{"../../click/Click.js":"node_modules/phaser3-rex-plugins/templates/ui/click/Click.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/RemoveMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const RemoveItem = Phaser.Utils.Array.Remove;
var _default = {
  remove(gameObject) {
    RemoveItem(this.buttons, gameObject);
    if (this.buttonsType) {
      var key = gameObject.name;
      delete this.buttonMap[key];
      this.dataManager.remove(key);
    }
    return this;
  },
  clear() {
    this.buttons.length = 0;
    if (this.buttonsType) {
      for (var key in this.buttonMap) {
        delete this.buttonMap[key];
        this.dataManager.remove(key);
      }
    }
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/FireEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var FireEvent = function (eventName, button, ...args) {
  var index;
  if (typeof button === 'number') {
    index = button;
    button = this.buttons[index];
    if (!button) {
      return;
    }
  } else {
    index = this.buttons.indexOf(button);
    if (index === -1) {
      return;
    }
  }

  // Buttons is a child. Fire internal events.
  if (this.eventEmitter !== this.parent) {
    this.parent.emit(eventName, button, index, ...args);
  }
  if (this.groupName !== undefined) {
    this.eventEmitter.emit(eventName, button, this.groupName, index, ...args);
  } else {
    this.eventEmitter.emit(eventName, button, index, ...args);
  }
};
var _default = FireEvent;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/SetTypeMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetValue = Phaser.Utils.Objects.GetValue;
var Initialize = function (config) {
  // Assign this.dataManager
  var dataManager = GetValue(config, 'dataManager', undefined);
  if (dataManager === undefined) {
    var parent = this.parent;
    parent.setDataEnabled();
    dataManager = parent.data;
  }
  this.dataManager = dataManager;

  // Assign this.setValueCallback, this.setValueCallbackScope
  var setValueCallback, setValueCallbackScope;
  setValueCallback = GetValue(config, 'setValueCallback', undefined);
  setValueCallbackScope = GetValue(config, 'setValueCallbackScope', undefined);
  if (setValueCallback === undefined) {
    setValueCallback = GetValue(config, 'setButtonStateCallback', undefined);
    setValueCallbackScope = GetValue(config, 'setButtonStateCallbackScope', undefined);
  }
  this.setValueCallback = setValueCallback;
  this.setValueCallbackScope = setValueCallbackScope;

  // Register event callback
  dataManager.events.on(`changedata`, function (parent, key, value, previousValue) {
    var button = this.buttonMap[key];
    if (!button) {
      return;
    }
    var callback = this.setValueCallback;
    var scope = this.setValueCallbackScope;
    if (callback) {
      if (scope) {
        callback.call(scope, button, value, previousValue);
      } else {
        callback(button, value, previousValue);
      }
    }
    this.fireEvent('button.statechange', button, value, previousValue);
  }, this);
};
var _default = {
  setButtonsType(config) {
    if (config === undefined) {
      config = {};
    }
    var buttonsType = GetValue(config, 'buttonsType', config.type);
    this.buttonsType = buttonsType;
    switch (buttonsType) {
      case 'radio':
        this.setRadioType(config);
        break;
      case 'checkboxes':
        this.setCheckboxesType(config);
        break;
    }
    return this;
  },
  setRadioType(config) {
    Initialize.call(this, config);
    var radioValue = undefined;
    var parent = this.parent,
      buttons = this.buttons,
      dataManager = this.dataManager;
    Object.defineProperty(parent, 'value', {
      get: function () {
        return radioValue;
      },
      set: function (newValue) {
        if (newValue === radioValue) {
          return;
        }
        radioValue = newValue;
        // Update state of button -> Fire `changedata-btnName` event -> setValueCallback                
        buttons.forEach(function (button) {
          var key = button.name;
          var state = dataManager.get(key);
          if (key === newValue) {
            if (!state) {
              dataManager.set(key, true);
            }
          } else {
            if (state) {
              dataManager.set(key, false);
            }
          }
        });
      },
      enumerable: true,
      configurable: true
    });
    parent.on('button.click', function (button) {
      parent.value = button.name;
    });
    // button.click event -> parent.value -> dataManager -> changedata event -> ...
    // parent.value -> dataManager -> changedata event -> ...

    return this;
  },
  setCheckboxesType(config) {
    Initialize.call(this, config);
    var parent = this.parent,
      dataManager = this.dataManager;
    parent.on('button.click', function (button) {
      dataManager.toggle(button.name);
    });
    // button.click event -> dataManager -> changedata event -> ...
    // dataManager.set() -> changedata event -> ...

    return this;
  },
  // Common
  clearAllButtonsState() {
    for (var key in this.buttonMap) {
      this.dataManager.set(key, false);
    }
    return this;
  },
  getAllButtonsState() {
    var states = {};
    for (var key in this.buttonMap) {
      states[key] = this.dataManager.get(key);
    }
    return states;
  },
  // For radio
  setSelectedButtonName(name) {
    this.parent.value = name;
    return this;
  },
  getSelectedButtonName() {
    return this.parent.value;
  },
  // For checkboxes
  setButtonState(name, state) {
    if (state === undefined) {
      state = true;
    }
    this.dataManager.set(name, state);
    return this;
  },
  getButtonState(name) {
    return this.dataManager.get(name);
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/system/GetGameObjectByName.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsArray = _interopRequireDefault(require("../object/IsArray.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetGameObjectByName = function (children, name) {
  if (!children) {
    return null;
  } else if ((0, _IsArray.default)(children)) {
    var child;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      child = TestName(children[i], name);
      if (child) {
        return child;
      }
    }
  } else {
    // Is plain object
    var child;
    for (var key in children) {
      child = TestName(children[key], name);
      if (child) {
        return child;
      }
    }
  }
};
var TestName = function (gameObject, name) {
  if (!gameObject) {
    return null;
  } else if (gameObject.hasOwnProperty('name')) {
    return gameObject.name === name ? gameObject : null;
  } else {
    // Array, or plain object
    return GetElementByName(gameObject, name);
  }
};
var _default = GetGameObjectByName;
exports.default = _default;
},{"../object/IsArray.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsArray.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/GetGameObjectByName.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetGameObjectByName = _interopRequireDefault(require("../../../plugins/utils/system/GetGameObjectByName.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _GetGameObjectByName.default;
exports.default = _default;
},{"../../../plugins/utils/system/GetGameObjectByName.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetGameObjectByName.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/ButtonMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetGameObjectByName = _interopRequireDefault(require("../GetGameObjectByName.js"));
var _Hide = require("../Hide.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// Include in ButtonGroup class and Buttons/GridButtons/FixedWidthButtons class
var _default = {
  getButton(index) {
    // buttonGroup and button-sizer have *buttons* member both
    var buttons = this.buttons,
      button;
    var indexType = typeof index;
    switch (indexType) {
      case 'number':
        button = buttons[index];
        break;
      case 'string':
        button = (0, _GetGameObjectByName.default)(buttons, index);
        break;
      default:
        button = index;
        if (buttons.indexOf(button) === -1) {
          button = undefined;
        }
        break;
    }
    return button;
  },
  setButtonEnable(index, enabled) {
    // buttonGroup and button-sizer have *buttons* member both
    var buttons = this.buttons;
    if (index === undefined || typeof index === 'boolean') {
      enabled = index;
      for (var i = 0, cnt = buttons.length; i < cnt; i++) {
        buttons[i]._buttonBehavior.setEnable(enabled);
      }
    } else {
      this.getButton(index)._buttonBehavior.setEnable(enabled);
    }
    return this;
  },
  toggleButtonEnable(index) {
    // buttonGroup and button-sizer have *buttons* member both
    var buttons = this.buttons;
    if (index === undefined || typeof index === 'boolean') {
      for (var i = 0, cnt = buttons.length; i < cnt; i++) {
        buttons[i]._buttonBehavior.toggleEnable();
      }
    } else {
      this.getButton(index)._buttonBehavior.toggleEnable();
    }
    return this;
  },
  getButtonEnable(index) {
    if (index === undefined) {
      index = 0;
    }
    return this.getButton(index)._buttonBehavior.enable;
  },
  emitButtonClick(index) {
    // index or button game object
    // this: buttonGroup or button-sizer
    var buttonGroup = this.buttonGroup ? this.buttonGroup : this;
    buttonGroup.fireEvent('button.click', index);
    return this;
  },
  showButton(index) {
    (0, _Hide.Show)(this.getButton(index));
    return this;
  },
  hideButton(index) {
    (0, _Hide.Hide)(this.getButton(index));
    return this;
  },
  isButtonShown(index) {
    (0, _Hide.IsShown)(this.getButton(index));
    return this;
  },
  forEachButtton(callback, scope) {
    // buttonGroup and button-sizer have *buttons* member both
    var buttons = this.buttons;
    for (var i = 0, cnt = buttons.length; i < cnt; i++) {
      if (scope) {
        callback.call(scope, buttons[i], i, buttons);
      } else {
        callback(buttons[i], i, buttons);
      }
    }
    return this;
  }
};
exports.default = _default;
},{"../GetGameObjectByName.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetGameObjectByName.js","../Hide.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/Hide.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/ButtonGroup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddMethods = _interopRequireDefault(require("./AddMethods.js"));
var _RemoveMethods = _interopRequireDefault(require("./RemoveMethods.js"));
var _FireEvent = _interopRequireDefault(require("./FireEvent.js"));
var _SetTypeMethods = _interopRequireDefault(require("./SetTypeMethods.js"));
var _ButtonMethods = _interopRequireDefault(require("./ButtonMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class ButtonGroup {
  constructor(config) {
    this.parent = config.parent;
    this.eventEmitter = config.eventEmitter;
    this.groupName = config.groupName;
    this.clickConfig = config.clickConfig;
    this.buttonsType = undefined;
    this.buttons = [];
    this.buttonMap = {};
  }
  destroy() {
    this.parent = undefined;
    this.eventEmitter = undefined;
    this.clickConfig = undefined;
    this.buttons = undefined; // GameObjects will be destroyed outside
  }
}

var methods = {
  fireEvent: _FireEvent.default
};
Object.assign(ButtonGroup.prototype, _AddMethods.default, _RemoveMethods.default, _SetTypeMethods.default, _ButtonMethods.default, methods);
var _default = ButtonGroup;
exports.default = _default;
},{"./AddMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/AddMethods.js","./RemoveMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/RemoveMethods.js","./FireEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/FireEvent.js","./SetTypeMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/SetTypeMethods.js","./ButtonMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/ButtonMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/ButtonStateMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Include in Buttons/GridButtons/FixedWidthButtons class
var _default = {
  // Common
  clearAllButtonsState() {
    this.buttonGroup.clearAllButtonsState();
    return this;
  },
  getAllButtonsState() {
    return this.buttonGroup.getAllButtonsState();
  },
  // For radio
  setSelectedButtonName(name) {
    this.buttonGroup.setSelectedButtonName(name);
    return this;
  },
  getSelectedButtonName() {
    return this.buttonGroup.getSelectedButtonName();
  },
  // For checkboxes
  setButtonState(name, state) {
    this.buttonGroup.setButtonState(name, state);
    return this;
  },
  getButtonState(name) {
    return this.buttonGroup.getButtonState(name);
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/buttons/Buttons.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer.js"));
var _AddChildMethods = _interopRequireDefault(require("./AddChildMethods.js"));
var _RemoveChildMethods = _interopRequireDefault(require("./RemoveChildMethods.js"));
var _ButtonGroup = _interopRequireDefault(require("../utils/buttongroup/ButtonGroup.js"));
var _ButtonMethods = _interopRequireDefault(require("../utils/buttongroup/ButtonMethods.js"));
var _ButtonStateMethods = _interopRequireDefault(require("../utils/buttongroup/ButtonStateMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Buttons extends _Sizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    var buttonSpace = config.space;
    if (typeof buttonSpace === 'number') {
      config.space = {
        item: buttonSpace
      };
    }

    // Create
    super(scene, config);
    this.type = 'rexButtons';
    this.buttonGroup = new _ButtonGroup.default({
      parent: this,
      eventEmitter: GetValue(config, 'eventEmitter', this),
      groupName: GetValue(config, 'groupName', undefined),
      clickConfig: GetValue(config, 'click', undefined)
    }).setButtonsType(config);

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var buttons = GetValue(config, 'buttons', undefined);

    // Buttons properties
    this.buttonsExpand = GetValue(config, 'expand', false);
    this.buttonsAlign = GetValue(config, 'align', undefined); // undefined/left/top: no space                

    if (background) {
      this.addBackground(background);
    }
    if (buttons) {
      this.addButtons(buttons);
    }
    this.addChildrenMap('background', background);
    this.addChildrenMap('buttons', this.buttonGroup.buttons);
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    super.destroy(fromScene);
    this.buttonGroup.destroy();
    this.buttonGroup = undefined;
  }
  get buttons() {
    return this.buttonGroup.buttons;
  }
  get groupName() {
    return this.buttonGroup.groupName;
  }
  set groupName(value) {
    this.buttonGroup.groupName = value;
  }
  get eventEmitter() {
    return this.buttonGroup.eventEmitter;
  }
}
Object.assign(Buttons.prototype, _AddChildMethods.default, _RemoveChildMethods.default, _ButtonMethods.default, _ButtonStateMethods.default);
var _default = Buttons;
exports.default = _default;
},{"../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","./AddChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/buttons/AddChildMethods.js","./RemoveChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/buttons/RemoveChildMethods.js","../utils/buttongroup/ButtonGroup.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/ButtonGroup.js","../utils/buttongroup/ButtonMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/ButtonMethods.js","../utils/buttongroup/ButtonStateMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/ButtonStateMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/buttons/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Buttons = _interopRequireDefault(require("./Buttons.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('buttons', function (config) {
  var gameObject = new _Buttons.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Buttons', _Buttons.default);
var _default = _Buttons.default;
exports.default = _default;
},{"./Buttons.js":"node_modules/phaser3-rex-plugins/templates/ui/buttons/Buttons.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridbuttons/AddChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GridSizer = _interopRequireDefault(require("../gridsizer/GridSizer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SizerAdd = _GridSizer.default.prototype.add;
var _default = {
  addButton(gameObject, columnIndex, rowIndex) {
    SizerAdd.call(this, gameObject, columnIndex, rowIndex, undefined, 0, this.buttonsExpand);
    this.buttonGroup.add(gameObject);
    return this;
  },
  addButtons(gameObjects, rowThenColumn) {
    for (var i = 0, cnt = gameObjects; i < cnt; i++) {
      this.addButton(gameObjects[i], undefined, rowThenColumn);
    }
    return this;
  }
};
exports.default = _default;
},{"../gridsizer/GridSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GridSizer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridbuttons/RemoveChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GridSizer = _interopRequireDefault(require("../gridsizer/GridSizer.js"));
var _IsArray = _interopRequireDefault(require("../../../plugins/utils/object/IsArray.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SizerRmove = _GridSizer.default.prototype.remove;
const SizerClear = _GridSizer.default.prototype.clear;
var Remove = function (gameObject, destroyChild) {
  var gameObject = this.getButton(gameObject);
  if (!gameObject) {
    return this;
  }
  this.buttonGroup.remove(gameObject);
  SizerRmove.call(this, gameObject, destroyChild);
  return this;
};
var _default = {
  remove(gameObject, destroyChild) {
    if ((0, _IsArray.default)(gameObject)) {
      var gameObjects = gameObject;
      for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
        Remove.call(this, gameObjects[i], destroyChild);
      }
    } else {
      Remove.call(this, gameObject, destroyChild);
    }
    return this;
  },
  clear(destroyChild) {
    var buttons = this.buttonGroup.buttons;
    buttons.length = 0;
    SizerClear.call(this, destroyChild);
    return this;
  },
  removeButton(gameObject, destroyChild) {
    this.remove(gameObject, destroyChild);
    return this;
  },
  clearButtons(destroyChild) {
    var buttons = this.buttonGroup.buttons;
    for (var i = buttons.length - 1; i >= 0; i--) {
      Remove.call(this, buttons[i], destroyChild);
    }
    return this;
  }
};
exports.default = _default;
},{"../gridsizer/GridSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GridSizer.js","../../../plugins/utils/object/IsArray.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsArray.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridbuttons/GridButtons.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GridSizer = _interopRequireDefault(require("../gridsizer/GridSizer.js"));
var _AddChildMethods = _interopRequireDefault(require("./AddChildMethods.js"));
var _RemoveChildMethods = _interopRequireDefault(require("./RemoveChildMethods.js"));
var _ButtonGroup = _interopRequireDefault(require("../utils/buttongroup/ButtonGroup.js"));
var _ButtonMethods = _interopRequireDefault(require("../utils/buttongroup/ButtonMethods.js"));
var _ButtonStateMethods = _interopRequireDefault(require("../utils/buttongroup/ButtonStateMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class GridButtons extends _GridSizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    var rowCount = GetValue(config, 'row', 0);
    var columnCount = GetValue(config, 'column', config.col || 0);
    var createCellContainerCallback = GetValue(config, 'createCellContainerCallback');
    var buttons = GetValue(config, 'buttons', undefined);
    var buttonsExpand = GetValue(config, 'expand', true);
    var buttonProportion = buttonsExpand ? 1 : 0;
    if (createCellContainerCallback) {
      config.createCellContainerCallback = undefined;
    }
    if (buttons !== undefined) {
      rowCount = Math.max(rowCount, buttons.length);
      for (var i = 0, cnt = buttons.length; i < cnt; i++) {
        columnCount = Math.max(columnCount, buttons[i].length);
      }
    }
    config.row = rowCount;
    config.column = columnCount;
    config.columnProportions = buttonProportion;
    config.rowProportions = buttonProportion;

    // Create
    super(scene, config);
    this.type = 'rexGridButtons';
    this.buttonGroup = new _ButtonGroup.default({
      parent: this,
      eventEmitter: GetValue(config, 'eventEmitter', this),
      groupName: GetValue(config, 'groupName', undefined),
      clickConfig: GetValue(config, 'click', undefined)
    }).setButtonsType(config);

    // Add elements
    var background = GetValue(config, 'background', undefined);

    // Buttons properties
    this.buttonsExpand = buttonsExpand;
    var space = GetValue(config, 'space', undefined);
    if (typeof space === 'number') {
      space = {
        itemX: space,
        itemY: space
      };
    }
    if (background) {
      this.addBackground(background);
    }
    if (buttons) {
      var rowButtons, button;
      for (var r = 0, rcnt = buttons.length; r < rcnt; r++) {
        // row
        rowButtons = buttons[r];
        for (var c = 0, ccnt = rowButtons.length; c < ccnt; c++) {
          // col
          button = rowButtons[c];
          if (button) {
            this.addButton(button, c, r);
          }
        }
      }
    } else if (createCellContainerCallback) {
      for (var y = 0; y < rowCount; y++) {
        for (var x = 0; x < columnCount; x++) {
          var button = createCellContainerCallback(scene, x, y);
          if (button) {
            this.addButton(button, x, y);
          }
        }
      }
    }
    this.addChildrenMap('background', background);
    this.addChildrenMap('buttons', this.buttonGroup.buttons);
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    super.destroy(fromScene);
    this.buttonGroup.destroy();
    this.buttonGroup = undefined;
  }
  get buttons() {
    return this.buttonGroup.buttons;
  }
  get groupName() {
    return this.buttonGroup.groupName;
  }
  set groupName(value) {
    this.buttonGroup.groupName = value;
  }
  get eventEmitter() {
    return this.buttonGroup.eventEmitter;
  }
}
Object.assign(GridButtons.prototype, _AddChildMethods.default, _RemoveChildMethods.default, _ButtonMethods.default, _ButtonStateMethods.default);
var _default = GridButtons;
exports.default = _default;
},{"../gridsizer/GridSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GridSizer.js","./AddChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/gridbuttons/AddChildMethods.js","./RemoveChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/gridbuttons/RemoveChildMethods.js","../utils/buttongroup/ButtonGroup.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/ButtonGroup.js","../utils/buttongroup/ButtonMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/ButtonMethods.js","../utils/buttongroup/ButtonStateMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/ButtonStateMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridbuttons/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GridButtons = _interopRequireDefault(require("./GridButtons.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('gridButtons', function (config) {
  var gameObject = new _GridButtons.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.GridButtons', _GridButtons.default);
var _default = _GridButtons.default;
exports.default = _default;
},{"./GridButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/gridbuttons/GridButtons.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthbuttons/AddChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FixWidthSizer = _interopRequireDefault(require("../fixwidthsizer/FixWidthSizer.js"));
var _IsArray = _interopRequireDefault(require("../../../plugins/utils/object/IsArray.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SizerAdd = _FixWidthSizer.default.prototype.add;
var Add = function (gameObject) {
  SizerAdd.call(this, gameObject);
  this.buttonGroup.add(gameObject);
  return this;
};
var _default = {
  addButton(gameObject) {
    if ((0, _IsArray.default)(gameObject)) {
      var gameObjects = gameObject;
      for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
        Add.call(this, gameObjects[i]);
      }
    } else {
      Add.call(this, gameObject);
    }
    return this;
  },
  addButtons(gameObjects) {
    if ((0, _IsArray.default)(gameObjects[0])) {
      // 2d array
      var lines = gameObjects,
        line;
      for (var lineIdx = 0, lastLineIdx = lines.length - 1; lineIdx <= lastLineIdx; lineIdx++) {
        line = lines[lineIdx];
        for (var i = 0, cnt = line.length; i < cnt; i++) {
          Add.call(this, line[i]);
        }
        if (lineIdx > lastLineIdx) {
          SizerAdd.addNewLine(this);
        }
      }
    } else {
      // 1d array
      for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
        Add.call(this, gameObjects[i]);
      }
    }
    return this;
  }
};
exports.default = _default;
},{"../fixwidthsizer/FixWidthSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/FixWidthSizer.js","../../../plugins/utils/object/IsArray.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsArray.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthbuttons/RemoveChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FixWidthSizer = _interopRequireDefault(require("../fixwidthsizer/FixWidthSizer.js"));
var _IsArray = _interopRequireDefault(require("../../../plugins/utils/object/IsArray.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SizerRmove = _FixWidthSizer.default.prototype.remove;
const SizerClear = _FixWidthSizer.default.prototype.clear;
var Remove = function (gameObject, destroyChild) {
  var gameObject = this.getButton(gameObject);
  if (!gameObject) {
    return this;
  }
  this.buttonGroup.remove(gameObject);
  SizerRmove.call(this, gameObject, destroyChild);
  return this;
};
var _default = {
  remove(gameObject, destroyChild) {
    if ((0, _IsArray.default)(gameObject)) {
      var gameObjects = gameObject;
      for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
        Remove.call(this, gameObjects[i], destroyChild);
      }
    } else {
      Remove.call(this, gameObject, destroyChild);
    }
    return this;
  },
  clear(destroyChild) {
    var buttons = this.buttonGroup.buttons;
    buttons.length = 0;
    SizerClear.call(this, destroyChild);
    return this;
  },
  removeButton(gameObject, destroyChild) {
    this.remove(gameObject, destroyChild);
    return this;
  },
  clearButtons(destroyChild) {
    var buttons = this.buttonGroup.buttons;
    for (var i = buttons.length - 1; i >= 0; i--) {
      Remove.call(this, buttons[i], destroyChild);
    }
    return this;
  }
};
exports.default = _default;
},{"../fixwidthsizer/FixWidthSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/FixWidthSizer.js","../../../plugins/utils/object/IsArray.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsArray.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthbuttons/FixWidthButtons.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FixWidthSizer = _interopRequireDefault(require("../fixwidthsizer/FixWidthSizer.js"));
var _AddChildMethods = _interopRequireDefault(require("./AddChildMethods.js"));
var _RemoveChildMethods = _interopRequireDefault(require("./RemoveChildMethods.js"));
var _ButtonGroup = _interopRequireDefault(require("../utils/buttongroup/ButtonGroup.js"));
var _ButtonMethods = _interopRequireDefault(require("../utils/buttongroup/ButtonMethods.js"));
var _ButtonStateMethods = _interopRequireDefault(require("../utils/buttongroup/ButtonStateMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Buttons extends _FixWidthSizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    var buttonSpace = config.space;
    if (typeof buttonSpace === 'number') {
      config.space = {
        item: buttonSpace,
        line: buttonSpace
      };
    }

    // Create
    super(scene, config);
    this.type = 'rexFixWidthButtons';
    this.buttonGroup = new _ButtonGroup.default({
      parent: this,
      eventEmitter: GetValue(config, 'eventEmitter', this),
      groupName: GetValue(config, 'groupName', undefined),
      clickConfig: GetValue(config, 'click', undefined)
    }).setButtonsType(config);

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var buttons = GetValue(config, 'buttons', undefined);

    // Buttons properties
    this.buttonsAlign = GetValue(config, 'align', undefined);
    if (background) {
      this.addBackground(background);
    }
    if (buttons) {
      this.addButtons(buttons);
    }
    this.addChildrenMap('background', background);
    this.addChildrenMap('buttons', this.buttonGroup.buttons);
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    super.destroy(fromScene);
    this.buttonGroup.destroy();
    this.buttonGroup = undefined;
  }
  get buttons() {
    return this.buttonGroup.buttons;
  }
  get groupName() {
    return this.buttonGroup.groupName;
  }
  set groupName(value) {
    this.buttonGroup.groupName = value;
  }
  get eventEmitter() {
    return this.buttonGroup.eventEmitter;
  }
}
Object.assign(Buttons.prototype, _AddChildMethods.default, _RemoveChildMethods.default, _ButtonMethods.default, _ButtonStateMethods.default);
var _default = Buttons;
exports.default = _default;
},{"../fixwidthsizer/FixWidthSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/FixWidthSizer.js","./AddChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthbuttons/AddChildMethods.js","./RemoveChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthbuttons/RemoveChildMethods.js","../utils/buttongroup/ButtonGroup.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/ButtonGroup.js","../utils/buttongroup/ButtonMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/ButtonMethods.js","../utils/buttongroup/ButtonStateMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/buttongroup/ButtonStateMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fixwidthbuttons/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FixWidthButtons = _interopRequireDefault(require("./FixWidthButtons.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('fixWidthButtons', function (config) {
  var gameObject = new _FixWidthButtons.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.FixWidthButtons', _FixWidthButtons.default);
var _default = _FixWidthButtons.default;
exports.default = _default;
},{"./FixWidthButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthbuttons/FixWidthButtons.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fileselectorbutton/FileChooserMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setAccept(accept) {
    this.childrenMap.fileChooser.setAccept(accept);
    return this;
  },
  setMultiple(enabled) {
    this.childrenMap.fileChooser.setMultiple(enabled);
    return this;
  },
  loadFile(file, loaderType, key, cacheType, onComplete) {
    this.childrenMap.fileChooser.loadFile(file, loaderType, key, cacheType, onComplete);
    return this;
  },
  loadFilePromise(file, loaderType, key, cacheType) {
    return this.childrenMap.fileChooser.loadFilePromise(file, loaderType, key, cacheType);
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/fileselectorbutton/FileSelectorButton.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Label = _interopRequireDefault(require("../label/Label.js"));
var _FileChooser = require("../filechooser/FileChooser.js");
var _FileChooserMethods = _interopRequireDefault(require("./FileChooserMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class FileSelectorButton extends _Label.default {
  constructor(scene, config) {
    super(scene, config);
    this.type = 'rexFileSelectorButton';
    var fileChooser = new _FileChooser.FileChooser(scene);
    scene.add.existing(fileChooser);
    this.addBackground(fileChooser);
    this.addChildrenMap('fileChooser', fileChooser);
    this.setAccept(GetValue(config, 'accept', ''));
    this.setMultiple(GetValue(config, 'multiple', false));
    fileChooser.on('change', function (gameObject) {
      var files = gameObject.files;
      if (files.length === 0) {
        return;
      }
      files = Array.from(files);
      this.emit('select', files, this);
    }, this);
  }
  get files() {
    return this.childrenMap.fileChooser.files;
  }
}
Object.assign(FileSelectorButton.prototype, _FileChooserMethods.default);
var _default = FileSelectorButton;
exports.default = _default;
},{"../label/Label.js":"node_modules/phaser3-rex-plugins/templates/ui/label/Label.js","../filechooser/FileChooser.js":"node_modules/phaser3-rex-plugins/templates/ui/filechooser/FileChooser.js","./FileChooserMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/fileselectorbutton/FileChooserMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/fileselectorbutton/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FileSelectorButton = _interopRequireDefault(require("./FileSelectorButton.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('fileSelectorButton', function (config) {
  var gameObject = new _FileSelectorButton.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.FileSelectorButton', _FileSelectorButton.default);
var _default = _FileSelectorButton.default;
exports.default = _default;
},{"./FileSelectorButton.js":"node_modules/phaser3-rex-plugins/templates/ui/fileselectorbutton/FileSelectorButton.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/dialog/methods/ButtonMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  getChoice(index) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      return choicesSizer.getButton(index);
    } else {
      return undefined;
    }
  },
  getAction(index) {
    return this.childrenMap.actionsSizer.getButton(index);
  },
  getToolbar(index) {
    return this.childrenMap.toolbarSizer.getButton(index);
  },
  getLeftToolbar(index) {
    return this.childrenMap.leftToolbarSizer.getButton(index);
  },
  setChoiceEnable(index, enabled) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      choicesSizer.setButtonEnable(index, enabled);
    }
    return this;
  },
  setActionEnable(index, enabled) {
    this.childrenMap.actionsSizer.setButtonEnable(index, enabled);
    return this;
  },
  setToolbarEnable(index, enabled) {
    this.childrenMap.toolbarSizer.setButtonEnable(index, enabled);
    return this;
  },
  setLeftToolbarEnable(index, enabled) {
    this.childrenMap.leftToolbarSizer.setButtonEnable(index, enabled);
    return this;
  },
  toggleChoiceEnable(index) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      choicesSizer.toggleButtonEnable(index);
    }
    return this;
  },
  toggleActionEnable(index) {
    this.childrenMap.actionsSizer.toggleButtonEnable(index);
    return this;
  },
  toggleToolbarEnable(index) {
    this.childrenMap.toolbarSizer.toggleButtonEnable(index);
    return this;
  },
  toggleLeftToolbarEnable(index) {
    this.childrenMap.leftToolbarSizer.toggleButtonEnable(index);
    return this;
  },
  getChoiceEnable(index) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      return choicesSizer.getButtonEnable(index);
    } else {
      return false;
    }
  },
  getActionEnable(index) {
    return this.childrenMap.actionsSizer.getButtonEnable(index);
  },
  getToolbarEnable(index) {
    return this.childrenMap.toolbarSizer.getButtonEnable(index);
  },
  getLeftToolbarEnable(index) {
    return this.childrenMap.leftToolbarSizer.getButtonEnable(index);
  },
  emitChoiceClick(index) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      choicesSizer.emitButtonClick(index);
    }
    return this;
  },
  emitActionClick(index) {
    this.childrenMap.actionsSizer.emitButtonClick(index);
    return this;
  },
  emitToolbarClick(index) {
    this.childrenMap.toolbarSizer.emitButtonClick(index);
    return this;
  },
  emitLeftToolbarClick(index) {
    this.childrenMap.leftToolbarSizer.emitButtonClick(index);
    return this;
  },
  showChoice(index) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      choicesSizer.showButton(index);
    }
    return this;
  },
  showAction(index) {
    this.childrenMap.actionsSizer.showButton(index);
    return this;
  },
  showToolbar(index) {
    this.childrenMap.toolbarSizer.showButton(index);
    return this;
  },
  showLeftToolbar(index) {
    this.childrenMap.leftToolbarSizer.showButton(index);
    return this;
  },
  hideChoice(index) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      choicesSizer.hideButton(index);
    }
    return this;
  },
  hideAction(index) {
    this.childrenMap.actionsSizer.hideButton(index);
    return this;
  },
  hideToolbar(index) {
    this.childrenMap.toolbarSizer.hideButton(index);
    return this;
  },
  hideLeftToolbar(index) {
    this.childrenMap.leftToolbarSizer.hideButton(index);
    return this;
  },
  addChoice(gameObject) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      choicesSizer.addButton(gameObject);
    }
    return this;
  },
  addAction(gameObject) {
    this.childrenMap.actionsSizer.addButton(gameObject);
    return this;
  },
  addToolbar(gameObject) {
    this.childrenMap.toolbarSizer.addButton(gameObject);
    return this;
  },
  addLeftToolbar(gameObject) {
    this.childrenMap.leftToolbarSizer.addButton(gameObject);
    return this;
  },
  removeChoice(index, destroyChild) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      choicesSizer.removeButton(index, destroyChild);
    }
    return this;
  },
  removeAction(index, destroyChild) {
    this.childrenMap.actionsSizer.removeButton(index, destroyChild);
    return this;
  },
  removeToolbar(index, destroyChild) {
    this.childrenMap.toolbarSizer.removeButton(index, destroyChild);
    return this;
  },
  removeLeftToolbar(index, destroyChild) {
    this.childrenMap.leftToolbarSizer.removeButton(index, destroyChild);
    return this;
  },
  clearChoices(destroyChild) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      choicesSizer.clearButtons(destroyChild);
    }
    return this;
  },
  clearActions(destroyChild) {
    this.childrenMap.actionsSizer.clearButtons(destroyChild);
    return this;
  },
  clearToolbar(destroyChild) {
    this.childrenMap.toolbarSizer.clearButtons(destroyChild);
    return this;
  },
  clearLeftToolbar(destroyChild) {
    this.childrenMap.leftToolbarSizer.clearButtons(destroyChild);
    return this;
  },
  forEachChoice(callback, scope) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      choicesSizer.forEachButtton(callback, scope);
    }
    return this;
  },
  forEachAction(callback, scope) {
    this.childrenMap.actionsSizer.forEachButtton(callback, scope);
    return this;
  },
  forEachToolbar(callback, scope) {
    this.childrenMap.toolbarSizer.forEachButtton(callback, scope);
    return this;
  },
  forEachLeftToolbar(callback, scope) {
    this.childrenMap.leftToolbarSizer.forEachButtton(callback, scope);
    return this;
  },
  setAllButtonsEnable(enabled) {
    if (enabled === undefined) {
      enabled = true;
    }
    if (this.childrenMap.toolbarSizer) {
      this.setToolbarEnable(enabled);
    }
    if (this.childrenMap.leftToolbarSizer) {
      this.setLeftToolbarEnable(enabled);
    }
    if (this.childrenMap.actionsSizer) {
      this.setActionEnable(enabled);
    }
    if (this.childrenMap.choicesSizer) {
      this.setChoiceEnable(enabled);
    }
    return this;
  },
  // Checkboxes
  getChoicesButtonStates() {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      return choicesSizer.getAllButtonsState();
    } else {
      return {};
    }
  },
  getChoicesButtonState(name) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (name === undefined) {
      if (choicesSizer) {
        return choicesSizer.getAllButtonsState();
      } else {
        return {};
      }
    } else {
      if (choicesSizer) {
        return choicesSizer.getButtonState(name);
      } else {
        return false;
      }
    }
  },
  setChoicesButtonState(name, state) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      choicesSizer.setButtonState(name, state);
    }
    return this;
  },
  clearChoicesButtonStates() {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      choicesSizer.clearAllButtonsState();
    }
    return this;
  },
  // Radio buttons
  getChoicesSelectedButtonName() {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      return choicesSizer.getSelectedButtonName();
    } else {
      return '';
    }
  },
  setChoicesSelectedButtonName(name) {
    var choicesSizer = this.childrenMap.choicesSizer;
    if (choicesSizer) {
      choicesSizer.setSelectedButtonName(name);
    }
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/dialog/methods/ModalMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  onCreateModalBehavior(self) {
    self.on('button.click', function (button, groupName, index, pointer, event) {
      if (groupName !== 'actions') {
        return;
      }
      var closeEventData = {
        index: index,
        text: button.text,
        button: button,
        dialog: self
      };
      self.modalClose(closeEventData);
    });
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/dialog/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ButtonMethods = _interopRequireDefault(require("./ButtonMethods.js"));
var _ModalMethods = _interopRequireDefault(require("./ModalMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {};
Object.assign(Methods, _ButtonMethods.default, _ModalMethods.default);
var _default = Methods;
exports.default = _default;
},{"./ButtonMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/dialog/methods/ButtonMethods.js","./ModalMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/dialog/methods/ModalMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/dialog/Dialog.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer.js"));
var _OverlapSizer = _interopRequireDefault(require("../overlapsizer/OverlapSizer.js"));
var _Buttons = _interopRequireDefault(require("../buttons/Buttons.js"));
var _FixWidthButtons = _interopRequireDefault(require("../fixwidthbuttons/FixWidthButtons.js"));
var _GridButtons = _interopRequireDefault(require("../gridbuttons/GridButtons.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Dialog extends _Sizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    // Create sizer        
    config.orientation = 1; // Top to bottom
    super(scene, config);
    this.type = 'rexDialog';
    this.eventEmitter = GetValue(config, 'eventEmitter', this);

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var title = GetValue(config, 'title', undefined);
    var toolbar = GetValue(config, 'toolbar', undefined);
    var toolbarBackground = GetValue(config, 'toolbarBackground', undefined);
    var leftToolbar = GetValue(config, 'leftToolbar', undefined);
    var leftToolbarBackground = GetValue(config, 'leftToolbarBackground', undefined);
    var content = GetValue(config, 'content', undefined);
    var description = GetValue(config, 'description', undefined);
    var choicesSizer;
    var choices = GetValue(config, 'choices', undefined);
    var choicesBackground = GetValue(config, 'choicesBackground', undefined);
    var actionsSizer;
    var actions = GetValue(config, 'actions', undefined);
    var actionsBackground = GetValue(config, 'actionsBackground', undefined);
    var clickConfig = GetValue(config, 'click', undefined);
    if (background) {
      this.addBackground(background);
    }
    var toolbarSizer;
    if (toolbar) {
      toolbarSizer = new _Buttons.default(scene, {
        groupName: 'toolbar',
        background: toolbarBackground,
        buttons: toolbar,
        orientation: 0,
        // Left-right
        space: {
          item: GetValue(config, 'space.toolbarItem', 0)
        },
        click: clickConfig,
        eventEmitter: this.eventEmitter
      });
    }
    var leftToolbarSizer;
    if (leftToolbar) {
      leftToolbarSizer = new _Buttons.default(scene, {
        groupName: 'leftToolbar',
        background: leftToolbarBackground,
        buttons: leftToolbar,
        orientation: 0,
        // Left-right
        space: {
          item: GetValue(config, 'space.leftToolbarItem', 0)
        },
        click: clickConfig,
        eventEmitter: this.eventEmitter
      });
    }

    // title or toolbar or leftToolbar
    if (title || toolbar || leftToolbar) {
      var titleExpandWidth = !!title && GetValue(config, 'expand.title', true);
      var titleAlign = GetValue(config, 'align.title', 'center');
      var useOverlapSizer =
      // Has title, title is not exapnd-width, title align to center
      title && !titleExpandWidth && titleAlign === 'center' ||
      // No title
      !title && (toolbar || leftToolbar);
      var useSizer = !useOverlapSizer;
      var titleSizer;
      if (useSizer) {
        titleSizer = new _Sizer.default(scene, {
          orientation: 0
        });
      } else {
        titleSizer = new _OverlapSizer.default(scene);
      }
      var titleChildExpand = useSizer ? true : {
        height: true
      };

      // Add leftToolbar
      if (leftToolbarSizer) {
        titleSizer.add(leftToolbarSizer, {
          align: 'left',
          expand: titleChildExpand
        });
      }

      // Add title
      if (title) {
        // Add space if not expand, align to right
        if (useSizer && !titleExpandWidth && titleAlign === 'right') {
          titleSizer.addSpace();
        }
        var padding = {
          left: GetValue(config, 'space.titleLeft', 0),
          right: GetValue(config, 'space.titleRight', 0)
        };
        var proportion = titleExpandWidth ? 1 : 0;
        titleSizer.add(title, {
          align: titleAlign,
          proportion: proportion,
          expand: titleChildExpand,
          padding: padding
        });

        // Add space if not expand, align to left
        if (useSizer && !titleExpandWidth && titleAlign === 'left') {
          titleSizer.addSpace();
        }
      }

      // Add toolbar
      if (toolbarSizer) {
        // Add space if not title
        if (useSizer && !title) {
          titleSizer.addSpace();
        }
        titleSizer.add(toolbarSizer, {
          align: 'right',
          expand: titleChildExpand
        });
      }

      // Add sizer to dialog
      var titleSpace = GetValue(config, 'space.title', 0);
      var padding;
      if (content || description || choices || actions) {
        padding = {
          bottom: titleSpace
        };
      }
      var proportion = GetValue(config, 'proportion.title', 0);
      this.add(titleSizer, {
        padding: padding,
        proportion: proportion,
        expand: true
      });
    }
    if (content) {
      var align = GetValue(config, 'align.content', 'center');
      var contentSpace = GetValue(config, 'space.content', 0);
      var padding = {
        left: GetValue(config, 'space.contentLeft', 0),
        right: GetValue(config, 'space.contentRight', 0),
        bottom: description || choices || actions ? contentSpace : 0
      };
      var proportion = GetValue(config, 'proportion.content', 0);
      var expand = GetValue(config, 'expand.content', true);
      this.add(content, {
        align: align,
        padding: padding,
        proportion: proportion,
        expand: expand
      });
    }
    if (description) {
      var align = GetValue(config, 'align.description', 'center');
      var descriptionSpace = GetValue(config, 'space.description', 0);
      var padding = {
        left: GetValue(config, 'space.descriptionLeft', 0),
        right: GetValue(config, 'space.descriptionRight', 0),
        bottom: choices || actions ? descriptionSpace : 0
      };
      var proportion = GetValue(config, 'proportion.description', 0);
      var expand = GetValue(config, 'expand.description', true);
      this.add(description, {
        align: align,
        padding: padding,
        proportion: proportion,
        expand: expand
      });
    }
    if (choices) {
      var choicesType = GetValue(config, 'choicesType', '').split('-');
      var ButtonsClass = Contains(choicesType, 'wrap') ? _FixWidthButtons.default : Contains(choicesType, 'grid') ? _GridButtons.default : _Buttons.default;
      var buttonsType = Contains(choicesType, 'radio') ? 'radio' : Contains(choicesType, 'checkboxes') ? 'checkboxes' : undefined;
      var space = {
        left: GetValue(config, 'space.choicesBackgroundLeft', 0),
        right: GetValue(config, 'space.choicesBackgroundRight', 0),
        top: GetValue(config, 'space.choicesBackgroundTop', 0),
        bottom: GetValue(config, 'space.choicesBackgroundBottom', 0)
      };
      var itemSpace = GetValue(config, 'space.choice', 0);
      if (ButtonsClass === _Buttons.default) {
        space.item = itemSpace;
      } else if (ButtonsClass === _FixWidthButtons.default) {
        space.item = itemSpace;
        space.line = GetValue(config, 'space.choiceLine', itemSpace);
      } else {
        // GridButtons
        space.column = GetValue(config, 'space.choiceColumn', itemSpace);
        space.row = GetValue(config, 'space.choiceRow', itemSpace);
      }
      var choicesConfig = {
        width: GetValue(config, 'choicesWidth', undefined),
        height: GetValue(config, 'choicesHeight', undefined),
        groupName: 'choices',
        buttonsType: buttonsType,
        background: choicesBackground,
        buttons: choices,
        space: space,
        click: clickConfig,
        eventEmitter: this.eventEmitter,
        setValueCallback: GetValue(config, 'choicesSetValueCallback', undefined),
        setValueCallbackScope: GetValue(config, 'choicesSetValueCallbackScope', undefined)
      };
      if (ButtonsClass === _Buttons.default) {
        choicesConfig.orientation = Contains(choicesType, 'x') ? 0 : 1;
      }
      choicesSizer = new ButtonsClass(scene, choicesConfig);
      var choicesSpace = GetValue(config, 'space.choices', 0);
      var padding = {
        left: GetValue(config, 'space.choicesLeft', 0),
        right: GetValue(config, 'space.choicesRight', 0),
        bottom: actions ? choicesSpace : 0
      };
      var align = GetValue(config, 'align.choices', 'center');
      var proportion = GetValue(config, 'proportion.choices', 0);
      var expand = GetValue(config, 'expand.choices', true);
      this.add(choicesSizer, {
        align: align,
        padding: padding,
        proportion: proportion,
        expand: expand
      });
    }
    if (actions) {
      actionsSizer = new _Buttons.default(scene, {
        groupName: 'actions',
        background: actionsBackground,
        buttons: actions,
        orientation: 0,
        // Left-right
        space: {
          item: GetValue(config, 'space.action', 0)
        },
        expand: GetValue(config, 'expand.actions', false),
        align: GetValue(config, 'align.actions', 'center'),
        click: clickConfig,
        eventEmitter: this.eventEmitter
      });
      var padding = {
        left: GetValue(config, 'space.actionsLeft', 0),
        right: GetValue(config, 'space.actionsRight', 0)
      };
      var proportion = GetValue(config, 'proportion.action', 0);
      this.add(actionsSizer, {
        align: 'center',
        padding: padding,
        proportion: proportion,
        expand: true
      });
    }
    EmitButtonEvent(this, 'click');
    EmitButtonEvent(this, 'over');
    EmitButtonEvent(this, 'out');
    EmitButtonEvent(this, 'enable');
    EmitButtonEvent(this, 'disable');
    this.addChildrenMap('background', background);
    this.addChildrenMap('title', title);
    this.addChildrenMap('toolbar', toolbar);
    this.addChildrenMap('leftToolbar', leftToolbar);
    this.addChildrenMap('content', content);
    this.addChildrenMap('description', description);
    this.addChildrenMap('choices', choicesSizer ? choicesSizer.buttons : undefined);
    this.addChildrenMap('actions', actionsSizer ? actionsSizer.buttons : undefined);
    this.addChildrenMap('choicesSizer', choicesSizer);
    this.addChildrenMap('actionsSizer', actionsSizer);
    this.addChildrenMap('toolbarSizer', toolbarSizer);
    this.addChildrenMap('leftToolbarSizer', leftToolbarSizer);
  }
}
var Contains = function (arr, item) {
  return arr.indexOf(item) !== -1;
};
var ButtonsGroupEventNameMap = {
  actions: 'action',
  choices: 'choice',
  toolbar: 'toolbar',
  leftToolbar: 'leftToolbar'
};
var EmitButtonEvent = function (dialog, postEventName) {
  dialog.on(`button.${postEventName}`, function (button, groupName, index, pointer, event) {
    if (!ButtonsGroupEventNameMap.hasOwnProperty(groupName)) {
      return;
    }
    dialog.emit(`${ButtonsGroupEventNameMap[groupName]}.${postEventName}`, button, index, pointer, event);
  });
};
Object.assign(Dialog.prototype, _Methods.default);
var _default = Dialog;
exports.default = _default;
},{"../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../overlapsizer/OverlapSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/OverlapSizer.js","../buttons/Buttons.js":"node_modules/phaser3-rex-plugins/templates/ui/buttons/Buttons.js","../fixwidthbuttons/FixWidthButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthbuttons/FixWidthButtons.js","../gridbuttons/GridButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/gridbuttons/GridButtons.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/dialog/methods/Methods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/dialog/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Dialog = _interopRequireDefault(require("./Dialog.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('dialog', function (config) {
  var gameObject = new _Dialog.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Dialog', _Dialog.default);
var _default = _Dialog.default;
exports.default = _default;
},{"./Dialog.js":"node_modules/phaser3-rex-plugins/templates/ui/dialog/Dialog.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/choices/Choices.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Dialog = _interopRequireDefault(require("../dialog/Dialog.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Choices extends _Dialog.default {
  // Assume that each child is a Label or a text game object

  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    if (!config.hasOwnProperty('choices')) {
      config.choices = [];
    }
    var createChoiceCallback, createChoiceCallbackScope;
    if (typeof config.choices === 'function') {
      createChoiceCallback = config.choices;
      createChoiceCallbackScope = undefined;
      config.choices = [];
    } else {
      createChoiceCallback = config.createChoiceCallback;
      createChoiceCallbackScope = config.createChoiceCallbackScope;
    }
    super(scene, config);
    this.type = 'rexChoices';
    this.setCreateChoiceCallback(createChoiceCallback, createChoiceCallbackScope);
  }
  setCreateChoiceCallback(callback, scope) {
    this.createChoiceCallback = callback;
    this.createChoiceCallbackScope = scope;
    return this;
  }
  setChildText(child, text) {
    if (typeof child === 'string') {
      child = this.childrenMap[child];
    }
    if (!child) {
      return this;
    }
    if (text) {
      child.show().setText(text);
    } else {
      child.hide();
    }
    return this;
  }
  setTitle(text) {
    this.setChildText('title', text);
    return this;
  }
  setContent(text) {
    this.setChildText('content', text);
    return this;
  }
  setDescription(text) {
    this.setChildText('description', text);
    return this;
  }
  setChoices(textArray) {
    var choices = this.childrenMap.choices;
    if (textArray.length > choices.length) {
      var callback = this.createChoiceCallback;
      var scope = this.createChoiceCallbackScope;
      if (callback) {
        for (var i = 0, cnt = textArray.length - choices.length; i < cnt; i++) {
          var gameObject;
          if (scope) {
            gameObject = callback.call(scope, this.scene);
          } else {
            gameObject = callback(this.scene);
          }
          this.addChoice(gameObject);
        }
      }
    }
    for (var i = 0, cnt = choices.length; i < cnt; i++) {
      this.setChildText(choices[i], textArray[i]);
    }
    return this;
  }
  setText(config) {
    if (config === undefined) {
      config = {};
    }
    this.setTitle(config.title).setContent(config.content).setDescription(config.description).setChoices(config.choices);
    return this;
  }
  clickChoicePromise(config) {
    if (config) {
      this.setText(config).layout();
    }
    var self = this;
    return new Promise(function (resolve, reject) {
      self.once('choice.click', function (button, index, pointer, event) {
        resolve({
          button: button,
          index: index,
          pointer: pointer
        });
      });
    });
  }
}
var _default = Choices;
exports.default = _default;
},{"../dialog/Dialog.js":"node_modules/phaser3-rex-plugins/templates/ui/dialog/Dialog.js"}],"node_modules/phaser3-rex-plugins/templates/ui/choices/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Choices = _interopRequireDefault(require("./Choices.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('choices', function (config) {
  var gameObject = new _Choices.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Choices', _Choices.default);
var _default = _Choices.default;
exports.default = _default;
},{"./Choices.js":"node_modules/phaser3-rex-plugins/templates/ui/choices/Choices.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateDisplayLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SimpleLabel = _interopRequireDefault(require("../../simplelabel/SimpleLabel.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateDisplayLabel = function (scene, config, creators) {
  var gameObject = new _SimpleLabel.default(scene, config, creators);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateDisplayLabel;
exports.default = _default;
},{"../../simplelabel/SimpleLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/simplelabel/SimpleLabel.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/ScrollModeConst.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  v: 0,
  vertical: 0,
  y: 0,
  h: 1,
  horizontal: 1,
  x: 1
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/GetScrollMode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ScrollModeConst = _interopRequireDefault(require("./ScrollModeConst.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var GetScrollMode = function (config, key) {
  var scrollMode = GetValue(config, 'scrollMode', 0); // Vertical
  if (typeof scrollMode === 'string') {
    scrollMode = _ScrollModeConst.default[scrollMode];
  }
  return scrollMode;
};
var _default = GetScrollMode;
exports.default = _default;
},{"./ScrollModeConst.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/ScrollModeConst.js"}],"node_modules/phaser3-rex-plugins/templates/ui/slider/PositionToPercent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Percent = Phaser.Math.Percent;
var PositionToPercent = function (startPoint, endPoint, currentPoint) {
  var value;
  if (startPoint.y === endPoint.y) {
    value = Percent(currentPoint.x, startPoint.x, endPoint.x);
  } else if (startPoint.x === endPoint.x) {
    value = Percent(currentPoint.y, startPoint.y, endPoint.y);
  }
  return value;
};
var _default = PositionToPercent;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/slider/OnDragThumb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PositionToPercent = _interopRequireDefault(require("./PositionToPercent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnDragThumb = function (pointer, dragX, dragY) {
  if (!this.enable) {
    return;
  }
  tmpPoint.x = dragX;
  tmpPoint.y = dragY;
  var startPoint, endPoint;
  if (!this.reverseAxis) {
    startPoint = this.getStartPoint();
    endPoint = this.getEndPoint();
  } else {
    startPoint = this.getEndPoint();
    endPoint = this.getStartPoint();
  }
  this.value = (0, _PositionToPercent.default)(startPoint, endPoint, tmpPoint);
};
var tmpPoint = {};
var _default = OnDragThumb;
exports.default = _default;
},{"./PositionToPercent.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/PositionToPercent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/slider/OnTouchTrack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PositionToPercent = _interopRequireDefault(require("./PositionToPercent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OnTouchTrack = function (pointer, localX, localY) {
  if (!this.enable) {
    return;
  }
  if (!pointer.isDown) {
    return;
  }
  tmpPoint.x = pointer.worldX;
  tmpPoint.y = pointer.worldY;
  var startPoint, endPoint;
  if (!this.reverseAxis) {
    startPoint = this.getStartPoint();
    endPoint = this.getEndPoint();
  } else {
    startPoint = this.getEndPoint();
    endPoint = this.getStartPoint();
  }
  var value = (0, _PositionToPercent.default)(startPoint, endPoint, tmpPoint);
  this.stopEaseValue();
  if (this.easeValueDuration === 0 || Math.abs(this.value - value) < 0.1) {
    this.value = value;
  } else {
    this.easeValueTo(value);
  }
};
var tmpPoint = {};
var _default = OnTouchTrack;
exports.default = _default;
},{"./PositionToPercent.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/PositionToPercent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/slider/GetThumbAlignPoint.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AlignIn = _interopRequireDefault(require("../../../plugins/utils/actions/AlignIn.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetThumbAlignPoint = function (align, out) {
  if (out === undefined) {
    out = tmpPoint;
  }
  var thumb = this.childrenMap.thumb;
  var currentX = thumb.x;
  var currentY = thumb.y;
  (0, _AlignIn.default)(thumb, this.innerLeft, this.innerTop, this.innerWidth, this.innerHeight, align);
  out.x = thumb.x;
  out.y = thumb.y;
  thumb.x = currentX;
  thumb.y = currentY;
  return out;
};
var tmpPoint = {};
var _default = GetThumbAlignPoint;
exports.default = _default;
},{"../../../plugins/utils/actions/AlignIn.js":"node_modules/phaser3-rex-plugins/plugins/utils/actions/AlignIn.js"}],"node_modules/phaser3-rex-plugins/templates/ui/slider/GetStartPoint.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetThumbAlignPoint = _interopRequireDefault(require("./GetThumbAlignPoint.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const AlignLeft = Phaser.Display.Align.LEFT_CENTER;
const AlignTop = Phaser.Display.Align.TOP_CENTER;
var GetStartPoint = function (out) {
  if (out === undefined) {
    out = tmpPoint;
  }
  if (this.childrenMap.thumb) {
    var align = this.orientation === 0 ? AlignLeft : AlignTop;
    _GetThumbAlignPoint.default.call(this, align, out);
  } else {
    if (this.orientation === 0) {
      out.x = this.innerLeft + 1; // Add 1 pixel margin
      out.y = this.centerY;
    } else {
      out.x = this.centerX;
      out.y = this.innerTop + 1; // Add 1 pixel margin
    }
  }

  return out;
};
var tmpPoint = {};
var _default = GetStartPoint;
exports.default = _default;
},{"./GetThumbAlignPoint.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/GetThumbAlignPoint.js"}],"node_modules/phaser3-rex-plugins/templates/ui/slider/GetEndPoint.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetThumbAlignPoint = _interopRequireDefault(require("./GetThumbAlignPoint.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const AlignRight = Phaser.Display.Align.RIGHT_CENTER;
const AlignBottom = Phaser.Display.Align.BOTTOM_CENTER;
var GetEndoint = function (out) {
  if (out === undefined) {
    out = tmpPoint;
  }
  if (this.childrenMap.thumb) {
    var align = this.orientation === 0 ? AlignRight : AlignBottom;
    _GetThumbAlignPoint.default.call(this, align, out);
  } else {
    if (this.orientation === 0) {
      out.x = this.innerRight - 1; // Add 1 pixel margin
      out.y = this.centerY;
    } else {
      out.x = this.centerX;
      out.y = this.innerBottom - 1; // Add 1 pixel margin
    }
  }

  return out;
};
var tmpPoint = {};
var _default = GetEndoint;
exports.default = _default;
},{"./GetThumbAlignPoint.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/GetThumbAlignPoint.js"}],"node_modules/phaser3-rex-plugins/templates/ui/slider/PercentToPosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Linear = Phaser.Math.Linear;
var PercentToPosition = function (t, startPoint, endPoint, out) {
  if (out === undefined) {
    out = tmpOut;
  }
  out.x = Linear(startPoint.x, endPoint.x, t);
  out.y = Linear(startPoint.y, endPoint.y, t);
  return out;
};
var tmpOut = {};
var _default = PercentToPosition;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/slider/UpdateThumb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PercentToPosition = _interopRequireDefault(require("./PercentToPosition.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var UpdateThumb = function (t) {
  var thumb = this.childrenMap.thumb;
  if (thumb === undefined) {
    return this;
  }
  if (t === undefined) {
    t = this.value;
  }
  var startPoint, endPoint;
  if (!this.reverseAxis) {
    startPoint = this.getStartPoint();
    endPoint = this.getEndPoint();
  } else {
    startPoint = this.getEndPoint();
    endPoint = this.getStartPoint();
  }
  (0, _PercentToPosition.default)(t, startPoint, endPoint, thumb);
  this.resetChildPositionState(thumb);
  return this;
};
var _default = UpdateThumb;
exports.default = _default;
},{"./PercentToPosition.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/PercentToPosition.js"}],"node_modules/phaser3-rex-plugins/templates/ui/slider/UpdateIndicator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResizeGameObject = _interopRequireDefault(require("../../../plugins/utils/size/ResizeGameObject.js"));
var _QuickSet = _interopRequireDefault(require("../../../plugins/utils/align/align/in/QuickSet.js"));
var _GetDisplaySize = require("../../../plugins/utils/size/GetDisplaySize.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const AlignLeft = Phaser.Display.Align.LEFT_CENTER;
const AlignTop = Phaser.Display.Align.TOP_CENTER;
const AlignRight = Phaser.Display.Align.RIGHT_CENTER;
const AlignBottom = Phaser.Display.Align.BOTTOM_CENTER;
var UpdateIndicator = function (t) {
  var indicator = this.childrenMap.indicator;
  if (indicator === undefined) {
    return this;
  }
  if (t === undefined) {
    t = this.value;
  }
  var reverseAxis = this.reverseAxis;
  var newWidth, newHeight;
  var thumb = this.childrenMap.thumb;
  if (thumb) {
    if (this.orientation === 0) {
      // x, extend width
      var thumbWidth = (0, _GetDisplaySize.GetDisplayWidth)(thumb);
      if (!reverseAxis) {
        var thumbLeft = thumb.x - thumbWidth * thumb.originX;
        var thumbRight = thumbLeft + thumbWidth;
        newWidth = thumbRight - this.left;
      } else {
        var thumbLeft = thumb.x - thumbWidth * thumb.originX;
        newWidth = this.right - thumbLeft;
      }
    } else {
      // y, extend height
      var thumbHeight = (0, _GetDisplaySize.GetDisplayHeight)(thumb);
      if (!reverseAxis) {
        var thumbTop = thumb.y - thumbHeight * thumb.originY;
        var thumbBottom = thumbTop + thumbHeight;
        newHeight = thumbBottom - this.top;
      } else {
        var thumbTop = thumb.y - thumbHeight * thumb.originY;
        newHeight = this.bottom - thumbTop;
      }
    }
  } else {
    if (this.orientation === 0) {
      // x, extend width
      newWidth = this.width * t;
    } else {
      // y, extend eight
      newHeight = this.height * t;
    }
  }
  (0, _ResizeGameObject.default)(indicator, newWidth, newHeight);
  var align;
  if (!reverseAxis) {
    align = this.orientation === 0 ? AlignLeft : AlignTop;
  } else {
    align = this.orientation === 0 ? AlignRight : AlignBottom;
  }
  (0, _QuickSet.default)(indicator, this, align);
  this.resetChildPositionState(indicator);
};
var _default = UpdateIndicator;
exports.default = _default;
},{"../../../plugins/utils/size/ResizeGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/ResizeGameObject.js","../../../plugins/utils/align/align/in/QuickSet.js":"node_modules/phaser3-rex-plugins/plugins/utils/align/align/in/QuickSet.js","../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/templates/ui/slider/Slider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer.js"));
var _CreateRoundRectangle = _interopRequireDefault(require("../utils/build/CreateRoundRectangle.js"));
var _ProgressBase = _interopRequireDefault(require("../../../plugins/utils/progressbase/ProgressBase.js"));
var _OnDragThumb = _interopRequireDefault(require("./OnDragThumb.js"));
var _OnTouchTrack = _interopRequireDefault(require("./OnTouchTrack.js"));
var _GetStartPoint = _interopRequireDefault(require("./GetStartPoint.js"));
var _GetEndPoint = _interopRequireDefault(require("./GetEndPoint.js"));
var _UpdateThumb = _interopRequireDefault(require("./UpdateThumb.js"));
var _UpdateIndicator = _interopRequireDefault(require("./UpdateIndicator.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const Clamp = Phaser.Math.Clamp;
const SnapTo = Phaser.Math.Snap.To;
class Slider extends (0, _ProgressBase.default)(_Sizer.default) {
  constructor(scene, config) {
    // Create sizer
    super(scene, config);
    this.type = 'rexSlider';
    this.bootProgressBase(config);
    this.reverseAxis = GetValue(config, 'reverseAxis', false);

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var track = GetValue(config, 'track', undefined);
    var indicator = GetValue(config, 'indicator', undefined);
    var thumb = GetValue(config, 'thumb', undefined);
    if (background) {
      if (IsPlainObject(background)) {
        background = (0, _CreateRoundRectangle.default)(scene, background);
      }
      this.addBackground(background);
    }
    if (track) {
      if (IsPlainObject(track)) {
        track = (0, _CreateRoundRectangle.default)(scene, track);
      }
      this.add(track, {
        proportion: 1,
        expand: true,
        minWidth: this.orientation === 0 ? 0 : undefined,
        minHeight: this.orientation === 1 ? 0 : undefined
      });
    }
    if (indicator) {
      if (IsPlainObject(indicator)) {
        indicator = (0, _CreateRoundRectangle.default)(scene, indicator);
      }
      this.pin(indicator); // Put into container but not layout it
    }

    if (thumb) {
      if (IsPlainObject(thumb)) {
        thumb = (0, _CreateRoundRectangle.default)(scene, thumb);
      }
      this.pin(thumb); // Put into container but not layout it
    }

    // Input
    var inputMode = GetValue(config, 'input', 0);
    if (typeof inputMode === 'string') {
      inputMode = INPUTMODE[inputMode];
    }
    switch (inputMode) {
      case 0:
        // 'drag'
        if (thumb) {
          thumb.setInteractive();
          this.scene.input.setDraggable(thumb);
          thumb.on('drag', _OnDragThumb.default, this).on('dragstart', function (pointer) {
            this.eventEmitter.emit('inputstart', pointer);
          }, this).on('dragend', function (pointer) {
            this.eventEmitter.emit('inputend', pointer);
          }, this);
        }
        break;
      case 1:
        // 'click'
        this.on('pointerdown', _OnTouchTrack.default, this).on('pointermove', _OnTouchTrack.default, this).on('pointerdown', function (pointer) {
          this.eventEmitter.emit('inputstart', pointer);
        }, this).on('pointerup', function (pointer) {
          this.eventEmitter.emit('inputend', pointer);
        }, this).on('pointerover', function (pointer) {
          if (pointer.isDown) {
            this.eventEmitter.emit('inputstart', pointer);
          }
        }, this).on('pointerout', function (pointer) {
          if (pointer.isDown) {
            this.eventEmitter.emit('inputend', pointer);
          }
        }, this).setInteractive();
        break;
    }
    this.addChildrenMap('background', background);
    this.addChildrenMap('track', track);
    this.addChildrenMap('indicator', indicator);
    this.addChildrenMap('thumb', thumb);
    this.setEnable(GetValue(config, 'enable', undefined));
    this.setGap(GetValue(config, 'gap', undefined));
    this.setValue(GetValue(config, 'value', 0), GetValue(config, 'min', undefined), GetValue(config, 'max', undefined));
  }
  setEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.enable = enable;
    return this;
  }
  setGap(gap, min, max) {
    if (gap && min !== undefined) {
      gap = gap / (max - min);
    }
    this.gap = gap;
    return this;
  }

  // Override
  get value() {
    return this._value;
  }

  // Override
  set value(value) {
    if (this.gap !== undefined) {
      value = SnapTo(value, this.gap);
    }
    var oldValue = this._value;
    this._value = Clamp(value, 0, 1);
    if (oldValue !== this._value) {
      this.updateThumb(this._value);
      this.updateIndicator(this._value);
      this.eventEmitter.emit('valuechange', this._value, oldValue, this.eventEmitter);
    }
  }
  runLayout(parent, newWidth, newHeight) {
    // Skip hidden or !dirty sizer
    if (this.ignoreLayout) {
      return this;
    }
    super.runLayout(parent, newWidth, newHeight);
    this.updateThumb();
    this.updateIndicator();
    return this;
  }
}
const INPUTMODE = {
  pan: 0,
  drag: 0,
  click: 1,
  none: -1
};
var methods = {
  getStartPoint: _GetStartPoint.default,
  getEndPoint: _GetEndPoint.default,
  updateThumb: _UpdateThumb.default,
  updateIndicator: _UpdateIndicator.default
};
Object.assign(Slider.prototype, methods);
var _default = Slider;
exports.default = _default;
},{"../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../utils/build/CreateRoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateRoundRectangle.js","../../../plugins/utils/progressbase/ProgressBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/progressbase/ProgressBase.js","./OnDragThumb.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/OnDragThumb.js","./OnTouchTrack.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/OnTouchTrack.js","./GetStartPoint.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/GetStartPoint.js","./GetEndPoint.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/GetEndPoint.js","./UpdateThumb.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/UpdateThumb.js","./UpdateIndicator.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/UpdateIndicator.js"}],"node_modules/phaser3-rex-plugins/templates/ui/scrollbar/ScrollBar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer.js"));
var _Slider = _interopRequireDefault(require("../slider/Slider.js"));
var _InTouching = _interopRequireDefault(require("../intouching/InTouching.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class ScrollBar extends _Sizer.default {
  constructor(scene, config) {
    // Create sizer
    super(scene, config);
    this.type = 'rexScrollBar';

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var buttonsConfig = GetValue(config, 'buttons', undefined);
    var button0 = GetValue(buttonsConfig, 'top', GetValue(buttonsConfig, 'left', undefined));
    var button1 = GetValue(buttonsConfig, 'bottom', GetValue(buttonsConfig, 'right', undefined));
    var slider,
      sliderConfig = GetValue(config, 'slider', undefined);
    if (background) {
      this.addBackground(background);
    }
    if (button0) {
      this.add(button0);
      var inTouching = new _InTouching.default(button0);
      inTouching.on('intouch', function () {
        if (!this.enable) {
          return;
        }
        var step = !slider.reverseAxis ? -this.scrollStep : this.scrollStep;
        this.value += step;
      }, this);
    }
    if (sliderConfig) {
      sliderConfig.orientation = this.orientation;
      sliderConfig.eventEmitter = this;
      sliderConfig.value = null;
      var proportion;
      if (this.orientation === 0) {
        var sliderWidth = GetValue(sliderConfig, 'width', undefined);
        proportion = sliderWidth === undefined ? 1 : 0;
      } else {
        var sliderHeight = GetValue(sliderConfig, 'height', undefined);
        proportion = sliderHeight === undefined ? 1 : 0;
      }
      slider = new _Slider.default(scene, sliderConfig);
      scene.add.existing(slider);
      this.add(slider, {
        proportion: proportion
      });
    }
    if (button1) {
      this.add(button1);
      var inTouching = new _InTouching.default(button1);
      inTouching.on('intouch', function () {
        if (!this.enable) {
          return;
        }
        var step = !slider.reverseAxis ? this.scrollStep : -this.scrollStep;
        this.value += step;
      }, this);
    }
    var buttons = [button0, button1];
    this.addChildrenMap('background', background);
    this.addChildrenMap('slider', slider);
    this.addChildrenMap('buttons', buttons);
    var callback = GetValue(config, 'valuechangeCallback', null);
    if (callback !== null) {
      var scope = GetValue(config, 'valuechangeCallbackScope', undefined);
      this.on('valuechange', callback, scope);
    }
    this.setEnable(GetValue(config, 'enable', undefined));
    this.setValue(GetValue(config, 'value', 0));
    this.setScrollStep(GetValue(buttonsConfig, 'step', 0.01));
  }
  setScrollStep(value) {
    this.scrollStep = value;
    return this;
  }
  get enable() {
    if (this.childrenMap.slider) {
      return this.childrenMap.slider.enable;
    } else {
      return false;
    }
  }
  set enable(value) {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.setEnable(value);
    }
  }
  setEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.enable = enable;
    return this;
  }
  get value() {
    if (this.childrenMap.slider) {
      return this.childrenMap.slider.value;
    } else {
      return 0;
    }
  }
  set value(value) {
    if (!this.childrenMap.slider) {
      return;
    }
    this.childrenMap.slider.value = value;
  }
  setValue(value, min, max) {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.setValue(value, min, max);
    }
    return this;
  }
  addValue(inc, min, max) {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.addValue(inc, min, max);
    }
    return this;
  }
  getValue(min, max) {
    if (this.childrenMap.slider) {
      return this.childrenMap.slider.getValue(min, max);
    } else {
      return 0;
    }
  }
  easeValueTo(value, min, max) {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.easeValueTo(value, min, max);
    }
    return this;
  }
  stopEaseValue() {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.stopEaseValue();
    }
    return this;
  }
  setEaseValueDuration(duration) {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.setEaseValueDuration(duration);
    }
    return this;
  }
  setEaseValueFunction(ease) {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.setEaseValueFunction(ease);
    }
    return this;
  }
}
var _default = ScrollBar;
exports.default = _default;
},{"../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../slider/Slider.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/Slider.js","../intouching/InTouching.js":"node_modules/phaser3-rex-plugins/templates/ui/intouching/InTouching.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/scrollable/Slider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ScrollBar = _interopRequireDefault(require("../../scrollbar/ScrollBar.js"));
var _Clone = _interopRequireDefault(require("../../../../plugins/utils/object/Clone.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Slider extends _ScrollBar.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    var sliderConfig = (0, _Clone.default)(config);
    config = {
      slider: sliderConfig
    };

    // Move orientation parameter from sliderConfig to config
    config.orientation = sliderConfig.orientation;
    delete sliderConfig.orientation;

    // Move background parameter from sliderConfig to config
    config.background = sliderConfig.background;
    delete sliderConfig.background;

    // Move buttons parameter from sliderConfig to config
    config.buttons = sliderConfig.buttons;
    delete sliderConfig.buttons;
    super(scene, config);
    var slider = this.childrenMap.slider;
    this.addChildrenMap('track', slider.childrenMap.track);
    this.addChildrenMap('indicator', slider.childrenMap.indicator);
    this.addChildrenMap('thumb', slider.childrenMap.thumb);
  }
}
var _default = Slider;
exports.default = _default;
},{"../../scrollbar/ScrollBar.js":"node_modules/phaser3-rex-plugins/templates/ui/scrollbar/ScrollBar.js","../../../../plugins/utils/object/Clone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/Clone.js"}],"node_modules/phaser3-rex-plugins/plugins/input/scroller/State.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fsm = _interopRequireDefault(require("../../fsm.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class State extends _fsm.default {
  constructor(parent, config) {
    super(config);
    this.parent = parent;
    this.init();
  }
  init() {
    this.start('IDLE');
  }

  // IDLE -> DRAGBEGIN|DRAG
  next_IDLE() {
    var nextState,
      parent = this.parent,
      dragState = parent.dragState;
    if (dragState.isDown) {
      nextState = parent.dragThreshold === 0 ? 'DRAG' : 'DRAGBEGIN';
    }
    return nextState;
  }
  update_IDLE(time, delta) {
    this.next();
  }
  // IDLE

  // DRAGBEGIN -> DRAG|IDLE
  next_DRAGBEGIN() {
    var nextState,
      parent = this.parent,
      dragState = parent.dragState;
    if (dragState.isDown) {
      nextState = dragState.pointer.getDistance() >= parent.dragThreshold ? 'DRAG' : 'DRAGBEGIN';
    } else {
      // dragState.isUp
      nextState = 'IDLE';
    }
    return nextState;
  }
  update_DRAGBEGIN(time, delta) {
    this.next();
  }
  // DRAGBEGIN

  // DRAG -> BACK|SLIDE|IDLE
  next_DRAG() {
    var nextState,
      parent = this.parent,
      dragState = parent.dragState;
    if (dragState.isUp) {
      if (parent.outOfBounds) {
        nextState = 'BACK';
      } else if (parent.slidingEnable) {
        nextState = 'SLIDE';
      } else {
        nextState = 'IDLE';
      }
    }
    return nextState;
  }
  update_DRAG(time, delta) {
    var parent = this.parent,
      dragState = parent.dragState;
    if (dragState.justMoved) {
      parent.dragging();
    }
    this.next();
  }
  enter_DRAG() {
    this.parent.onDragStart();
  }
  exit_DRAG() {
    this.parent.onDragEnd();
  }
  // DRAG    

  // SLIDE -> DRAG|IDLE
  next_SLIDE() {
    var nextState,
      parent = this.parent,
      dragState = parent.dragState;
    if (dragState.isDown) {
      nextState = 'DRAG';
    } else if (!parent.isSliding) {
      nextState = 'IDLE';
    }
    return nextState;
  }
  enter_SLIDE() {
    this.parent.onSliding();
  }
  exit_SLIDE() {
    this.parent.stop();
  }
  update_SLIDE(time, delta) {
    this.parent.sliding(time, delta);
    this.next();
  }
  // SLIDE    

  // BACK -> DRAG|IDLE
  next_BACK() {
    var nextState,
      parent = this.parent,
      dragState = parent.dragState;
    if (dragState.isDown) {
      nextState = 'DRAG';
    } else if (!parent.isPullBack) {
      nextState = 'IDLE';
    }
    return nextState;
  }
  enter_BACK() {
    this.parent.onPullBack();
  }
  exit_BACK() {
    this.parent.stop();
  }
  update_BACK(time, delta) {
    this.parent.pullBack(time, delta);
    this.next();
  }
  // BACK
}
var _default = State;
exports.default = _default;
},{"../../fsm.js":"node_modules/phaser3-rex-plugins/plugins/fsm.js"}],"node_modules/phaser3-rex-plugins/plugins/input/dragspeed/DragSpeed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
var _GetTickDelta = _interopRequireDefault(require("../../utils/system/GetTickDelta.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const DistanceBetween = Phaser.Math.Distance.Between;
class DragSpeed extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;

    this._enable = undefined;
    gameObject.setInteractive(GetValue(config, "inputConfig", undefined));
    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    this.pointer = undefined;
    this.isInTouched = false;
    this.holdStartTime = undefined;
    this.x = undefined;
    this.y = undefined;
    this.preX = undefined;
    this.preY = undefined;
    this.localX = undefined;
    this.localY = undefined;
    this.justMoved = false;
    this.setEnable(GetValue(o, 'enable', true));
    this.holdThreshold = GetValue(o, 'holdThreshold', 50); // ms
    this.pointerOutReleaseEnable = GetValue(o, 'pointerOutRelease', true);
    return this;
  }
  boot() {
    // Drag start only when pointer down
    this.parent.on('pointerdown', this.onPointIn, this);
    // this.parent.on('pointerover', this.onPointIn, this);

    this.parent.on('pointerup', this.onPointOut, this);
    if (this.pointerOutReleaseEnable) {
      this.parent.on('pointerout', this.onPointOut, this);
    }
    this.parent.on('pointermove', this.onPointerMove, this);
    this.scene.sys.events.on('preupdate', this.preupdate, this);
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }

    // GameObject events will be removed when this gameObject destroyed 
    // this.parent.off('pointerdown', this.onPointIn, this);
    // this.parent.off('pointerup', this.onPointOut, this);
    // this.parent.off('pointerout', this.onPointOut, this);
    // this.parent.off('pointermove', this.onPointerMove, this);

    this.scene.sys.events.off('preupdate', this.preupdate, this);
    this.pointer = undefined;
    super.shutdown(fromScene);
  }
  get enable() {
    return this._enable;
  }
  set enable(e) {
    if (this._enable === e) {
      return;
    }
    if (!e) {
      this.isInTouched = false;
      this.pointer = undefined;
    }
    this._enable = e;
  }
  setEnable(e) {
    if (e === undefined) {
      e = true;
    }
    this.enable = e;
    return this;
  }
  toggleEnable() {
    this.setEnable(!this.enable);
    return this;
  }
  setPointerOutReleaseEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.pointerOutReleaseEnable = enable;
    return this;
  }
  get isDown() {
    return this.pointer && this.pointer.isDown;
  }
  get isUp() {
    return !this.isDown;
  }
  get dx() {
    return this.x - this.preX;
  }
  get dy() {
    return this.y - this.preY;
  }
  get dt() {
    var delta = (0, _GetTickDelta.default)(this.scene);
    return delta;
  }
  get speed() {
    if (this.x === this.preX && this.y === this.preY) {
      return 0;
    }
    var d = DistanceBetween(this.preX, this.preY, this.x, this.y);
    var speed = d / (this.dt * 0.001);
    return speed;
  }
  get speedX() {
    return this.dx / (this.dt * 0.001);
  }
  get speedY() {
    return this.dy / (this.dt * 0.001);
  }

  // internal
  onPointIn(pointer, localX, localY) {
    if (!this.enable || !pointer.isDown || this.pointer !== undefined) {
      return;
    }
    this.pointer = pointer;
    this.localX = localX;
    this.localY = localY;
  }
  onPointOut(pointer) {
    if (!this.enable || this.pointer !== pointer) {
      return;
    }
    this.pointer = undefined;
  }
  onPointerMove(pointer, localX, localY) {
    if (!this.enable || !pointer.isDown || this.pointer !== pointer) {
      return;
    }
    this.localX = localX;
    this.localY = localY;
  }
  preupdate(time, delta) {
    if (!this.enable) {
      return;
    }
    var pointer = this.pointer;
    this.justMoved = false;
    if (pointer && !this.isInTouched) {
      // Touch start
      this.x = pointer.worldX;
      this.y = pointer.worldY;
      this.preX = pointer.worldX;
      this.preY = pointer.worldY;
      this.isInTouched = true;
      this.holdStartTime = undefined;
      this.emit('touchstart', pointer, this.localX, this.localY);
    } else if (pointer && this.isInTouched) {
      // In touch
      if (this.x === pointer.x && this.y === pointer.y) {
        // Hold
        if (this.holdStartTime === undefined) {
          this.holdStartTime = time;
        } else if (time - this.holdStartTime > this.holdThreshold) {
          this.preX = this.x;
          this.preY = this.y;
        }
      } else {
        // Move
        this.preX = this.x;
        this.preY = this.y;
        this.x = pointer.worldX;
        this.y = pointer.worldY;
        this.holdStartTime = undefined;
        this.justMoved = true;
        this.emit('touchmove', pointer, this.localX, this.localY);
      }
    } else if (!pointer && this.isInTouched) {
      // Touch end
      this.isInTouched = false;
      this.holdStartTime = undefined;
      this.emit('touchend', pointer);
    }
  }
}
var _default = DragSpeed;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js","../../utils/system/GetTickDelta.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetTickDelta.js"}],"node_modules/phaser3-rex-plugins/plugins/dragspeed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DragSpeed = _interopRequireDefault(require("./input/dragspeed/DragSpeed.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _DragSpeed.default;
exports.default = _default;
},{"./input/dragspeed/DragSpeed.js":"node_modules/phaser3-rex-plugins/plugins/input/dragspeed/DragSpeed.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/movement/Movement.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetValue = Phaser.Utils.Objects.GetValue;
class Movement {
  constructor(config) {
    this.resetFromJSON(config);
  }
  resetFromJSON(o) {
    this.setValue(GetValue(o, 'value', 0));
    this.setSpeed(GetValue(o, 'speed', 0));
    this.setAcceleration(GetValue(o, 'acceleration', 0));
    return this;
  }
  reset() {
    this.setValue(0);
    this.setSpeed(0);
    this.setAcceleration(0);
  }
  setValue(value) {
    this.value = value;
    return this;
  }
  setSpeed(speed) {
    // speed == 0 : stop
    // speed  > 0 : move
    this.speed = speed;
    return this;
  }
  setAcceleration(acc) {
    // acc == 0 : constant speed
    // acc  > 0 : acceleration
    // acc  < 0 : deceleration
    this.acceleration = acc;
    return this;
  }
  updateSpeed(delta) {
    // delta in sec
    if (this.acceleration !== 0) {
      this.speed += this.acceleration * delta;
      if (this.speed < 0) {
        this.speed = 0;
      }
    }
    return this;
  }
  getDeltaValue(delta) {
    // delta in sec
    this.updateSpeed(delta);
    if (this.speed <= 0) {
      return 0;
    }
    return this.speed * delta;
  }
  update(delta) {
    // delta in sec
    this.updateSpeed(delta);
    if (this.speed > 0) {
      this.value += this.getDeltaValue(delta);
    }
    return this;
  }
  get isMoving() {
    return this.speed > 0;
  }
}
var _default = Movement;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/movement/SlowDown.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Movement = _interopRequireDefault(require("./Movement.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class SlowDown {
  constructor() {
    this.value;
    this.dir; // true:+, false:-
    this.movement = new _Movement.default();
  }
  init(start, dir, speed, dec, end) {
    this.value = start;
    this.end = end;
    if (end !== undefined) {
      this.dir = start < end;
    } else {
      this.dir = dir;
    }
    this.movement.setSpeed(speed).setAcceleration(-dec);
    return this;
  }
  stop() {
    this.movement.reset();
  }
  update(delta) {
    // delta in sec
    var d = this.movement.getDeltaValue(delta);
    if (!this.dir) {
      d = -d;
    }
    if (this.end === undefined) {
      this.value += d;
    } else {
      if (d === 0) {
        this.value = this.end;
      } else {
        this.value += d;
        if (this.dir) {
          // +
          if (this.value > this.end) {
            this.value = this.end;
          }
        } else {
          // -
          if (this.value < this.end) {
            this.value = this.end;
          }
        }
      }
    }
    return this;
  }
  get isMoving() {
    return this.movement.isMoving;
  }
}
var _default = SlowDown;
exports.default = _default;
},{"./Movement.js":"node_modules/phaser3-rex-plugins/plugins/utils/movement/Movement.js"}],"node_modules/phaser3-rex-plugins/plugins/input/scroller/Scroller.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
var _State = _interopRequireDefault(require("./State.js"));
var _dragspeed = _interopRequireDefault(require("../../dragspeed.js"));
var _SlowDown = _interopRequireDefault(require("../../utils/movement/SlowDown.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const Clamp = Phaser.Math.Clamp;
class Scroller extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;

    var enable = GetValue(config, 'enable', true);
    this._state = new _State.default(this, {
      enable: enable,
      eventEmitter: false
    });
    var drapSpeedConfig = {
      inputConfig: GetValue(config, 'inputConfig', undefined),
      enable: enable,
      pointerOutRelease: GetValue(config, 'pointerOutRelease', true),
      eventEmitter: false
    };
    this.dragState = new _dragspeed.default(gameObject, drapSpeedConfig);
    this._enable = undefined;
    this._value = undefined;
    this._slowDown = new _SlowDown.default();
    var callback = GetValue(config, 'valuechangeCallback', null);
    if (callback !== null) {
      var scope = GetValue(config, 'valuechangeCallbackScope', undefined);
      this.on('valuechange', callback, scope);
    }
    callback = GetValue(config, 'overmaxCallback', null);
    if (callback !== null) {
      var scope = GetValue(config, 'overmaxCallbackScope', undefined);
      this.on('overmax', callback, scope);
    }
    callback = GetValue(config, 'overminCallback', null);
    if (callback !== null) {
      var scope = GetValue(config, 'overminCallbackScope', undefined);
      this.on('overmin', callback, scope);
    }
    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    this.setOrientationMode(GetValue(o, 'orientation', 0));
    this.setDragThreshold(GetValue(o, 'threshold', 10));
    this.setSlidingDeceleration(GetValue(o, 'slidingDeceleration', 5000));
    this.setBackDeceleration(GetValue(o, 'backDeceleration', 2000));
    var dragRate = GetValue(o, 'dragRate', 1);
    dragRate = dragRate * (GetValue(o, 'dragReverse', false) ? -1 : 1);
    this.setDragRate(dragRate);
    var bounds = GetValue(o, 'bounds', undefined);
    if (bounds) {
      this.setBounds(bounds);
    } else {
      this.setBounds(GetValue(o, 'max', 0), GetValue(o, 'min', 0));
    }
    this.setValue(GetValue(o, 'value', this.maxValue || 0));
    this.setEnable(GetValue(o, "enable", true));
    return this;
  }
  boot() {
    this.scene.sys.events.on('preupdate', this._state.update, this._state);
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }
    this.scene.sys.events.off('preupdate', this._state.update, this._state);
    this._state.destroy(fromScene);
    this.dragState.destroy(fromScene);
    this._state = undefined;
    this.dragState = undefined;
    super.shutdown(fromScene);
  }
  get enable() {
    return this._enable;
  }
  set enable(e) {
    if (this._enable === e) {
      return;
    }
    this._enable = e;
    this._state.setEnable(e);
    this.dragState.setEnable(e);
    return this;
  }
  setEnable(e) {
    if (e === undefined) {
      e = true;
    }
    this.enable = e;
    return this;
  }
  toggleEnable() {
    this.setEnable(!this.enable);
    return this;
  }
  setOrientationMode(m) {
    if (typeof m === 'string') {
      m = ORIENTATIONMODE[m];
    }
    this.orientationMode = m;
    return this;
  }
  setDragThreshold(distance) {
    this.dragThreshold = distance;
    return this;
  }
  setSlidingDeceleration(dec) {
    this.slidingDeceleration = dec;
    return this;
  }
  setBackDeceleration(dec) {
    this.backDeceleration = dec;
    return this;
  }
  setDragRate(ratio) {
    this.dragRate = ratio;
    return this;
  }
  setBounds(value0, value1) {
    if (Array.isArray(value0)) {
      var bounds = value0;
      value0 = bounds[0];
      value1 = bounds[1];
    }
    if (value0 < value1) {
      this.minValue = value0;
      this.maxValue = value1;
    } else {
      this.minValue = value1;
      this.maxValue = value0;
    }
    return this;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (value === this._value) {
      return;
    }
    var oldValue = this._value;
    var isOverMax = this.overMax(value);
    var isOverMin = this.overMin(value);
    if (isOverMax) {
      this.emit('overmax', value, oldValue);
    }
    if (isOverMin) {
      this.emit('overmin', value, oldValue);
    }
    if (!this.backEnable) {
      if (isOverMax) {
        value = this.maxValue;
      }
      if (isOverMin) {
        value = this.minValue;
      }
    }
    this._value = value;
    this.emit('valuechange', value, oldValue);
  }
  setValue(value, clamp) {
    if (clamp === undefined) {
      clamp = false;
    }
    if (clamp) {
      value = Clamp(value, this.minValue, this.maxValue);
    }
    this.value = value;
    return this;
  }
  addValue(inc, clamp) {
    this.setValue(this.value + inc, clamp);
    return this;
  }
  get state() {
    return this._state.state;
  }
  get isDragging() {
    return this.dragState.isInTouched;
  }
  get outOfMaxBound() {
    return this.overMax(this.value);
  }
  get outOfMinBound() {
    return this.overMin(this.value);
  }
  get outOfBounds() {
    return this.outOfMinBound || this.outOfMaxBound;
  }

  // internal
  overMax(value) {
    return this.maxValue != null && value > this.maxValue;
  }
  overMin(value) {
    return this.minValue != null && value < this.minValue;
  }
  get backEnable() {
    return typeof this.backDeceleration === 'number';
  }
  get isPullBack() {
    return this._slowDown.isMoving;
  }
  get slidingEnable() {
    return typeof this.slidingDeceleration === 'number';
  }
  get isSliding() {
    return this._slowDown.isMoving;
  }
  get dragDelta() {
    var delta;
    if (this.orientationMode === 0) {
      // y
      delta = this.dragState.dy;
    } else if (this.orientationMode === 1) {
      // x
      delta = this.dragState.dx;
    } else {
      delta = 0;
    }
    delta *= this.dragRate;
    return delta;
  }
  get dragSpeed() {
    var speed;
    if (this.orientationMode === 0) {
      // y
      speed = this.dragState.speedY;
    } else if (this.orientationMode === 1) {
      // x
      speed = this.dragState.speedX;
    } else {
      speed = 0;
    }
    speed *= this.dragRate;
    return speed;
  }

  // enter_DRAG
  onDragStart() {
    this.emit('dragstart');
  }

  // exit_DRAG
  onDragEnd() {
    this.emit('dragend');
  }

  // everyTick_DRAG
  dragging() {
    this.value += this.dragDelta;
  }

  // enter_SLIDE 
  onSliding() {
    var start = this.value;
    var speed = this.dragSpeed;
    if (speed === 0) {
      this._slowDown.stop();
      this._state.next();
      return;
    }
    var dec = this.slidingDeceleration;
    this._slowDown.init(start, speed > 0, Math.abs(speed), dec);
  }

  // everyTick_SLIDE
  sliding(time, delta) {
    delta *= 0.001;
    var newValue = this._slowDown.update(delta).value;
    if (this.overMax(newValue)) {
      this.value = this.maxValue;
      this._slowDown.stop();
    } else if (this.overMin(newValue)) {
      this.value = this.minValue;
      this._slowDown.stop();
    } else {
      this.value = newValue;
    }
  }

  // enter_BACK
  onPullBack() {
    var start = this.value;
    var end = this.outOfMinBound ? this.minValue : this.maxValue;
    var dist = Math.abs(end - start);
    var dec = this.backDeceleration;
    var speed = Math.sqrt(2 * dec * dist);
    this._slowDown.init(start, undefined, speed, dec, end);
  }

  // everyTick_BACK
  pullBack(time, delta) {
    delta *= 0.001;
    this.value = this._slowDown.update(delta).value;
    if (!this._slowDown.isMoving) {
      this._state.next();
    }
  }

  // exit_SLIDE, exit_BACK
  stop() {
    this._slowDown.stop();
  }
}
const ORIENTATIONMODE = {
  y: 0,
  v: 0,
  vertical: 0,
  x: 1,
  h: 1,
  horizontal: 1
};
var _default = Scroller;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js","./State.js":"node_modules/phaser3-rex-plugins/plugins/input/scroller/State.js","../../dragspeed.js":"node_modules/phaser3-rex-plugins/plugins/dragspeed.js","../../utils/movement/SlowDown.js":"node_modules/phaser3-rex-plugins/plugins/utils/movement/SlowDown.js"}],"node_modules/phaser3-rex-plugins/plugins/scroller.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Scroller = _interopRequireDefault(require("./input/scroller/Scroller.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _Scroller.default;
exports.default = _default;
},{"./input/scroller/Scroller.js":"node_modules/phaser3-rex-plugins/plugins/input/scroller/Scroller.js"}],"node_modules/phaser3-rex-plugins/plugins/input/mousewheelscroller/MouseWheelScroller.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class MouseWheelScroller extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;

    if (this.parent !== this.scene) {
      this.focusMode = GetValue(config, 'focus', false);
    } else {
      this.focusMode = false;
    }
    this.setSpeed(GetValue(config, 'speed', 0.1));
    this.setEnable(GetValue(config, 'enable', true));
    if (!this.focusMode) {
      // Register on scene
      this.scene.input.on('wheel', this.onSceneScroll, this);
    } else {
      var gameObject = this.parent;
      gameObject.setInteractive(GetValue(config, "inputConfig", undefined)).on('wheel', function (pointer, dx, dy, dz, event) {
        if (!this.enable) {
          return;
        }
        this.scroll(dy);
      }, this);
    }
  }
  destroy() {
    if (!this.focusMode) {
      this.scene.input.off('wheel', this.onSceneScroll, this);
    } else {
      // GameObject events will be removed when this gameObject destroyed 
    }
  }
  onSceneScroll(pointer, currentlyOver, dx, dy, dz, event) {
    if (!this.enable) {
      return;
    }
    this.scroll(dy);
  }
  setEnable(e) {
    if (e === undefined) {
      e = true;
    }
    this.enable = e;
    return this;
  }
  setSpeed(speed) {
    this.speed = speed;
    return this;
  }
  scroll(dy) {
    dy *= this.speed;
    this.emit('scroll', dy, this.parent, this);
  }
}
var _default = MouseWheelScroller;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/scrollable/CreateScrollableSizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../../sizer/Sizer.js"));
var _GetScrollMode = _interopRequireDefault(require("../GetScrollMode.js"));
var _Slider = _interopRequireDefault(require("./Slider.js"));
var _scroller = _interopRequireDefault(require("../../../../plugins/scroller.js"));
var _MouseWheelScroller = _interopRequireDefault(require("../../../../plugins/input/mousewheelscroller/MouseWheelScroller.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateScrollableSizer = function (parent, config) {
  var scene = parent.scene;
  var scrollMode = (0, _GetScrollMode.default)(config);
  var scrollableSizer = new _Sizer.default(scene, {
    orientation: scrollMode
  });
  // A child which not put into scene

  var child = GetValue(config, 'child.gameObject', undefined),
    childPadding = 0;
  var sliderConfig = GetValue(config, 'slider', undefined),
    slider,
    sliderPadding = 0;
  var sliderPosition = GetValue(sliderConfig, 'position', 0);
  if (typeof sliderPosition === 'string') {
    sliderPosition = SLIDER_POSITION_MAP[sliderPosition];
  }
  var isRightSlider = sliderPosition === 0; // Right/bottom slider

  var scrollerConfig = GetValue(config, 'scroller', true),
    scroller;
  var mouseWheelScrollerConfig = GetValue(config, 'mouseWheelScroller', false),
    mouseWheelScroller;

  // Child, slider, scroller, mouseWheelScroller
  if (child) {
    var childSpace = GetValue(config, 'space.child', 0);
    parent.childMargin = {};
    if (typeof childSpace !== 'number') {
      var paddingConfig = childSpace;
      if (scrollMode === 0) {
        childPadding = {
          left: GetValue(paddingConfig, 'left', 0),
          right: GetValue(paddingConfig, 'right', 0)
        };
        parent.childMargin.top = GetValue(paddingConfig, 'top', 0);
        parent.childMargin.bottom = GetValue(paddingConfig, 'bottom', 0);
      } else {
        childPadding = {
          top: GetValue(paddingConfig, 'top', 0),
          bottom: GetValue(paddingConfig, 'bottom', 0)
        };
        parent.childMargin.top = GetValue(paddingConfig, 'left', 0);
        parent.childMargin.bottom = GetValue(paddingConfig, 'right', 0);
      }
    } else {
      if (sliderConfig) {
        // Has slider
        if (scrollMode === 0) {
          childPadding = isRightSlider ? {
            right: childSpace
          } : {
            left: childSpace
          };
        } else {
          childPadding = isRightSlider ? {
            bottom: childSpace
          } : {
            top: childSpace
          };
        }
      }
      parent.childMargin.top = 0;
      parent.childMargin.bottom = 0;
    }
    if (sliderConfig) {
      if (sliderConfig === true) {
        sliderConfig = {};
      }

      // Vertical slider(orientation=1) for left-right scrollableSizer(orientation=0)
      // Horizontal slider(orientation=0) for top-bottom scrollableSizer(orientation=1)
      sliderConfig.orientation = scrollableSizer.orientation === 0 ? 1 : 0;
      slider = new _Slider.default(scene, sliderConfig);
      sliderPadding = GetValue(config, 'space.slider', 0);
      parent.hideUnscrollableSlider = GetValue(sliderConfig, 'hideUnscrollableSlider', false);
      parent.adaptThumbSizeMode = GetValue(sliderConfig, 'adaptThumbSize', false);
      parent.minThumbSize = GetValue(sliderConfig, 'minThumbSize', undefined);
    } else {
      parent.adaptThumbSizeMode = false;
      parent.minThumbSize = undefined;
    }
    if (scrollerConfig) {
      if (scrollerConfig === true) {
        scrollerConfig = {};
      }
      scrollerConfig.orientation = scrollMode;
      scroller = new _scroller.default(child, scrollerConfig);
    }
    if (mouseWheelScrollerConfig) {
      mouseWheelScroller = new _MouseWheelScroller.default(child, mouseWheelScrollerConfig);
    }

    // Add slider to parent sizer at left/top side
    if (slider && !isRightSlider) {
      scrollableSizer.add(slider, {
        proportion: 0,
        align: 'center',
        padding: sliderPadding,
        expand: true
      });
    }

    // Add child to parent sizer
    var proportion = GetValue(config, 'child.proportion', 1);
    var expand = GetValue(config, 'child.expand', true);
    scrollableSizer.add(child, {
      proportion: proportion,
      align: 'center',
      padding: childPadding,
      expand: expand
    });

    // Add slider to parent sizer at right/bottom side
    if (slider && isRightSlider) {
      scrollableSizer.add(slider, {
        proportion: 0,
        align: 'center',
        padding: sliderPadding,
        expand: true
      });
    }
  }

  // Control
  if (slider) {
    slider.on('valuechange', function (newValue) {
      parent.t = newValue;
      parent.emit('scroll', parent);
    });
  }
  if (scroller) {
    scroller.on('valuechange', function (newValue) {
      parent.childOY = newValue;
      parent.emit('scroll', parent);
    });
  }
  if (mouseWheelScroller) {
    mouseWheelScroller.on('scroll', function (incValue) {
      parent.addChildOY(-incValue, true);
    });
  }
  parent.addChildrenMap('child', child);
  parent.addChildrenMap('slider', slider);
  parent.addChildrenMap('scroller', scroller);
  parent.addChildrenMap('mouseWheelScroller', mouseWheelScroller);
  return scrollableSizer;
};
var SLIDER_POSITION_MAP = {
  right: 0,
  left: 1,
  bottom: 0,
  top: 1
};
var _default = CreateScrollableSizer;
exports.default = _default;
},{"../../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../GetScrollMode.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetScrollMode.js","./Slider.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/scrollable/Slider.js","../../../../plugins/scroller.js":"node_modules/phaser3-rex-plugins/plugins/scroller.js","../../../../plugins/input/mousewheelscroller/MouseWheelScroller.js":"node_modules/phaser3-rex-plugins/plugins/input/mousewheelscroller/MouseWheelScroller.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/scrollable/ResizeController.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResizeGameObject = _interopRequireDefault(require("../../../../plugins/utils/size/ResizeGameObject.js"));
var _Sizer = _interopRequireDefault(require("../../sizer/Sizer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ResizeController = function () {
  var topChildOY = this.topChildOY;
  var bottomChildOY = this.bottomChildOY;
  var scroller = this.childrenMap.scroller;
  var slider = this.childrenMap.slider;
  if (scroller) {
    scroller.setBounds(bottomChildOY, topChildOY);
  }
  if (slider) {
    slider.setEnable(bottomChildOY !== topChildOY);
  }
  this.updateController();
  if (slider) {
    if (this.hideUnscrollableSlider) {
      this.setChildVisible(slider, this.isOverflow);
    }
    if (this.adaptThumbSizeMode) {
      AdaptThumbSize.call(this);
    }
  }
  return this;
};
var AdaptThumbSize = function () {
  // Change slider size according to visible ratio
  var ratio = Math.min(this.childVisibleHeight / this.childHeight, 1);
  var slider = this.childrenMap.slider;
  var track = slider.childrenMap.track;
  var thumb = slider.childrenMap.thumb;
  var minThumbSize = this.minThumbSize;
  if (this.scrollMode === 0) {
    var newHeight = track.displayHeight * ratio;
    if (minThumbSize !== undefined && newHeight < minThumbSize) {
      newHeight = minThumbSize;
    }
    (0, _ResizeGameObject.default)(thumb, undefined, newHeight);
  } else {
    var newWidth = track.displayWidth * ratio;
    if (minThumbSize !== undefined && newWidth < minThumbSize) {
      newWidth = minThumbSize;
    }
    (0, _ResizeGameObject.default)(thumb, newWidth, undefined);
  }
  LayoutSlider.call(this);
};
var LayoutSlider = function () {
  var slider = this.childrenMap.slider;
  // Save minSize
  var minWidthSave = slider.minWidth;
  var minHeightSave = slider.minHeight;
  // Set minSize to current size
  slider.minWidth = slider.width;
  slider.minHeight = slider.height;
  // Layout slider
  slider.layout();
  // Restore minSize
  slider.minWidth = minWidthSave;
  slider.minHeight = minHeightSave;
};
var _default = ResizeController;
exports.default = _default;
},{"../../../../plugins/utils/size/ResizeGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/ResizeGameObject.js","../../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/scrollable/UpdateController.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var UpdateController = function () {
  var scroller = this.childrenMap.scroller;
  var slider = this.childrenMap.slider;
  if (scroller) {
    scroller.setValue(this.childOY);
  }
  if (slider) {
    slider.setValue(this.t);
  }
};
var _default = UpdateController;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/scrollable/Scrollable.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../../sizer/Sizer.js"));
var _GetScrollMode = _interopRequireDefault(require("../GetScrollMode.js"));
var _CreateScrollableSizer = _interopRequireDefault(require("./CreateScrollableSizer.js"));
var _ResizeController = _interopRequireDefault(require("./ResizeController.js"));
var _UpdateController = _interopRequireDefault(require("./UpdateController.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const Clamp = Phaser.Math.Clamp;
class Scrollable extends _Sizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    var scrollMode = (0, _GetScrollMode.default)(config); // Left-to-right, or top-to-bottom
    // Create sizer
    config.orientation = scrollMode === 0 ? 1 : 0;
    super(scene, config);
    this.type = GetValue(config, 'type', 'rexScrollable');

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var scrollableSizer = (0, _CreateScrollableSizer.default)(this, config);
    var header = GetValue(config, 'header', undefined);
    var footer = GetValue(config, 'footer', undefined);

    // Background
    if (background) {
      this.addBackground(background);
    }
    if (header) {
      var align = GetValue(config, 'align.header', 'center');
      var headerSpace = GetValue(config, 'space.header', 0);
      var padding;
      if (scrollMode === 0) {
        padding = {
          bottom: headerSpace
        };
      } else {
        padding = {
          right: headerSpace
        };
      }
      var expand = GetValue(config, 'expand.header', true);
      this.add(header, {
        proportion: 0,
        align: align,
        padding: padding,
        expand: expand
      });
    }
    if (scrollableSizer) {
      this.add(scrollableSizer, {
        proportion: 1,
        align: 'center',
        padding: 0,
        expand: true
      });
    }
    if (footer) {
      var align = GetValue(config, 'align.footer', 'center');
      var footerSpace = GetValue(config, 'space.footer', 0);
      var padding;
      if (scrollMode === 0) {
        padding = {
          top: footerSpace
        };
      } else {
        padding = {
          left: footerSpace
        };
      }
      var expand = GetValue(config, 'expand.footer', true);
      this.add(footer, {
        proportion: 0,
        align: align,
        padding: padding,
        expand: expand
      });
    }
    this.addChildrenMap('background', background);
    this.addChildrenMap('header', header);
    this.addChildrenMap('footer', footer);
    this.runLayoutFlag = false;

    /* Necessary properties of child object
    - child.t (RW), 
    - child.childOY (RW)
    - child.topChildOY (R)
    - child.bottomChildOY (R)
    - child.childVisibleHeight (R)
    - child.childHeight (R)
    */
  }

  runLayout(parent, newWidth, newHeight) {
    // Skip hidden or !dirty sizer
    if (this.ignoreLayout) {
      return this;
    }
    super.runLayout(parent, newWidth, newHeight);
    this.resizeController();

    // Set `t` to 0 at first runLayout()
    if (!this.runLayoutFlag) {
      this.runLayoutFlag = true;
      this.setT(0);
    }
    return this;
  }
  set t(t) {
    // Get inner childT
    var childMargin = this.childMargin;
    if (childMargin.top !== 0 || childMargin.bottom !== 0) {
      var child = this.childrenMap.child;
      var innerHeight = child.topChildOY - child.bottomChildOY;
      var outerHeight = innerHeight + childMargin.top + childMargin.bottom;
      var innerChildOY = outerHeight * t - childMargin.top;
      t = innerChildOY / innerHeight;
    }
    this.childrenMap.child.t = t;
    this.updateController();
  }
  get t() {
    var t = this.childrenMap.child.t;

    // Get outer childT
    var childMargin = this.childMargin;
    if (childMargin.top !== 0 || childMargin.bottom !== 0) {
      var child = this.childrenMap.child;
      var innerHeight = child.topChildOY - child.bottomChildOY;
      var outerHeight = innerHeight + childMargin.top + childMargin.bottom;
      var outerChildOY = innerHeight * t + childMargin.top;
      t = outerChildOY / outerHeight;
    }
    return t;
  }
  set childOY(value) {
    this.childrenMap.child.childOY = value;
    this.updateController();
  }
  get childOY() {
    return this.childrenMap.child.childOY;
  }
  get topChildOY() {
    return this.childrenMap.child.topChildOY + this.childMargin.top;
  }
  get bottomChildOY() {
    return this.childrenMap.child.bottomChildOY - this.childMargin.bottom;
  }
  get childVisibleHeight() {
    return this.childrenMap.child.childVisibleHeight;
  }
  get childHeight() {
    return this.childrenMap.child.childHeight;
  }
  get isOverflow() {
    var child = this.childrenMap.child;
    return child.topChildOY !== child.bottomChildOY;
  }
  get scrollMode() {
    return this.orientation === 0 ? 1 : 0;
  }
  setChildOY(value, clamp) {
    if (clamp === undefined) {
      clamp = false;
    }
    if (clamp) {
      value = Clamp(value, this.bottomChildOY, this.topChildOY);
    }
    this.childOY = value;
    return this;
  }
  addChildOY(inc, clamp) {
    this.setChildOY(this.childOY + inc, clamp);
    return this;
  }
  setT(value, clamp) {
    if (clamp === undefined) {
      clamp = false;
    }
    if (clamp) {
      value = Clamp(value, 0, 1);
    }
    this.t = value;
    return this;
  }
  addT(inc, clamp) {
    this.setT(this.t + inc, clamp);
    return this;
  }
  scrollToTop() {
    this.t = 0;
    return this;
  }
  scrollToBottom() {
    this.t = 1;
    // t will be 0 if panel/table does not exceed visible area
    if (this.t === 0) {
      return this;
    }

    // Panel/Table height might be expanded while cells are visible        
    do {
      this.t = 1;
    } while (this.t !== 1);
    return this;
  }
  get sliderEnable() {
    var slider = this.childrenMap.slider;
    if (!slider) {
      return false;
    }
    return slider.enable;
  }
  set sliderEnable(value) {
    var slider = this.childrenMap.slider;
    if (!slider) {
      return;
    }
    slider.setEnable(value);
  }
  setSliderEnable(enabled) {
    if (enabled === undefined) {
      enabled = true;
    }
    this.sliderEnable = enabled;
    return this;
  }
  get scrollerEnable() {
    var scroller = this.childrenMap.scroller;
    if (!scroller) {
      return false;
    }
    return scroller.enable;
  }
  set scrollerEnable(value) {
    var scroller = this.childrenMap.scroller;
    if (!scroller) {
      return;
    }
    scroller.setEnable(value);
  }
  setScrollerEnable(enabled) {
    if (enabled === undefined) {
      enabled = true;
    }
    this.scrollerEnable = enabled;
    return this;
  }
  get mouseWheelScrollerEnable() {
    var mouseWheelScroller = this.childrenMap.mouseWheelScroller;
    if (!mouseWheelScroller) {
      return false;
    }
    return mouseWheelScroller.enable;
  }
  set mouseWheelScrollerEnable(value) {
    var mouseWheelScroller = this.childrenMap.mouseWheelScrollerEnable;
    if (!mouseWheelScroller) {
      return;
    }
    mouseWheelScroller.setEnable(value);
  }
  setMouseWheelScrollerEnable(enabled) {
    if (enabled === undefined) {
      enabled = true;
    }
    this.mouseWheelScrollerEnable = enabled;
    return this;
  }
  setDropZoneEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    var child = this.childrenMap.child;
    child.setInteractive();
    child.input.dropZone = enable;
    return this;
  }
}
var Methods = {
  resizeController: _ResizeController.default,
  updateController: _UpdateController.default
};

// mixin
Object.assign(Scrollable.prototype, Methods);
var _default = Scrollable;
exports.default = _default;
},{"../../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../GetScrollMode.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetScrollMode.js","./CreateScrollableSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/scrollable/CreateScrollableSizer.js","./ResizeController.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/scrollable/ResizeController.js","./UpdateController.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/scrollable/UpdateController.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/text/GetTextObjectType.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TextType = exports.TagTextType = exports.BitmapTextType = void 0;
var _IsTextGameObject = _interopRequireDefault(require("./IsTextGameObject.js"));
var _IsBitmapTextGameObject = _interopRequireDefault(require("../bitmaptext/IsBitmapTextGameObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const TextType = 0;
exports.TextType = TextType;
const TagTextType = 1;
exports.TagTextType = TagTextType;
const BitmapTextType = 2;
exports.BitmapTextType = BitmapTextType;
var GetTextObjectType = function (textObject) {
  var textObjectType;
  if ((0, _IsBitmapTextGameObject.default)(textObject)) {
    textObjectType = BitmapTextType;
  } else if ((0, _IsTextGameObject.default)(textObject)) {
    textObjectType = TextType;
  } else {
    textObjectType = TagTextType;
  }
  return textObjectType;
};
var _default = GetTextObjectType;
exports.default = _default;
},{"./IsTextGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/IsTextGameObject.js","../bitmaptext/IsBitmapTextGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/bitmaptext/IsBitmapTextGameObject.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/text/TextToLines.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetTextObjectType = _interopRequireWildcard(require("./GetTextObjectType.js"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var TextToLines = function (textObject, text, lines) {
  var textObjectType = (0, _GetTextObjectType.default)(textObject);
  switch (textObjectType) {
    case _GetTextObjectType.TextType:
      lines = textObject.getWrappedText(text); // Array of string
      break;
    case _GetTextObjectType.TagTextType:
      lines = textObject.getPenManager(text, lines); // Pens-manager
      break;
    case _GetTextObjectType.BitmapTextType:
      if (textObject.maxWidth > 0) {
        lines = textObject.setText(text).getTextBounds().wrappedText.split('\n');
      } else {
        lines = text.split('\n');
      }
      break;
  }
  return lines;
};
var _default = TextToLines;
exports.default = _default;
},{"./GetTextObjectType.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/GetTextObjectType.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/SetText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextToLines = _interopRequireDefault(require("../../../../plugins/utils/text/TextToLines.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var SetText = function (text) {
  if (text !== undefined) {
    this.text = text;
  }

  // Wrap content in lines
  this.lines = (0, _TextToLines.default)(this.textObject, this.text, this.lines);

  // Get lines count
  this.linesCount = this.lines.length;

  // Re-calculate these values later
  this._textHeight = undefined;
  this._textVisibleHeight = undefined;
  this.updateTextObject();
  return this;
};
var _default = SetText;
exports.default = _default;
},{"../../../../plugins/utils/text/TextToLines.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/TextToLines.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/TextHeightToLinesCount.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var TextHeightToLinesCount = function (height) {
  // height = (lines * (lineHeight + lineSpacing)) - lineSpacing
  return (height - this.textLineSpacing) / (this.textLineHeight + this.textLineSpacing);
};
var _default = TextHeightToLinesCount;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/LinesCountToTextHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var LinesCountToTextHeight = function (linesCount) {
  // height = (linesCount * (lineHeight + lineSpacing)) - lineSpacing
  return linesCount * (this.textLineHeight + this.textLineSpacing) - this.textLineSpacing;
};
var _default = LinesCountToTextHeight;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/GetLines.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetTextObjectType = require("../../../../plugins/utils/text/GetTextObjectType.js");
var GetLines = function (startLineIdx) {
  var endLineIdx = startLineIdx + this.visibleLinesCount + 1;
  var text;
  switch (this.textObjectType) {
    case _GetTextObjectType.TextType:
      text = this.lines.slice(startLineIdx, endLineIdx).join('\n');
      break;
    case _GetTextObjectType.TagTextType:
      var startIdx = this.lines.getLineStartIndex(startLineIdx);
      var endIdx = this.lines.getLineEndIndex(endLineIdx - 1);
      text = this.lines.getSliceTagText(startIdx, endIdx, true);
      break;
    case _GetTextObjectType.BitmapTextType:
      text = this.lines.slice(startLineIdx, endLineIdx).join('\n');
      break;
  }
  return text;
};
var _default = GetLines;
exports.default = _default;
},{"../../../../plugins/utils/text/GetTextObjectType.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/GetTextObjectType.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/text/SetNoWrapText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetTextObjectType = _interopRequireWildcard(require("./GetTextObjectType.js"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var SetNoWrapText = function (textObject, text) {
  var textObjectType = (0, _GetTextObjectType.default)(textObject);
  switch (textObjectType) {
    case _GetTextObjectType.TextType:
      // Store wrap properties
      var style = textObject.style;
      var wordWrapWidth = style.wordWrapWidth;
      var wordWrapCallback = style.wordWrapCallback;
      // Disable wrap
      style.wordWrapWidth = 0;
      style.wordWrapCallback = undefined;
      // Set text
      textObject.setText(text);
      // Restore wrap
      style.wordWrapWidth = wordWrapWidth;
      style.wordWrapCallback = wordWrapCallback;
      break;
    case _GetTextObjectType.TagTextType:
      // Store wrap properties
      var style = textObject.style;
      var wrapMode = style.wrapMode;
      // Disable wrap
      style.wrapMode = 0;
      // Set text
      textObject.setText(text);
      // Restore wrap
      style.wrapMode = wrapMode;
      break;
    case _GetTextObjectType.BitmapTextType:
      // Store wrap properties
      var maxWidth = textObject._maxWidth;
      // Disable wrap
      textObject._maxWidth = 0;
      // Set text
      textObject.setText(text);
      // Restore wrap
      textObject._maxWidth = maxWidth;
      break;
  }
};
var _default = SetNoWrapText;
exports.default = _default;
},{"./GetTextObjectType.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/GetTextObjectType.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/ResetTextObjectPosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ResetTextObjectPosition = function () {
  var config = this.textObject.rexSizer;
  this.textObject.y += config.offsetY - config.preOffsetY;
  config.preOffsetY = config.offsetY;
  this.resetChildPositionState(this.textObject);
  if (this.textCropEnable) {
    CropTextObject.call(this);
  }
};
var CropTextObject = function () {
  // Don't have setCrop method, return
  if (!this.textObject.setCrop) {
    return;
  }
  var offsetY = this.textObject.rexSizer.offsetY;
  var cropY, cropHeight;
  if (offsetY <= 0) {
    cropY = -offsetY;
    cropHeight = this.height;
  } else {
    cropY = 0;
    cropHeight = this.height - offsetY;
  }
  this.textObject.setCrop(0, cropY, this.width, cropHeight);
};
var _default = ResetTextObjectPosition;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/UpdateTextObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextHeightToLinesCount = _interopRequireDefault(require("./TextHeightToLinesCount.js"));
var _LinesCountToTextHeight = _interopRequireDefault(require("./LinesCountToTextHeight.js"));
var _GetLines = _interopRequireDefault(require("./GetLines.js"));
var _SetNoWrapText = _interopRequireDefault(require("../../../../plugins/utils/text/SetNoWrapText.js"));
var _ResetTextObjectPosition = _interopRequireDefault(require("./ResetTextObjectPosition.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var UpdateTextObject = function () {
  var startLineIndex = Math.max(Math.floor(_TextHeightToLinesCount.default.call(this, -this.textOY)), 0);
  var textOffset = _LinesCountToTextHeight.default.call(this, startLineIndex) + this.textOY;

  // Grab visible lines
  var text = _GetLines.default.call(this, startLineIndex);

  // Display visible content
  (0, _SetNoWrapText.default)(this.textObject, text);
  this.textObject.rexSizer.offsetY = textOffset;
  _ResetTextObjectPosition.default.call(this);
  return this;
};
var _default = UpdateTextObject;
exports.default = _default;
},{"./TextHeightToLinesCount.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/TextHeightToLinesCount.js","./LinesCountToTextHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/LinesCountToTextHeight.js","./GetLines.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/GetLines.js","../../../../plugins/utils/text/SetNoWrapText.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/SetNoWrapText.js","./ResetTextObjectPosition.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/ResetTextObjectPosition.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/PreLayout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PreLayout = _interopRequireDefault(require("../../basesizer/PreLayout.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PreLayout = function () {
  // Style of text
  this._textLineHeight = undefined;
  this._textLineSpacing = undefined;
  // Style of text, width of text
  this._visibleLinesCount = undefined;
  // Style of text, total lines of content
  this._textHeight = undefined;
  this._textVisibleHeight = undefined;
  _PreLayout.default.call(this);
  return this;
};
var _default = PreLayout;
exports.default = _default;
},{"../../basesizer/PreLayout.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/PreLayout.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/ResizeText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetTextObjectType = require("../../../../plugins/utils/text/GetTextObjectType.js");
var ResizeText = function (textObject, width, height) {
  height += this.textLineHeight + this.textLineSpacing; // Add 1 line
  if (this.textObjectWidth === width && this._textObjectRealHeight === height) {
    return;
  }
  this.textObjectWidth = width;
  this._textObjectRealHeight = height;
  switch (this.textObjectType) {
    case _GetTextObjectType.TextType:
    case _GetTextObjectType.TagTextType:
      textObject.setFixedSize(width, height);
      var style = textObject.style;
      var wrapWidth = Math.max(width, 0);
      if (this.textObjectType === _GetTextObjectType.TextType) {
        // Built-in text
        style.wordWrapWidth = wrapWidth;
      } else {
        // BBCode text, Tag text
        if (style.wrapMode === 0) {
          // Turn no-wrap to word-wrap
          style.wrapMode = 1;
        }
        style.wrapWidth = wrapWidth;
      }
      break;
    case _GetTextObjectType.BitmapTextType:
      textObject.setMaxWidth(width);
      break;
  }

  // Render content again
  this.setText();
};
var _default = ResizeText;
exports.default = _default;
},{"../../../../plugins/utils/text/GetTextObjectType.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/GetTextObjectType.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/LayoutChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResizeText = _interopRequireDefault(require("./ResizeText.js"));
var _ResetTextObjectPosition = _interopRequireDefault(require("./ResetTextObjectPosition.js"));
var _AlignIn = _interopRequireDefault(require("../../../../plugins/utils/actions/AlignIn.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var LayoutChildren = function () {
  var child, childConfig, padding;
  var startX = this.left,
    startY = this.top;
  var x, y, width, height; // Align zone

  // LayoutChildren text child
  // Skip invisible child
  child = this.textObject;
  if (!child.rexSizer.hidden) {
    childConfig = child.rexSizer;
    padding = childConfig.padding;
    x = startX + padding.left;
    y = startY + padding.top;
    width = this.width - padding.left - padding.right;
    height = this.height - padding.top - padding.bottom;
    _ResizeText.default.call(this, child, width, height);
    (0, _AlignIn.default)(child, x, y, width, height, childConfig.align);
    childConfig.preOffsetY = 0; // Clear preOffsetY
    _ResetTextObjectPosition.default.call(this);
    if (this.textMask) {
      this.textMask.setPosition().resize();
      this.resetChildPositionState(this.textMask);
    }
  }
};
var _default = LayoutChildren;
exports.default = _default;
},{"./ResizeText.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/ResizeText.js","./ResetTextObjectPosition.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/ResetTextObjectPosition.js","../../../../plugins/utils/actions/AlignIn.js":"node_modules/phaser3-rex-plugins/plugins/utils/actions/AlignIn.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SetText = _interopRequireDefault(require("./SetText.js"));
var _UpdateTextObject = _interopRequireDefault(require("./UpdateTextObject.js"));
var _PreLayout = _interopRequireDefault(require("./PreLayout.js"));
var _LayoutChildren = _interopRequireDefault(require("./LayoutChildren.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  setText: _SetText.default,
  updateTextObject: _UpdateTextObject.default,
  preLayout: _PreLayout.default,
  layoutChildren: _LayoutChildren.default
};
exports.default = _default;
},{"./SetText.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/SetText.js","./UpdateTextObject.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/UpdateTextObject.js","./PreLayout.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/PreLayout.js","./LayoutChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/LayoutChildren.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/TextBlock.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetTextObjectType = _interopRequireWildcard(require("../../../../plugins/utils/text/GetTextObjectType.js"));
var _AddChildMask = _interopRequireDefault(require("../../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js"));
var _BaseSizer = _interopRequireDefault(require("../../basesizer/BaseSizer.js"));
var _Methods = _interopRequireDefault(require("./Methods.js"));
var _GetBoundsConfig = _interopRequireDefault(require("../../utils/GetBoundsConfig.js"));
var _LinesCountToTextHeight = _interopRequireDefault(require("./LinesCountToTextHeight.js"));
var _TextHeightToLinesCount = _interopRequireDefault(require("./TextHeightToLinesCount.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const ALIGN_LEFTTOP = Phaser.Display.Align.TOP_LEFT;
class TextBlock extends _BaseSizer.default {
  constructor(scene, x, y, minWidth, minHeight, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      minWidth = GetValue(config, 'width', undefined);
      minHeight = GetValue(config, 'height', undefined);
    } else if (IsPlainObject(minWidth)) {
      config = minWidth;
      minWidth = GetValue(config, 'width', undefined);
      minHeight = GetValue(config, 'height', undefined);
    }
    super(scene, x, y, minWidth, minHeight, config);
    this.type = 'rexTextBlock';
    this.textObject = undefined;
    this.linesCount = 0;
    this.textMask = undefined;
    this.textObjectType = undefined;
    this._textLineHeight = undefined;
    this._textLineSpacing = undefined;
    this._visibleLinesCount = undefined;
    this._textHeight = undefined;
    this._textVisibleHeight = undefined;
    this._textObjectRealHeight = 0;
    this.lines = undefined;
    // Text object : array of string
    // Tag text object : pens-manager
    // Bitmap text object : array of string

    this.text = GetValue(config, 'content', '');
    this._textOY = 0;
    this.execeedTopState = false;
    this.execeedBottomState = false;
    this.setClampMode(GetValue(config, 'clamplTextOY', true));
    this.alwaysScrollable = GetValue(config, 'alwaysScrollable', false);

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var textObject = GetValue(config, 'text', undefined);
    if (textObject === undefined) {
      textObject = CreateDefaultTextObject(scene);
    }
    this.textCropEnable = GetValue(config, 'textCrop', !!textObject.setCrop);
    var textMaskEnable = GetValue(config, 'textMask', !this.textCropEnable);
    if (background) {
      this.addBackground(background);
    }
    this.add(textObject);
    this.sizerChildren = [textObject];
    var sizerConfig = this.getSizerConfig(textObject);
    sizerConfig.align = ALIGN_LEFTTOP;
    sizerConfig.padding = (0, _GetBoundsConfig.default)(0);
    sizerConfig.expand = true;
    this.textObject = textObject;
    this.textObjectType = (0, _GetTextObjectType.default)(textObject);

    // Add more variables
    sizerConfig.preOffsetY = 0;
    sizerConfig.offsetY = 0;

    // Create mask of text object
    if (textMaskEnable) {
      this.textMask = _AddChildMask.default.call(this, this.textObject, this);
    }
    this.addChildrenMap('background', background);
    this.addChildrenMap('text', textObject);
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    this.textObject = undefined;
    this.textMask = undefined;
    if (this.lines) {
      switch (this.textObjectType) {
        case _GetTextObjectType.TextType:
          this.lines.length = 0;
          break;
        case _GetTextObjectType.TagTextType:
          this.lines.destroy();
          break;
        case _GetTextObjectType.BitmapTextType:
          this.lines.length = 0;
          break;
      }
      this.lines = undefined;
    }
    super.destroy(fromScene);
  }
  setClampMode(mode) {
    if (mode === undefined) {
      mode = true;
    }
    this.clampTextOY = mode;
    return this;
  }
  get textLineHeight() {
    if (this._textLineHeight === undefined) {
      var lineHeight;
      switch (this.textObjectType) {
        case _GetTextObjectType.TextType:
        case _GetTextObjectType.TagTextType:
          var style = this.textObject.style;
          lineHeight = style.metrics.fontSize + style.strokeThickness;
          break;
        case _GetTextObjectType.BitmapTextType:
          var scale = this.textObject.fontSize / this.textObject.fontData.size;
          lineHeight = this.textObject.fontData.lineHeight * scale;
          break;
      }
      this._textLineHeight = lineHeight;
    }
    return this._textLineHeight;
  }
  get textLineSpacing() {
    if (this._textLineSpacing === undefined) {
      var lineSpacing;
      switch (this.textObjectType) {
        case _GetTextObjectType.TextType:
        case _GetTextObjectType.TagTextType:
          lineSpacing = this.textObject.lineSpacing;
          break;
        case _GetTextObjectType.BitmapTextType:
          lineSpacing = 0;
          break;
      }
      this._textLineSpacing = lineSpacing;
    }
    return this._textLineSpacing;
  }
  get visibleLinesCount() {
    if (this._visibleLinesCount === undefined) {
      this._visibleLinesCount = Math.floor(_TextHeightToLinesCount.default.call(this, this._textObjectRealHeight));
    }
    return this._visibleLinesCount;
  }
  get topTextOY() {
    return 0;
  }
  get bottomTextOY() {
    return -this.textVisibleHeight;
  }
  get textHeight() {
    if (this._textHeight === undefined) {
      this._textHeight = _LinesCountToTextHeight.default.call(this, this.linesCount);
    }
    return this._textHeight;
  }
  get textObjectHeight() {
    return this._textObjectRealHeight - (this.textLineHeight + this.textLineSpacing); // Remove 1 text line
  }

  get textVisibleHeight() {
    if (this._textVisibleHeight === undefined) {
      var h = this.textHeight - this.textObjectHeight;
      if (!this.alwaysScrollable && h < 0) {
        h = 0;
      }
      this._textVisibleHeight = h;
    }
    return this._textVisibleHeight;
  }
  textOYExceedTop(oy) {
    if (oy === undefined) {
      oy = this.textOY;
    }
    return oy > this.topTextOY;
  }
  textOYExeceedBottom(oy) {
    if (oy === undefined) {
      oy = this.textOY;
    }
    return oy < this.bottomTextOY;
  }
  get textOY() {
    return this._textOY;
  }
  set textOY(oy) {
    var topTextOY = this.topTextOY;
    var bottomTextOY = this.bottomTextOY;
    var textOYExceedTop = this.textOYExceedTop(oy);
    var textOYExeceedBottom = this.textOYExeceedBottom(oy);
    if (this.clampTextOY) {
      if (this.visibleLinesCount > this.linesCount) {
        oy = 0;
      } else if (textOYExceedTop) {
        oy = topTextOY;
      } else if (textOYExeceedBottom) {
        oy = bottomTextOY;
      }
    }
    if (this._textOY !== oy) {
      this._textOY = oy;
      this.updateTextObject();
    }
    if (textOYExceedTop) {
      if (!this.execeedTopState) {
        this.emit('execeedtop', this, oy, topTextOY);
      }
    }
    this.execeedTopState = textOYExceedTop;
    if (textOYExeceedBottom) {
      if (!this.execeedBottomState) {
        this.emit('execeedbottom', this, oy, bottomTextOY);
      }
    }
    this.execeedBottomState = textOYExeceedBottom;
  }
  setTextOY(oy) {
    this.textOY = oy;
    return this;
  }
  set t(value) {
    this.textOY = -this.textVisibleHeight * value;
  }
  get t() {
    var textVisibleHeight = this.textVisibleHeight;
    if (textVisibleHeight === 0) {
      return 0;
    }
    return this.textOY / -textVisibleHeight;
  }
  setTextOYByPercentage(percentage) {
    this.t = percentage;
    return this;
  }
}
var CreateDefaultTextObject = function (scene) {
  return scene.add.text(0, 0, '');
};
Object.assign(TextBlock.prototype, _Methods.default);
var _default = TextBlock;
exports.default = _default;
},{"../../../../plugins/utils/text/GetTextObjectType.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/GetTextObjectType.js","../../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/mask/AddChildMask.js","../../basesizer/BaseSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/BaseSizer.js","./Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/Methods.js","../../utils/GetBoundsConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetBoundsConfig.js","./LinesCountToTextHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/LinesCountToTextHeight.js","./TextHeightToLinesCount.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/TextHeightToLinesCount.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/InjectProperties.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var InjectProperties = function (textBlock) {
  Object.defineProperty(textBlock, 'childOY', {
    configurable: true,
    get: function () {
      return textBlock.textOY;
    },
    set: function (value) {
      textBlock.textOY = value;
    }
  });
  Object.defineProperty(textBlock, 'topChildOY', {
    get: function () {
      return textBlock.topTextOY;
    }
  });
  Object.defineProperty(textBlock, 'bottomChildOY', {
    get: function () {
      return textBlock.bottomTextOY;
    }
  });
  Object.defineProperty(textBlock, 'childVisibleHeight', {
    get: function () {
      return textBlock.textObjectHeight;
    }
  });
  Object.defineProperty(textBlock, 'childHeight', {
    get: function () {
      return textBlock.textHeight;
    }
  });
};
var _default = InjectProperties;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/SetText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetText = function (text) {
  var textBlock = this.childrenMap.child;
  textBlock.setText(text);
  this.resizeController();
  return this;
};
var _default = SetText;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/AppendText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var AppendText = function (text) {
  this.setText(this.text + text);
  return this;
};
var _default = AppendText;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/TextArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Scrollable = _interopRequireDefault(require("../utils/scrollable/Scrollable.js"));
var _TextBlock = _interopRequireDefault(require("./textblock/TextBlock.js"));
var _InjectProperties = _interopRequireDefault(require("./InjectProperties.js"));
var _SetText = _interopRequireDefault(require("./SetText.js"));
var _AppendText = _interopRequireDefault(require("./AppendText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class TextArea extends _Scrollable.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }

    // Create text-block
    var textObject = GetValue(config, 'text', undefined);
    var textWidth = GetValue(config, 'textWidth', undefined);
    var textHeight = GetValue(config, 'textHeight', undefined);
    var textCrop = GetValue(config, 'textCrop', !!textObject.setCrop);
    var textMask = GetValue(config, 'textMask', !textCrop);
    var content = GetValue(config, 'content', '');
    var textBlock = new _TextBlock.default(scene, {
      width: textWidth,
      height: textHeight,
      text: textObject,
      textMask: textMask,
      textCrop: textCrop && !textMask,
      content: content,
      clamplTextOY: GetValue(config, 'clamplChildOY', false),
      alwaysScrollable: GetValue(config, 'alwaysScrollable', false)
    });
    scene.add.existing(textBlock); // Important: Add to display list for touch detecting
    var proportion = textWidth === undefined ? 1 : 0;
    var expand = textHeight === undefined;
    // Inject properties for scrollable interface
    (0, _InjectProperties.default)(textBlock);

    // Fill config of scrollable
    config.scrollMode = 0; // Vertical
    config.type = 'rexTextArea';
    config.child = {
      gameObject: textBlock,
      proportion: proportion,
      expand: expand
    };
    var spaceConfig = GetValue(config, 'space', undefined);
    if (spaceConfig) {
      spaceConfig.child = spaceConfig.text;
    }
    super(scene, config);
    this.addChildrenMap('text', textObject);
  }
  get text() {
    return this.childrenMap.child.text;
  }
  get linesCount() {
    return this.childrenMap.child.linesCount;
  }
  get contentHeight() {
    return this.childrenMap.child.textHeight;
  }
}
var methods = {
  setText: _SetText.default,
  appendText: _AppendText.default
};
Object.assign(TextArea.prototype, methods);
var _default = TextArea;
exports.default = _default;
},{"../utils/scrollable/Scrollable.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/scrollable/Scrollable.js","./textblock/TextBlock.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/textblock/TextBlock.js","./InjectProperties.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/InjectProperties.js","./SetText.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/SetText.js","./AppendText.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/AppendText.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateTextArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DeepClone = _interopRequireDefault(require("../../../../plugins/utils/object/DeepClone.js"));
var _CreateBackground = _interopRequireDefault(require("./CreateBackground.js"));
var _CreateText = _interopRequireDefault(require("./CreateText.js"));
var _TextArea = _interopRequireDefault(require("../../textarea/TextArea.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateTextArea = function (scene, config, creators) {
  config = config ? (0, _DeepClone.default)(config) : {};
  var createBackground = GetValue(creators, 'background', _CreateBackground.default);
  var createText = GetValue(creators, 'text', _CreateText.default);
  var createTrack = GetValue(creators, 'track', _CreateBackground.default);
  var createThumb = GetValue(creators, 'thumb', _CreateBackground.default);
  if (createBackground) {
    config.background = createBackground(scene, config.background);
  } else {
    delete config.background;
  }
  if (createText) {
    config.text = createText(scene, config.text);
  } else {
    delete config.text;
  }
  var sliderConfig = config.slider;
  if (sliderConfig !== false) {
    if (sliderConfig === undefined) {
      sliderConfig = {};
    }
    if (createTrack) {
      sliderConfig.track = createTrack(scene, sliderConfig.track);
    } else {
      delete sliderConfig.track;
    }
    if (createThumb) {
      sliderConfig.thumb = createThumb(scene, sliderConfig.thumb);
    } else {
      delete sliderConfig.thumb;
    }
    config.slider = sliderConfig;
  }

  // No header
  // No footer

  var gameObject = new _TextArea.default(scene, config);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateTextArea;
exports.default = _default;
},{"../../../../plugins/utils/object/DeepClone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js","./CreateBackground.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateBackground.js","./CreateText.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateText.js","../../textarea/TextArea.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/TextArea.js"}],"node_modules/phaser3-rex-plugins/templates/ui/confirmdialog/methods/CreateContent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateDisplayLabel = _interopRequireDefault(require("../../utils/build/CreateDisplayLabel.js"));
var _CreateTextArea = _interopRequireDefault(require("../../utils/build/CreateTextArea.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateContent = function (scene, config, creators) {
  var type = GetValue(config, '$type');
  if (type === undefined) {
    if (config && (config.hasOwnProperty('slider') || config.hasOwnProperty('scroller'))) {
      type = 'textarea';
    }
  }
  var gameObject;
  switch (type) {
    case 'textarea':
      gameObject = new _CreateTextArea.default(scene, config, creators);
      break;
    default:
      gameObject = new _CreateDisplayLabel.default(scene, config, creators);
      break;
  }
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateContent;
exports.default = _default;
},{"../../utils/build/CreateDisplayLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateDisplayLabel.js","../../utils/build/CreateTextArea.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateTextArea.js"}],"node_modules/phaser3-rex-plugins/templates/ui/confirmdialog/ConfirmDialog.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Dialog = _interopRequireDefault(require("../dialog/Dialog.js"));
var _DeepClone = _interopRequireDefault(require("../../../plugins/utils/object/DeepClone.js"));
var _CreateBackground = _interopRequireDefault(require("../utils/build/CreateBackground.js"));
var _CreateDisplayLabel = _interopRequireDefault(require("../utils/build/CreateDisplayLabel.js"));
var _CreateContent = _interopRequireDefault(require("./methods/CreateContent.js"));
var _IsFunction = _interopRequireDefault(require("../../../plugins/utils/object/IsFunction.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
var _HasValue = _interopRequireDefault(require("../../../plugins/utils/object/HasValue.js"));
var _TextArea = _interopRequireDefault(require("../textarea/TextArea.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class ConfirmDialog extends _Dialog.default {
  constructor(scene, config, creators) {
    config = config ? (0, _DeepClone.default)(config) : {};
    if (creators === undefined) {
      creators = {};
    }
    var createBackground = GetValue(creators, 'background', _CreateBackground.default);
    if (createBackground) {
      config.background = createBackground(scene, config.background);
    } else {
      delete config.background;
    }
    config.title = (0, _CreateDisplayLabel.default)(scene, config.title, creators.title);
    config.content = (0, _CreateContent.default)(scene, config.content, creators.content);
    if (config.content instanceof _TextArea.default) {
      if ((0, _HasValue.default)(config, 'height') && !(0, _HasValue.default)(config, 'proportion.content')) {
        (0, _SetValue.default)(config, 'proportion.content', 1);
      }
    }
    var buttonMode = config.buttonMode;
    if (buttonMode === undefined) {
      buttonMode = !!config.buttonA && !!config.buttonB ? 2 : !!config.buttonA || !!config.button ? 1 : 0;
    }
    var buttonAConfig = config.buttonA || config.button;
    var buttonACreators = creators.buttonA || creators.button;
    var buttonBConfig = config.buttonB || config.button;
    var buttonBCreators = creators.buttonB || creators.button;
    switch (buttonMode) {
      case 2:
        config.actions = [(0, _CreateDisplayLabel.default)(scene, buttonAConfig, buttonACreators), (0, _CreateDisplayLabel.default)(scene, buttonBConfig, buttonBCreators)];
        break;
      case 1:
        config.actions = [(0, _CreateDisplayLabel.default)(scene, buttonAConfig, buttonACreators)];
        break;
      default:
        config.actions = [];
        break;
    }
    super(scene, config);
    this.type = 'rexConfirmDialog';
    this.buttonMode = buttonMode;
  }
  resetDisplayContent(config) {
    if (config === undefined) {
      config = {};
    }
    var title = this.childrenMap.title;
    title.resetDisplayContent(config.title);
    var content = this.childrenMap.content;
    if (content.resetDisplayContent) {
      // Label
      content.resetDisplayContent(config.content);
    } else {
      // TextArea
      var text = config.content || '';
      content.setText(text);
    }
    var buttonA = this.childrenMap.actions[0];
    if (buttonA) {
      buttonA.resetDisplayContent(config.buttonA);
    }
    var buttonB = this.childrenMap.actions[1];
    if (buttonB) {
      buttonB.resetDisplayContent(config.buttonB);
    }
    return this;
  }
  modal(config, onClose) {
    if ((0, _IsFunction.default)(config)) {
      onClose = config;
      config = undefined;
    }
    if (config === undefined) {
      config = {};
    }
    var zeroButtonMode = this.buttonMode === 0;
    if (!config.hasOwnProperty('anyTouchClose')) {
      config.anyTouchClose = zeroButtonMode;
    }
    if (!config.hasOwnProperty('manualClose')) {
      config.manualClose = !zeroButtonMode;
    }
    super.modal(config, onClose);
    return this;
  }
}
var _default = ConfirmDialog;
exports.default = _default;
},{"../dialog/Dialog.js":"node_modules/phaser3-rex-plugins/templates/ui/dialog/Dialog.js","../../../plugins/utils/object/DeepClone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js","../utils/build/CreateBackground.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateBackground.js","../utils/build/CreateDisplayLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateDisplayLabel.js","./methods/CreateContent.js":"node_modules/phaser3-rex-plugins/templates/ui/confirmdialog/methods/CreateContent.js","../../../plugins/utils/object/IsFunction.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsFunction.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js","../../../plugins/utils/object/HasValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/HasValue.js","../textarea/TextArea.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/TextArea.js"}],"node_modules/phaser3-rex-plugins/templates/ui/confirmdialog/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ConfirmDialog = _interopRequireDefault(require("./ConfirmDialog.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('confirmDialog', function (config, creators) {
  var gameObject = new _ConfirmDialog.default(this.scene, config, creators);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.ConfirmDialog', _ConfirmDialog.default);
var _default = _ConfirmDialog.default;
exports.default = _default;
},{"./ConfirmDialog.js":"node_modules/phaser3-rex-plugins/templates/ui/confirmdialog/ConfirmDialog.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/GetAddChildConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GetAddRightSideConfig = exports.GetAddLeftSideConfig = exports.GetAddHeaderConfig = exports.GetAddFooterConfig = exports.GetAddContentConfig = exports.GetAddContainerConfig = void 0;
const GetValue = Phaser.Utils.Objects.GetValue;
var GetAddChildConfig = function (config, key, defaultValues) {
  var proportion = GetValue(config, `proportion.${key}`, defaultValues.proportion);
  var align = GetValue(config, `align.${key}`, 'center');
  var padding = GetValue(config, `space.${key}`, undefined);
  if (typeof padding === 'number' && defaultValues.paddingKey) {
    var paddingNum = padding;
    padding = {};
    padding[defaultValues.paddingKey] = paddingNum;
  }
  var expand = GetValue(config, `expand.${key}`, true);
  return {
    proportion: proportion,
    align: align,
    padding: padding,
    expand: expand
  };
};
var GetAddHeaderConfig = function (config) {
  return GetAddChildConfig(config, 'header', {
    proportion: 0,
    paddingKey: 'bottom'
  });
};
exports.GetAddHeaderConfig = GetAddHeaderConfig;
var GetAddLeftSideConfig = function (config) {
  return GetAddChildConfig(config, 'leftSide', {
    proportion: 0,
    paddingKey: 'right'
  });
};
exports.GetAddLeftSideConfig = GetAddLeftSideConfig;
var GetAddContentConfig = function (config) {
  return GetAddChildConfig(config, 'content', {
    proportion: 1
  });
};
exports.GetAddContentConfig = GetAddContentConfig;
var GetAddRightSideConfig = function (config) {
  return GetAddChildConfig(config, 'rightSide', {
    proportion: 0,
    paddingKey: 'left'
  });
};
exports.GetAddRightSideConfig = GetAddRightSideConfig;
var GetAddFooterConfig = function (config) {
  return GetAddChildConfig(config, 'footer', {
    proportion: 0,
    paddingKey: 'top'
  });
};
exports.GetAddFooterConfig = GetAddFooterConfig;
var GetAddContainerConfig = function (config) {
  return {
    proportion: 1,
    align: 'center',
    padding: 0,
    expand: true
  };
};
exports.GetAddContainerConfig = GetAddContainerConfig;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/CreatExpandContainer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../../sizer/Sizer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreatExpandContainer = function (scene, orientation) {
  var container = new _Sizer.default(scene, {
    orientation: orientation
  });
  scene.add.existing(container);
  return container;
};
var _default = CreatExpandContainer;
exports.default = _default;
},{"../../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/LayoutMode0.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetAddChildConfig = require("./GetAddChildConfig.js");
var _CreatExpandContainer = _interopRequireDefault(require("./CreatExpandContainer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
Elements:
    ```
    HHH
    LCR
    FFF
    ```
*/

var LayoutMode0 = function (config) {
  var scene = this.scene;

  // Add Header
  var header = config.header;
  if (header) {
    this.add(header, (0, _GetAddChildConfig.GetAddHeaderConfig)(config));
  }

  /*
  L C R
  */
  var bodySizer = (0, _CreatExpandContainer.default)(scene, 0);
  this.add(bodySizer, (0, _GetAddChildConfig.GetAddContainerConfig)(config));

  // Add Left-side
  var leftSide = config.leftSide;
  if (leftSide) {
    bodySizer.add(leftSide, (0, _GetAddChildConfig.GetAddLeftSideConfig)(config));
  }

  // Add content
  var content = config.content;
  if (content) {
    bodySizer.add(content, (0, _GetAddChildConfig.GetAddContentConfig)(config));
  }

  // Add Right-side
  var rightSide = config.rightSide;
  if (rightSide) {
    bodySizer.add(rightSide, (0, _GetAddChildConfig.GetAddRightSideConfig)(config));
  }

  // Add Footer
  var footer = config.footer;
  if (footer) {
    this.add(footer, (0, _GetAddChildConfig.GetAddFooterConfig)(config));
  }
};
var _default = LayoutMode0;
exports.default = _default;
},{"./GetAddChildConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/GetAddChildConfig.js","./CreatExpandContainer.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/CreatExpandContainer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/LayoutMode1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetAddChildConfig = require("./GetAddChildConfig.js");
var _CreatExpandContainer = _interopRequireDefault(require("./CreatExpandContainer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
Elements:
    ```
    HHH
    LCR
    LFF
    ```
*/

var LayoutMode1 = function (config) {
  var scene = this.scene;

  // Add Header
  var header = config.header;
  if (header) {
    this.add(header, (0, _GetAddChildConfig.GetAddHeaderConfig)(config));
  }

  /*
  L CR
  L FF
  */
  var bodySizer0 = (0, _CreatExpandContainer.default)(scene, 0);
  this.add(bodySizer0, (0, _GetAddChildConfig.GetAddContainerConfig)(config));

  // Add Left-side
  var leftSide = config.leftSide;
  if (leftSide) {
    bodySizer0.add(leftSide, (0, _GetAddChildConfig.GetAddLeftSideConfig)(config));
  }

  /*
  CR
    FF
  */
  var bodySizer1 = (0, _CreatExpandContainer.default)(scene, 1);
  bodySizer0.add(bodySizer1, (0, _GetAddChildConfig.GetAddContainerConfig)(config));

  /*
  C R
  */
  var bodySizer2 = (0, _CreatExpandContainer.default)(scene, 0);
  bodySizer1.add(bodySizer2, (0, _GetAddChildConfig.GetAddContainerConfig)(config));

  // Add content
  var content = config.content;
  if (content) {
    bodySizer2.add(content, (0, _GetAddChildConfig.GetAddContentConfig)(config));
  }

  // Add Right-side
  var rightSide = config.rightSide;
  if (rightSide) {
    bodySizer2.add(rightSide, (0, _GetAddChildConfig.GetAddRightSideConfig)(config));
  }

  // Add Footer
  var footer = config.footer;
  if (footer) {
    bodySizer1.add(footer, (0, _GetAddChildConfig.GetAddFooterConfig)(config));
  }
};
var _default = LayoutMode1;
exports.default = _default;
},{"./GetAddChildConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/GetAddChildConfig.js","./CreatExpandContainer.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/CreatExpandContainer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/LayoutMode2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetAddChildConfig = require("./GetAddChildConfig.js");
var _CreatExpandContainer = _interopRequireDefault(require("./CreatExpandContainer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
Elements:
    ```
    HHH
    LCR
    FFR
    ```
*/

var LayoutMode2 = function (config) {
  var scene = this.scene;

  // Add Header
  var header = config.header;
  if (header) {
    this.add(header, (0, _GetAddChildConfig.GetAddHeaderConfig)(config));
  }

  /*
  LC R
  FF R
  */
  var bodySizer0 = (0, _CreatExpandContainer.default)(scene, 0);
  this.add(bodySizer0, (0, _GetAddChildConfig.GetAddContainerConfig)(config));

  /*
  LC
    FF
  */
  var bodySizer1 = (0, _CreatExpandContainer.default)(scene, 1);
  bodySizer0.add(bodySizer1, (0, _GetAddChildConfig.GetAddContainerConfig)(config));

  /*
  L C
  */
  var bodySizer2 = (0, _CreatExpandContainer.default)(scene, 0);
  bodySizer1.add(bodySizer2, (0, _GetAddChildConfig.GetAddContainerConfig)(config));

  // Add Left-side
  var leftSide = config.leftSide;
  if (leftSide) {
    bodySizer2.add(leftSide, (0, _GetAddChildConfig.GetAddLeftSideConfig)(config));
  }

  // Add content
  var content = config.content;
  if (content) {
    bodySizer2.add(content, (0, _GetAddChildConfig.GetAddContentConfig)(config));
  }

  // Add Footer
  var footer = config.footer;
  if (footer) {
    bodySizer1.add(footer, (0, _GetAddChildConfig.GetAddFooterConfig)(config));
  }

  // Add Right-side
  var rightSide = config.rightSide;
  if (rightSide) {
    bodySizer0.add(rightSide, (0, _GetAddChildConfig.GetAddRightSideConfig)(config));
  }
};
var _default = LayoutMode2;
exports.default = _default;
},{"./GetAddChildConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/GetAddChildConfig.js","./CreatExpandContainer.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/CreatExpandContainer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/LayoutMode3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetAddChildConfig = require("./GetAddChildConfig.js");
var _CreatExpandContainer = _interopRequireDefault(require("./CreatExpandContainer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
Elements:
    ```
    HHH
    LCR
    LFR
    ```
*/

var LayoutMode0 = function (config) {
  var scene = this.scene;

  // Add Header
  var header = config.header;
  if (header) {
    this.add(header, (0, _GetAddChildConfig.GetAddHeaderConfig)(config));
  }

  /*
  L C R
  L F R
  */
  var bodySizer0 = (0, _CreatExpandContainer.default)(scene, 0);
  this.add(bodySizer0, (0, _GetAddChildConfig.GetAddContainerConfig)(config));

  // Add Left-side
  var leftSide = config.leftSide;
  if (leftSide) {
    bodySizer0.add(leftSide, (0, _GetAddChildConfig.GetAddLeftSideConfig)(config));
  }

  /*
  C
    F
  */
  var bodySizer1 = (0, _CreatExpandContainer.default)(scene, 1);
  bodySizer0.add(bodySizer1, (0, _GetAddChildConfig.GetAddContainerConfig)(config));

  // Add content
  var content = config.content;
  if (content) {
    bodySizer1.add(content, (0, _GetAddChildConfig.GetAddContentConfig)(config));
  }

  // Add Footer
  var footer = config.footer;
  if (footer) {
    bodySizer1.add(footer, (0, _GetAddChildConfig.GetAddFooterConfig)(config));
  }

  // Add Right-side
  var rightSide = config.rightSide;
  if (rightSide) {
    bodySizer0.add(rightSide, (0, _GetAddChildConfig.GetAddRightSideConfig)(config));
  }
};
var _default = LayoutMode0;
exports.default = _default;
},{"./GetAddChildConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/GetAddChildConfig.js","./CreatExpandContainer.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/CreatExpandContainer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/Build.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _LayoutMode = _interopRequireDefault(require("./LayoutMode0.js"));
var _LayoutMode2 = _interopRequireDefault(require("./LayoutMode1.js"));
var _LayoutMode3 = _interopRequireDefault(require("./LayoutMode2.js"));
var _LayoutMode4 = _interopRequireDefault(require("./LayoutMode3.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const LayoutCallbacks = [_LayoutMode.default, _LayoutMode2.default, _LayoutMode3.default, _LayoutMode4.default];
var Build = function (config) {
  this.clear(true);

  // Add Background
  var background = GetValue(config, 'background', undefined);
  if (background) {
    this.addBackground(background);
  }
  var layoutMode = GetValue(config, 'layoutMode', 0);
  if (typeof layoutMode === 'string') {
    layoutMode = LayoutModesMap[layoutMode.toUpperCase()];
  }
  var layoutCallback = LayoutCallbacks[layoutMode] || LayoutCallbacks[0];
  layoutCallback.call(this, config);
  this.addChildrenMap('background', config.background);
  this.addChildrenMap('header', config.header);
  this.addChildrenMap('leftSide', config.leftSide);
  this.addChildrenMap('content', config.content);
  this.addChildrenMap('rightSide', config.rightSide);
  this.addChildrenMap('footer', config.footer);
};
const LayoutModesMap = {
  'FFF': 0,
  'LFF': 1,
  'FFR': 2,
  'LFR': 3
};
var _default = Build;
exports.default = _default;
},{"./LayoutMode0.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/LayoutMode0.js","./LayoutMode1.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/LayoutMode1.js","./LayoutMode2.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/LayoutMode2.js","./LayoutMode3.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/LayoutMode3.js"}],"node_modules/phaser3-rex-plugins/templates/ui/holygrail/HolyGrail.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer.js"));
var _Build = _interopRequireDefault(require("./methods/Build.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class HolyGrail extends _Sizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    config.orientation = 1; // top-to-bottom
    // Create sizer
    super(scene, config);
    this.type = 'rexHolyGrail';
    this.build(config);
  }
}
var methods = {
  build: _Build.default
};
Object.assign(HolyGrail.prototype, methods);
var _default = HolyGrail;
exports.default = _default;
},{"../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","./methods/Build.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/methods/Build.js"}],"node_modules/phaser3-rex-plugins/templates/ui/holygrail/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _HolyGrail = _interopRequireDefault(require("./HolyGrail.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('holyGrail', function (config) {
  var gameObject = new _HolyGrail.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.HolyGrail', _HolyGrail.default);
var _default = _HolyGrail.default;
exports.default = _default;
},{"./HolyGrail.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/HolyGrail.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tabs/ButtonMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Hide = require("../utils/Hide.js");
var _default = {
  getButtonsSizer(groupName) {
    return this.childrenMap[`${groupName}ButtonsSizer`];
  },
  getButton(groupName, index) {
    var buttonsSizer = this.getButtonsSizer(groupName);
    return buttonsSizer ? buttonsSizer.getButton(index) : undefined;
  },
  setButtonEnable(groupName, index, enabled) {
    this.getButtonsSizer(groupName).setButtonEnable(index, enabled);
    return this;
  },
  setLeftButtonEnable(index, enabled) {
    this.childrenMap.leftButtonsSizer.setButtonEnable(index, enabled);
    return this;
  },
  setRightButtonEnable(index, enabled) {
    this.childrenMap.rightButtonsSizer.setButtonEnable(index, enabled);
    return this;
  },
  setTopButtonEnable(index, enabled) {
    this.childrenMap.topButtonsSizer.setButtonEnable(index, enabled);
    return this;
  },
  setBottomButtonEnable(index, enabled) {
    this.childrenMap.bottomButtonsSizer.setButtonEnable(index, enabled);
    return this;
  },
  toggleButtonEnable(groupName, index) {
    this.getButtonsSizer(groupName).toggleButtonEnable(index);
    return this;
  },
  toggleLeftButtonEnable(index) {
    this.childrenMap.leftButtonsSizer.toggleButtonEnable(index);
    return this;
  },
  toggleRightButtonEnable(index) {
    this.childrenMap.rightButtonsSizer.toggleButtonEnable(index);
    return this;
  },
  toggleTopButtonEnable(index) {
    this.childrenMap.topButtonsSizer.toggleButtonEnable(index);
    return this;
  },
  toggleBottomButtonEnable(index) {
    this.childrenMap.bottomButtonsSizer.toggleButtonEnable(index);
    return this;
  },
  getButtonEnable(groupName, index) {
    return this.getButtonsSizer(groupName).getButtonEnable(index);
  },
  getLeftButtonEnable(index) {
    return this.childrenMap.leftButtonsSizer.getButtonEnable(index);
  },
  getRightButtonEnable(index) {
    return this.childrenMap.rightButtonsSizer.getButtonEnable(index);
  },
  getTopButtonEnable(index) {
    return this.childrenMap.topButtonsSizer.getButtonEnable(index);
  },
  getBottomButtonEnable(index) {
    return this.childrenMap.bottomButtonsSizer.getButtonEnable(index);
  },
  emitButtonClick(groupName, index) {
    var buttonsSizer = this.getButtonsSizer(groupName);
    if (!buttonsSizer) {
      return this;
    }
    buttonsSizer.emitButtonClick(index);
    return this;
  },
  emitLeftButtonClick(index) {
    this.childrenMap.leftButtonsSizer.emitButtonClick(index);
    return this;
  },
  emitRightButtonClick(index) {
    this.childrenMap.rightButtonsSizer.emitButtonClick(index);
    return this;
  },
  emitTopButtonClick(index) {
    this.childrenMap.topButtonsSizer.emitButtonClick(index);
    return this;
  },
  emitBottomButtonClick(index) {
    this.childrenMap.bottomButtonsSizer.emitButtonClick(index);
    return this;
  },
  getLeftButton(index) {
    return this.childrenMap.leftButtonsSizer.getButton(index);
  },
  getRightButton(index) {
    return this.childrenMap.rightButtonsSizer.getButton(index);
  },
  getTopButton(index) {
    return this.childrenMap.topButtonsSizer.getButton(index);
  },
  getBottomButton(index) {
    return this.childrenMap.bottomButtonsSizer.getButton(index);
  },
  showButton(groupName, index) {
    (0, _Hide.Show)(this.getButton(groupName, index));
    return this;
  },
  showLeftButton(index) {
    (0, _Hide.Show)(this.getLeftButton(index));
    return this;
  },
  showRightButton(index) {
    (0, _Hide.Show)(this.getRightButton(index));
    return this;
  },
  showTopButton(index) {
    (0, _Hide.Show)(this.getTopButton(index));
    return this;
  },
  showBottomButton(index) {
    (0, _Hide.Show)(this.getBottomButton(index));
    return this;
  },
  hideButton(groupName, index) {
    (0, _Hide.Hide)(this.getButton(groupName, index));
    return this;
  },
  hideLeftButton(index) {
    (0, _Hide.Hide)(this.getLeftButton(index));
    return this;
  },
  hideRightButton(index) {
    (0, _Hide.Hide)(this.getRightButton(index));
    return this;
  },
  hideTopButton(index) {
    (0, _Hide.Hide)(this.getTopButton(index));
    return this;
  },
  hideBottomButton(index) {
    (0, _Hide.Hide)(this.getBottomButton(index));
    return this;
  },
  addButton(groupName, gameObject) {
    this.getButtonsSizer(groupName).addButton(gameObject);
    return this;
  },
  addLeftButton(gameObject) {
    this.addButton('left', gameObject);
    return this;
  },
  addRightButton(gameObject) {
    this.addButton('right', gameObject);
    return this;
  },
  addTopButton(gameObject) {
    this.addButton('top', gameObject);
    return this;
  },
  removeButton(groupName, index, destroyChild) {
    this.getButtonsSizer(groupName).removeButton(index, destroyChild);
    return this;
  },
  removeLeftButton(index, destroyChild) {
    this.removeButton('left', index, destroyChild);
    return this;
  },
  removeRightButton(index, destroyChild) {
    this.removeButton('right', index, destroyChild);
    return this;
  },
  removeTopButton(index, destroyChild) {
    this.removeButton('top', index, destroyChild);
    return this;
  },
  removeBottomButton(index, destroyChild) {
    this.removeButton('bottom', index, destroyChild);
    return this;
  },
  clearButtons(groupName, destroyChild) {
    this.getButtonsSizer(groupName).clearButtons(destroyChild);
    return this;
  },
  clearLeftButtons(destroyChild) {
    this.clearButtons('left', destroyChild);
    return this;
  },
  clearRightButtons(destroyChild) {
    this.clearButtons('right', destroyChild);
    return this;
  },
  clearTopButtons(destroyChild) {
    this.clearButtons('top', destroyChild);
    return this;
  },
  clearBottomButtonss(destroyChild) {
    this.clearButtons('bottom', destroyChild);
    return this;
  },
  forEachButton(groupName, callback, scope) {
    this.getButtonsSizer(groupName).forEachButtton(callback, scope);
    return this;
  },
  forEachLeftButton(callback, scope) {
    this.childrenMap.leftButtonsSizer.forEachButtton(callback, scope);
    return this;
  },
  forEachRightButton(callback, scope) {
    this.childrenMap.rightButtonsSizer.forEachButtton(callback, scope);
    return this;
  },
  forEachTopButton(callback, scope) {
    this.childrenMap.topButtonsSizer.forEachButtton(callback, scope);
    return this;
  },
  forEachBottomButton(callback, scope) {
    this.childrenMap.bottomButtonsSizer.forEachButtton(callback, scope);
    return this;
  }
};
exports.default = _default;
},{"../utils/Hide.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/Hide.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tabs/Tabs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GridSizer = _interopRequireDefault(require("../gridsizer/GridSizer.js"));
var _Buttons = _interopRequireDefault(require("../buttons/Buttons.js"));
var _ButtonMethods = _interopRequireDefault(require("./ButtonMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Tabs extends _GridSizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    // Create sizer
    config.column = 3;
    config.row = 3;
    super(scene, config);
    this.type = 'rexTabs';
    this.eventEmitter = GetValue(config, 'eventEmitter', this);

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var panel = GetValue(config, 'panel', undefined);
    var leftButtons = GetValue(config, 'leftButtons', undefined);
    var leftButtonsBackground = GetValue(config, 'leftButtonsBackground', undefined);
    var leftButtonsSizer;
    var rightButtons = GetValue(config, 'rightButtons', undefined);
    var rightButtonsBackground = GetValue(config, 'rightButtonsBackground', undefined);
    var rightButtonsSizer;
    var topButtons = GetValue(config, 'topButtons', undefined);
    var topButtonsBackground = GetValue(config, 'topButtonsBackground', undefined);
    var topButtonsSizer;
    var bottomButtons = GetValue(config, 'bottomButtons', undefined);
    var bottomButtonsBackground = GetValue(config, 'bottomButtonsBackground', undefined);
    var bottomButtonsSizer;
    var clickConfig = GetValue(config, 'click', undefined);
    if (background) {
      this.addBackground(background);
    }
    if (panel) {
      this.add(panel, 1, 1, 'center', 0, true);
    }
    if (leftButtons) {
      var leftButtonsOffset = GetValue(config, 'space.leftButtonsOffset', 0);
      var leftButtonSpace = GetValue(config, 'space.leftButton', 0);
      leftButtonsSizer = new _Buttons.default(scene, {
        groupName: 'left',
        background: leftButtonsBackground,
        buttons: leftButtons,
        orientation: 1,
        // Top-Bottom
        space: {
          item: leftButtonSpace
        },
        align: GetValue(config, 'align.leftButtons', undefined),
        click: clickConfig,
        eventEmitter: this.eventEmitter
      });
      var padding = {
        top: leftButtonsOffset
      };
      this.add(leftButtonsSizer, 0, 1, 'top', padding, false);
    }
    if (rightButtons) {
      var rightButtonsOffset = GetValue(config, 'space.rightButtonsOffset', 0);
      var rightButtonSpace = GetValue(config, 'space.rightButton', 0);
      rightButtonsSizer = new _Buttons.default(scene, {
        groupName: 'right',
        background: rightButtonsBackground,
        buttons: rightButtons,
        orientation: 1,
        // Top-Bottom
        space: {
          item: rightButtonSpace
        },
        align: GetValue(config, 'align.rightButtons', undefined),
        click: clickConfig,
        eventEmitter: this.eventEmitter
      });
      var padding = {
        top: rightButtonsOffset
      };
      this.add(rightButtonsSizer, 2, 1, 'top', padding, false);
    }
    if (topButtons) {
      var toptButtonsOffset = GetValue(config, 'space.topButtonsOffset', 0);
      var topButtonSpace = GetValue(config, 'space.topButton', 0);
      topButtonsSizer = new _Buttons.default(scene, {
        groupName: 'top',
        background: topButtonsBackground,
        buttons: topButtons,
        orientation: 0,
        // Left-Right
        space: {
          item: topButtonSpace
        },
        align: GetValue(config, 'align.topButtons', undefined),
        click: clickConfig,
        eventEmitter: this.eventEmitter
      });
      var padding = {
        left: toptButtonsOffset
      };
      this.add(topButtonsSizer, 1, 0, 'left', padding, false);
    }
    if (bottomButtons) {
      var bottomButtonsOffset = GetValue(config, 'space.bottomButtonsOffset', 0);
      var bottomButtonSpace = GetValue(config, 'space.bottomButton', 0);
      bottomButtonsSizer = new _Buttons.default(scene, {
        groupName: 'bottom',
        background: bottomButtonsBackground,
        buttons: bottomButtons,
        orientation: 0,
        // Left-Right
        space: {
          item: bottomButtonSpace
        },
        align: GetValue(config, 'align.bottomButtons', undefined),
        click: clickConfig,
        eventEmitter: this.eventEmitter
      });
      var padding = {
        left: bottomButtonsOffset
      };
      this.add(bottomButtonsSizer, 1, 2, 'left', padding, false);
    }
    this.addChildrenMap('background', background);
    this.addChildrenMap('panel', panel);
    this.addChildrenMap('leftButtons', leftButtons);
    this.addChildrenMap('rightButtons', rightButtons);
    this.addChildrenMap('topButtons', topButtons);
    this.addChildrenMap('bottomButtons', bottomButtons);
    this.addChildrenMap('leftButtonsSizer', leftButtonsSizer);
    this.addChildrenMap('rightButtonsSizer', rightButtonsSizer);
    this.addChildrenMap('topButtonsSizer', topButtonsSizer);
    this.addChildrenMap('bottomButtonsSizer', bottomButtonsSizer);
  }
}
Object.assign(Tabs.prototype, _ButtonMethods.default);
var _default = Tabs;
exports.default = _default;
},{"../gridsizer/GridSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GridSizer.js","../buttons/Buttons.js":"node_modules/phaser3-rex-plugins/templates/ui/buttons/Buttons.js","./ButtonMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/tabs/ButtonMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tabs/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Tabs = _interopRequireDefault(require("./Tabs.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('tabs', function (config) {
  var gameObject = new _Tabs.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Tabs', _Tabs.default);
var _default = _Tabs.default;
exports.default = _default;
},{"./Tabs.js":"node_modules/phaser3-rex-plugins/templates/ui/tabs/Tabs.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/slider/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Slider = _interopRequireDefault(require("./Slider.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('slider', function (config) {
  var gameObject = new _Slider.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Slider', _Slider.default);
var _default = _Slider.default;
exports.default = _default;
},{"./Slider.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/Slider.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/table/Cell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DataMethods = _interopRequireDefault(require("../../../../utils/data/DataMethods.js"));
var _AlignConst = _interopRequireDefault(require("../../../../utils/actions/AlignConst.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Cell {
  constructor(parent, config) {
    this.container = null;
    this._deltaHeight = 0;
    this.setParent(parent);
    // this.resetFromJSON(config);
  }

  setParent(parent) {
    this.parent = parent; // parent: table
    this.parentContainer = parent.getParentContainer();
  }

  // resetFromJSON(o) {
  //     return this;
  // }

  destroy(fromScene) {
    if (fromScene === undefined) {
      fromScene = false;
    }
    if (!fromScene) {
      this.destroyContainer();
    }
    this.deltaHeight = 0;
    this.data = undefined;
    this.container = null;
    this.parent = undefined;
    this.parentContainer = undefined;
  }
  get table() {
    return this.parent;
  }
  get scrollMode() {
    return this.parentContainer.scrollMode;
  }
  get colIndx() {
    return this.parent.cellIndxeToColIndex(this.index);
  }
  get rowIndx() {
    return this.parent.cellIndxeToRowIndex(this.index);
  }
  getContainer() {
    return this.container;
  }
  setContainer(container) {
    if (!container) {
      this.destroyContainer();
      return this;
    }
    if (this.container) {
      this.container.destroy();
    }
    this.container = container;
    this.parentContainer.add(container);
    return this;
  }
  destroyContainer() {
    if (this.container) {
      this.container.destroy();
      this.container = null;
    }
    return this;
  }
  popContainer() {
    if (this.container) {
      var container = this.container;
      this.container = null;
      this.parentContainer.remove(container);
      return container;
    } else {
      return null;
    }
  }
  setXY(x, y) {
    if (this.container) {
      this.parentContainer.setChildLocalPosition(this.container, x, y);
    }
    return this;
  }
  setCellContainerAlign(align) {
    if (typeof align === 'string') {
      align = _AlignConst.default[align];
    }
    this.cellContainerAlign = align;
    return this;
  }
  get deltaHeight() {
    return this._deltaHeight;
  }
  set deltaHeight(deltaHeight) {
    if (deltaHeight == null) {
      deltaHeight = 0;
    }
    var table = this.parent;
    if (this._deltaHeight === 0 && deltaHeight !== 0) {
      table.nonZeroDeltaHeightCount++;
    } else if (this._deltaHeight !== 0 && deltaHeight === 0) {
      table.nonZeroDeltaHeightCount--;
    }
    var isTableHeightChanged = this._deltaHeight !== deltaHeight;
    this._deltaHeight = deltaHeight;
    if (isTableHeightChanged) {
      table.resetTotalRowsHeight();
      var eventName = this.scrollMode === 0 ? 'cellheightchange' : 'cellwidthchange';
      this.parentContainer.emit(eventName, this, this.container, this.parentContainer);
    }
  }
  get deltaWidth() {
    return this.deltaHeight;
  }
  set deltaWidth(deltaWidth) {
    this.deltaHeight = deltaWidth;
  }
  setDeltaHeight(deltaHeight) {
    this.deltaHeight = deltaHeight;
    return this;
  }
  setDeltaWidth(deltaWidth) {
    this.deltaHeight = deltaWidth;
    return this;
  }
  get height() {
    if (this.scrollMode === 0) {
      return this.deltaHeight + this.parent.defaultCellHeight;
    } else {
      return this.parent.defaultCellWidth;
    }
  }
  set height(height) {
    // Only worked when scrollMode is 0
    if (this.scrollMode === 1) {
      return;
    }
    this.setDeltaHeight(height - this.parent.defaultCellHeight);
  }
  setHeight(height) {
    // Only worked when scrollMode is 0
    this.height = height;
    return this;
  }
  get width() {
    if (this.scrollMode === 0) {
      return this.parent.defaultCellWidth;
    } else {
      return this.deltaHeight + this.parent.defaultCellHeight;
    }
  }
  set width(width) {
    // Only worked when scrollMode is 1
    if (this.scrollMode === 0) {
      return;
    }
    this.setDeltaHeight(width - this.parent.defaultCellHeight);
  }
  setWidth(width) {
    this.width = width;
    return this;
  }
  get scene() {
    return this.parentContainer.scene;
  }
}
;
Object.assign(Cell.prototype, _DataMethods.default);
var _default = Cell;
exports.default = _default;
},{"../../../../utils/data/DataMethods.js":"node_modules/phaser3-rex-plugins/plugins/utils/data/DataMethods.js","../../../../utils/actions/AlignConst.js":"node_modules/phaser3-rex-plugins/plugins/utils/actions/AlignConst.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/table/Table.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Cell = _interopRequireDefault(require("./Cell.js"));
var _pool = _interopRequireDefault(require("../../../../pool.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const SpliceOne = Phaser.Utils.Array.SpliceOne;
class Table {
  constructor(parent, config) {
    this.parent = parent; // parent: GridTable game object (Container)
    this.cells = [];
    this.cellPool = new _pool.default();
    this.resetFromJSON(config);
  }
  resetFromJSON(o) {
    if (o === undefined) {
      o = {};
    }
    this.colCount = undefined;
    this.nonZeroDeltaHeightCount = 0;
    this.resetTotalRowsHeight();
    var cellHeight = o.cellHeight;
    if (cellHeight === undefined) {
      cellHeight = 30;
    }
    var cellWidth = o.cellWidth;
    if (cellWidth === undefined) {
      cellWidth = 30;
    }
    this.setDefaultCellHeight(cellHeight);
    this.setDefaultCellWidth(cellWidth);
    this.initCells(GetValue(o, 'cellsCount', 0));
    this.setColumnCount(GetValue(o, 'columns', 1));
    return this;
  }
  destroy(fromScene) {
    // GridTable is destroyed, all cell containers will also be destroyed too
    // Don't have to freeCell
    this.cellPool.destroy();
    this.cells = undefined;
    this.parent = undefined;
  }
  get defaultCellHeightMode() {
    return this.nonZeroDeltaHeightCount === 0;
  }
  setDefaultCellHeight(height) {
    this.defaultCellHeight = height;
    return this;
  }
  setDefaultCellWidth(width) {
    this.defaultCellWidth = width;
    return this;
  }
  initCells(size) {
    var cells = this.cells;
    cells.length = size;
    for (var i = 0; i < size; i++) {
      cells[i] = null;
    }
    return this;
  }
  insertNewCells(cellIdx, count) {
    var cells = this.cells;
    if (cellIdx === cells.length) {
      // append at end of array
      var endIdx = cellIdx + count;
      cells.legth = endIdx;
      for (var i = cellIdx; i < endIdx; i++) {
        cells[i] = null;
      }
    } else {
      var newCells = [];
      newCells.length = count;
      for (var i = 0; i < count; i++) {
        newCells[i] = null;
      }
      this.cells.splice(cellIdx, 0, ...newCells);
    }
    this.resetTotalRowsHeight();
    return this;
  }
  removeCells(cellIdx, count) {
    var endIdx = cellIdx + count;
    for (var i = cellIdx; i < endIdx; i++) {
      this.freeCell(i);
    }
    if (endIdx === this.cells.length) {
      // remove until end of array
      this.cells.length = cellIdx;
    } else {
      if (count === 1) {
        SpliceOne(this.cells, cellIdx);
      } else {
        this.cells.splice(cellIdx, count);
      }
      this.buildCellIndex(cellIdx);
    }
    this.resetTotalRowsHeight();
    return this;
  }
  setColumnCount(cnt) {
    this.colCount = cnt;
    this.resetTotalRowsHeight();
    return this;
  }
  get rowCount() {
    return Math.ceil(this.cells.length / this.colCount);
  }
  get cellsCount() {
    return this.cells.length;
  }
  isValidCellIdx(idx) {
    return idx >= 0 && idx < this.cells.length;
  }
  heightToRowIndex(height, isCeil) {
    // defaultCellHeightMode
    if (this.defaultCellHeightMode) {
      var rowIdx = height / this.defaultCellHeight;
      if (isCeil) {
        rowIdx = Math.ceil(rowIdx);
      } else {
        rowIdx = Math.floor(rowIdx);
      }
      return rowIdx;
    }

    // count cell height one by one
    var rowCount = this.rowCount;
    var remainder = height,
      isValidIdx;
    var cell,
      rowHeight,
      rowIdx = 0;
    while (1) {
      rowHeight = this.getRowHeight(rowIdx);
      remainder -= rowHeight;
      isValidIdx = rowIdx >= 0 && rowIdx < rowCount;
      if (remainder > 0 && isValidIdx) {
        rowIdx += 1;
      } else if (remainder === 0) {
        return rowIdx;
      } else {
        if (isCeil) {
          var preRowIdx = rowIdx;
          rowIdx += 1;
          isValidIdx = rowIdx >= 0 && rowIdx < rowCount;
          if (!isValidIdx) {
            rowIdx = preRowIdx;
          }
        }
        return rowIdx;
      }
    }
  }
  widthToColIndex(width, isCeil) {
    var colIdx = width / this.defaultCellWidth;
    if (isCeil) {
      colIdx = Math.ceil(colIdx);
    } else {
      colIdx = Math.floor(colIdx);
    }
    return colIdx;
  }
  colRowToCellIndex(colIdx, rowIdx) {
    if (colIdx >= this.colCount) {
      return null;
    }
    return rowIdx * this.colCount + colIdx;
  }
  rowIndexToHeight(start, end) {
    // defaultCellHeightMode
    if (this.defaultCellHeightMode) {
      return (end - start + 1) * this.defaultCellHeight;
    }
    var h,
      sum = 0;
    for (var i = start; i <= end; i++) {
      h = this.getRowHeight(i);
      sum += h;
    }
    return sum;
  }
  colIndexToWidth(start, end) {
    return (end - start + 1) * this.defaultCellWidth;
  }
  getRowHeight(rowIdx) {
    var cnt = this.colCount;
    // single column
    if (cnt <= 1) {
      return this.getCellHeight(this.colRowToCellIndex(0, rowIdx));
    }

    // multiple columns, get the maximum height
    var maxHeight = 0,
      cellHeight;
    for (var i = 0; i < cnt; i++) {
      cellHeight = this.getCellHeight(this.colRowToCellIndex(i, rowIdx));
      if (maxHeight < cellHeight) maxHeight = cellHeight;
    }
    return maxHeight;
  }
  getColWidth(idx) {
    return this.defaultCellWidth;
  }
  getCellHeight(cellIdx) {
    if (!this.isValidCellIdx(cellIdx)) {
      return 0;
    }
    var cellHeight;
    if (this.defaultCellHeightMode) cellHeight = this.defaultCellHeight;else {
      var cell = this.getCell(cellIdx, false);
      var deltaHeight = cell ? cell.deltaHeight : 0;
      cellHeight = this.defaultCellHeight + deltaHeight;
    }
    return cellHeight;
  }
  resetTotalRowsHeight() {
    this._totalRowsHeight = null;
  }
  get totalRowsHeight() {
    if (this._totalRowsHeight === null) {
      this._totalRowsHeight = this.rowIndexToHeight(0, this.rowCount - 1);
    }
    return this._totalRowsHeight;
  }
  get totalColumnWidth() {
    return this.colCount * this.defaultCellWidth;
  }
  cellIndxeToColIndex(cellIdx) {
    return cellIdx % this.colCount;
  }
  cellIndxeToRowIndex(cellIdx) {
    return Math.floor(cellIdx / this.colCount);
  }
  getCell(cellIdx, createNewCell) {
    if (!this.isValidCellIdx(cellIdx)) {
      return null;
    }
    if (createNewCell === undefined) {
      createNewCell = true;
    }
    if (this.cells[cellIdx] === null && createNewCell) {
      var cell = this.newCell(cellIdx);
      this.cells[cellIdx] = cell;
    }
    return this.cells[cellIdx];
  }
  newCell(cellIdx) {
    var cell = this.cellPool.pop();
    if (cell === null) {
      cell = new _Cell.default(this);
    } else {
      cell.setParent(this);
    }
    cell.index = cellIdx;
    return cell;
  }
  buildCellIndex(startIdx) {
    if (startIdx === undefined) {
      startIdx = 0;
    }
    var cells = this.cells,
      cell;
    for (var i = startIdx, len = cells.length; i < len; i++) {
      cell = cells[i];
      if (cell) {
        cell.index = i;
      }
    }
    return this;
  }
  getParentContainer() {
    return this.parent;
  }
  freeCell(cell) {
    if (typeof cell === 'number') {
      cell = this.cells[cell];
    }
    if (!cell) {
      return this;
    }
    cell.destroy();
    this.cellPool.push(cell);
    return this;
  }
}
var _default = Table;
exports.default = _default;
},{"./Cell.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/table/Cell.js","../../../../pool.js":"node_modules/phaser3-rex-plugins/plugins/pool.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/SetTableOY.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetTableOY = function (oy) {
  var table = this.table;
  var topTableOY = this.topTableOY;
  var bottomTableOY = this.bottomTableOY;
  var tableOYExceedTop = oy > this.topTableOY;
  var tableOYExeceedBottom = oy < this.bottomTableOY;
  if (this.clampTableOXY) {
    var rowCount = table.rowCount;
    var visibleRowCount = table.heightToRowIndex(this.instHeight, true);

    // less then 1 page            
    if (rowCount < visibleRowCount) {
      oy = 0;
    } else if (tableOYExceedTop) {
      oy = topTableOY;
    } else if (tableOYExeceedBottom) {
      oy = bottomTableOY;
    }
  }
  if (this._tableOY !== oy) {
    this._tableOY = oy;
  }
  if (tableOYExceedTop) {
    if (!this.execeedTopState) {
      this.emit('execeedtop', this, oy, topTableOY);
    }
  }
  this.execeedTopState = tableOYExceedTop;
  if (tableOYExeceedBottom) {
    if (!this.execeedBottomState) {
      this.emit('execeedbottom', this, oy, bottomTableOY);
    }
  }
  this.execeedBottomState = tableOYExeceedBottom;
  return this;
};
var _default = SetTableOY;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/SetTableOX.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetTableOX = function (ox) {
  var table = this.table;
  var leftTableOX = this.leftTableOX;
  var rightTableOX = this.rightTableOX;
  var tableOXExeceedLeft = ox > this.leftTableOX;
  var tableOXExeceedRight = ox < this.rightTableOX;
  if (this.clampTableOXY) {
    var colCount = table.colCount;
    var visibleColCount = table.widthToColIndex(this.instWidth, true);

    // less then 1 page            
    if (colCount < visibleColCount) {
      ox = 0;
    } else if (tableOXExeceedLeft) {
      ox = leftTableOX;
    } else {
      // var tableVisibleWidth = this.tableVisibleWidth;
      if (tableOXExeceedRight) ox = rightTableOX;
    }
  }
  if (this._tableOX !== ox) {
    this._tableOX = ox;
  }
  if (tableOXExeceedLeft) {
    if (!this.execeedLeftState) {
      this.emit('execeedleft', this, ox, leftTableOX);
    }
  }
  this.execeedLeftState = tableOXExeceedLeft;
  if (tableOXExeceedRight) {
    if (!this.execeedRightState) {
      this.emit('execeedright', this, ox, rightTableOX);
    }
  }
  this.execeedRightState = tableOXExeceedRight;
  return this;
};
var _default = SetTableOX;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/mask/MaskToGameObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var MaskToGameObject = function (mask) {
  return mask.hasOwnProperty('geometryMask') ? mask.geometryMask : mask.bitmapMask;
};
var _default = MaskToGameObject;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/mask/MaskChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MaskToGameObject = _interopRequireDefault(require("../../../../utils/mask/MaskToGameObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Intersects = Phaser.Geom.Intersects.RectangleToRectangle;
const Overlaps = Phaser.Geom.Rectangle.Overlaps;
var MaskChildren = function (parent, mask, children) {
  if (!mask) {
    return;
  }
  if (children === undefined) {
    children = parent.getAllChildren();
  }
  var parentBounds = parent.getBounds();
  var maskGameObject = (0, _MaskToGameObject.default)(mask);
  var child, childBounds, visiblePointsNumber;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    child = children[i];
    if (child.hasOwnProperty('isRexContainerLite')) {
      continue;
    }
    if (child === maskGameObject) {
      continue;
    }
    if (!IsVisible(child)) {
      // Child is invisible before masking
      continue;
    }
    if (child.getBounds) {
      childBounds = child.getBounds(childBounds);
      visiblePointsNumber = ContainsPoints(parentBounds, childBounds);
      switch (visiblePointsNumber) {
        case 4:
          // 4 points are all inside visible window, set visible
          ShowAll(parent, child, mask);
          break;
        case 0:
          // No point is inside visible window
          // Parent intersects with child, or parent is inside child, set visible, and apply mask
          if (Intersects(parentBounds, childBounds) || Overlaps(parentBounds, childBounds)) {
            ShowSome(parent, child, mask);
          } else {
            // Set invisible
            ShowNone(parent, child, mask);
          }
          break;
        default:
          // Part of points are inside visible window, set visible, and apply mask
          ShowSome(parent, child, mask);
          break;
      }
    } else {
      ShowSome(parent, child, mask);
    }
  }
};
var IsVisible = function (gameObject) {
  if (!gameObject.displayList) {
    return false;
  }
  while (1) {
    var localState = gameObject.rexContainer;
    if (!localState) {
      // Top game object
      return gameObject.visible;
    } else if (localState.visible) {
      var parent = localState.parent;
      if (parent) {
        // Test parent's visible
        gameObject = parent;
        continue;
      } else {
        // Top visible game object
        return true;
      }
    } else {
      // Current game object is invisible
      return false;
    }
  }
};
var ContainsPoints = function (rectA, rectB) {
  var result = 0;
  var top = rectB.top,
    bottom = rectB.bottom,
    left = rectB.left,
    right = rectB.right;
  result += rectA.contains(left, top) ? 1 : 0;
  result += rectA.contains(left, bottom) ? 1 : 0;
  result += rectA.contains(right, top) ? 1 : 0;
  result += rectA.contains(right, bottom) ? 1 : 0;
  return result;
};
var ShowAll = function (parent, child, mask) {
  parent.setChildMaskVisible(child, true);
  if (child.clearMask) {
    child.clearMask();
  }
};
var ShowSome = function (parent, child, mask) {
  parent.setChildMaskVisible(child, true);
  if (child.setMask) {
    child.setMask(mask);
  }
};
var ShowNone = function (parent, child, mask) {
  parent.setChildMaskVisible(child, false);
  if (child.clearMask) {
    child.clearMask();
  }
};
var _default = MaskChildren;
exports.default = _default;
},{"../../../../utils/mask/MaskToGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/mask/MaskToGameObject.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/mask/ChildrenMaskMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MaskChildren = _interopRequireDefault(require("./MaskChildren.js"));
var _AddChildMask = _interopRequireDefault(require("./AddChildMask.js"));
var _MaskToGameObject = _interopRequireDefault(require("../../../../utils/mask/MaskToGameObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const MASKUPDATEMODE = {
  update: 0,
  everyTick: 1
};
var _default = {
  setupChildrenMask(config) {
    if (config === false) {
      // No children mask
      return this;
    }
    this.setMaskUpdateMode(GetValue(config, 'updateMode', 0));
    this.enableChildrenMask(GetValue(config, 'padding', 0));
    this.setMaskLayer(GetValue(config, 'layer', undefined));
    this.startMaskUpdate();
    return this;
  },
  destroyChildrenMask() {
    if (!this.childrenMask) {
      return this;
    }
    this.stopMaskUpdate();
    this.childrenMask.destroy();
    this.childrenMask = undefined;
    return this;
  },
  setMaskUpdateMode(mode) {
    if (typeof mode === 'string') {
      mode = MASKUPDATEMODE[mode];
    }
    this.maskUpdateMode = mode;
    return this;
  },
  startMaskUpdate() {
    this.scene.game.events.on('poststep', this.maskChildren, this);
  },
  stopMaskUpdate() {
    this.scene.game.events.off('poststep', this.maskChildren, this);
  },
  enableChildrenMask(maskPadding) {
    var maskGameObject = _AddChildMask.default.call(this, null, this, 0, maskPadding);
    this.childrenMask = maskGameObject.createGeometryMask();
    // this.childrenMask is a mask object, not a (Graphics) game object
    return this;
  },
  setMaskChildrenFlag(value) {
    if (value === undefined) {
      value = true;
    }
    this.maskChildrenFlag = value;
    return this;
  },
  setMaskLayer(layer) {
    // To reduce amount of masked game object
    this.maskLayer = layer;
    return this;
  },
  maskChildren() {
    if (!this.childrenMask ||
    // No childrenMask
    !this.maskChildrenFlag ||
    // No maskChildrenFlag set
    this.alpha === 0 || !this.visible // Parent is not visible
    ) {
      return this;
    }
    if (this.privateRenderLayer) {
      this.privateRenderLayer.setMask(this.childrenMask);
    } else if (this.maskLayer) {
      // 1. Add parent and children into layer
      this.addToLayer(this.maskLayer);
      // 2. Mask this layer
      this.maskLayer.setMask(this.childrenMask);
    } else {
      (0, _MaskChildren.default)(this, this.childrenMask);
    }
    if (this.maskUpdateMode === 0) {
      this.maskChildrenFlag = false;
    }
    return this;
  },
  layoutChildrenMask() {
    if (!this.childrenMask) {
      return this;
    }
    var maskGameObject = (0, _MaskToGameObject.default)(this.childrenMask);
    maskGameObject.setPosition().resize();
    this.resetChildPositionState(maskGameObject);
    return this;
  }
};
exports.default = _default;
},{"./MaskChildren.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/mask/MaskChildren.js","./AddChildMask.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/mask/AddChildMask.js","../../../../utils/mask/MaskToGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/mask/MaskToGameObject.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/ShowCells.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AlignIn = _interopRequireDefault(require("../../../../../utils/actions/AlignIn.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ShowCells = function () {
  if (this.cellsCount === 0) {
    return;
  }
  var table = this.table;
  var startRowIdx = table.heightToRowIndex(-this.tableOY);
  if (startRowIdx <= 0) {
    startRowIdx = 0; //Turn -0 to 0
  }

  var rowIdx = startRowIdx;
  var startColIdx = table.widthToColIndex(-this.tableOX);
  if (startColIdx <= 0) {
    startColIdx = 0; //Turn -0 to 0
  }

  var colIdx = startColIdx;
  var cellIdx = table.colRowToCellIndex(colIdx, rowIdx);
  var bottomBound = this.bottomBound;
  var rightBound = this.rightBound;
  var lastIdx = table.cellsCount - 1;
  var lastColIdx = table.colCount - 1;
  var startCellTLX = this.getCellTLX(colIdx),
    cellTLX = startCellTLX;
  var cellTLY = this.getCellTLY(rowIdx);
  while (cellTLY < bottomBound && cellIdx <= lastIdx) {
    if (this.table.isValidCellIdx(cellIdx)) {
      var cell = table.getCell(cellIdx, true);
      this.visibleCells.set(cell);
      if (!this.preVisibleCells.contains(cell)) {
        this.showCell(cell);
      }
      var x, y;
      if (this.scrollMode === 0) {
        x = cellTLX;
        y = cellTLY;
      } else {
        x = cellTLY;
        y = cellTLX;
      }
      if (cell.cellContainerAlign == null) {
        cell.setXY(x, y);
      } else {
        var cellContainer = cell.getContainer();
        (0, _AlignIn.default)(cellContainer, x, y, cell.width, cell.height, cell.cellContainerAlign);
        cell.setXY(cellContainer.x, cellContainer.y);
      }
    }
    if (cellTLX < rightBound && colIdx < lastColIdx) {
      cellTLX += table.getColWidth(colIdx);
      colIdx += 1;
    } else {
      cellTLX = startCellTLX;
      cellTLY += table.getRowHeight(rowIdx);
      colIdx = startColIdx;
      rowIdx += 1;
    }
    cellIdx = table.colRowToCellIndex(colIdx, rowIdx);
  }
};
var _default = ShowCells;
exports.default = _default;
},{"../../../../../utils/actions/AlignIn.js":"node_modules/phaser3-rex-plugins/plugins/utils/actions/AlignIn.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/ShowCell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ShowCell = function (cell) {
  // Attach container to cell by cell.setContainer(container) under this event
  var reusedCellContainer = null;
  var cellContainer = cell.getContainer();
  if (cellContainer) {
    reusedCellContainer = cellContainer;
    cell.popContainer();
  } else if (this.cellContainersPool) {
    reusedCellContainer = this.cellContainersPool.getFirstDead();
    if (reusedCellContainer !== null) {
      // Reuse this game object
      reusedCellContainer.setActive(true).setVisible(true);
    }
  }
  this.emit('cellvisible', cell, reusedCellContainer, this);
  if (this.cellContainersPool) {
    var cellContainer = cell.getContainer();
    if (cellContainer) {
      if (reusedCellContainer === null) {
        this.cellContainersPool.add(cellContainer); // New cell container, add to pool
      } else if (reusedCellContainer !== cellContainer) {
        // Why reusedCellContainer is not equal to cellContainer?
        this.cellContainersPool.add(cellContainer); // New cell container, add to pool
        this.cellContainersPool.killAndHide(reusedCellContainer); // Unused cell container, put back to pool
      }
    } else {
      // No cell container added
      if (reusedCellContainer !== null) {
        this.cellContainersPool.killAndHide(reusedCellContainer); // Unused cell container, put back to pool
      }
    }
  }
};
var _default = ShowCell;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/GetCellTLX.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetCellTLX = function (colIdx) {
  var ox = this.scrollMode === 0 ? this.topLeftX : this.topLeftY;
  var x = this.tableOX + this.table.colIndexToWidth(0, colIdx - 1) + ox;
  return x;
};
var _default = GetCellTLX;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/GetCellTLY.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetCellTLY = function (rowIdx) {
  var oy = this.scrollMode === 0 ? this.topLeftY : this.topLeftX;
  var y = this.tableOY + this.table.rowIndexToHeight(0, rowIdx - 1) + oy;
  return y;
};
var _default = GetCellTLY;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/HideCells.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var HideCells = function () {
  var preList = this.preVisibleCells;
  var curList = this.visibleCells;
  preList.iterate(function (cell) {
    if (!curList.contains(cell)) {
      this.hideCell(cell);
    }
  }, this);
};
var _default = HideCells;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/HideCell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var HideCell = function (cell) {
  // Option: pop container of cell by cell.popContainer() under this event 
  this.emit('cellinvisible', cell);
  if (this.cellContainersPool) {
    var cellContainer = cell.popContainer(); // null if already been removed
    if (cellContainer) {
      this.cellContainersPool.killAndHide(cellContainer);
    }
  }
  cell.destroyContainer(); // Destroy container of cell
};
var _default = HideCell;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/UpdateTable.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var UpdateTable = function (refresh) {
  if (refresh === undefined) {
    refresh = false;
  }
  if (refresh) {
    ClearVisibleCellIndexes.call(this);
    this.hideCells();
  }
  ClearVisibleCellIndexes.call(this);
  this.showCells();
  this.hideCells();
  this.setMaskChildrenFlag();
  return this;
};
var ClearVisibleCellIndexes = function () {
  var tmp = this.preVisibleCells;
  this.preVisibleCells = this.visibleCells;
  this.visibleCells = tmp;
  this.visibleCells.clear();
};
var _default = UpdateTable;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/IsCellVisible.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var IsCellVisible = function (cellIdx) {
  var cell = this.table.getCell(cellIdx, false);
  return cell && this.visibleCells.contains(cell);
};
var _default = IsCellVisible;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/PointToCell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PointToCellIndex = exports.PointToCellContainer = void 0;
var PointToCellIndex = function (x, y) {
  y -= this.y + this.topLeftY;
  x -= this.x + this.topLeftX;
  var offsetTableOY = this.tableOY - (this.scrollMode === 0 ? y : x);
  var offsetTableOX = this.tableOX - (this.scrollMode === 0 ? x : y);
  var table = this.table;
  var rowIdx = table.heightToRowIndex(-offsetTableOY);
  var colIdx = table.widthToColIndex(-offsetTableOX);
  var cellIdx = table.colRowToCellIndex(colIdx, rowIdx);
  if (cellIdx === null) {
    return null;
  }
  if (!this.isCellVisible(cellIdx)) {
    return null;
  }
  return cellIdx;
};
exports.PointToCellIndex = PointToCellIndex;
var PointToCellContainer = function (x, y) {
  var cellIdx = PointToCellIndex.call(this, x, y);
  if (cellIdx === null) {
    return undefined;
  }
  return this.getCellContainer(cellIdx);
};
exports.PointToCellContainer = PointToCellContainer;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/EachCell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IterateVisibleCell = exports.IterateCell = exports.EachVisibleCell = exports.EachCell = void 0;
// For when you know this Set will be modified during the iteration
var EachVisibleCell = function (callback, scope) {
  this.visibleCells.each(callback, scope);
  return this;
};

// For when you absolutely know this Set won't be modified during the iteration
exports.EachVisibleCell = EachVisibleCell;
var IterateVisibleCell = function (callback, scope) {
  this.visibleCells.iterate(callback, scope);
  return this;
};
exports.IterateVisibleCell = IterateVisibleCell;
var EachCell = function (callback, scope) {
  this.table.cells.slice().forEach(callback, scope);
  return this;
};
exports.EachCell = EachCell;
var IterateCell = function (callback, scope) {
  this.table.cells.forEach(callback, scope);
  return this;
};
exports.IterateCell = IterateCell;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/SetCellsCount.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetCellsCount = function (count) {
  var cellsCount = this.cellsCount;
  if (cellsCount === count) {
    return this;
  }
  if (cellsCount > count) {
    this.removeCells(count, cellsCount - count);
  } else {
    // cellsCount < count
    this.insertNewCells(cellsCount, count - cellsCount);
  }
  return this;
};
var _default = SetCellsCount;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/InsertNewCells.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Clamp = Phaser.Math.Clamp;
var InsertNewCells = function (cellIdx, count) {
  if (typeof cellIdx === 'object') {
    cellIdx = cellIdx.index;
  }
  if (count === undefined) {
    count = 1;
  }
  if (count <= 0) {
    return this;
  }
  cellIdx = Clamp(cellIdx, 0, this.cellsCount);
  this.table.insertNewCells(cellIdx, count);
  return this;
};
var _default = InsertNewCells;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/RemoveCells.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _HideCell = _interopRequireDefault(require("./updatetable/HideCell.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var RemoveCells = function (cellIdx, count) {
  if (typeof cellIdx === 'object') {
    cellIdx = cellIdx.index;
  }
  if (count === undefined) {
    count = 1;
  }
  if (cellIdx < 0) {
    count += cellIdx;
    cellIdx = 0;
  }
  if (count <= 0) {
    return this;
  }
  // out-of-range
  if (cellIdx > this.cellsCount) {
    return this;
  }
  var cell;
  for (var i = cellIdx, endIdx = cellIdx + count; i < endIdx; i++) {
    cell = this.getCell(i, false);
    if (cell) {
      if (this.visibleCells.contains(cell)) {
        _HideCell.default.call(this, cell);
        this.visibleCells.delete(cell);
      }
      this.preVisibleCells.delete(cell);
    }
  }
  this.table.removeCells(cellIdx, count);
  return this;
};
var _default = RemoveCells;
exports.default = _default;
},{"./updatetable/HideCell.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/HideCell.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/SetColumnCount.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetColumnCount = function (count) {
  if (this.table.colCount === count) {
    return this;
  }
  this.table.setColumnCount(count);
  return this;
};
var _default = SetColumnCount;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/SetGridSize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetGridSize = function (colCount, rowCount) {
  this.setCellsCount(colCount * rowCount);
  this.table.setColumnCount(colCount);
  return this;
};
var _default = SetGridSize;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/UpdateVisibleCell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ShowCell = _interopRequireDefault(require("./updatetable/ShowCell"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var UpdateVisibleCell = function (cellIdx) {
  var cell = this.table.getCell(cellIdx, false);
  if (!cell || !cell.container) {
    return this;
  }
  _ShowCell.default.call(this, cell);
  return this;
};
var _default = UpdateVisibleCell;
exports.default = _default;
},{"./updatetable/ShowCell":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/ShowCell.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SetTableOY = _interopRequireDefault(require("./SetTableOY.js"));
var _SetTableOX = _interopRequireDefault(require("./SetTableOX.js"));
var _ChildrenMaskMethods = _interopRequireDefault(require("../../../container/containerlite/mask/ChildrenMaskMethods.js"));
var _ShowCells = _interopRequireDefault(require("./updatetable/ShowCells.js"));
var _ShowCell = _interopRequireDefault(require("./updatetable/ShowCell.js"));
var _GetCellTLX = _interopRequireDefault(require("./updatetable/GetCellTLX.js"));
var _GetCellTLY = _interopRequireDefault(require("./updatetable/GetCellTLY.js"));
var _HideCells = _interopRequireDefault(require("./updatetable/HideCells.js"));
var _HideCell = _interopRequireDefault(require("./updatetable/HideCell.js"));
var _UpdateTable = _interopRequireDefault(require("./updatetable/UpdateTable.js"));
var _IsCellVisible = _interopRequireDefault(require("./IsCellVisible.js"));
var _PointToCell = require("./PointToCell.js");
var _EachCell = require("./EachCell.js");
var _SetCellsCount = _interopRequireDefault(require("./SetCellsCount.js"));
var _InsertNewCells = _interopRequireDefault(require("./InsertNewCells.js"));
var _RemoveCells = _interopRequireDefault(require("./RemoveCells.js"));
var _SetColumnCount = _interopRequireDefault(require("./SetColumnCount.js"));
var _SetGridSize = _interopRequireDefault(require("./SetGridSize.js"));
var _UpdateVisibleCell = _interopRequireDefault(require("./UpdateVisibleCell"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  setTableOY: _SetTableOY.default,
  setTableOX: _SetTableOX.default,
  showCells: _ShowCells.default,
  showCell: _ShowCell.default,
  getCellTLX: _GetCellTLX.default,
  getCellTLY: _GetCellTLY.default,
  hideCells: _HideCells.default,
  hideCell: _HideCell.default,
  updateTable: _UpdateTable.default,
  isCellVisible: _IsCellVisible.default,
  pointToCellIndex: _PointToCell.PointToCellIndex,
  pointToCellContainer: _PointToCell.PointToCellContainer,
  eachVisibleCell: _EachCell.EachVisibleCell,
  iterateVisibleCell: _EachCell.IterateVisibleCell,
  eachCell: _EachCell.EachCell,
  iterateCell: _EachCell.IterateCell,
  setCellsCount: _SetCellsCount.default,
  insertNewCells: _InsertNewCells.default,
  removeCells: _RemoveCells.default,
  setColumnCount: _SetColumnCount.default,
  setGridSize: _SetGridSize.default,
  updateVisibleCell: _UpdateVisibleCell.default
};
Object.assign(methods, _ChildrenMaskMethods.default);
var _default = methods;
exports.default = _default;
},{"./SetTableOY.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/SetTableOY.js","./SetTableOX.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/SetTableOX.js","../../../container/containerlite/mask/ChildrenMaskMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/mask/ChildrenMaskMethods.js","./updatetable/ShowCells.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/ShowCells.js","./updatetable/ShowCell.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/ShowCell.js","./updatetable/GetCellTLX.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/GetCellTLX.js","./updatetable/GetCellTLY.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/GetCellTLY.js","./updatetable/HideCells.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/HideCells.js","./updatetable/HideCell.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/HideCell.js","./updatetable/UpdateTable.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/updatetable/UpdateTable.js","./IsCellVisible.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/IsCellVisible.js","./PointToCell.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/PointToCell.js","./EachCell.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/EachCell.js","./SetCellsCount.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/SetCellsCount.js","./InsertNewCells.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/InsertNewCells.js","./RemoveCells.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/RemoveCells.js","./SetColumnCount.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/SetColumnCount.js","./SetGridSize.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/SetGridSize.js","./UpdateVisibleCell":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/UpdateVisibleCell.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/GridTable.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ContainerLite = _interopRequireDefault(require("../../container/containerlite/ContainerLite.js"));
var _Table = _interopRequireDefault(require("./table/Table.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Group = Phaser.GameObjects.Group;
const Set = Phaser.Structs.Set;
const GetValue = Phaser.Utils.Objects.GetValue;
class GridTable extends _ContainerLite.default {
  constructor(scene, x, y, width, height, config) {
    if (config === undefined) {
      config = {};
    }
    super(scene, x, y, width, height);
    this.type = 'rexGridTable';
    this._tableOX = 0;
    this._tableOY = 0;
    this.visibleCells = new Set();
    this.preVisibleCells = new Set();
    this.execeedTopState = false;
    this.execeedBottomState = false;
    this.execeedLeftState = false;
    this.execeedRightState = false;
    var reuseCellContainer = GetValue(config, 'reuseCellContainer', false);
    if (reuseCellContainer) {
      this.cellContainersPool = new Group(scene); // Don't add Group into update list, I will destroy it manually
    }

    var callback = GetValue(config, 'cellVisibleCallback', null);
    if (callback !== null) {
      var scope = GetValue(config, 'cellVisibleCallbackScope', undefined);
      this.on('cellvisible', callback, scope);
    }
    callback = GetValue(config, 'cellInvisibleCallback', null);
    if (callback !== null) {
      var scope = GetValue(config, 'cellInvisibleCallbackScope', undefined);
      this.on('cellinvisible', callback, scope);
    }
    if (GetValue(config, 'enableLayer', false)) {
      this.enableLayer();
    }
    this.setupChildrenMask(GetValue(config, 'mask', undefined));
    this.setScrollMode(GetValue(config, 'scrollMode', 0));
    this.setClampMode(GetValue(config, 'clamplTableOXY', true));

    // Pre-process cell size
    var cellWidth, cellHeight, columns;
    var scrollY = this.scrollMode === 0;
    if (scrollY) {
      // scroll y
      cellWidth = config.cellWidth;
      cellHeight = config.cellHeight;
      columns = config.columns;
    } else {
      // scroll x
      cellWidth = config.cellHeight;
      cellHeight = config.cellWidth;
      columns = GetValue(config, 'rows', config.columns);
    }
    if (!columns) {
      columns = 1; // Default columns
    }

    this.expandCellSize = cellWidth === undefined;
    if (this.expandCellSize) {
      var width = scrollY ? this.width : this.height;
      cellWidth = width / columns;
    }
    config.cellWidth = cellWidth;
    config.cellHeight = cellHeight;
    config.columns = columns;
    this.table = new _Table.default(this, config);
    this.updateTable();
  }
  destroy(fromScene) {
    // preDestroy method does not have fromScene parameter
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    this.destroyChildrenMask();
    this.table.destroy(fromScene);
    this.table = undefined;
    if (this.cellContainersPool) {
      this.cellContainersPool.destroy(true);
      this.cellContainersPool = undefined;
    }
    super.destroy(fromScene);
  }
  setScrollMode(mode) {
    if (typeof mode === 'string') {
      mode = SCROLLMODE[mode.toLowerCase()];
    }
    this.scrollMode = mode;
    return this;
  }
  setClampMode(mode) {
    if (mode === undefined) {
      mode = true;
    }
    this.clampTableOXY = mode;
    return this;
  }
  get tableOY() {
    return this._tableOY;
  }
  get tableOX() {
    return this._tableOX;
  }
  set tableOY(oy) {
    this.setTableOY(oy).updateTable();
  }
  set tableOX(ox) {
    this.setTableOX(ox).updateTable();
  }
  setTableOXY(ox, oy) {
    this.setTableOY(oy).setTableOX(ox);
    return this;
  }
  addTableOY(dy) {
    this.setTableOY(this.tableOY + dy);
    return this;
  }
  addTableOX(dx) {
    this.setTableOX(this.tableOX + dx);
    return this;
  }
  addTableOXY(dx, dy) {
    this.addTableOY(dy).addTableOX(dx);
    return this;
  }
  setTableOYByPercentage(percentage) {
    this.setTableOY(-this.tableVisibleHeight * percentage);
    return this;
  }
  getTableOYPercentage() {
    var tableVisibleHeight = this.tableVisibleHeight;
    if (tableVisibleHeight === 0) {
      return 0;
    }
    return this.tableOY / -tableVisibleHeight;
  }
  set t(value) {
    this.setTableOYByPercentage(value).updateTable();
  }
  get t() {
    return this.getTableOYPercentage();
  }
  scrollToBottom() {
    this.t = 1;
    // t will be 0 if table does not exceed visible area
    if (this.t === 0) {
      return this;
    }

    // Table height might be expanded while cells are visible        
    do {
      this.t = 1;
    } while (this.t !== 1);
    return this;
  }
  getCell(cellIdx) {
    return this.table.getCell(cellIdx, true);
  }
  getCellContainer(cellIdx) {
    var cell = this.table.getCell(cellIdx, false);
    var container;
    if (cell) {
      container = cell.getContainer();
    }
    return container;
  }
  get cellsCount() {
    return this.table.cellsCount;
  }
  get columnCount() {
    return this.table.colCount;
  }
  setCellHeight(cellIdx, height) {
    var cell;
    if (typeof cellIdx === 'number') {
      cell = this.table.getCell(cellIdx, true);
    } else {
      cell = cellIdx;
    }
    cell.height = height; // Only worked when scrollMode is 0
    return this;
  }
  setCellWidth(cellIdx, width) {
    var cell;
    if (typeof cellIdx === 'number') {
      cell = this.table.getCell(cellIdx, true);
    } else {
      cell = cellIdx;
    }
    cell.width = width; // Only worked when scrollMode is 1
    return this;
  }
  get instHeight() {
    return this.scrollMode === 0 ? this.height : this.width;
  }
  get instWidth() {
    return this.scrollMode === 0 ? this.width : this.height;
  }
  get tableHeight() {
    return this.table.totalRowsHeight;
  }
  get tableWidth() {
    return this.table.totalColumnWidth;
  }
  get topTableOY() {
    return 0;
  }
  get bottomTableOY() {
    return -this.tableVisibleHeight;
  }
  get leftTableOX() {
    return 0;
  }
  get rightTableOX() {
    return -this.tableVisibleWidth;
  }
  get tableVisibleHeight() {
    var h = this.tableHeight - this.instHeight;
    if (h < 0) {
      h = 0;
    }
    return h;
  }
  get tableVisibleWidth() {
    var w;
    var tableWidth = this.tableWidth;
    var instWidth = this.instWidth;
    if (tableWidth > instWidth) {
      w = tableWidth - instWidth;
    } else {
      w = 0;
    }
    return w;
  }
  get bottomLeftY() {
    return -(this.displayHeight * this.originY) + this.displayHeight;
  }
  get topRightX() {
    return -(this.displayWidth * this.originX) + this.displayWidth;
  }
  get topLeftX() {
    return -(this.displayWidth * this.originX);
  }
  get topLeftY() {
    return -(this.displayHeight * this.originY);
  }
  get bottomBound() {
    if (this.scrollMode === 0) {
      return this.bottomLeftY;
    } else {
      return this.topRightX;
    }
  }
  get rightBound() {
    if (this.scrollMode === 0) {
      return this.topRightX;
    } else {
      return this.bottomLeftY;
    }
  }
  resize(width, height) {
    if (this.width === width && this.height === height) {
      return this;
    }
    super.resize(width, height);
    if (this.expandCellSize) {
      this.table.setDefaultCellWidth(this.instWidth / this.table.colCount);
    }
    this.updateTable(true);

    // Layout children-mask
    this.layoutChildrenMask();
    // Re-mask children
    this.maskChildren();
    return this;
  }
}
;

// mixin
Object.assign(GridTable.prototype, _Methods.default);
const SCROLLMODE = {
  v: 0,
  vertical: 0,
  h: 1,
  horizontal: 1
};
const MASKUPDATEMODE = {
  update: 0,
  everyTick: 1
};
var _default = GridTable;
exports.default = _default;
},{"../../container/containerlite/ContainerLite.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/ContainerLite.js","./table/Table.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/table/Table.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/methods/Methods.js"}],"node_modules/phaser3-rex-plugins/plugins/gridtable.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GridTable = _interopRequireDefault(require("./gameobjects/container/gridtable/GridTable.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _GridTable.default;
exports.default = _default;
},{"./gameobjects/container/gridtable/GridTable.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/gridtable/GridTable.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridtable/InjectProperties.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var InjectProperties = function (table) {
  Object.defineProperty(table, 'childOY', {
    configurable: true,
    get: function () {
      return table.tableOY;
    },
    set: function (value) {
      table.tableOY = value;
    }
  });
  Object.defineProperty(table, 'topChildOY', {
    get: function () {
      return table.topTableOY;
    }
  });
  Object.defineProperty(table, 'bottomChildOY', {
    get: function () {
      return table.bottomTableOY;
    }
  });
  Object.defineProperty(table, 'childVisibleHeight', {
    get: function () {
      return table.instHeight;
    }
  });
  Object.defineProperty(table, 'childHeight', {
    get: function () {
      return table.tableHeight;
    }
  });
};
var _default = InjectProperties;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridtable/TableOnCellVisible.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var TableOnCellVisible = function (table) {
  table.on('cellvisible', function (cell, cellContainer, table) {
    var callback = this.createCellContainerCallback;
    var scope = this.createCellContainerCallbackScope;
    cell.item = this.items[cell.index];
    cell.items = this.items;
    var cellContainer;
    if (scope) {
      cellContainer = callback.call(scope, cell, cellContainer, table);
    } else {
      cellContainer = callback(cell, cellContainer, table);
    }
    if (cellContainer) {
      if (cell.cellContainerAlign == null && cellContainer.setOrigin) {
        cellContainer.setOrigin(0);
      }
      if (cellContainer.isRexSizer) {
        cellContainer.layout(); // Use original size
      }
    }

    cell.item = undefined;
    cell.items = undefined;
    cell.setContainer(cellContainer);
  }, this);
};
var _default = TableOnCellVisible;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/EmitCellEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var EmitCellEvent = function (eventEmitter, eventName, table, x, y, pointer, event) {
  var cellIndex;
  if (y === undefined) {
    cellIndex = x;
  } else {
    cellIndex = table.pointToCellIndex(x, y);
  }
  if (cellIndex === null || cellIndex === undefined) {
    return;
  }
  var cellContainer = table.getCellContainer(cellIndex);
  if (cellContainer) {
    eventEmitter.emit(eventName, cellContainer, cellIndex, pointer, event);
  }
};
var _default = EmitCellEvent;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/PointerUpDownCell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EmitCellEvent = _interopRequireDefault(require("./EmitCellEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PointerUpDownCell = function (table, tableConfig) {
  table.on('pointerdown', function (pointer, localX, localY, event) {
    (0, _EmitCellEvent.default)(this.eventEmitter, 'cell.down', table, pointer.worldX, pointer.worldY, pointer, event);
  }, this).on('pointerup', function (pointer, localX, localY, event) {
    (0, _EmitCellEvent.default)(this.eventEmitter, 'cell.up', table, pointer.worldX, pointer.worldY, pointer, event);
  }, this);
};
var _default = PointerUpDownCell;
exports.default = _default;
},{"./EmitCellEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/EmitCellEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/OverCell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EmitCellEvent = _interopRequireDefault(require("./EmitCellEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OverCell = function (table, tableConfig) {
  table.on('pointermove', OnMove, this).on('pointerover', OnMove, this).on('pointerout', OnOut, this); // pointer-up is included too
};

var OnMove = function (pointer, localX, localY, event) {
  var table = this.childrenMap.child;
  var cellIndex = table.pointToCellIndex(pointer.worldX, pointer.worldY);
  if (cellIndex === table.input.lastOverCellIndex) {
    return;
  }
  var preCellIndex = table.input.lastOverCellIndex;
  table.input.lastOverCellIndex = cellIndex;
  (0, _EmitCellEvent.default)(this.eventEmitter, 'cell.out', table, preCellIndex, undefined, pointer, event);
  (0, _EmitCellEvent.default)(this.eventEmitter, 'cell.over', table, cellIndex, undefined, pointer, event);
};
var OnOut = function (pointer, event) {
  var table = this.childrenMap.child;
  var cellIndex = table.input.lastOverCellIndex;
  table.input.lastOverCellIndex = undefined;
  (0, _EmitCellEvent.default)(this.eventEmitter, 'cell.out', table, cellIndex, undefined, pointer, event);
};
var _default = OverCell;
exports.default = _default;
},{"./EmitCellEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/EmitCellEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/ClickCell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Button = _interopRequireDefault(require("../../../../plugins/input/button/Button.js"));
var _EmitCellEvent = _interopRequireDefault(require("./EmitCellEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var ClickCell = function (table, tableConfig) {
  var buttonConfig = GetValue(tableConfig, 'click', undefined);
  if (buttonConfig === false) {
    return;
  } else if (buttonConfig === undefined) {
    buttonConfig = {};
  }
  buttonConfig.threshold = 10;
  table._click = new _Button.default(table, buttonConfig);
  table._click.on('click', function (button, gameObject, pointer, event) {
    (0, _EmitCellEvent.default)(this.eventEmitter, 'cell.click', gameObject, pointer.worldX, pointer.worldY, pointer, event);
  }, this);
};
var _default = ClickCell;
exports.default = _default;
},{"../../../../plugins/input/button/Button.js":"node_modules/phaser3-rex-plugins/plugins/input/button/Button.js","./EmitCellEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/EmitCellEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/TapCell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Tap = _interopRequireDefault(require("../../tap/Tap.js"));
var _EmitCellEvent = _interopRequireDefault(require("./EmitCellEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var TapCell = function (table, tableConfig) {
  var tapConfig = GetValue(tableConfig, 'tap', undefined);
  if (tapConfig === false) {
    return;
  }
  table._tap = new _Tap.default(table, tapConfig);
  table._tap.on('tap', function (tap, gameObject, lastPointer) {
    var eventName = `cell.${tap.tapsCount}tap`;
    (0, _EmitCellEvent.default)(this.eventEmitter, eventName, tap.gameObject, tap.worldX, tap.worldY, lastPointer);
  }, this);
};
var _default = TapCell;
exports.default = _default;
},{"../../tap/Tap.js":"node_modules/phaser3-rex-plugins/templates/ui/tap/Tap.js","./EmitCellEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/EmitCellEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/PressCell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Press = _interopRequireDefault(require("../../press/Press.js"));
var _EmitCellEvent = _interopRequireDefault(require("./EmitCellEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var PressCell = function (table, tableConfig) {
  var pressConfig = GetValue(tableConfig, 'press', undefined);
  if (pressConfig === false) {
    return;
  }
  table._press = new _Press.default(table, pressConfig);
  table._press.on('pressstart', function (press, gameObject, lastPointer) {
    (0, _EmitCellEvent.default)(this.eventEmitter, 'cell.pressstart', table, press.worldX, press.worldY, lastPointer);
  }, this).on('pressend', function (press, gameObject, lastPointer) {
    (0, _EmitCellEvent.default)(this.eventEmitter, 'cell.pressend', table, press.worldX, press.worldY, lastPointer);
  }, this);
};
var _default = PressCell;
exports.default = _default;
},{"../../press/Press.js":"node_modules/phaser3-rex-plugins/templates/ui/press/Press.js","./EmitCellEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/EmitCellEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/SwipeCell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Swipe = _interopRequireDefault(require("../../swipe/Swipe.js"));
var _EmitCellEvent = _interopRequireDefault(require("./EmitCellEvent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var SwipeCell = function (table, tableConfig) {
  var swipeConfig = GetValue(tableConfig, 'swipe', undefined);
  if (swipeConfig === false) {
    return;
  } else if (swipeConfig === undefined) {
    swipeConfig = {};
  }
  swipeConfig.dir = '4dir';
  table._swipe = new _Swipe.default(table, swipeConfig);
  table._swipe.on('swipe', function (swipe, gameObject, lastPointer) {
    var dirName = swipe.left ? 'left' : swipe.right ? 'right' : swipe.up ? 'up' : 'down';
    (0, _EmitCellEvent.default)(this.eventEmitter, `cell.swipe${dirName}`, table, swipe.worldX, swipe.worldY, lastPointer);
  }, this);
};
var _default = SwipeCell;
exports.default = _default;
},{"../../swipe/Swipe.js":"node_modules/phaser3-rex-plugins/templates/ui/swipe/Swipe.js","./EmitCellEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/EmitCellEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/TableSetInteractive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PointerUpDownCell = _interopRequireDefault(require("./PointerUpDownCell.js"));
var _OverCell = _interopRequireDefault(require("./OverCell.js"));
var _ClickCell = _interopRequireDefault(require("./ClickCell.js"));
var _TapCell = _interopRequireDefault(require("./TapCell.js"));
var _PressCell = _interopRequireDefault(require("./PressCell.js"));
var _SwipeCell = _interopRequireDefault(require("./SwipeCell.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var TableSetInteractive = function (table, tableConfig) {
  table.setInteractive();
  _PointerUpDownCell.default.call(this, table, tableConfig);
  _OverCell.default.call(this, table, tableConfig);
  _ClickCell.default.call(this, table, tableConfig);
  _TapCell.default.call(this, table, tableConfig);
  _PressCell.default.call(this, table, tableConfig);
  _SwipeCell.default.call(this, table, tableConfig);
};
var _default = TableSetInteractive;
exports.default = _default;
},{"./PointerUpDownCell.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/PointerUpDownCell.js","./OverCell.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/OverCell.js","./ClickCell.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/ClickCell.js","./TapCell.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/TapCell.js","./PressCell.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/PressCell.js","./SwipeCell.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/SwipeCell.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridtable/SetItems.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetItems = function (items) {
  if (items === undefined) {
    this.items = [];
  } else {
    this.items = items;
  }
  var table = this.childrenMap.child;
  table.setCellsCount(this.items.length);
  table.updateTable(true);
  this.resizeController();
  return this;
};
var _default = SetItems;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/gridtable/GridTable.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Scrollable = _interopRequireDefault(require("../utils/scrollable/Scrollable.js"));
var _GetScrollMode = _interopRequireDefault(require("../utils/GetScrollMode.js"));
var _gridtable = _interopRequireDefault(require("../../../plugins/gridtable.js"));
var _InjectProperties = _interopRequireDefault(require("./InjectProperties.js"));
var _TableOnCellVisible = _interopRequireDefault(require("./TableOnCellVisible.js"));
var _TableSetInteractive = _interopRequireDefault(require("./input/TableSetInteractive.js"));
var _NOOP = _interopRequireDefault(require("../../../plugins/utils/object/NOOP.js"));
var _SetItems = _interopRequireDefault(require("./SetItems.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class GridTable extends _Scrollable.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }

    // Create grid table core
    var scrollMode = (0, _GetScrollMode.default)(config);
    var tableConfig = GetValue(config, 'table', undefined);
    if (tableConfig === undefined) {
      tableConfig = {};
    }
    tableConfig.scrollMode = scrollMode;
    tableConfig.clamplTableOXY = GetValue(config, 'clamplChildOY', false);
    var tableWidth = GetValue(tableConfig, 'width', undefined);
    var tableHeight = GetValue(tableConfig, 'height', undefined);
    var table = new _gridtable.default(scene, 0, 0, tableWidth, tableHeight, tableConfig);
    scene.add.existing(table); // Important: Add to display list for touch detecting
    var proportion, expand;
    if (scrollMode === 0) {
      proportion = tableWidth === undefined ? 1 : 0;
      expand = tableHeight === undefined;
    } else {
      proportion = tableHeight === undefined ? 1 : 0;
      expand = tableWidth === undefined;
    }
    // Inject properties for scrollable interface
    (0, _InjectProperties.default)(table);
    // Set minWidth/minHeight to 0 if tableWidth/tableHeight is undefined
    table.minWidth = tableWidth === undefined ? 0 : undefined;
    table.minHeight = tableHeight === undefined ? 0 : undefined;

    // Fill config of scrollable
    config.type = 'rexGridTable';
    config.child = {
      gameObject: table,
      proportion: proportion,
      expand: expand
    };
    var spaceConfig = GetValue(config, 'space', undefined);
    if (spaceConfig) {
      spaceConfig.child = spaceConfig.table;
    }
    super(scene, config);
    this.addChildrenMap('table', table);
    this.addChildrenMap('tableLayer', table.maskLayer);
    this.eventEmitter = GetValue(config, 'eventEmitter', this);
    var callback = GetValue(config, 'createCellContainerCallback', _NOOP.default);
    var scope = GetValue(config, 'createCellContainerCallbackScope', undefined);
    this.setCreateCellContainerCallback(callback, scope);
    _TableOnCellVisible.default.call(this, table);
    this.resizeControllerFlag = false;
    var eventName = scrollMode === 0 ? 'cellheightchange' : 'cellwidthchange';
    table.on(eventName, function () {
      this.resizeControllerFlag = true;
    }, this);
    if (GetValue(tableConfig, 'interactive', true)) {
      _TableSetInteractive.default.call(this, table, tableConfig);
    }
    this.setItems(GetValue(config, 'items', []));
    scene.game.events.on('poststep', this.onPostStep, this);
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    this.scene.game.events.off('poststep', this.onPostStep, this);
    super.destroy(fromScene);
  }
  setCreateCellContainerCallback(callback, scope) {
    this.createCellContainerCallback = callback;
    this.createCellContainerCallbackScope = scope;
    return this;
  }
  refresh() {
    this.setItems(this.items);
    return this;
  }
  getCell(cellIdx) {
    var table = this.childrenMap.child;
    return table.getCell(cellIdx);
  }
  getCellContainer(cellIdx) {
    var table = this.childrenMap.child;
    return table.getCellContainer(cellIdx);
  }
  updateVisibleCell(cellIdx) {
    var table = this.childrenMap.child;
    return table.updateVisibleCell(cellIdx);
  }
  onPostStep() {
    if (this.resizeControllerFlag) {
      this.resizeController();
      this.resizeControllerFlag = false;
    }
  }
}
var methods = {
  setItems: _SetItems.default
};
Object.assign(GridTable.prototype, methods);
var _default = GridTable;
exports.default = _default;
},{"../utils/scrollable/Scrollable.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/scrollable/Scrollable.js","../utils/GetScrollMode.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetScrollMode.js","../../../plugins/gridtable.js":"node_modules/phaser3-rex-plugins/plugins/gridtable.js","./InjectProperties.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/InjectProperties.js","./TableOnCellVisible.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/TableOnCellVisible.js","./input/TableSetInteractive.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/input/TableSetInteractive.js","../../../plugins/utils/object/NOOP.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/NOOP.js","./SetItems.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/SetItems.js"}],"node_modules/phaser3-rex-plugins/templates/ui/gridtable/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GridTable = _interopRequireDefault(require("./GridTable.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('gridTable', function (config) {
  var gameObject = new _GridTable.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.GridTable', _GridTable.default);
var _default = _GridTable.default;
exports.default = _default;
},{"./GridTable.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/GridTable.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/GetEaseConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetEaseConfig = function (easeConfig, menu) {
  if (easeConfig.sameOrientation) {
    easeConfig.orientation = menu.orientation;
  } else {
    easeConfig.orientation = menu.orientation === 0 ? 1 : 0;
  }
  return easeConfig;
};
var _default = GetEaseConfig;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/SetTransitCallbackMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetEaseConfig = _interopRequireDefault(require("./GetEaseConfig.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var PopUp = function (menu, duration) {
  menu.popUp((0, _GetEaseConfig.default)(menu.root.easeIn, menu));
};
var ScaleDown = function (menu, duration) {
  // Don't destroy here
  menu.scaleDown((0, _GetEaseConfig.default)(menu.root.easeOut, menu));
};
var _default = {
  setTransitInCallback(callback) {
    if (callback === undefined) {
      callback = PopUp;
    }
    this.transitInCallback = callback;
    // callback = function(gameObject, duration) {}
    return this;
  },
  setTransitOutCallback(callback) {
    if (callback === undefined) {
      callback = ScaleDown;
    }
    this.transitOutCallback = callback;
    // callback = function(gameObject, duration) {}
    return this;
  }
};
exports.default = _default;
},{"./GetEaseConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/GetEaseConfig.js"}],"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/DelayCallMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PostUpdateDelayCall = _interopRequireDefault(require("../../../../plugins/utils/time/PostUpdateDelayCall.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  delayCall(delay, callback, scope) {
    // Invoke callback under scene's 'postupdate' event
    this.timer = (0, _PostUpdateDelayCall.default)(this, delay, callback, scope);
    return this;
  },
  removeDelayCall() {
    if (this.timer) {
      this.timer.remove(false);
      this.timer = undefined;
    }
    return this;
  }
};
exports.default = _default;
},{"../../../../plugins/utils/time/PostUpdateDelayCall.js":"node_modules/phaser3-rex-plugins/plugins/utils/time/PostUpdateDelayCall.js"}],"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/ExpandSubMenu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ExpandSubMenu = function (parentButton, items) {
  var subMenu = this.childrenMap.subMenu;
  // Submenu already expand
  if (subMenu && subMenu.parentButton === parentButton) {
    return this;
  }
  this.collapseSubMenu();
  var orientation;
  if (this.root.toggleOrientation) {
    orientation = this.orientation === 0 ? 1 : 0;
  } else {
    orientation = this.orientation;
  }
  var subMenu = new this.constructor(this.scene, {
    items: items,
    orientation: orientation,
    space: this.space,
    createBackgroundCallback: this.root.createBackgroundCallback,
    createBackgroundCallbackScope: this.root.createBackgroundCallbackScope,
    createButtonCallback: this.root.createButtonCallback,
    createButtonCallbackScope: this.root.createButtonCallbackScope,
    easeIn: this.root.easeIn,
    easeOut: this.root.easeOut,
    _rootMenu: this.root,
    _parentMenu: this,
    _parentButton: parentButton
  });
  this.pin(subMenu);
  this.childrenMap.subMenu = subMenu;
  this.root.emit('expand', subMenu, parentButton, this);
  return this;
};
var _default = ExpandSubMenu;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/Collapse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Collapse = function () {
  var root = this.root;
  root.emit('collapse', this, this.parentButton, root);
  var duration = root.easeOut.duration;
  // Don't destroy under transitOutCallback
  root.transitOutCallback(this, duration);
  this.collapseSubMenu();

  // Destroy by delayCall
  this.delayCall(duration, this.destroy, this);
  return this;
};
var _default = Collapse;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/CollapseSubMenu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var CollapseSubMenu = function () {
  var subMenu = this.childrenMap.subMenu;
  if (subMenu === undefined) {
    return this;
  }
  this.childrenMap.subMenu = undefined;
  this.remove(subMenu);
  subMenu.collapse();
  return this;
};
var _default = CollapseSubMenu;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SetTransitCallbackMethods = _interopRequireDefault(require("./SetTransitCallbackMethods.js"));
var _DelayCallMethods = _interopRequireDefault(require("./DelayCallMethods.js"));
var _ExpandSubMenu = _interopRequireDefault(require("./ExpandSubMenu.js"));
var _Collapse = _interopRequireDefault(require("./Collapse.js"));
var _CollapseSubMenu = _interopRequireDefault(require("./CollapseSubMenu.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {
  expandSubMenu: _ExpandSubMenu.default,
  collapse: _Collapse.default,
  collapseSubMenu: _CollapseSubMenu.default
};
Object.assign(Methods, _SetTransitCallbackMethods.default, _DelayCallMethods.default);
var _default = Methods;
exports.default = _default;
},{"./SetTransitCallbackMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/SetTransitCallbackMethods.js","./DelayCallMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/DelayCallMethods.js","./ExpandSubMenu.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/ExpandSubMenu.js","./Collapse.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/Collapse.js","./CollapseSubMenu.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/CollapseSubMenu.js"}],"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/CreateBackground.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var CreateBackground = function (scene, items, callback, scope) {
  var background;
  if (callback) {
    items.scene = scene;
    if (scope) {
      background = callback.call(scope, items);
    } else {
      background = callback(items);
    }
    items.scene = undefined;
  }
  return background;
};
var _default = CreateBackground;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/CreateButtons.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var CreateButtons = function (scene, items, callback, scope) {
  var item;
  var buttons = [],
    button;
  if (items && callback) {
    for (var i = 0, cnt = items.length; i < cnt; i++) {
      item = items[i];
      item.scene = scene;
      if (scope) {
        button = callback.call(scope, item, i, items);
      } else {
        button = callback(item, i, items);
      }
      item.scene = undefined;
      buttons.push(button);
    }
  }
  return buttons;
};
var _default = CreateButtons;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/MenuSetInteractive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var MenuSetInteractive = function (menu) {
  menu
  // Expand sub event
  .on(menu.root.expandEventName, function (button, index) {
    if (this._isPassedEvent) {
      return;
    }
    var childrenKey = this.root.childrenKey;
    var subItems = this.items[index][childrenKey];
    if (subItems) {
      this.expandSubMenu(button, subItems);
    } else {
      // this.root.on('button.click', button); // TODO
    }
  }, menu)
  // Click any button
  .on('button.click', function (button, index, pointer, event) {
    // Pass event to root menu object
    if (this !== this.root) {
      this.root._isPassedEvent = true;
      this.root.emit('button.click', button, index, pointer, event);
      this.root._isPassedEvent = false;
    }
  }, menu)
  //Pointer over any button
  .on('button.over', function (button, index, pointer, event) {
    // Pass event to root menu object
    if (this !== this.root) {
      this.root._isPassedEvent = true;
      this.root.emit('button.over', button, index, pointer, event);
      this.root._isPassedEvent = false;
    }
  }, menu)
  //Pointer out any button
  .on('button.out', function (button, index, pointer, event) {
    // Pass event to root menu object
    if (this !== this.root) {
      this.root._isPassedEvent = true;
      this.root.emit('button.out', button, index, pointer, event);
      this.root._isPassedEvent = false;
    }
  }, menu);
};
var _default = MenuSetInteractive;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/ParseEaseConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetOrientationMode = _interopRequireDefault(require("../../utils/GetOrientationMode.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ParseEaseConfig = function (menu, easeConfig) {
  if (typeof easeConfig === 'number') {
    easeConfig = {
      duration: easeConfig
    };
  }
  if (easeConfig.hasOwnProperty('orientation') && easeConfig.orientation !== undefined) {
    easeConfig.sameOrientation = (0, _GetOrientationMode.default)(easeConfig.orientation) === menu.orientation;
  } else {
    easeConfig.sameOrientation = true;
  }
  easeConfig.destroy = false;
  return easeConfig;
};
var _default = ParseEaseConfig;
exports.default = _default;
},{"../../utils/GetOrientationMode.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetOrientationMode.js"}],"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/Expand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Expand = function () {
  var root = this.root;
  var duration = root.easeIn.duration;
  // Ease in menu
  root.transitInCallback(this, duration);
  if (this !== this.root) {
    this.delayCall(duration, function () {
      // Pass event to root menu object
      this.root.emit('popup.complete', this);
    }, this);
  }
};
var _default = Expand;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/menu/Menu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Buttons = _interopRequireDefault(require("../buttons/Buttons.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
var _CreateBackground = _interopRequireDefault(require("./methods/CreateBackground.js"));
var _CreateButtons = _interopRequireDefault(require("./methods/CreateButtons.js"));
var _GetViewport = _interopRequireDefault(require("../../../plugins/utils/system/GetViewport.js"));
var _MenuSetInteractive = _interopRequireDefault(require("./methods/MenuSetInteractive.js"));
var _ParseEaseConfig = _interopRequireDefault(require("./methods/ParseEaseConfig.js"));
var _GetEaseConfig = _interopRequireDefault(require("./methods/GetEaseConfig.js"));
var _Expand = _interopRequireDefault(require("./methods/Expand.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Menu extends _Buttons.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }

    // Orientation
    if (!config.hasOwnProperty('orientation')) {
      config.orientation = 1; // y
    }

    // Parent
    var rootMenu = config._rootMenu;
    var parentMenu = config._parentMenu;
    var parentButton = config._parentButton;
    // Popup, root menu can be static, sub-menus are always popup.
    var popUp = GetValue(config, 'popup', true);
    // Items
    var items = GetValue(config, 'items', undefined);
    // Background
    var createBackgroundCallback = GetValue(config, 'createBackgroundCallback', undefined);
    var createBackgroundCallbackScope = GetValue(config, 'createBackgroundCallbackScope', undefined);
    config.background = (0, _CreateBackground.default)(scene, items, createBackgroundCallback, createBackgroundCallbackScope);
    // Buttons
    var createButtonCallback = GetValue(config, 'createButtonCallback', undefined);
    var createButtonCallbackScope = GetValue(config, 'createButtonCallbackScope', undefined);
    config.buttons = (0, _CreateButtons.default)(scene, items, createButtonCallback, createButtonCallbackScope);
    super(scene, config);
    this.type = 'rexMenu';
    this.items = items;
    this.root = rootMenu === undefined ? this : rootMenu;
    this.isRoot = this.root === this;
    this.parentMenu = parentMenu;
    this.parentButton = parentButton;
    this.timer = undefined;

    // Root menu
    if (this.isRoot) {
      this.isPopUpMode = popUp;
      // Bounds
      var bounds = config.bounds;
      if (bounds === undefined) {
        bounds = (0, _GetViewport.default)(scene);
      }
      this.bounds = bounds;

      // Side of submenu
      this.subMenuSide = [this.y < bounds.centerY ? SUBMENU_DOWN : SUBMENU_UP, this.x < bounds.centerX ? SUBMENU_RIGHT : SUBMENU_LEFT];
      // Overwrite subMenuSide value if given
      var subMenuSide = GetValue(config, 'subMenuSide', undefined);
      if (subMenuSide !== undefined) {
        if (typeof subMenuSide === 'string') {
          subMenuSide = SubMenuSideMode[subMenuSide];
        }
        this.subMenuSide[this.orientation] = subMenuSide;
      }
      // ToggleOrientation mode
      this.toggleOrientation = GetValue(config, 'toggleOrientation', false);
      // Expand mode
      this.expandEventName = GetValue(config, 'expandEvent', 'button.click');
      // Transition
      this.easeIn = (0, _ParseEaseConfig.default)(this, GetValue(config, 'easeIn', 0));
      this.easeOut = (0, _ParseEaseConfig.default)(this, GetValue(config, 'easeOut', 0));
      this.setTransitInCallback(GetValue(config, 'transitIn'));
      this.setTransitOutCallback(GetValue(config, 'transitOut'));
      // Callbacks
      this.createBackgroundCallback = createBackgroundCallback;
      this.createBackgroundCallbackScope = createBackgroundCallbackScope;
      this.createButtonCallback = createButtonCallback;
      this.createButtonCallbackScope = createButtonCallbackScope;
      // Children key
      this.childrenKey = GetValue(config, 'childrenKey', 'children');
      // Event flag
      this._isPassedEvent = false;

      // pointerdown-outside-collapse
      this.pointerDownOutsideCollapsing = GetValue(config, 'pointerDownOutsideCollapsing', true);
      if (this.pointerDownOutsideCollapsing) {
        scene.input.on('pointerdown', this.onPointerDownOutside, this);
      }
    } else {// Sub-menu
    }
    var originX = 0,
      originY = 0;
    if (!this.root.easeIn.sameOrientation) {
      var easeOrientation = (0, _GetEaseConfig.default)(this.root.easeIn, this).orientation;
      var menuOrientation = parentMenu ? parentMenu.orientation : this.orientation;
      var subMenuSide = this.root.subMenuSide[menuOrientation];
      if (easeOrientation === 0 && subMenuSide === SUBMENU_LEFT) {
        originX = 1;
      }
      if (easeOrientation === 1 && subMenuSide === SUBMENU_UP) {
        originY = 1;
      }
    }
    if (popUp) {
      this.setOrigin(originX, originY).layout();
    }

    // Sub-menu: 
    // - scale to root's scale value
    // - align to parent button
    if (!this.isRoot) {
      this.setScale(this.root.scaleX, this.root.scaleY);
      var subMenuSide = this.root.subMenuSide[parentMenu.orientation];
      switch (subMenuSide) {
        case SUBMENU_LEFT:
          //Put submene at left side
          this.alignTop(parentButton.top).alignRight(parentButton.left);
          break;
        case SUBMENU_RIGHT:
          //Put submene at right side
          this.alignTop(parentButton.top).alignLeft(parentButton.right);
          break;
        case SUBMENU_UP:
          //Put submene at up side
          this.alignLeft(parentButton.left).alignBottom(parentButton.top);
          break;
        case SUBMENU_DOWN:
          //Put submene at down side
          this.alignLeft(parentButton.left).alignTop(parentButton.bottom);
          break;
      }
    }
    (0, _MenuSetInteractive.default)(this);
    if (popUp) {
      this.pushIntoBounds(this.root.bounds);

      // Expand this menu
      _Expand.default.call(this);
    }
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    if (this.isRoot && this.pointerDownOutsideCollapsing) {
      this.scene.input.off('pointerdown', this.onPointerDownOutside, this);
    }
    super.destroy(fromScene);
    this.removeDelayCall();
  }
  isInTouching(pointer) {
    if (super.isInTouching(pointer)) {
      return true;
    } else if (this.childrenMap.subMenu) {
      return this.childrenMap.subMenu.isInTouching(pointer);
    } else {
      return false;
    }
  }
  onPointerDownOutside(pointer) {
    if (this.isInTouching(pointer)) {
      return;
    }
    if (this.isPopUpMode) {
      this.collapse();
    } else {
      this.collapseSubMenu();
    }
  }
}
const SUBMENU_LEFT = 2;
const SUBMENU_RIGHT = 0;
const SUBMENU_UP = 3;
const SUBMENU_DOWN = 1;
const SubMenuSideMode = {
  up: SUBMENU_UP,
  down: SUBMENU_DOWN,
  left: SUBMENU_LEFT,
  right: SUBMENU_RIGHT
};
Object.assign(Menu.prototype, _Methods.default);
var _default = Menu;
exports.default = _default;
},{"../buttons/Buttons.js":"node_modules/phaser3-rex-plugins/templates/ui/buttons/Buttons.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/Methods.js","./methods/CreateBackground.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/CreateBackground.js","./methods/CreateButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/CreateButtons.js","../../../plugins/utils/system/GetViewport.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetViewport.js","./methods/MenuSetInteractive.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/MenuSetInteractive.js","./methods/ParseEaseConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/ParseEaseConfig.js","./methods/GetEaseConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/GetEaseConfig.js","./methods/Expand.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/methods/Expand.js"}],"node_modules/phaser3-rex-plugins/templates/ui/menu/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Menu = _interopRequireDefault(require("./Menu.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('menu', function (config) {
  var gameObject = new _Menu.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Menu', _Menu.default);
var _default = _Menu.default;
exports.default = _default;
},{"./Menu.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/Menu.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/methods/listpanel/ConfigurationMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var methods = {
  setWrapEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.listWrapEnable = enable;
    return this;
  },
  setCreateButtonCallback(callback) {
    this.listCreateButtonCallback = callback;
    return this;
  },
  setCreateListBackgroundCallback(callback) {
    this.listCreateBackgroundCallback = callback;
    return this;
  },
  setButtonClickCallback(callback) {
    this.listOnButtonClick = callback;
    return this;
  },
  setButtonOverCallback(callback) {
    this.listOnButtonOver = callback;
    return this;
  },
  setButtonOutCallback(callback) {
    this.listOnButtonOut = callback;
    return this;
  },
  setListExpandDirection(direction) {
    if (typeof direction === 'string') {
      direction = ListExpandDirections[direction];
    }
    this.listExpandDirection = direction;
    return this;
  },
  setListEaseInDuration(duration) {
    if (duration === undefined) {
      duration = 0;
    }
    this.listEaseInDuration = duration;
    return this;
  },
  setListEaseOutDuration(duration) {
    if (duration === undefined) {
      duration = 0;
    }
    this.listEaseOutDuration = duration;
    return this;
  },
  setListTransitInCallback(callback) {
    this.listTransitInCallback = callback;
    // callback = function(gameObject, duration) {}
    return this;
  },
  settListTransitOutCallback(callback) {
    this.listTransitOutCallback = callback;
    // callback = function(gameObject, duration) {}
    return this;
  },
  setListBounds(bounds) {
    this.listBounds = bounds;
    return this;
  },
  setListWidth(width) {
    this.listWidth = width;
    return this;
  },
  setListHeight(height) {
    this.listHeight = height;
    return this;
  },
  setListSize(width, height) {
    this.setListWidth(width).setListHeight(height);
    return this;
  },
  setListAlignmentMode(mode) {
    this.listAlignMode = mode;
    return this;
  },
  setListSpace(space) {
    if (space === undefined) {
      space = {};
    }
    this.listSpace = space;
    return this;
  },
  setListDraggable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.listDraggable = enable;
    return this;
  }
};
const ListExpandDirections = {
  down: 0,
  up: 1
};
var _default = methods;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/methods/listpanel/CreateListPanel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Buttons = _interopRequireDefault(require("../../../buttons/Buttons.js"));
var _FixWidthButtons = _interopRequireDefault(require("../../../fixwidthbuttons/FixWidthButtons.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateListPanel = function () {
  var scene = this.scene;
  var background;
  var createBackgroundCallback = this.listCreateBackgroundCallback;
  if (createBackgroundCallback) {
    background = createBackgroundCallback.call(this, scene);
    scene.add.existing(background);
  }
  var buttons = [];
  var createButtonCallback = this.listCreateButtonCallback;
  if (createButtonCallback) {
    var options = this.options;
    for (var i = 0, cnt = options.length; i < cnt; i++) {
      var button = createButtonCallback.call(this, scene, options[i], i, options);
      scene.add.existing(button);
      buttons.push(button);
    }
  }
  var width = this.listWidth;
  if (width === undefined) {
    if (this.listAlignMode === 'text') {
      width = this.getElement('text').width;
    } else {
      width = this.width;
    }
  }
  var height = this.listHeight;
  var listPanel;
  if (!this.listWrapEnable) {
    listPanel = new _Buttons.default(scene, {
      width: width,
      height: height,
      orientation: 'y',
      background: background,
      buttons: buttons,
      space: this.listSpace,
      draggable: this.listDraggable
    });
  } else {
    listPanel = new _FixWidthButtons.default(scene, {
      width: width,
      height: height,
      background: background,
      buttons: buttons,
      space: this.listSpace,
      draggable: this.listDraggable
    });
  }
  scene.add.existing(listPanel);
  return listPanel;
};
var _default = CreateListPanel;
exports.default = _default;
},{"../../../buttons/Buttons.js":"node_modules/phaser3-rex-plugins/templates/ui/buttons/Buttons.js","../../../fixwidthbuttons/FixWidthButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthbuttons/FixWidthButtons.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/scale/ScaleDown.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Scale = _interopRequireDefault(require("./Scale.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ScaleDown = function (gameObject, duration, orientation, ease, scale) {
  if (ease === undefined) {
    ease = 'Linear';
  }
  var config = {};
  config.mode = 0;
  switch (orientation) {
    case 0:
    case 'x':
      config.end = {
        x: 0
      };
      break;
    case 1:
    case 'y':
      config.end = {
        y: 0
      };
      break;
    default:
      config.end = 0;
      break;
  }
  config.duration = duration;
  config.ease = ease;
  if (scale === undefined) {
    scale = new _Scale.default(gameObject, config);
  } else {
    scale.resetFromJSON(config);
  }
  scale.restart();
  return scale;
};
var _default = ScaleDown;
exports.default = _default;
},{"./Scale.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/scale/Scale.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/object/GetValueFromAliasKeys.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _HasValue = _interopRequireDefault(require("./HasValue.js"));
var _GetValue = _interopRequireDefault(require("./GetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetValueFromAliasKeys = function (source, key0, key1, key2, defaultValue) {
  if ((0, _HasValue.default)(source, key0)) {
    return (0, _GetValue.default)(source, key0);
  } else if (key1 && (0, _HasValue.default)(source, key1)) {
    return (0, _GetValue.default)(source, key1);
  } else if (key2 && (0, _HasValue.default)(source, key2)) {
    return (0, _GetValue.default)(source, key2);
  } else {
    return defaultValue;
  }
};
var _default = GetValueFromAliasKeys;
exports.default = _default;
},{"./HasValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/HasValue.js","./GetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/GetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/dropdown/SetPosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetValueFromAliasKeys = _interopRequireDefault(require("../../utils/object/GetValueFromAliasKeys.js"));
var _GetViewport = _interopRequireDefault(require("../../utils/system/GetViewport.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var SetPosition = function (gameObject, config) {
  var expandDirection = GetValue(config, 'expandDirection', undefined);
  if (typeof expandDirection === 'string') {
    expandDirection = ExpandDirections[expandDirection];
  }
  var alignTargetX = (0, _GetValueFromAliasKeys.default)(config, 'alignTarget', 'alignTargetX');
  var alignTargetY = GetValue(config, 'alignTargetY', alignTargetX);
  var alignOffsetX = GetValue(config, 'alignOffsetX', 0);
  var alignOffsetY = GetValue(config, 'alignOffsetY', 0);
  var positionBounds = GetValue(config, 'bounds');

  // Expand direction
  var isExpandDown = expandDirection === 0;
  var isExpandUp = expandDirection === 1;
  var flexExpand = !isExpandDown && !isExpandUp;
  var originY = isExpandDown || flexExpand ? 0 : 1;
  gameObject.setOrigin(0, originY);
  var x = alignTargetX.getTopLeft().x;
  var y = alignTargetY.getBottomLeft().y;
  gameObject.setPosition(x + alignOffsetX, y + alignOffsetY);
  var bounds = positionBounds;
  if (!bounds) {
    bounds = (0, _GetViewport.default)(gameObject.scene);
  }
  if (flexExpand && gameObject.getBottomLeft().y > bounds.bottom) {
    // Out of bounds, can't put list-panel below parent
    y = alignTargetY.getTopLeft().y;
    gameObject.setOrigin(0, 1).setPosition(x + alignOffsetX, y + alignOffsetY);
  }
};
const ExpandDirections = {
  down: 0,
  up: 1
};
var _default = SetPosition;
exports.default = _default;
},{"../../utils/object/GetValueFromAliasKeys.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/GetValueFromAliasKeys.js","../../utils/system/GetViewport.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetViewport.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/dropdown/DropDown.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OpenCloseTransition = _interopRequireDefault(require("../openclosetransition/OpenCloseTransition.js"));
var _popup = _interopRequireDefault(require("../../popup.js"));
var _ScaleDown = _interopRequireDefault(require("../scale/ScaleDown.js"));
var _SetPosition = _interopRequireDefault(require("./SetPosition.js"));
var _IsPointInBounds = _interopRequireDefault(require("../../utils/bounds/IsPointInBounds.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class DropDown extends _OpenCloseTransition.default {
  constructor(gameObject, config) {
    if (config === undefined) {
      config = {};
    }
    if (config.transitIn == null) {
      config.transitIn = function (gameObject, duration) {
        (0, _popup.default)(gameObject, duration, 'y', 'Cubic');
      };
    }
    if (config.transitOut == null) {
      config.transitOut = function (gameObject, duration) {
        // Don't destroy here
        (0, _ScaleDown.default)(gameObject, duration, 'y', 'Linear');
      };
    }
    config.manualClose = true;
    config.clickOutsideClose = true;
    config.destroy = true;
    super(gameObject, config);
    // this.parent = gameObject;
    // this.scene

    (0, _SetPosition.default)(gameObject, config);
    if (gameObject.isRexSizer) {
      gameObject.layout();
    }

    // Close conditions:
    var touchOutsideClose = GetValue(config, 'touchOutsideClose', false);
    var anyTouchClose = GetValue(config, 'anyTouchClose', false);
    if (anyTouchClose) {
      touchOutsideClose = false;
    }

    // Registet touch-close event after opened
    if (anyTouchClose) {
      this.once('open', this.anyTouchClose, this);
    } else if (touchOutsideClose) {
      this.once('open', this.touchOutsideClose, this);
    }
    this.requestOpen();
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }

    // Registered in touchOutsideClose()
    this.scene.input.off('pointerup', this.touchCloseCallback, this);
    super.shutdown(fromScene);
  }
  touchOutsideClose() {
    this.scene.input.on('pointerup', this.touchCloseCallback, this);
    this.clickOutsideTest = true;
    return this;
  }
  anyTouchClose() {
    this.scene.input.once('pointerup', this.touchCloseCallback, this);
    return this;
  }
  touchCloseCallback(pointer) {
    if (this.clickOutsideTest && (0, _IsPointInBounds.default)(this.parent, pointer.worldX, pointer.worldY)) {
      return;
    }
    this.requestClose();
  }
  onOpen() {
    this.emit('open', this.parent, this);
    super.onOpen();
  }
  onClose() {
    this.emit('close', this.parent, this);
    super.onClose();
  }
}
var _default = DropDown;
exports.default = _default;
},{"../openclosetransition/OpenCloseTransition.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/OpenCloseTransition.js","../../popup.js":"node_modules/phaser3-rex-plugins/plugins/popup.js","../scale/ScaleDown.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/scale/ScaleDown.js","./SetPosition.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/dropdown/SetPosition.js","../../utils/bounds/IsPointInBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/bounds/IsPointInBounds.js"}],"node_modules/phaser3-rex-plugins/plugins/dropdown.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DropDown = _interopRequireDefault(require("./behaviors/dropdown/DropDown.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _DropDown.default;
exports.default = _default;
},{"./behaviors/dropdown/DropDown.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/dropdown/DropDown.js"}],"node_modules/phaser3-rex-plugins/templates/ui/dropdown/DropDown.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _dropdown = _interopRequireDefault(require("../../../plugins/dropdown.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _dropdown.default;
exports.default = _default;
},{"../../../plugins/dropdown.js":"node_modules/phaser3-rex-plugins/plugins/dropdown.js"}],"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/methods/listpanel/OpenListPanel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateListPanel = _interopRequireDefault(require("./CreateListPanel.js"));
var _DropDown = _interopRequireDefault(require("../../../dropdown/DropDown.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OpenListPanel = function () {
  if (this.listPanel) {
    return this;
  }
  var listPanel = _CreateListPanel.default.call(this);

  // Button over/out
  listPanel.on('button.over', function (button, index, pointer, event) {
    if (this.listOnButtonOver) {
      this.listOnButtonOver.call(this, button, index, pointer, event);
    }
    this.emit('button.over', this, listPanel, button, index, pointer, event);
  }, this).on('button.out', function (button, index, pointer, event) {
    if (this.listOnButtonOut) {
      this.listOnButtonOut.call(this, button, index, pointer, event);
    }
    this.emit('button.out', this, listPanel, button, index, pointer, event);
  }, this);
  var dropDownBehavior = new _DropDown.default(listPanel, {
    // Transition
    duration: {
      in: this.listEaseInDuration,
      out: this.listEaseOutDuration
    },
    transitIn: this.listTransitInCallback,
    transitOut: this.listTransitOutCallback,
    // Position
    expandDirection: this.listExpandDirection,
    alignTargetX: this.getElement(this.listAlignMode),
    alignTargetY: this,
    bounds: this.listBounds,
    // Close condition
    anyTouchClose: true
  }).on('open', function () {
    // After popping up
    // Can click
    listPanel.on('button.click', function (button, index, pointer, event) {
      if (this.listOnButtonClick) {
        this.listOnButtonClick.call(this, button, index, pointer, event);
      }
      this.emit('button.click', this, listPanel, button, index, pointer, event);
    }, this);
    this.emit('list.open', this, listPanel);
  }, this).on('close', function () {
    this.listPanel = undefined;
    this.dropDownBehavior = undefined;
  }, this);
  this.listPanel = listPanel;
  this.dropDownBehavior = dropDownBehavior;
  this.pin(listPanel);
  return this;
};
var _default = OpenListPanel;
exports.default = _default;
},{"./CreateListPanel.js":"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/methods/listpanel/CreateListPanel.js","../../../dropdown/DropDown.js":"node_modules/phaser3-rex-plugins/templates/ui/dropdown/DropDown.js"}],"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/methods/listpanel/CloseListPanel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var CloseListPanel = function () {
  if (!this.dropDownBehavior) {
    return this;
  }
  this.dropDownBehavior.requestClose();
  return this;
};
var _default = CloseListPanel;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/methods/listpanel/ToggleListPanel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ToggleListPanel = function () {
  if (!this.listPanel) {
    this.openListPanel();
  } else {
    this.closeListPanel();
  }
  return this;
};
var _default = ToggleListPanel;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ConfigurationMethods = _interopRequireDefault(require("./listpanel/ConfigurationMethods.js"));
var _OpenListPanel = _interopRequireDefault(require("./listpanel/OpenListPanel.js"));
var _CloseListPanel = _interopRequireDefault(require("./listpanel/CloseListPanel.js"));
var _ToggleListPanel = _interopRequireDefault(require("./listpanel/ToggleListPanel.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {
  openListPanel: _OpenListPanel.default,
  closeListPanel: _CloseListPanel.default,
  toggleListPanel: _ToggleListPanel.default
};
Object.assign(Methods, _ConfigurationMethods.default);
var _default = Methods;
exports.default = _default;
},{"./listpanel/ConfigurationMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/methods/listpanel/ConfigurationMethods.js","./listpanel/OpenListPanel.js":"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/methods/listpanel/OpenListPanel.js","./listpanel/CloseListPanel.js":"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/methods/listpanel/CloseListPanel.js","./listpanel/ToggleListPanel.js":"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/methods/listpanel/ToggleListPanel.js"}],"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/DropDownList.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Label = _interopRequireDefault(require("../label/Label.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class DropDownList extends _Label.default {
  constructor(scene, config) {
    super(scene, config);
    this.type = 'rexDropDownList';
    this.timer = undefined;
    this.setOptions(GetValue(config, 'options'));
    var listConfig = GetValue(config, 'list');
    this.setWrapEnable(GetValue(listConfig, 'wrap', false));
    this.setCreateButtonCallback(GetValue(listConfig, 'createButtonCallback'));
    this.setCreateListBackgroundCallback(GetValue(listConfig, 'createBackgroundCallback'));
    this.setButtonClickCallback(GetValue(listConfig, 'onButtonClick'));
    this.setButtonOverCallback(GetValue(listConfig, 'onButtonOver'));
    this.setButtonOutCallback(GetValue(listConfig, 'onButtonOut'));
    this.setListExpandDirection(GetValue(listConfig, 'expandDirection'));
    this.setListEaseInDuration(GetValue(listConfig, 'easeIn', 500));
    this.setListEaseOutDuration(GetValue(listConfig, 'easeOut', 100));
    this.setListTransitInCallback(GetValue(listConfig, 'transitIn'));
    this.settListTransitOutCallback(GetValue(listConfig, 'transitOut'));
    this.setListSize(GetValue(listConfig, 'width'), GetValue(listConfig, 'height'));
    this.setListAlignmentMode(GetValue(listConfig, 'alignParent', 'text'));
    this.setListBounds(GetValue(listConfig, 'bounds'));
    this.setListSpace(GetValue(listConfig, 'space'));
    this.setListDraggable(GetValue(listConfig, 'draggable', false));
    this.setValueChangeCallback(GetValue(config, 'setValueCallback'), GetValue(config, 'setValueCallbackScope'));
    this.setValue(GetValue(config, 'value'));
    this.onClick(this.toggleListPanel, this);
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    if (this.listPanel) {
      this.listPanel.destroy(fromScene);
      this.listPanel = undefined;
    }
    super.destroy(fromScene);
  }
  setOptions(options) {
    if (options === undefined) {
      options = [];
    }
    this.options = options;
    return this;
  }
  setValueChangeCallback(callback, scope) {
    this.valueChangeCallback = callback;
    this.valueChangeCallbackScope = scope;
    return this;
  }
  setValue(value) {
    this.value = value;
    return this;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this._value === value) {
      return;
    }
    var previousValue = this._value;
    this._value = value;
    var callback = this.valueChangeCallback,
      scope = this.valueChangeCallbackScope;
    if (callback) {
      if (scope) {
        callback.call(scope, this, value, previousValue);
      } else {
        callback(this, value, previousValue);
      }
    }
  }
}
Object.assign(DropDownList.prototype, _Methods.default);
var _default = DropDownList;
exports.default = _default;
},{"../label/Label.js":"node_modules/phaser3-rex-plugins/templates/ui/label/Label.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/methods/Methods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DropDownList = _interopRequireDefault(require("./DropDownList.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('dropDownList', function (config) {
  var gameObject = new _DropDownList.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.DropDownList', _DropDownList.default);
var _default = _DropDownList.default;
exports.default = _default;
},{"./DropDownList.js":"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/DropDownList.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/textpage/methods/GetLines.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetTextObjectType = require("../../../utils/text/GetTextObjectType.js");
var GetLines = function (startLineIndex, endLineIdx) {
  if (startLineIndex === undefined) {
    startLineIndex = this.startLineIndex;
  }
  if (endLineIdx === undefined) {
    endLineIdx = startLineIndex + this.pageLinesCount;
  }
  var text;
  switch (this.textObjectType) {
    case _GetTextObjectType.TextType:
    case _GetTextObjectType.BitmapTextType:
      text = this.lines.slice(startLineIndex, endLineIdx).join('\n');
      break;
    case _GetTextObjectType.TagTextType:
      var startIdx = this.lines.getLineStartIndex(startLineIndex);
      var endIdx = this.lines.getLineEndIndex(endLineIdx - 1);
      text = this.lines.getSliceTagText(startIdx, endIdx, true);
      break;
  }
  return text;
};
var _default = GetLines;
exports.default = _default;
},{"../../../utils/text/GetTextObjectType.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/GetTextObjectType.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/textpage/methods/SetContentMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextToLines = _interopRequireDefault(require("../../../utils/text/TextToLines.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var GetString = function (text) {
  if (Array.isArray(text)) {
    text = text.join('\n');
  } else if (typeof text === 'number') {
    text = text.toString();
  }
  return text;
};
var _default = {
  clearText() {
    this.sections.length = 0;
    this.pageStartIndexes.length = 0;
    this.lines.length = 0;
    return this;
  },
  appendPage(text) {
    var pageStartIndex = this.totalLinesCount;
    this.sections.push(GetString(text));
    var text = this.sections.join('\n');
    this.lines = (0, _TextToLines.default)(this.parent, text, this.lines);
    var newLinesCount = this.totalLinesCount - pageStartIndex;
    var pageCount = Math.ceil(newLinesCount / this.pageLinesCount);
    for (var i = 0; i < pageCount; i++) {
      this.pageStartIndexes.push(pageStartIndex + i * this.pageLinesCount);
    }
    return this;
  },
  setText(text, resetPageIdx) {
    if (resetPageIdx === undefined) {
      resetPageIdx = true;
    }
    if (resetPageIdx) {
      this.resetPageIdx();
    }
    this.clearText();
    var sections = GetString(text).split(this.pageBreak);
    // if (sections[sections.length - 1] === '') { // Last section is an empty string
    //     sections.length -= 1;
    // }

    for (var i = 0, cnt = sections.length; i < cnt; i++) {
      this.appendPage(sections[i]);
    }
    return this;
  },
  appendText(text) {
    var content = this.content + GetString(text);
    this.setText(content, false);
    return this;
  }
};
exports.default = _default;
},{"../../../utils/text/TextToLines.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/TextToLines.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/textpage/methods/GetPageMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Clamp = Phaser.Math.Clamp;
var _default = {
  getPage(idx) {
    if (idx === undefined) {
      idx = this.pageIndex;
    }
    return this.setPageIndex(idx).getLines(this.startLineIndex, this.endLineIndex);
  },
  getNextPage() {
    return this.getPage(this.pageIndex + 1);
  },
  getPreviousPage() {
    return this.getPage(this.pageIndex - 1);
  },
  resetPageIdx() {
    this.pageIndex = -1;
    return this;
  },
  setPageIndex(idx) {
    idx = Clamp(idx, 0, this.pageCount - 1);
    this.pageIndex = idx;
    this.startLineIndex = this.pageStartIndexes[idx];
    this.endLineIndex = this.pageStartIndexes[idx + 1];
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/textpage/methods/ShowMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SetNoWrapText = _interopRequireDefault(require("../../../utils/text/SetNoWrapText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  showPage(idx) {
    this.displayText(this.getPage(idx));
    return this;
  },
  showNextPage() {
    this.displayText(this.getNextPage());
    return this;
  },
  showPreviousPage() {
    this.displayText(this.getPreviousPage());
    return this;
  },
  show() {
    this.displayText(this.getLines());
    return this;
  },
  showNextLine() {
    this.displayText(this.setStartLineIndex(this.startLineIndex + 1).getLines());
    return this;
  },
  showPreviousLine() {
    this.displayText(this.setStartLineIndex(this.startLineIndex - 1).getLines());
    return this;
  },
  displayText(text) {
    (0, _SetNoWrapText.default)(this.parent, text);
  }
};
exports.default = _default;
},{"../../../utils/text/SetNoWrapText.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/SetNoWrapText.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/textpage/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetLines = _interopRequireDefault(require("./GetLines.js"));
var _SetContentMethods = _interopRequireDefault(require("./SetContentMethods.js"));
var _GetPageMethods = _interopRequireDefault(require("./GetPageMethods.js"));
var _ShowMethods = _interopRequireDefault(require("./ShowMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {
  getLines: _GetLines.default
};
Object.assign(Methods, _SetContentMethods.default, _GetPageMethods.default, _ShowMethods.default);
var _default = Methods;
exports.default = _default;
},{"./GetLines.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textpage/methods/GetLines.js","./SetContentMethods.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textpage/methods/SetContentMethods.js","./GetPageMethods.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textpage/methods/GetPageMethods.js","./ShowMethods.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textpage/methods/ShowMethods.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/textpage/TextPage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
var _GetTextObjectType = _interopRequireWildcard(require("../../utils/text/GetTextObjectType.js"));
var _TextToLines = _interopRequireDefault(require("../../utils/text/TextToLines.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const Clamp = Phaser.Math.Clamp;
class TextPage extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject, {
      eventEmitter: false
    });
    // No event emitter
    // this.parent = gameObject;

    this.textObjectType = (0, _GetTextObjectType.default)(this.parent);
    this.pageStartIndexes = [];

    // Text object : array of string
    // Tag text object : pens-manager
    // Bitmap text object : array of string
    this.lines = (0, _TextToLines.default)(this.parent, '');
    this.sections = [];
    this.resetFromJSON(config);
  }
  resetFromJSON(o) {
    this.setMaxLines(GetValue(o, 'maxLines', undefined));
    this.setPageBreak(GetValue(o, 'pageBreak', '\f\n'));
    this.setText(GetValue(o, 'text', ''));
    this.setStartLineIndex(GetValue(o, 'start', 0));
    this.setPageIndex(GetValue(o, 'page', -1));
    return this;
  }
  toJSON() {
    return {
      maxLines: this.maxLines,
      text: this.content,
      start: this.startLineIndex,
      page: this.pageIndex,
      pageBreak: this.pageBreak
    };
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }
    switch (this.textObjectType) {
      case _GetTextObjectType.TextType:
        this.lines.length = 0;
        break;
      case _GetTextObjectType.TagTextType:
        this.lines.destroy();
        break;
      case _GetTextObjectType.BitmapTextType:
        this.lines.length = 0;
        break;
    }
    this.pageStartIndexes.length = 0;
    this.sections.length = 0;
    this.lines = undefined;
    this.pageStartIndexes = undefined;
    this.sections = undefined;
    super.shutdown(fromScene);
  }
  setMaxLines(maxLines) {
    this.maxLines = maxLines;
    return this;
  }
  setPageBreak(pageBreak) {
    this.pageBreak = pageBreak;
    return this;
  }
  get pageCount() {
    return this.pageStartIndexes.length;
  }
  get isFirstPage() {
    return this.pageIndex <= 0;
  }
  get isLastPage() {
    return this.pageIndex >= this.pageCount - 1;
  }
  get totalLinesCount() {
    return this.lines ? this.lines.length : 0;
  }
  get startLineIndex() {
    return this._startLineIndex;
  }
  set startLineIndex(value) {
    value = Clamp(value, 0, this.totalLinesCount - 1);
    this._startLineIndex = value;
  }
  setStartLineIndex(idx) {
    this.startLineIndex = idx;
    return this;
  }
  get pageLinesCount() {
    if (this.maxLines !== undefined) {
      return this.maxLines;
    } else {
      var count;
      switch (this.textObjectType) {
        case _GetTextObjectType.TextType:
        case _GetTextObjectType.TagTextType:
          var maxLines = this.parent.style.maxLines;
          if (maxLines > 0) {
            count = maxLines;
          } else {
            count = this.totalLinesCount;
          }
          break;
        case _GetTextObjectType.BitmapTextType:
          count = this.totalLinesCount;
          break;
      }
      return count;
    }
  }
  get content() {
    return this.sections.join(this.pageBreak);
  }
}
Object.assign(TextPage.prototype, _Methods.default);
var _default = TextPage;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js","../../utils/text/GetTextObjectType.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/GetTextObjectType.js","../../utils/text/TextToLines.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/TextToLines.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textpage/methods/Methods.js"}],"node_modules/phaser3-rex-plugins/plugins/textpage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextPage = _interopRequireDefault(require("./behaviors/textpage/TextPage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _TextPage.default;
exports.default = _default;
},{"./behaviors/textpage/TextPage.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textpage/TextPage.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/text/GetWrapText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetTextObjectType = _interopRequireWildcard(require("./GetTextObjectType.js"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var GetWrapText = function (textObject, text) {
  var textObjectType = (0, _GetTextObjectType.default)(textObject);
  switch (textObjectType) {
    case _GetTextObjectType.TextType:
      textObject.style.syncFont(textObject.canvas, textObject.context);
      text = textObject.runWordWrap(text);
      break;
    case _GetTextObjectType.TagTextType:
      text = textObject.getText(text, undefined, undefined, true);
      break;
    case _GetTextObjectType.BitmapTextType:
      text = textObject.setText(text).getTextBounds().wrappedText;
      break;
  }
  return text;
};
var _default = GetWrapText;
exports.default = _default;
},{"./GetTextObjectType.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/GetTextObjectType.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/texttyping/TextTyping.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
var _GetWrapText = _interopRequireDefault(require("../../utils/text/GetWrapText.js"));
var _SetNoWrapText = _interopRequireDefault(require("../../utils/text/SetNoWrapText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetFastValue = Phaser.Utils.Objects.GetFastValue;
const GetValue = Phaser.Utils.Objects.GetValue;
class TextTyping extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;

    this.timer = null;
    this.resetFromJSON(config);
  }
  resetFromJSON(o) {
    this.setTextWrapEnable(GetValue(o, 'wrap', false));
    this.setTypeMode(GetValue(o, 'typeMode', 0));
    this.setTypingSpeed(GetValue(o, 'speed', 333));
    this.setTextCallback = GetFastValue(o, 'setTextCallback', null);
    this.setTextCallbackScope = GetFastValue(o, 'setTextCallbackScope', null);
    this.setTypingContent(GetFastValue(o, 'text', ''));
    this.typingIdx = GetFastValue(o, 'typingIdx', 0);
    this.insertIdx = GetFastValue(o, 'insertIdx', null);
    var elapsed = GetFastValue(o, 'elapsed', null);
    if (elapsed !== null) {
      this.start(undefined, undefined, this.typingIdx, elapsed);
    }
    return this;
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }
    this.freeTimer();
    super.shutdown(fromScene);
  }
  setTypeMode(m) {
    if (typeof m === 'string') {
      m = TYPEMODE[m];
    }
    this.typeMode = m;
    return this;
  }
  setTypeSpeed(speed) {
    this.speed = speed;
    return this;
  }
  setTypingSpeed(speed) {
    this.speed = speed;
    return this;
  }
  setTextWrapEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.textWrapEnable = enable;
    return this;
  }
  set text(value) {
    var text = TransferText(value);
    if (this.textWrapEnable) {
      text = (0, _GetWrapText.default)(this.parent, text);
    }
    this._text = text;
  }
  get text() {
    return this._text;
  }
  get isTyping() {
    return this.getTimer() !== null;
  }
  get isLastChar() {
    return this.typingIdx === this.textLen;
  }
  start(text, speed, startIdx, timerStartAt) {
    if (text !== undefined) {
      this.setTypingContent(text);
    }
    if (speed !== undefined) {
      this.speed = speed;
    }
    if (startIdx === undefined) {
      startIdx = 0;
    }
    this.typingIdx = startIdx + 1;
    if (this.speed === 0) {
      this.stop(true);
    } else {
      this.setText('');
      this.startTimer(timerStartAt);
    }
    return this;
  }
  appendText(text) {
    var newText = this.text.concat(TransferText(text));
    if (this.isTyping) {
      this.setTypingContent(newText);
    } else {
      this.start(newText, undefined, this.textLen);
    }
    return this;
  }
  stop(showAllText) {
    var timer = this.getTimer();
    if (timer) {
      this.freeTimer();
    }
    if (showAllText) {
      this.typingIdx = this.textLen;
      this.setText(this.text);
      this.emit('type');
      this.emit('complete', this, this.parent);
    }
    return this;
  }
  pause() {
    var timer = this.getTimer();
    if (timer) {
      timer.paused = true;
    }
    return this;
  }
  resume() {
    var timer = this.getTimer();
    if (timer) {
      timer.paused = false;
    }
    return this;
  }
  setTypingContent(text) {
    this.text = text;
    this.textLen = this.getTextLength(this.text);
    return this;
  }
  onTyping() {
    var newText = this.getTypingString(this.text, this.typingIdx, this.textLen, this.typeMode);
    this.setText(newText);
    this.emit('type');
    if (this.isLastChar) {
      this.freeTimer();
      this.emit('complete', this, this.parent);
    } else {
      this.timer.delay = this.speed; // delay of next typing            
      this.typingIdx++;
    }
  }
  getTypingString(text, typeIdx, textLen, typeMode) {
    var result;
    if (typeMode === 0) {
      //left-to-right
      var startIdx = 0;
      var endIdx = typeIdx;
      this.insertIdx = endIdx;
      result = this.getSubString(text, startIdx, endIdx);
    } else if (typeMode === 1) {
      //right-to-left
      var endIdx = textLen;
      var startIdx = endIdx - typeIdx;
      this.insertIdx = 0;
      result = this.getSubString(text, startIdx, endIdx);
    } else if (typeMode === 2) {
      //middle-to-sides
      var midIdx = textLen / 2;
      var startIdx = Math.floor(midIdx - typeIdx / 2);
      var endIdx = startIdx + typeIdx;
      this.insertIdx = typeIdx % 2 ? typeIdx : 0;
      result = this.getSubString(text, startIdx, endIdx);
    } else if (typeMode === 3) {
      //sides-to-middle
      var lowerLen = Math.floor(typeIdx / 2);
      var lowerResult;
      if (lowerLen > 0) {
        var endIdx = textLen;
        var startIdx = endIdx - lowerLen;
        lowerResult = this.getSubString(text, startIdx, endIdx);
      } else {
        lowerResult = "";
      }
      var upperLen = typeIdx - lowerLen;
      var upperResult;
      if (upperLen > 0) {
        var startIdx = 0;
        var endIdx = startIdx + upperLen;
        this.insertIdx = endIdx;
        upperResult = this.getSubString(text, startIdx, endIdx);
      } else {
        upperResult = "";
        this.insertIdx = 0;
      }
      result = upperResult + lowerResult;
    }
    return result;
  }
  startTimer(timerStartAt) {
    if (this.timer) {
      this.freeTimer();
    }
    var delay, startAt;
    if (timerStartAt === undefined) {
      delay = 0;
      startAt = 0;
    } else {
      delay = this.speed;
      startAt = timerStartAt;
    }
    this.timer = this.scene.time.addEvent({
      delay: 0,
      startAt: startAt,
      loop: true,
      callback: this.onTyping,
      callbackScope: this
    });
    return this;
  }
  getTimer() {
    return this.timer;
  }
  freeTimer() {
    if (this.timer) {
      this.timer.remove();
      this.timer = null;
    }
    return this;
  }
  setText(text) {
    if (this.setTextCallback) {
      if (this.setTextCallbackScope) {
        text = this.setTextCallback.call(this.setTextCallbackScope, text, this.isLastChar, this.insertIdx);
      } else {
        text = this.setTextCallback(text, this.isLastChar, this.insertIdx);
      }
    }
    if (this.textWrapEnable) {
      (0, _SetNoWrapText.default)(this.parent, text);
    } else {
      this.parent.setText(text);
    }
  }
  getTextLength(text) {
    var gameObject = this.parent;
    var len;
    if (gameObject.getPlainText) {
      len = gameObject.getPlainText(text).length;
    } else {
      len = text.length;
    }
    return len;
  }
  getSubString(text, startIdx, endIdx) {
    var gameObject = this.parent;
    var result;
    if (gameObject.getSubString) {
      result = gameObject.getSubString(text, startIdx, endIdx);
    } else {
      result = text.slice(startIdx, endIdx);
    }
    return result;
  }
}
var TransferText = function (text) {
  if (Array.isArray(text)) {
    text = text.join('\n');
  } else if (typeof text === 'number') {
    text = text.toString();
  }
  return text;
};
const TYPEMODE = {
  'left-to-right': 0,
  'right-to-left': 1,
  'middle-to-sides': 2,
  'sides-to-middle': 3
};
var _default = TextTyping;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js","../../utils/text/GetWrapText.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/GetWrapText.js","../../utils/text/SetNoWrapText.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/SetNoWrapText.js"}],"node_modules/phaser3-rex-plugins/plugins/texttyping.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextTyping = _interopRequireDefault(require("./behaviors/texttyping/TextTyping.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _TextTyping.default;
exports.default = _default;
},{"./behaviors/texttyping/TextTyping.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/texttyping/TextTyping.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textbox/TextBox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Label = _interopRequireDefault(require("../label/Label.js"));
var _textpage = _interopRequireDefault(require("../../../plugins/textpage.js"));
var _texttyping = _interopRequireDefault(require("../../../plugins/texttyping.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class TextBox extends _Label.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {
        text: createDefaultTextObject(scene)
      };
    }
    super(scene, config);
    this.type = 'rexTextBox';
    var text = this.childrenMap.text;
    this.page = new _textpage.default(text, GetValue(config, 'page', undefined));
    this.typing = new _texttyping.default(text, GetValue(config, 'typing', config.type));
    this.typing.on('complete', this.onPageEnd, this).on('type', this.onType, this);
    this.textWidth = text.width;
    this.textHeight = text.height;
  }
  start(text, speed) {
    this.page.setText(text);
    if (speed !== undefined) {
      this.setTypingSpeed(speed);
    }
    this.typeNextPage();
    return this;
  }
  typeNextPage() {
    if (!this.isLastPage) {
      var txt = this.page.getNextPage();
      this.typing.start(txt);
    } else {
      this.emit('complete');
    }
    return this;
  }
  pause() {
    this.typing.pause();
    return this;
  }
  resume() {
    this.typing.resume();
    return this;
  }
  stop(showAllText) {
    this.typing.stop(showAllText);
    return this;
  }
  setTypeSpeed(speed) {
    this.typing.setTypingSpeed(speed);
    return this;
  }
  setTypingSpeed(speed) {
    this.typing.setTypingSpeed(speed);
    return this;
  }
  get isTyping() {
    return this.typing.isTyping;
  }
  get isLastPage() {
    return this.page.isLastPage;
  }
  get isFirstPage() {
    return this.page.isFirstPage;
  }
  get pageCount() {
    return this.page.pageCount;
  }
  get pageIndex() {
    return this.page.pageIndex;
  }
  onType() {
    var text = this.childrenMap.text;
    if (this.textWidth !== text.width || this.textHeight !== text.height) {
      this.textWidth = text.width;
      this.textHeight = text.height;
      this.getTopmostSizer().layout();
    }
    this.emit('type');
  }
  onPageEnd() {
    this.emit('pageend');
    if (this.isLastPage) {
      this.emit('complete');
    }
  }
}
var createDefaultTextObject = function (scene) {
  return scene.add.text(0, 0, '', {
    wordWrap: {
      width: 200
    },
    maxLines: 5
  });
};
var _default = TextBox;
exports.default = _default;
},{"../label/Label.js":"node_modules/phaser3-rex-plugins/templates/ui/label/Label.js","../../../plugins/textpage.js":"node_modules/phaser3-rex-plugins/plugins/textpage.js","../../../plugins/texttyping.js":"node_modules/phaser3-rex-plugins/plugins/texttyping.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textbox/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextBox = _interopRequireDefault(require("./TextBox.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('textBox', function (config) {
  var gameObject = new _TextBox.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.TextBox', _TextBox.default);
var _default = _TextBox.default;
exports.default = _default;
},{"./TextBox.js":"node_modules/phaser3-rex-plugins/templates/ui/textbox/TextBox.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/numberbar/NumberBar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer.js"));
var _AddChildMask = _interopRequireDefault(require("../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js"));
var _Slider = _interopRequireDefault(require("../slider/Slider.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class NumberBar extends _Sizer.default {
  constructor(scene, config) {
    // Create sizer
    super(scene, config);
    this.type = 'rexNumberBar';

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var icon = GetValue(config, 'icon', undefined);
    var iconMask = GetValue(config, 'iconMask', undefined);
    var sliderConfig = GetValue(config, 'slider', undefined);
    var text = GetValue(config, 'text', undefined);

    // Space
    var iconSpace = GetValue(config, 'space.icon', 0);
    var sliderSpace = GetValue(config, 'space.slider', 0);
    if (background) {
      this.addBackground(background);
    }
    if (icon) {
      var padding;
      if (this.orientation === 0) {
        if (sliderConfig || text) {
          padding = {
            right: iconSpace
          };
        }
      } else {
        if (sliderConfig || text) {
          padding = {
            bottom: iconSpace
          };
        }
      }
      this.add(icon, {
        proportion: 0,
        align: 'center',
        padding: padding
      });
      if (iconMask) {
        iconMask = _AddChildMask.default.call(this, icon, icon, 1); // Circle mask
      }
    }

    var slider;
    if (sliderConfig) {
      sliderConfig.orientation = this.orientation;
      sliderConfig.eventEmitter = this;
      sliderConfig.value = null;
      if (!sliderConfig.hasOwnProperty('input')) {
        sliderConfig.input = -1;
      }
      slider = new _Slider.default(scene, sliderConfig);
      scene.add.existing(slider);
      var padding;
      if (this.orientation === 0) {
        if (text) {
          padding = {
            right: sliderSpace
          };
        }
      } else {
        if (text) {
          padding = {
            bottom: sliderSpace
          };
        }
      }
      var proportion;
      if (this.orientation === 0) {
        var sliderWidth = GetValue(sliderConfig, 'width', undefined);
        proportion = sliderWidth === undefined ? 1 : 0;
      } else {
        var sliderHeight = GetValue(sliderConfig, 'height', undefined);
        proportion = sliderHeight === undefined ? 1 : 0;
      }
      this.add(slider, {
        proportion: proportion,
        align: 'center',
        padding: padding
      });
    }
    if (text) {
      this.add(text);
    }
    this.addChildrenMap('background', background);
    this.addChildrenMap('icon', icon);
    this.addChildrenMap('iconMask', iconMask);
    this.addChildrenMap('slider', slider);
    this.addChildrenMap('text', text);
    var callback = GetValue(config, 'valuechangeCallback', null);
    if (callback !== null) {
      var scope = GetValue(config, 'valuechangeCallbackScope', undefined);
      this.on('valuechange', callback, scope);
    }
    this.setEnable(GetValue(config, 'enable', undefined));
    this.setValue(GetValue(config, 'value', 0));
  }
  get enable() {
    if (this.childrenMap.slider) {
      return this.childrenMap.slider.enable;
    } else {
      return false;
    }
  }
  set enable(value) {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.setEnable(value);
    }
  }
  setEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.enable = enable;
    return this;
  }
  get value() {
    if (this.childrenMap.slider) {
      return this.childrenMap.slider.value;
    } else {
      return 0;
    }
  }
  set value(value) {
    if (!this.childrenMap.slider) {
      return;
    }
    this.childrenMap.slider.value = value;
  }
  setValue(value, min, max) {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.setValue(value, min, max);
    }
    return this;
  }
  addValue(inc, min, max) {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.addValue(inc, min, max);
    }
    return this;
  }
  getValue(min, max) {
    if (this.childrenMap.slider) {
      return this.childrenMap.slider.getValue(min, max);
    } else {
      return 0;
    }
  }
  easeValueTo(value, min, max) {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.easeValueTo(value, min, max);
    }
    return this;
  }
  stopEaseValue() {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.stopEaseValue();
    }
    return this;
  }
  setEaseValueDuration(duration) {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.setEaseValueDuration(duration);
    }
    return this;
  }
  setEaseValueFunction(ease) {
    if (this.childrenMap.slider) {
      this.childrenMap.slider.setEaseValueFunction(ease);
    }
    return this;
  }
  get text() {
    var textObject = this.childrenMap.text;
    if (textObject === undefined) {
      return '';
    }
    var value;
    if (textObject.text) {
      value = textObject.text;
    } else {
      value = textObject.getData('text');
    }
    return value;
  }
  set text(value) {
    var textObject = this.childrenMap.text;
    if (textObject === undefined) {
      return;
    }
    if (textObject.setText) {
      textObject.setText(value);
    } else {
      textObject.setData('text', value);
    }
  }
  setText(value) {
    this.text = value;
    return this;
  }
}
var _default = NumberBar;
exports.default = _default;
},{"../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/mask/AddChildMask.js","../slider/Slider.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/Slider.js"}],"node_modules/phaser3-rex-plugins/templates/ui/numberbar/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NumberBar = _interopRequireDefault(require("./NumberBar.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('numberBar', function (config) {
  var gameObject = new _NumberBar.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.NumberBar', _NumberBar.default);
var _default = _NumberBar.default;
exports.default = _default;
},{"./NumberBar.js":"node_modules/phaser3-rex-plugins/templates/ui/numberbar/NumberBar.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/scrollbar/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ScrollBar = _interopRequireDefault(require("./ScrollBar.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('scrollBar', function (config) {
  var gameObject = new _ScrollBar.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.ScrollBar', _ScrollBar.default);
var _default = _ScrollBar.default;
exports.default = _default;
},{"./ScrollBar.js":"node_modules/phaser3-rex-plugins/templates/ui/scrollbar/ScrollBar.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/badgelabel/BadgeLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OverlapSizer = _interopRequireDefault(require("../overlapsizer/OverlapSizer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const BadgeKeys = {
  leftTop: 'left-top',
  centerTop: 'center-top',
  rightTop: 'right-top',
  leftCenter: 'left-center',
  center: 'center',
  rightCenter: 'right-center',
  leftBottom: 'left-bottom',
  centerBottom: 'center-bottom',
  rightBottom: 'right-bottom'
};
class Badge extends _OverlapSizer.default {
  constructor(scene, config) {
    // Create sizer  
    super(scene, config);
    this.type = 'rexBadge';

    // Add elements
    var background = GetValue(config, 'background', undefined);
    if (background) {
      this.addBackground(background);
    }
    this.addChildrenMap('background', background);

    // Base item
    var main = GetValue(config, 'main', undefined);
    if (main) {
      this.add(main, {
        key: 'main',
        align: 'center',
        expand: false
      });
    }
    this.addChildrenMap('main', main);

    // Badges
    for (var key in BadgeKeys) {
      var badge = GetValue(config, key, undefined);
      if (badge) {
        this.add(badge, {
          key: key,
          align: BadgeKeys[key],
          expand: false
        });
        this.addChildrenMap(key, badge);
      }
    }
  }
}
var _default = Badge;
exports.default = _default;
},{"../overlapsizer/OverlapSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/OverlapSizer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/badgelabel/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BadgeLabel = _interopRequireDefault(require("./BadgeLabel.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('badgeLabel', function (config) {
  var gameObject = new _BadgeLabel.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.BadgeLabel', _BadgeLabel.default);
var _default = _BadgeLabel.default;
exports.default = _default;
},{"./BadgeLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/badgelabel/BadgeLabel.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/pages/methods/AddChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OverlapSizer = _interopRequireDefault(require("../../overlapsizer/OverlapSizer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const OverlapSizerAdd = _OverlapSizer.default.prototype.add;
var Add = function (gameObject, childKey, align, padding, expand, minWidth, minHeight, offsetX, offsetY) {
  gameObject.setVisible(false); // Default is invisible
  OverlapSizerAdd.call(this, gameObject, childKey, align, padding, expand, minWidth, minHeight, offsetX, offsetY);
  return this;
};
var _default = {
  add: Add,
  addPage: Add
};
exports.default = _default;
},{"../../overlapsizer/OverlapSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/OverlapSizer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/pages/methods/GetPage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetPage = function (key) {
  if (key === undefined) {
    return null;
  } else if (!this.sizerChildren.hasOwnProperty(key)) {
    return null;
  } else {
    return this.sizerChildren[key];
  }
};
var _default = GetPage;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/pages/methods/SwapPage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Container = _interopRequireDefault(require("../../container/Container.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ContainerSetChildVisible = _Container.default.prototype.setChildVisible;
var SwapPage = function (key, fadeInDuration) {
  this._previousKey = this._currentKey;
  var prevoiusPage = this.previousPage;
  if (prevoiusPage) {
    if (this.swapMode === 0) {
      // Invisible
      ContainerSetChildVisible.call(this, prevoiusPage, false);
      this.emit('pageinvisible', prevoiusPage, this._previousKey, this);
    } else {
      // Destroy
      prevoiusPage.destroy();
    }
  }
  if (key && !this.sizerChildren.hasOwnProperty(key)) {
    this.emit('createpage', key, this);
  }
  this._currentKey = key;
  var currentPage = this.currentPage;
  if (currentPage) {
    ContainerSetChildVisible.call(this, currentPage, true);
    this.emit('pagevisible', currentPage, this._currentKey, this);
    if (fadeInDuration === undefined) {
      fadeInDuration = this.fadeInDuration;
    }
    if (fadeInDuration > 0) {
      currentPage.setAlpha(0).fadeIn(fadeInDuration, 1);
    }
  }
  return this;
};
var _default = SwapPage;
exports.default = _default;
},{"../../container/Container.js":"node_modules/phaser3-rex-plugins/templates/ui/container/Container.js"}],"node_modules/phaser3-rex-plugins/templates/ui/pages/methods/HasPage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var HasPage = function (key) {
  return this.sizerChildren.hasOwnProperty(key);
};
var _default = HasPage;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/pages/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddChildMethods = _interopRequireDefault(require("./AddChildMethods.js"));
var _GetPage = _interopRequireDefault(require("./GetPage.js"));
var _SwapPage = _interopRequireDefault(require("./SwapPage.js"));
var _HasPage = _interopRequireDefault(require("./HasPage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  getPage: _GetPage.default,
  swapPage: _SwapPage.default,
  hasPage: _HasPage.default
};
Object.assign(methods, _AddChildMethods.default);
var _default = methods;
exports.default = _default;
},{"./AddChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/pages/methods/AddChildMethods.js","./GetPage.js":"node_modules/phaser3-rex-plugins/templates/ui/pages/methods/GetPage.js","./SwapPage.js":"node_modules/phaser3-rex-plugins/templates/ui/pages/methods/SwapPage.js","./HasPage.js":"node_modules/phaser3-rex-plugins/templates/ui/pages/methods/HasPage.js"}],"node_modules/phaser3-rex-plugins/templates/ui/pages/Pages.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OverlapSizer = _interopRequireDefault(require("../overlapsizer/OverlapSizer.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Pages extends _OverlapSizer.default {
  constructor(scene, config) {
    super(scene, config);
    this.type = 'rexPages';
    this.childrenMap = this.sizerChildren;
    this._previousKey = undefined;
    this._currentKey = undefined;
    this.setSwapMode(GetValue(config, 'swapMode', 0));
    this.setFadeInDuration(GetValue(config, 'fadeIn', 0));
  }
  setSwapMode(mode) {
    if (typeof mode === 'string') {
      mode = SWAPMODE[mode];
    }
    this.swapMode = mode;
    return this;
  }
  setFadeInDuration(duration) {
    this.fadeInDuration = duration;
    return this;
  }
  get previousKey() {
    return this._previousKey;
  }
  get currentKey() {
    return this._currentKey;
  }
  set currentKey(key) {
    this.swapPage(key);
  }
  get currentPage() {
    return this.getPage(this.currentKey);
  }
  get previousPage() {
    return this.getPage(this.previousKey);
  }
  get keys() {
    return Object.keys(this.sizerChildren);
  }
}
Object.assign(Pages.prototype, _Methods.default);
const SWAPMODE = {
  invisible: 0,
  destroy: 1
};
var _default = Pages;
exports.default = _default;
},{"../overlapsizer/OverlapSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/OverlapSizer.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/pages/methods/Methods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/pages/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Pages = _interopRequireDefault(require("./Pages.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('pages', function (config) {
  var gameObject = new _Pages.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Pages', _Pages.default);
var _default = _Pages.default;
exports.default = _default;
},{"./Pages.js":"node_modules/phaser3-rex-plugins/templates/ui/pages/Pages.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/TransformVerts.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Vector3 = Phaser.Math.Vector3;
const Matrix4 = Phaser.Math.Matrix4;
var tempPosition = new Vector3();
var tempRotation = new Vector3();
var tempMatrix = new Matrix4();
var TransformVerts = function (mesh, x, y, z, rotateX, rotateY, rotateZ) {
  if (x === undefined) {
    x = 0;
  }
  if (y === undefined) {
    y = 0;
  }
  if (z === undefined) {
    z = 0;
  }
  if (rotateX === undefined) {
    rotateX = 0;
  }
  if (rotateY === undefined) {
    rotateY = 0;
  }
  if (rotateZ === undefined) {
    rotateZ = 0;
  }
  tempPosition.set(x, y, z);
  tempRotation.set(rotateX, rotateY, rotateZ);
  tempMatrix.fromRotationXYTranslation(tempRotation, tempPosition, true);
  for (var i = 0, cnt = mesh.vertices.length; i < cnt; i++) {
    mesh.vertices[i].transformMat4(tempMatrix);
  }
};
var _default = TransformVerts;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/image/Image.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TransformVerts = _interopRequireDefault(require("../utils/TransformVerts"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Mesh = Phaser.GameObjects.Mesh;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const GenerateGridVerts = Phaser.Geom.Mesh.GenerateGridVerts;
const RadToDeg = Phaser.Math.RadToDeg;
const DegToRad = Phaser.Math.DegToRad;
const FOV = 45;
const PanZ = 1 + 1 / Math.sin(DegToRad(FOV));
class Image extends Mesh {
  constructor(scene, x, y, key, frame, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      key = GetValue(config, 'key', null);
      frame = GetValue(config, 'frame', null);
    }
    super(scene, x, y, key, frame);
    this.type = 'rexPerspectiveImage';
    this.setSizeToFrame();
    this.resetPerspective();
    this.panZ(PanZ);
    this.hideCCW = GetValue(config, 'hideCCW', true);
    var gridWidth = GetValue(config, 'gridWidth', 32);
    var gridHeight = GetValue(config, 'gridHeight', gridWidth);
    this.resetVerts(gridWidth, gridHeight);
  }
  resetPerspective() {
    this.setPerspective(this.width, this.height, FOV);
    return this;
  }
  resetVerts(gridWidth, gridHeight) {
    if (gridWidth !== undefined) {
      this.gridWidth = gridWidth;
    }
    if (gridHeight !== undefined) {
      this.gridHeight = gridHeight;
    }

    // Clear faces and vertices
    this.clear();
    this.dirtyCache[9] = -1;
    if (this.width === 0 || this.height === 0) {
      return this;
    }

    // Generate faces and vertices
    var frameWidth = this.frame.cutWidth,
      frameHeight = this.frame.cutHeight;
    GenerateGridVerts({
      mesh: this,
      texture: this.texture.key,
      frame: this.frame.name,
      width: frameWidth / this.height,
      height: frameHeight / this.height,
      widthSegments: Math.ceil(frameWidth / this.gridWidth),
      heightSegments: Math.ceil(frameHeight / this.gridHeight),
      flipY: this.frame.source.isRenderTexture
    });

    // Recover vertices transform
    var transformInfo = this.transformInfo;
    if (transformInfo) {
      this.transformVerts(transformInfo.x, transformInfo.y, transformInfo.z, transformInfo.rotateX, transformInfo.rotateY, transformInfo.rotateZ);
    }
    return this;
  }
  syncSize() {
    this.setSizeToFrame(); // Reset size
    this.resetPerspective(); // Reset perspective
    this.resetVerts(); // Reset verts
    return this;
  }
  get rotationX() {
    return this.modelRotation.x;
  }
  set rotationX(value) {
    this.modelRotation.x = value;
  }
  get angleX() {
    return RadToDeg(this.rotationX);
  }
  set angleX(value) {
    this.rotationX = DegToRad(value);
  }
  get rotationY() {
    return this.modelRotation.y;
  }
  set rotationY(value) {
    this.modelRotation.y = value;
  }
  get angleY() {
    return RadToDeg(this.rotationY);
  }
  set angleY(value) {
    this.rotationY = DegToRad(value);
  }
  get rotationZ() {
    return this.modelRotation.z;
  }
  set rotationZ(value) {
    this.modelRotation.z = value;
  }
  get angleZ() {
    return RadToDeg(this.rotationZ);
  }
  set angleZ(value) {
    this.rotationZ = DegToRad(value);
  }
  transformVerts(x, y, z, rotateX, rotateY, rotateZ) {
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (z === undefined) {
      z = 0;
    }
    if (rotateX === undefined) {
      rotateX = 0;
    }
    if (rotateY === undefined) {
      rotateY = 0;
    }
    if (rotateZ === undefined) {
      rotateZ = 0;
    }
    if (!this.transformInfo) {
      this.transformInfo = {};
    }
    this.transformInfo.x = x;
    this.transformInfo.y = y;
    this.transformInfo.rotateX = rotateX;
    this.transformInfo.rotateY = rotateY;
    this.transformInfo.rotateZ = rotateZ;
    (0, _TransformVerts.default)(this, x, y, z, rotateX, rotateY, rotateZ);
    return this;
  }
  forceUpdate() {
    this.dirtyCache[10] = 1;
    return this;
  }
  get tint() {
    if (this.vertices.length === 0) {
      return 0xffffff;
    } else {
      return this.vertices[0].color;
    }
  }
  set tint(value) {
    var vertices = this.vertices;
    for (var i = 0, cnt = vertices.length; i < cnt; i++) {
      vertices[i].color = value;
    }
  }
  setTint(color) {
    this.tint = color;
    return this;
  }
}
var _default = Image;
exports.default = _default;
},{"../utils/TransformVerts":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/TransformVerts.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/rendertexture/RenderTexture.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Image = _interopRequireDefault(require("../image/Image.js"));
var _Snapshot = _interopRequireDefault(require("../../../../utils/rendertexture/Snapshot.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const RT = Phaser.GameObjects.RenderTexture;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class RenderTexture extends _Image.default {
  constructor(scene, x, y, width, height, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      width = GetValue(config, 'width', 32);
      height = GetValue(config, 'height', 32);
    }

    // render-texture -> perspective-image
    var rt = new RT(scene, x, y, width, height).setOrigin(0.5);
    super(scene, x, y, rt.texture.key, null, config);
    this.type = 'rexPerspectiveRenderTexture';
    this.rt = rt;
  }
  destroy(fromScene) {
    super.destroy(fromScene);
    this.rt.destroy();
    this.rt = null;
  }
  snapshot(gameObjects, config) {
    if (config === undefined) {
      config = {};
    }
    config.gameObjects = gameObjects;
    config.renderTexture = this.rt;
    (0, _Snapshot.default)(config);
    if (this.width !== this.frame.realWidth || this.height !== this.frame.realHeight) {
      this.syncSize();
    }
    return this;
  }
}
var _default = RenderTexture;
exports.default = _default;
},{"../image/Image.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/image/Image.js","../../../../utils/rendertexture/Snapshot.js":"node_modules/phaser3-rex-plugins/plugins/utils/rendertexture/Snapshot.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/sprite/Sprite.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Image = _interopRequireDefault(require("../image/Image.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const AnimationState = Phaser.Animations.AnimationState;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class Sprite extends _Image.default {
  constructor(scene, x, y, key, frame, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      key = GetValue(config, 'key', null);
      frame = GetValue(config, 'frame', null);
    }
    super(scene, x, y, key, frame, config);
    this.type = 'rexPerspectiveSprite';
    this.anims = new AnimationState(this);
  }
  destroy(fromScene) {
    this.anims.destroy();
    this.anims = undefined;
    super.destroy(fromScene);
  }
  preUpdate(time, delta) {
    var prevFrame = this.anims.currentFrame;
    this.anims.update(time, delta);
    if (this.anims.currentFrame !== prevFrame) {
      this.syncSize();
    }
    super.preUpdate(time, delta);
  }
  play(key, ignoreIfPlaying, startFrame) {
    return this.anims.play(key, ignoreIfPlaying, startFrame);
  }
  playReverse(key, ignoreIfPlaying) {
    return this.anims.playReverse(key, ignoreIfPlaying);
  }
  playAfterDelay(key, delay) {
    return this.anims.playAfterDelay(key, delay);
  }
  playAfterRepeat(key, repeatCount) {
    return this.anims.playAfterRepeat(key, repeatCount);
  }
  chain(key) {
    return this.anims.chain(key);
  }
  stop() {
    return this.anims.stop();
  }
  stopAfterDelay(delay) {
    return this.anims.stopAfterDelay(delay);
  }
  stopAfterRepeat(repeatCount) {
    return this.anims.stopAfterRepeat(repeatCount);
  }
  stopOnFrame(frame) {
    return this.anims.stopOnFrame(frame);
  }
}
var _default = Sprite;
exports.default = _default;
},{"../image/Image.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/image/Image.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/ForEachFace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ForEachFace = function (faces, callback, scope, ignoreInvalid) {
  if (Array.isArray(faces)) {
    var isBreak = false;
    for (var i = 0, cnt = faces.length; i < cnt; i++) {
      var face = faces[i];
      if (ignoreInvalid && !face) {
        continue;
      }
      if (scope) {
        isBreak = callback.call(scope, face, i, faces);
      } else {
        isBreak = callback(face, i, faces);
      }
      if (isBreak) {
        return;
      }
    }
  } else {
    var isBreak = false;
    for (var name in faces) {
      var face = faces[name];
      if (ignoreInvalid && !face) {
        continue;
      }
      if (scope) {
        isBreak = callback.call(scope, face, name, faces);
      } else {
        isBreak = callback(face, name, faces);
      }
      if (isBreak) {
        return;
      }
    }
  }
};
var _default = ForEachFace;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/FaceContainer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ContainerLite = _interopRequireDefault(require("../../../container/containerlite/ContainerLite.js"));
var _ForEachFace = _interopRequireDefault(require("./ForEachFace.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const RadToDeg = Phaser.Math.RadToDeg;
const DegToRad = Phaser.Math.DegToRad;
class FaceContainer extends _ContainerLite.default {
  constructor(scene, x, y, width, height, faces) {
    super(scene, x, y, width, height);
    this.faces = faces; // Face Dictionary, or array

    (0, _ForEachFace.default)(faces, function (face) {
      face.setPosition(x, y);
      this.add(face);
    }, this, true);
  }

  // Override
  get rotationX() {
    return 0;
  }

  // Override
  set rotationX(value) {
    // rad
  }
  get angleX() {
    return RadToDeg(this.rotationX);
  }
  set angleX(value) {
    this.rotationX = DegToRad(value);
  }

  // Override
  get rotationY() {
    return 0;
  }

  // Override
  set rotationY(value) {
    // rad
  }
  get angleY() {
    return RadToDeg(this.rotationY);
  }
  set angleY(value) {
    this.rotationY = DegToRad(value);
  }

  // Override
  get rotationZ() {
    return 0;
  }

  // Override
  set rotationZ(value) {
    // rad
  }
  get angleZ() {
    return RadToDeg(this.rotationZ);
  }
  set angleZ(value) {
    this.rotationZ = DegToRad(value);
  }
  setDebug(graphic, callback) {
    (0, _ForEachFace.default)(this.faces, function (face) {
      face.setDebug(graphic, callback);
    }, null, true);
    return this;
  }
  panX(v) {
    (0, _ForEachFace.default)(this.faces, function (face) {
      face.panX(v);
    }, null, true);
    return this;
  }
  panY(v) {
    (0, _ForEachFace.default)(this.faces, function (face) {
      face.panY(v);
    }, null, true);
    return this;
  }
  panZ(v) {
    (0, _ForEachFace.default)(this.faces, function (face) {
      face.panZ(v);
    }, null, true);
    return this;
  }
  transformVerts(x, y, z, rotateX, rotateY, rotateZ) {
    (0, _ForEachFace.default)(this.faces, function (face) {
      face.transformVerts(x, y, z, rotateX, rotateY, rotateZ);
    }, null, true);
    return this;
  }
  forEachFace(callback, scope, ignoreInvalid) {
    (0, _ForEachFace.default)(this.faces, callback, scope, ignoreInvalid);
    return this;
  }
}
var _default = FaceContainer;
exports.default = _default;
},{"../../../container/containerlite/ContainerLite.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/ContainerLite.js","./ForEachFace.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/ForEachFace.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/CreatePerspectiveObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Image = _interopRequireDefault(require("../image/Image.js"));
var _RenderTexture = _interopRequireDefault(require("../rendertexture/RenderTexture.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const DefaultImageConfig = {
  key: '__WHITE'
};
const ClassMap = {
  image: _Image.default,
  rendertexture: _RenderTexture.default
};
var CreatePerspectiveObject = function (scene, config) {
  if (config === undefined) {
    config = DefaultImageConfig;
  }
  var perspectiveObject;
  if (IsPlainObject(config)) {
    if (!config.hasOwnProperty('type')) {
      if (config.hasOwnProperty('key')) {
        config.type = 'image';
      } else if (config.hasOwnProperty('width')) {
        config.type = 'rendertexture';
      }
    }
    perspectiveObject = new ClassMap[config.type](scene, config);
    scene.add.existing(perspectiveObject);
  } else {
    perspectiveObject = config;
  }
  return perspectiveObject;
};
var _default = CreatePerspectiveObject;
exports.default = _default;
},{"../image/Image.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/image/Image.js","../rendertexture/RenderTexture.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/rendertexture/RenderTexture.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/CreateFaces.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreatePerspectiveObject = _interopRequireDefault(require("./CreatePerspectiveObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateFaces = function (scene, config, faceNames) {
  var faces;
  if (faceNames === undefined) {
    // Return an array of faces
    faces = [];
    var face, faceConfig;
    for (var i = 0, cnt = config.length; i < cnt; i++) {
      faceConfig = config[i];
      if (faceConfig) {
        face = (0, _CreatePerspectiveObject.default)(scene, faceConfig);
      } else {
        face = null;
      }
      faces.push(face);
    }
  } else {
    // Return a face map
    faces = {};
    var face, name;
    for (var i = 0, cnt = faceNames.length; i < cnt; i++) {
      name = faceNames[i];
      if (config.hasOwnProperty(name)) {
        face = (0, _CreatePerspectiveObject.default)(scene, config[name]);
      } else {
        face = null;
      }
      faces[name] = face;
    }
  }
  return faces;
};
var _default = CreateFaces;
exports.default = _default;
},{"./CreatePerspectiveObject.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/CreatePerspectiveObject.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/card/LayoutFaces.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const DegToRad = Phaser.Math.DegToRad;
const RAD180 = DegToRad(180);
var LayoutFaces = function (parent, faces) {
  var backFace = faces.back;
  if (backFace) {
    if (parent.orientation === 0) {
      // Flip around Y
      backFace.transformVerts(0, 0, 0, 0, RAD180, 0);
    } else {
      // Flip around X
      backFace.transformVerts(0, 0, 0, RAD180, 0, 0);
    }
  }
};
var _default = LayoutFaces;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/card/Flip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseValueTaskBase = _interopRequireDefault(require("../../../../utils/componentbase/tweentask/EaseValueTaskBase.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const Linear = Phaser.Math.Linear;
class Flip extends _EaseValueTaskBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;
    // this.timer

    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this.setEase(GetValue(o, 'ease', 'Cubic'));
    this.setFrontToBackDirection(GetValue(o, 'frontToBack', 0));
    this.setBackToFrontDirection(GetValue(o, 'backToFront', 1));
    return this;
  }
  setFrontToBackDirection(direction) {
    if (typeof direction === 'string') {
      direction = DIRMODE[direction];
    }
    this.endAngleFB = direction === 0 ? 180 : -180;
    return this;
  }
  setBackToFrontDirection(direction) {
    if (typeof direction === 'string') {
      direction = DIRMODE[direction];
    }
    this.endAngleBF = direction === 0 ? -180 : 180;
    return this;
  }
  start(duration, repeat) {
    if (this.timer.isRunning) {
      return this;
    }
    this.timer.setDelay(this.delay).setDuration(duration);
    var loop = repeat + 1;
    var gameObject = this.parent;
    if (gameObject.face === 0) {
      // isFrontToBack
      this.startAngle = 0;
      this.endAngle = this.endAngleFB * loop;
    } else {
      this.startAngle = this.endAngleBF;
      this.endAngle = this.startAngle - this.endAngleBF * loop;
    }
    super.start();
    return this;
  }
  flip(duration, repeat) {
    if (this.isRunning) {
      return this;
    }
    if (duration === undefined) {
      duration = this.duration;
    }
    if (repeat === undefined) {
      repeat = 0;
    }
    this.start(duration, repeat);
    this.emit('start', this.parent, this);

    // Set face index
    this.parent.currentFaceIndex = (this.parent.currentFaceIndex + repeat + 1) % 2;
    return this;
  }
  flipRight(duration, repeat) {
    if (this.parent.currentFaceIndex === 0) {
      // Front to back
      this.setFrontToBackDirection(0);
    } else {
      // Back to front
      this.setBackToFrontDirection(0);
    }
    this.flip(duration, repeat);
    return this;
  }
  flipLeft(duration, repeat) {
    if (this.parent.currentFaceIndex === 0) {
      // Front to back
      this.setFrontToBackDirection(1);
    } else {
      // Back to front
      this.setBackToFrontDirection(1);
    }
    this.flip(duration, repeat);
    return this;
  }
  updateGameObject(gameObject, timer) {
    var t = this.easeFn(timer.t);
    var value = Linear(this.startAngle, this.endAngle, t);
    if (gameObject.orientation === 0) {
      gameObject.angleY = value;
    } else {
      gameObject.angleX = value;
    }
  }
}
const DIRMODE = {
  'right': 0,
  'left-to-right': 0,
  'left': 1,
  'right-to-left': 1
};
var _default = Flip;
exports.default = _default;
},{"../../../../utils/componentbase/tweentask/EaseValueTaskBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/tweentask/EaseValueTaskBase.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/card/Card.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FaceContainer = _interopRequireDefault(require("../utils/FaceContainer.js"));
var _CreateFaces = _interopRequireDefault(require("../utils/CreateFaces.js"));
var _ForEachFace = _interopRequireDefault(require("../utils/ForEachFace.js"));
var _LayoutFaces = _interopRequireDefault(require("./LayoutFaces.js"));
var _Flip = _interopRequireDefault(require("./Flip.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const FaceNames = ['back', 'front'];
class Card extends _FaceContainer.default {
  constructor(scene, x, y, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
    }
    var faces = (0, _CreateFaces.default)(scene, config, FaceNames);
    var backFace = faces.back;
    var frontFace = faces.front;
    var width = GetValue(config, 'width');
    var height = GetValue(config, 'height');
    if (width === undefined || height === undefined) {
      if (width === undefined) {
        var frontFaceWidth = frontFace ? frontFace.width : 0;
        var backFaceWidth = backFace ? backFace.width : 0;
        width = Math.max(frontFaceWidth, backFaceWidth);
      }
      if (height === undefined) {
        var frontFaceHeight = frontFace ? frontFace.height : 0;
        var backFaceHeight = backFace ? backFace.height : 0;
        height = Math.max(frontFaceHeight, backFaceHeight);
      }
    }
    super(scene, x, y, width, height, faces);
    this.type = 'rexPerspectiveCard';
    this.frontFaceRotationX = 0;
    this.frontFaceRotationY = 0;
    this.frontFaceRotationZ = 0;
    (0, _ForEachFace.default)(faces, function (face, name) {
      this[`${name}Face`] = face;
    }, this);
    var flipConfig = GetValue(config, 'flip', undefined);
    if (flipConfig !== false) {
      this.flip = new _Flip.default(this, flipConfig);
    }
    this.setOrientation(GetValue(config, 'orientation', 0));
    (0, _LayoutFaces.default)(this, faces);
    this.setFace(GetValue(config, 'face', 0));
  }
  get rotationX() {
    return this.frontFaceRotationX;
  }
  set rotationX(value) {
    if (this.frontFaceRotationX === value) {
      return;
    }
    this.frontFaceRotationX = value;
    (0, _ForEachFace.default)(this.faces, function (face) {
      face.rotationX = value;
    }, null, true);
  }
  get rotationY() {
    return this.frontFaceRotationY;
  }
  set rotationY(value) {
    if (this.frontFaceRotationY === value) {
      return;
    }
    this.frontFaceRotationY = value;
    (0, _ForEachFace.default)(this.faces, function (face) {
      face.rotationY = value;
    }, null, true);
  }
  get rotationZ() {
    return this.frontFaceRotationZ;
  }
  set rotationZ(value) {
    if (this.frontFaceRotationZ === value) {
      return;
    }
    this.frontFaceRotationZ = value;
    (0, _ForEachFace.default)(this.faces, function (face) {
      face.rotationZ = value;
    }, null, true);
  }
  setOrientation(orientation) {
    if (typeof orientation === 'string') {
      orientation = ORIENTATIONMODE[orientation];
    }
    this.orientation = orientation;
    return this;
  }
  get face() {
    return this.currentFaceIndex;
  }
  set face(index) {
    if (typeof index === 'string') {
      index = FACEMODE[index];
    }
    this.currentFaceIndex = index;
    var isBackFace = index === 1;
    var angle = isBackFace ? 180 : 0;
    if (this.orientation === 0) {
      // Flip around Y
      this.angleY = angle;
    } else {
      // Flip around X
      this.angleX = angle;
    }
  }
  setFace(face) {
    this.face = face;
    return this;
  }
  toggleFace() {
    var newFace = this.face === 0 ? 1 : 0;
    this.setFace(newFace);
    return this;
  }
}
const ORIENTATIONMODE = {
  x: 0,
  horizontal: 0,
  h: 0,
  y: 1,
  vertical: 1,
  v: 1
};
const FACEMODE = {
  front: 0,
  back: 1
};
var _default = Card;
exports.default = _default;
},{"../utils/FaceContainer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/FaceContainer.js","../utils/CreateFaces.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/CreateFaces.js","../utils/ForEachFace.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/ForEachFace.js","./LayoutFaces.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/card/LayoutFaces.js","./Flip.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/card/Flip.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/carousel/FaceNameToIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var FaceNameToIndex = function (faces, name) {
  for (var i = 0, cnt = faces.length; i < cnt; i++) {
    if (face && face.name === name) {
      return i;
    }
  }
  return -1;
};
var _default = FaceNameToIndex;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/carousel/Roll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseValueTaskBase = _interopRequireDefault(require("../../../../utils/componentbase/tweentask/EaseValueTaskBase.js"));
var _FaceNameToIndex = _interopRequireDefault(require("./FaceNameToIndex.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const RadToDeg = Phaser.Math.RadToDeg;
const DegToRad = Phaser.Math.DegToRad;
const WrapDegrees = Phaser.Math.Angle.WrapDegrees;
const ShortestBetween = Phaser.Math.Angle.ShortestBetween;
const Wrap = Phaser.Math.Wrap;
const Linear = Phaser.Math.Linear;
class Roll extends _EaseValueTaskBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;
    // this.timer

    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this.setEase(GetValue(o, 'ease', 'Cubic'));
    return this;
  }
  start(deltaRotation) {
    if (this.timer.isRunning) {
      return this;
    }
    this.timer.setDelay(this.delay).setDuration(this.duration);
    var gameObject = this.parent;
    this.startRotationY = gameObject.rotationY;
    this.endRotationY = this.startRotationY + deltaRotation;
    super.start();
    return this;
  }
  to(index, duration) {
    if (this.isRunning) {
      return this;
    }
    var carousel = this.parent;
    if (typeof index === 'string') {
      index = (0, _FaceNameToIndex.default)(carousel.faces, index);
      if (index === -1) {
        index = 0;
      }
    }
    index = Wrap(index, 0, carousel.faces.length);
    if (duration !== undefined) {
      this.setDuration(duration);
    }
    var start = WrapDegrees(RadToDeg(carousel.rotationY));
    var end = WrapDegrees(RadToDeg((carousel.rtl ? 1 : -1) * carousel.faceAngle * index));
    var delta = ShortestBetween(start, end); // Degrees
    this.start(DegToRad(delta));
    carousel.currentFaceIndex = index;
    return this;
  }
  toNext(duration) {
    var index = this.parent.currentFaceIndex + 1;
    this.to(index, duration);
    return this;
  }
  toPrevious(duration) {
    var index = this.parent.currentFaceIndex - 1;
    this.to(index, duration);
    return this;
  }
  toRight(duration) {
    if (!this.parent.rtl) {
      this.toNext(duration);
    } else {
      this.toPrevious(duration);
    }
    return this;
  }
  toLeft(duration) {
    if (!this.parent.rtl) {
      this.toPrevious(duration);
    } else {
      this.toNext(duration);
    }
    return this;
  }
  updateGameObject(gameObject, timer) {
    var t = this.easeFn(timer.t);
    gameObject.rotationY = Linear(this.startRotationY, this.endRotationY, t);
  }
}
var _default = Roll;
exports.default = _default;
},{"../../../../utils/componentbase/tweentask/EaseValueTaskBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/tweentask/EaseValueTaskBase.js","./FaceNameToIndex.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/carousel/FaceNameToIndex.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/carousel/GetFirstFace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetFirstFace = function (faces) {
  var face;
  for (var i = 0, cnt = faces.length; i < cnt; i++) {
    face = faces[i];
    if (face) {
      break;
    }
  }
  return face;
};
var _default = GetFirstFace;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/carousel/LayoutFaces.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ForEachFace = _interopRequireDefault(require("../utils/ForEachFace.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var LayoutFaces = function (parent, faces) {
  if (parent.faceWidth === 0) {
    return;
  }
  var radius = parent.faceRadius;
  (0, _ForEachFace.default)(faces, function (face) {
    var transferZ = radius / face.height;
    face.transformVerts(0, 0, transferZ).panZ(transferZ);
  }, null, true);
};
var _default = LayoutFaces;
exports.default = _default;
},{"../utils/ForEachFace.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/ForEachFace.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/carousel/Carousel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FaceContainer = _interopRequireDefault(require("../utils/FaceContainer.js"));
var _Roll = _interopRequireDefault(require("./Roll.js"));
var _CreateFaces = _interopRequireDefault(require("../utils/CreateFaces.js"));
var _ForEachFace = _interopRequireDefault(require("../utils/ForEachFace.js"));
var _GetFirstFace = _interopRequireDefault(require("./GetFirstFace.js"));
var _LayoutFaces = _interopRequireDefault(require("./LayoutFaces.js"));
var _FaceNameToIndex = _interopRequireDefault(require("./FaceNameToIndex.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const DegToRad = Phaser.Math.DegToRad;
const RadToDeg = Phaser.Math.RadToDeg;
const WrapDegrees = Phaser.Math.Angle.WrapDegrees;
const Linear = Phaser.Math.Linear;
const Wrap = Phaser.Math.Wrap;
class Carousel extends _FaceContainer.default {
  constructor(scene, x, y, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
    }
    var faceConfig = GetValue(config, 'faces', undefined);
    if (!faceConfig) {
      faceConfig = [];
    }
    var faces = (0, _CreateFaces.default)(scene, faceConfig);
    var firstFace = (0, _GetFirstFace.default)(faces);
    var width = GetValue(config, 'width');
    var height = GetValue(config, 'height');
    if (width === undefined) {
      width = firstFace ? firstFace.width : 0;
    }
    if (height === undefined) {
      height = firstFace ? firstFace.height : 0;
    }
    super(scene, x, y, width, height, faces);
    this.type = 'rexPerspectiveCarousel';
    this.face0RotationY = undefined;
    var faceCount = faces.length;
    // Face angle
    this.faceAngle = faceCount > 0 ? DegToRad(360 / faces.length) : 0;

    // Face width, face radius
    var faceWidth = GetValue(config, 'faceWidth', undefined);
    if (faceWidth === undefined) {
      var faceSpace = GetValue(config, 'faceSpace', 0);
      faceWidth = firstFace ? firstFace.width + faceSpace : 0;
    }
    this.faceWidth = faceWidth;
    if (faceCount > 2) {
      this.faceRadius = faceWidth / 2 / Math.tan(this.faceAngle / 2);
    } else {
      this.faceRadius = faceWidth / 2;
    }
    (0, _LayoutFaces.default)(this, faces);
    var rollConfig = GetValue(config, 'roll', undefined);
    if (rollConfig !== false) {
      var RollClass = GetValue(config, 'rollClass', _Roll.default);
      this.roll = new RollClass(this, rollConfig);
    }

    // Left-To-Right, or Right-To-Left
    this.rtl = GetValue(config, 'rtl', false);

    // z-index
    this.zStart = GetValue(config, 'z', 1);
    this.zEnd = GetValue(config, 'zEnd', this.zStart - 1);
    this.setFace(GetValue(config, 'face', 0));
  }
  get rotationY() {
    return this.face0RotationY;
  }
  set rotationY(value) {
    if (this.face0RotationY === value) {
      return;
    }
    this.face0RotationY = value;
    var deltaAngle = this.faceAngle;
    var zStart = this.zStart;
    var zEnd = this.zEnd;
    var sign = this.rtl ? -1 : 1;
    (0, _ForEachFace.default)(this.faces, function (face, i) {
      // Set rotationY
      var rotationY = value + sign * deltaAngle * i;
      face.rotationY = rotationY;

      // Set depth
      var angle = Math.abs(WrapDegrees(RadToDeg(rotationY))); // 0~180
      var z = Linear(zStart, zEnd, angle / 180);
      face.setDepth(z);
    }, null, true);
  }
  get face() {
    return this.currentFaceIndex;
  }
  set face(index) {
    if (typeof index === 'string') {
      index = (0, _FaceNameToIndex.default)(this.faces, index);
      if (index === -1) {
        index = 0;
      }
    }
    index = Wrap(index, 0, this.faces.length);
    this.currentFaceIndex = index;
    this.rotationY = (this.rtl ? 1 : -1) * this.faceAngle * index;
  }
  setFace(index) {
    this.face = index;
    return this;
  }
}
var _default = Carousel;
exports.default = _default;
},{"../utils/FaceContainer.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/FaceContainer.js","./Roll.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/carousel/Roll.js","../utils/CreateFaces.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/CreateFaces.js","../utils/ForEachFace.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/utils/ForEachFace.js","./GetFirstFace.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/carousel/GetFirstFace.js","./LayoutFaces.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/carousel/LayoutFaces.js","./FaceNameToIndex.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/carousel/FaceNameToIndex.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/imagecarousel/Roll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Roll = _interopRequireDefault(require("../carousel/Roll.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Roll extends _Roll.default {
  toNext(duration) {
    var gameObject = this.parent;
    if (!gameObject.repeat && gameObject.isLastImage) {
      return this;
    }
    if (this.isRunning) {
      return this;
    }
    gameObject.setImageIndex(gameObject.currentImageIndex + 1);
    super.toNext(duration).once('complete', gameObject.updateTexture, gameObject);
    return this;
  }
  toPrevious(duration) {
    var gameObject = this.parent;
    if (!gameObject.repeat && gameObject.isFirstImage) {
      return this;
    }
    if (this.isRunning) {
      return this;
    }
    gameObject.setImageIndex(gameObject.currentImageIndex - 1);
    super.toPrevious(duration).once('complete', gameObject.updateTexture, gameObject);
    return this;
  }
}
var _default = Roll;
exports.default = _default;
},{"../carousel/Roll.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/carousel/Roll.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/imagecarousel/GetFaceSize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetFaceSize = function (scene, images) {
  if (!images) {
    return null;
  }
  if (Array.isArray(images)) {
    var textureKey = images[0];
    var frame = scene.sys.textures.getFrame(textureKey.key, textureKey.frame);
    result.width = frame.cutWidth;
    result.height = frame.cutHeight;
  } else {
    result.width = images.width;
    result.height = images.height;
  }
  return result;
};
var result = {};
var _default = GetFaceSize;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/imagecarousel/GetIndexOffsetMap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetIndexOffsetMap = function (faceCount) {
  var indexOffsetMap = [0];
  for (var i = 1, cnt = Math.floor((faceCount - 1) / 2); i <= cnt; i++) {
    indexOffsetMap.push(i);
    indexOffsetMap.push(-i);
  }
  return indexOffsetMap;
};
var _default = GetIndexOffsetMap;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/imagecarousel/ImageCarousel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Carousel = _interopRequireDefault(require("../carousel/Carousel.js"));
var _Roll = _interopRequireDefault(require("./Roll.js"));
var _RenderTexture = _interopRequireDefault(require("../rendertexture/RenderTexture.js"));
var _GetFaceSize = _interopRequireDefault(require("./GetFaceSize.js"));
var _GetIndexOffsetMap = _interopRequireDefault(require("./GetIndexOffsetMap.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const Wrap = Phaser.Math.Wrap;
class ImageCarousel extends _Carousel.default {
  constructor(scene, x, y, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
    }
    if (config === undefined) {
      config = {};
    }
    var faceWidth, faceHeight;
    var images = GetValue(config, 'images');
    var faceSize = (0, _GetFaceSize.default)(scene, images);
    if (faceSize) {
      faceWidth = faceSize.width;
      faceHeight = faceSize.height;
    } else {
      faceWidth = GetValue(config, 'width');
      faceHeight = GetValue(config, 'height');
    }

    // Create 4 render-texture faces
    var faceCount = GetValue(config, 'faceCount', 4);
    var face,
      faces = [];
    for (var i = 0; i < faceCount; i++) {
      face = new _RenderTexture.default(scene, 0, 0, faceWidth, faceHeight, config);
      scene.add.existing(face);
      faces.push(face);
    }
    config.faces = faces;
    config.rollClass = _Roll.default;
    super(scene, x, y, config);
    this.type = 'rexPerspectiveImageCarousel';
    this.images = images;
    this.indexOffsetMap = (0, _GetIndexOffsetMap.default)(faceCount);
    this.repeat = GetValue(config, 'repeat', true);
    this.setImageIndex(GetValue(config, 'index', 0)).updateTexture();
  }
  setImageIndex(index) {
    this.currentImageIndex = Wrap(index, 0, this.images.length);
    return this;
  }
  get isFirstImage() {
    return this.images.length === 0 || this.currentImageIndex === 0;
  }
  get isLastImage() {
    return this.images.length === 0 || this.currentImageIndex === this.images.length - 1;
  }
  updateTexture() {
    var totalKeys = this.images.length;
    var totalFaces = this.faces.length;
    this.indexOffsetMap.forEach(function (indexOffset) {
      var textureIndex = Wrap(this.currentImageIndex + indexOffset, 0, totalKeys);
      var faceIndex = Wrap(this.currentFaceIndex + indexOffset, 0, totalFaces);
      var textureKey = this.images[textureIndex];
      this.faces[faceIndex].rt.drawFrame(textureKey.key, textureKey.frame);
    }, this);
    return this;
  }
}
var _default = ImageCarousel;
exports.default = _default;
},{"../carousel/Carousel.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/carousel/Carousel.js","./Roll.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/imagecarousel/Roll.js","../rendertexture/RenderTexture.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/rendertexture/RenderTexture.js","./GetFaceSize.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/imagecarousel/GetFaceSize.js","./GetIndexOffsetMap.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/imagecarousel/GetIndexOffsetMap.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/rendertexture/Init.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GetValue = Phaser.Utils.Objects.GetValue;
var Init = function (parentContainer, rtOwner, config) {
  rtOwner.visibleSibling = [];
  rtOwner.isRunning = false;
  rtOwner.useParentBounds = GetValue(config, 'useParentBounds', false);
  rtOwner.setPosition(parentContainer.x, parentContainer.y).setVisible(false);
  parentContainer.pin(rtOwner);
};
var _default = Init;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/rendertexture/Exit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Exit = function (parentContainer, rtOwner) {
  if (!parentContainer) {
    return false;
  }
  var visibleSibling = rtOwner.visibleSibling;
  // Set all visible children back
  for (var i = 0, cnt = visibleSibling.length; i < cnt; i++) {
    parentContainer.setChildVisible(visibleSibling[i], true);
  }
  visibleSibling.length = 0;

  // Set rtOwner to be invisible
  parentContainer.setChildVisible(rtOwner, false);
  rtOwner.isRunning = false;
  return true;
};
var _default = Exit;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/rendertexture/Enter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Exit = _interopRequireDefault(require("./Exit.js"));
var _Snapshot = _interopRequireDefault(require("../../../../utils/rendertexture/Snapshot.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Enter = function (parentContainer, rtOwner) {
  if (!parentContainer) {
    return false;
  }
  (0, _Exit.default)(parentContainer, rtOwner);

  // Get and paste all visible children, which dose not include this render texture
  var useParentBounds = rtOwner.useParentBounds;
  (0, _Snapshot.default)({
    gameObjects: parentContainer.getAllVisibleChildren(),
    renderTexture: rtOwner.rt,
    x: rtOwner.x,
    y: rtOwner.y,
    width: useParentBounds ? parentContainer.displayWidth : undefined,
    height: useParentBounds ? parentContainer.displayHeighth : undefined,
    originX: useParentBounds ? parentContainer.originX : undefined,
    originY: useParentBounds ? parentContainer.originY : undefined
  });

  // Set rtOwner to be visible
  parentContainer.setChildVisible(rtOwner, true);

  // Set visible sibling to be invisible
  var visibleSibling = rtOwner.visibleSibling;
  var children = parentContainer.children;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (child.visible && child !== rtOwner) {
      parentContainer.setChildVisible(child, false);
      visibleSibling.push(child);
    }
  }
  rtOwner.isRunning = true;
  return true;
};
var _default = Enter;
exports.default = _default;
},{"./Exit.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/rendertexture/Exit.js","../../../../utils/rendertexture/Snapshot.js":"node_modules/phaser3-rex-plugins/plugins/utils/rendertexture/Snapshot.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/rendertexture/MeshRenderTextureBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Init = _interopRequireDefault(require("./Init.js"));
var _Enter = _interopRequireDefault(require("./Enter.js"));
var _Exit = _interopRequireDefault(require("./Exit.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var MeshRenderTextureBase = function (RenderTextureOwnerClass) {
  return class Base extends RenderTextureOwnerClass {
    constructor(parentContainer, config) {
      var scene = parentContainer.scene;
      super(scene, 0, 0, 1, 1, config);
      scene.add.existing(this);
      (0, _Init.default)(parentContainer, this, config);
    }
    destroy(fromScene) {
      if (!this.scene) {
        return;
      }
      this.exit();
      super.destroy(fromScene);
    }
    enter() {
      var result = (0, _Enter.default)(this.rexContainer.parent, this);
      if (result) {
        this.syncSize();
      }
      return this;
    }
    exit() {
      (0, _Exit.default)(this.rexContainer.parent, this);
      return this;
    }
  };
};
var _default = MeshRenderTextureBase;
exports.default = _default;
},{"./Init.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/rendertexture/Init.js","./Enter.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/rendertexture/Enter.js","./Exit.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/rendertexture/Exit.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/containerperspective/ContainerPerspective.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MeshRenderTextureBase = _interopRequireDefault(require("../../gameobjects/container/containerlite/rendertexture/MeshRenderTextureBase.js"));
var _RenderTexture = _interopRequireDefault(require("../../gameobjects/mesh/perspective/rendertexture/RenderTexture.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class ContainerPerspective extends (0, _MeshRenderTextureBase.default)(_RenderTexture.default) {
  get perspectiveState() {
    return this.isRunning;
  }
}
var _default = ContainerPerspective;
exports.default = _default;
},{"../../gameobjects/container/containerlite/rendertexture/MeshRenderTextureBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/rendertexture/MeshRenderTextureBase.js","../../gameobjects/mesh/perspective/rendertexture/RenderTexture.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/rendertexture/RenderTexture.js"}],"node_modules/phaser3-rex-plugins/plugins/perspectiveimage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ContainerPerspective", {
  enumerable: true,
  get: function () {
    return _ContainerPerspective.default;
  }
});
Object.defineProperty(exports, "PerspectiveCard", {
  enumerable: true,
  get: function () {
    return _Card.default;
  }
});
Object.defineProperty(exports, "PerspectiveCarousel", {
  enumerable: true,
  get: function () {
    return _Carousel.default;
  }
});
Object.defineProperty(exports, "PerspectiveImage", {
  enumerable: true,
  get: function () {
    return _Image.default;
  }
});
Object.defineProperty(exports, "PerspectiveImageCarousel", {
  enumerable: true,
  get: function () {
    return _ImageCarousel.default;
  }
});
Object.defineProperty(exports, "PerspectiveRenderTexture", {
  enumerable: true,
  get: function () {
    return _RenderTexture.default;
  }
});
Object.defineProperty(exports, "PerspectiveSprite", {
  enumerable: true,
  get: function () {
    return _Sprite.default;
  }
});
var _Image = _interopRequireDefault(require("./gameobjects/mesh/perspective/image/Image.js"));
var _RenderTexture = _interopRequireDefault(require("./gameobjects/mesh/perspective/rendertexture/RenderTexture.js"));
var _Sprite = _interopRequireDefault(require("./gameobjects/mesh/perspective/sprite/Sprite.js"));
var _Card = _interopRequireDefault(require("./gameobjects/mesh/perspective/card/Card.js"));
var _Carousel = _interopRequireDefault(require("./gameobjects/mesh/perspective/carousel/Carousel.js"));
var _ImageCarousel = _interopRequireDefault(require("./gameobjects/mesh/perspective/imagecarousel/ImageCarousel.js"));
var _ContainerPerspective = _interopRequireDefault(require("./behaviors/containerperspective/ContainerPerspective.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./gameobjects/mesh/perspective/image/Image.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/image/Image.js","./gameobjects/mesh/perspective/rendertexture/RenderTexture.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/rendertexture/RenderTexture.js","./gameobjects/mesh/perspective/sprite/Sprite.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/sprite/Sprite.js","./gameobjects/mesh/perspective/card/Card.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/card/Card.js","./gameobjects/mesh/perspective/carousel/Carousel.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/carousel/Carousel.js","./gameobjects/mesh/perspective/imagecarousel/ImageCarousel.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/perspective/imagecarousel/ImageCarousel.js","./behaviors/containerperspective/ContainerPerspective.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/containerperspective/ContainerPerspective.js"}],"node_modules/phaser3-rex-plugins/templates/ui/perspectivecard/CreatePerspectiveCardMesh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _perspectiveimage = require("../../../plugins/perspectiveimage.js");
var _Clone = _interopRequireDefault(require("../../../plugins/utils/object/Clone.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var CreatePerspectiveCardMesh = function (config) {
  var scene = this.scene;
  this.setSnapshotPadding(GetValue(config, 'snapshotPadding', 0));
  config = (0, _Clone.default)(config);
  // Remove size config
  delete config.width;
  delete config.height;
  // Initial size of render-texture is 1x1
  config.front = {
    width: 1,
    height: 1
  };
  config.back = {
    width: 1,
    height: 1
  };
  // Create PerspectiveCard as card-behavior
  var card = new _perspectiveimage.PerspectiveCard(scene, config);
  scene.add.existing(card);
  var flip = card.flip;
  if (flip) {
    var parent = this;
    flip.on('start', function () {
      // Before flipping
      parent.enterPerspectiveMode();
    }).on('complete', function () {
      // After flipping
      parent.exitPerspectiveMode();
    });
  }
  return card;
};
var _default = CreatePerspectiveCardMesh;
exports.default = _default;
},{"../../../plugins/perspectiveimage.js":"node_modules/phaser3-rex-plugins/plugins/perspectiveimage.js","../../../plugins/utils/object/Clone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/Clone.js"}],"node_modules/phaser3-rex-plugins/templates/ui/perspectivecard/PerspectiveMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const FaceIndexMap = ['front', 'back'];
var _default = {
  enterPerspectiveMode() {
    if (this.isInPerspectiveMode) {
      return this;
    }

    // Set card's visible to true
    this.setChildVisible(this.perspectiveCard, true);
    // Snapshot front and back children to card's faces
    this.snapshotFace(0);
    this.snapshotFace(1);
    // Set front and back children's visible to false
    this.setChildVisible(this.childrenMap.front, false);
    this.setChildVisible(this.childrenMap.back, false);
    // Reset size of card
    this.perspectiveCard.setSize(this.width, this.height);
    return this;
  },
  exitPerspectiveMode() {
    if (!this.isInPerspectiveMode) {
      return this;
    }

    // Set card's visible to false
    this.setChildVisible(this.perspectiveCard, false);
    // Set front or back children's visible to true, according to card's face
    var isFrontFace = this.perspectiveCard.face === 0;
    this.setChildVisible(this.childrenMap.front, isFrontFace);
    this.setChildVisible(this.childrenMap.back, !isFrontFace);
    return this;
  },
  setSnapshotPadding(padding) {
    this.snapshotPadding = padding;
    return this;
  },
  snapshotFace(face) {
    if (typeof face === 'number') {
      face = FaceIndexMap[face];
    }
    var cardFace = this.perspectiveCard.faces[face];
    var faceChild = this.childrenMap[face];
    cardFace.rt.clear();
    var faceChildVisibleSave = faceChild.visible;
    faceChild.visible = true;
    var gameObjects = faceChild.isRexContainerLite ? faceChild.getAllVisibleChildren() : faceChild;
    cardFace.snapshot(gameObjects, {
      padding: this.snapshotPadding
    });
    faceChild.visible = faceChildVisibleSave;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/perspectivecard/PerspectiveCard.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OverlapSizer = _interopRequireDefault(require("../overlapsizer/OverlapSizer.js"));
var _CreatePerspectiveCardMesh = _interopRequireDefault(require("./CreatePerspectiveCardMesh.js"));
var _PerspectiveMethods = _interopRequireDefault(require("./PerspectiveMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class PerspectiveCard extends _OverlapSizer.default {
  constructor(scene, config) {
    super(scene, config);
    this.type = 'rexPerspectiveCard';

    // Layout faces
    var backFace = config.back;
    var backFaceExpand = GetValue(config, 'expand.back', true);
    this.add(backFace, {
      key: 'back',
      expand: backFaceExpand
    });
    var frontFace = config.front;
    var frontFaceExpand = GetValue(config, 'expand.front', true);
    this.add(frontFace, {
      key: 'front',
      expand: frontFaceExpand
    });

    // Add PerspectiveCardMesh
    this.perspectiveCard = _CreatePerspectiveCardMesh.default.call(this, config);
    this.pin(this.perspectiveCard);
    this.exitPerspectiveMode(false);
  }
  get flip() {
    return this.perspectiveCard.flip;
  }
  get face() {
    return this.perspectiveCard.face;
  }
  set face(index) {
    // Can't set face during flipping
    if (this.flip && this.flip.isRunning) {
      return;
    }
    this.perspectiveCard.face = index;
    var isFrontFace = index === 0;
    var frontFace = this.childrenMap.front;
    var backFace = this.childrenMap.back;
    this.setChildVisible(frontFace, isFrontFace);
    this.setChildVisible(backFace, !isFrontFace);
  }
  setFace(face) {
    this.face = face;
    return this;
  }
  toggleFace() {
    var newFace = this.face === 0 ? 1 : 0;
    this.setFace(newFace);
    return this;
  }
  get isInPerspectiveMode() {
    return this.perspectiveCard.visible;
  }
  get rotationX() {
    return this.perspectiveCard.rotationX;
  }
  set rotationX(value) {
    this.enterPerspectiveMode();
    this.perspectiveCard.rotationX = value;
  }
  get angleX() {
    return this.perspectiveCard.angleX;
  }
  set angleX(value) {
    this.enterPerspectiveMode();
    this.perspectiveCard.angleX = value;
  }
  get rotationY() {
    return this.perspectiveCard.rotationY;
  }
  set rotationY(value) {
    this.enterPerspectiveMode();
    this.perspectiveCard.rotationY = value;
  }
  get angleY() {
    return this.perspectiveCard.angleY;
  }
  set angleY(value) {
    this.enterPerspectiveMode();
    this.perspectiveCard.angleY = value;
  }
  get rotationZ() {
    return this.perspectiveCard.rotationZ;
  }
  set rotationZ(value) {
    this.enterPerspectiveMode();
    this.perspectiveCard.rotationZ = value;
  }
  get angleZ() {
    return this.perspectiveCard.angleZ;
  }
  set angleZ(value) {
    this.enterPerspectiveMode();
    this.perspectiveCard.angleZ = value;
  }
  panX(v) {
    this.enterPerspectiveMode();
    this.perspectiveCard.panX(v);
    return this;
  }
  panY(v) {
    this.enterPerspectiveMode();
    this.perspectiveCard.panY(v);
    return this;
  }
  panZ(v) {
    this.enterPerspectiveMode();
    this.perspectiveCard.panZ(v);
    return this;
  }
  transformVerts(x, y, z, rotateX, rotateY, rotateZ) {
    this.enterPerspectiveMode();
    this.perspectiveCard.transformVerts(x, y, z, rotateX, rotateY, rotateZ);
    return this;
  }
  forEachFace(callback, scope, ignoreInvalid) {
    this.enterPerspectiveMode();
    this.perspectiveCard.forEachFace(callback, scope, ignoreInvalid);
    return this;
  }
}
Object.assign(PerspectiveCard.prototype, _PerspectiveMethods.default);
var _default = PerspectiveCard;
exports.default = _default;
},{"../overlapsizer/OverlapSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/OverlapSizer.js","./CreatePerspectiveCardMesh.js":"node_modules/phaser3-rex-plugins/templates/ui/perspectivecard/CreatePerspectiveCardMesh.js","./PerspectiveMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/perspectivecard/PerspectiveMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/perspectivecard/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _PerspectiveCard = _interopRequireDefault(require("./PerspectiveCard.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('perspectiveCard', function (config) {
  var gameObject = new _PerspectiveCard.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.PerspectiveCard', _PerspectiveCard.default);
var _default = _PerspectiveCard.default;
exports.default = _default;
},{"./PerspectiveCard.js":"node_modules/phaser3-rex-plugins/templates/ui/perspectivecard/PerspectiveCard.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/GetPageKeyByIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetPageKeyByIndex = function (index) {
  var buttons = this.getElement('tabs.buttons');
  if (index >= buttons.length) {
    return undefined;
  }
  return buttons[index].name;
};
var _default = GetPageKeyByIndex;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/GetPageIndexByKey.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetPageIndexByKey = function (key) {
  var buttons = this.getElement('tabs.buttons');
  for (var i = 0, cnt = buttons.length; i < cnt; i++) {
    if (buttons[i].name === key) {
      return i;
    }
  }
  return undefined;
};
var _default = GetPageIndexByKey;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/AddPage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const UUID = Phaser.Utils.String.UUID;
var AddPage = function (key, tabGameObject, pageGameObject) {
  if (IsPlainObject(key)) {
    var config = key;
    key = GetValue(config, 'key');
    tabGameObject = GetValue(config, 'tab');
    pageGameObject = GetValue(config, 'page');
  }
  if (!key) {
    key = UUID();
  }
  tabGameObject.name = key; // For ratio buttons

  this.childrenMap.tabs.addButton(tabGameObject);
  this.childrenMap.pages.addPage(pageGameObject, {
    key: key
  });
  return this;
};
var _default = AddPage;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/SwapPageMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SwapPage = function (key, fadeInDuration) {
  var index;
  if (typeof key === 'number') {
    index = key;
  } else {
    index = this.getPageIndex(key);
  }
  if (index != null) {
    // Override fadeInDuration
    var fadeInDurationSave;
    if (fadeInDuration !== undefined) {
      fadeInDurationSave = this.childrenMap.pages.fadeInDuration;
      this.childrenMap.pages.fadeInDuration = fadeInDuration;
    }
    this.childrenMap.tabs.emitButtonClick(index);

    // Restore fadeInDuration
    if (fadeInDurationSave !== undefined) {
      this.childrenMap.pages.fadeInDuration = fadeInDurationSave;
    }
  }
  return this;
};
var SwapFirstPage = function (fadeInDuration) {
  this.swapPage(0, fadeInDuration);
  return this;
};
var SwapLastPage = function (fadeInDuration) {
  var index = this.getElement('tabs.buttons').length - 1;
  this.swapPage(index, fadeInDuration);
  return this;
};
var _default = {
  swapPage: SwapPage,
  swapFirstPage: SwapFirstPage,
  swapLastPage: SwapLastPage
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/RemovePageMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var RemovePage = function (key, destroyChild) {
  if (typeof key === 'number') {
    key = this.getPageKey(key);
  }
  var tabs = this.childrenMap.tabs;
  var tabGameObject = tabs.getByName(key);
  var pages = this.childrenMap.pages;
  var pageGameObject = pages.getElement(key);
  if (!tabGameObject || !pageGameObject) {
    return this;
  }
  pages.removeChildrenMap(key);
  tabs.removeButton(tabGameObject, destroyChild);
  pages.remove(pageGameObject, destroyChild);
  return this;
};
var _default = {
  removePage: RemovePage
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/GetPage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetPage = function (key) {
  if (typeof key === 'number') {
    key = this.getPageKey(key);
  }
  return this.childrenMap.pages.getPage(key);
};
var _default = GetPage;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/GetTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetTab = function (key) {
  var index;
  if (typeof key === 'number') {
    index = key;
  } else {
    index = this.getPageIndex(key);
  }
  return this.getElement('tabs.buttons')[index];
};
var _default = GetTab;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetPageKeyByIndex = _interopRequireDefault(require("./GetPageKeyByIndex.js"));
var _GetPageIndexByKey = _interopRequireDefault(require("./GetPageIndexByKey.js"));
var _AddPage = _interopRequireDefault(require("./AddPage.js"));
var _SwapPageMethods = _interopRequireDefault(require("./SwapPageMethods.js"));
var _RemovePageMethods = _interopRequireDefault(require("./RemovePageMethods.js"));
var _GetPage = _interopRequireDefault(require("./GetPage.js"));
var _GetTab = _interopRequireDefault(require("./GetTab.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  getPageKey: _GetPageKeyByIndex.default,
  getPageIndex: _GetPageIndexByKey.default,
  addPage: _AddPage.default,
  getPage: _GetPage.default,
  getTab: _GetTab.default
};
Object.assign(methods, _SwapPageMethods.default, _RemovePageMethods.default);
var _default = methods;
exports.default = _default;
},{"./GetPageKeyByIndex.js":"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/GetPageKeyByIndex.js","./GetPageIndexByKey.js":"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/GetPageIndexByKey.js","./AddPage.js":"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/AddPage.js","./SwapPageMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/SwapPageMethods.js","./RemovePageMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/RemovePageMethods.js","./GetPage.js":"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/GetPage.js","./GetTab.js":"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/GetTab.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tabpages/TabPages.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer.js"));
var _Buttons = _interopRequireDefault(require("../buttons/Buttons.js"));
var _FixWidthButtons = _interopRequireDefault(require("../fixwidthbuttons/FixWidthButtons.js"));
var _Pages = _interopRequireDefault(require("../pages/Pages.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const SizerAdd = _Sizer.default.prototype.add;
class TabPages extends _Sizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    var tabsPosition = GetValue(config, 'tabPosition', 'top');
    var sizerOrientation = tabsPosition === 'left' || tabsPosition === 'right' ? 'x' : 'y';
    config.orientation = sizerOrientation;
    super(scene, config);
    this.type = 'rexTabPages';

    // Add elements
    var background = GetValue(config, 'background', undefined);
    if (background) {
      this.addBackground(background);
    }
    var pagesConfig = GetValue(config, 'pages');
    var pages = new _Pages.default(scene, pagesConfig);
    scene.add.existing(pages);
    var isHorizontalTabs = sizerOrientation === 'y';
    var wrapTabs = isHorizontalTabs ? GetValue(config, 'wrapTabs', false) : false;
    var tabsConfig = GetValue(config, 'tabs', undefined);
    if (tabsConfig === undefined) {
      tabsConfig = {};
    }
    var ButtonsClass = wrapTabs ? _FixWidthButtons.default : _Buttons.default;
    tabsConfig.orientation = isHorizontalTabs ? 'x' : 'y';
    tabsConfig.buttonsType = 'radio';
    var tabs = new ButtonsClass(scene, tabsConfig);
    scene.add.existing(tabs);
    var tabsExpand = wrapTabs ? true : GetValue(config, 'expand.tabs', false);
    var tabAlign = GetValue(config, 'align.tabs', 'left');
    switch (tabsPosition) {
      case 'top':
      case 'left':
        SizerAdd.call(this, tabs, {
          proportion: 0,
          expand: tabsExpand,
          align: tabAlign
        });
        SizerAdd.call(this, pages, {
          proportion: 1,
          expand: true
        });
        break;
      case 'bottom':
      case 'right':
        SizerAdd.call(this, pages, {
          proportion: 1,
          expand: true
        });
        SizerAdd.call(this, tabs, {
          proportion: 0,
          expand: tabsExpand,
          align: tabAlign
        });
        break;
    }
    this.addChildrenMap('background', background);
    this.addChildrenMap('tabs', tabs);
    this.addChildrenMap('pages', pages);

    // Register events
    tabs.on('button.click', function (tab) {
      var key = tab.name;
      if (pages.hasPage(key)) {
        pages.swapPage(key);
      }
    });
    tabs.on('button.statechange', function (tab, index, value, previousValue) {
      var eventName = value ? 'tab.focus' : 'tab.blur';
      this.emit(eventName, tab, tab.name);
    }, this);
    pages.on('pagevisible', function (pageObject, key, pages) {
      this.emit('page.focus', pageObject, key);
    });
    pages.on('pageinvisible', function (pageObject, key, pages) {
      this.emit('page.blur', pageObject, key);
    });
  }
  get currentKey() {
    return this.getElement('pages').currentKey;
  }
  set currentKey(key) {
    this.showPage(key);
  }
  get keys() {
    return this.getElement('pages').keys;
  }
  get currentPage() {
    return this.getElement('pages').currentPage;
  }
  get previousPage() {
    return this.getElement('pages').previousPage;
  }
}
Object.assign(TabPages.prototype, _Methods.default);
var _default = TabPages;
exports.default = _default;
},{"../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../buttons/Buttons.js":"node_modules/phaser3-rex-plugins/templates/ui/buttons/Buttons.js","../fixwidthbuttons/FixWidthButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthbuttons/FixWidthButtons.js","../pages/Pages.js":"node_modules/phaser3-rex-plugins/templates/ui/pages/Pages.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/tabpages/methods/Methods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tabpages/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TabPages = _interopRequireDefault(require("./TabPages.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('tabPages', function (config) {
  var gameObject = new _TabPages.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.TabPages', _TabPages.default);
var _default = _TabPages.default;
exports.default = _default;
},{"./TabPages.js":"node_modules/phaser3-rex-plugins/templates/ui/tabpages/TabPages.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/folder/methods/ChildTransition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OpenCloseTransition = _interopRequireDefault(require("../../../../plugins/behaviors/openclosetransition/OpenCloseTransition.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Transition extends _OpenCloseTransition.default {
  constructor(gameObject, config) {
    if (config === undefined) {
      config = {};
    }
    config.destroy = false;
    super(gameObject, config);
  }
  onOpen() {
    this.emit('open', this.parent, this);
    super.onOpen();
  }
  onClose() {
    this.emit('close', this.parent, this);
    super.onClose();
  }
}
var _default = Transition;
exports.default = _default;
},{"../../../../plugins/behaviors/openclosetransition/OpenCloseTransition.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/openclosetransition/OpenCloseTransition.js"}],"node_modules/phaser3-rex-plugins/templates/ui/folder/methods/ExpandMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  expand(duration) {
    if (this.expanded === true) {
      return this;
    }
    if (duration === undefined) {
      duration = this.transitionDuration;
    }
    this.expanded = true;
    var title = this.childrenMap.title;
    var child = this.childrenMap.child;
    this.show(child);
    var layoutTarget = this.reLayoutTarget ? this.reLayoutTarget : this.getTopmostSizer();
    layoutTarget.layout();
    title.emit('folder.expand', duration, this);
    child.emit('folder.expand', duration, this);
    this.emit('expand.start', this);
    this.childTransition.once('open', function () {
      this.emit('expand.complete', this);
    }, this).requestOpen(null, duration);
    return this;
  },
  collapse(duration) {
    if (this.expanded === false) {
      return this;
    }
    if (duration === undefined) {
      duration = this.transitionDuration;
    }
    this.expanded = false;
    var title = this.childrenMap.title;
    var child = this.childrenMap.child;
    title.emit('folder.collapse', duration, this);
    child.emit('folder.collapse', duration, this);
    this.emit('collapse.start', this);
    this.childTransition.once('close', function () {
      this.setChildScale(child, 1, 1).hide(child);
      var layoutTarget = this.reLayoutTarget ? this.reLayoutTarget : this.getTopmostSizer();
      layoutTarget.layout();
      this.emit('collapse.complete', this);
    }, this).requestClose(null, duration);
    return this;
  },
  toggle(duration) {
    if (this.expanded) {
      this.collapse(duration);
    } else {
      this.expand(duration);
    }
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/folder/methods/ConfigurationMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ScaleMethods = _interopRequireDefault(require("../../basesizer/ScaleMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DefaultExpandCallback = function (gameObject, duration) {
  _ScaleMethods.default.popUp.call(gameObject, duration, this.expandDirection);
};
var DefaultCollapseCallback = function (gameObject, duration) {
  _ScaleMethods.default.scaleDown.call(gameObject, duration, this.expandDirection);
};
var _default = {
  setTransitionDuration(duration) {
    this.transitionDuration = duration;
    this.childTransition.setTransitInTime(duration).setTransitOutTime(duration);
    return this;
  },
  setExpandCallback(callback) {
    if (callback === undefined) {
      callback = DefaultExpandCallback.bind(this);
    }
    this.childTransition.setTransitInCallback(callback);
    return this;
  },
  setCollapseCallback(callback) {
    if (callback === undefined) {
      callback = DefaultCollapseCallback.bind(this);
    }
    this.childTransition.setTransitOutCallback(callback);
    return this;
  }
};
exports.default = _default;
},{"../../basesizer/ScaleMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ScaleMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/folder/Folder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer"));
var _ChildTransition = _interopRequireDefault(require("./methods/ChildTransition.js"));
var _ExpandMethods = _interopRequireDefault(require("./methods/ExpandMethods.js"));
var _ClickMethods = _interopRequireDefault(require("../basesizer/ClickMethods"));
var _ConfigurationMethods = _interopRequireDefault(require("./methods/ConfigurationMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Folder extends _Sizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    if (!config.hasOwnProperty('orientation')) {
      config.orientation = 1;
    }
    super(scene, config);
    this.type = 'rexFolder';
    this.expanded = undefined;
    this.expandDirection = this.orientation === 1 ? 'y' : 'x';
    var background = config.background;
    var title = config.title;
    var child = config.child;

    // background
    if (background) {
      this.addBackground(background);
    }

    // title
    var defaultAlign = this.orientation === 1 ? 'left' : 'top';
    var align = GetValue(config, 'align.title', defaultAlign);
    var expand = GetValue(config, 'expand.title', true);
    this.add(title, {
      proportion: 0,
      align: align,
      expand: expand
    });
    var toggleByTarget = GetValue(config, 'toggleByTarget', undefined);
    var toggleClickConfig = GetValue(config, 'toggleClickConfig');
    if (toggleByTarget === undefined) {
      toggleByTarget = title;
    }
    if (toggleByTarget) {
      _ClickMethods.default.onClick.call(toggleByTarget, function () {
        this.toggle();
      }, this, toggleClickConfig);
    }

    // child
    this.childTransition = new _ChildTransition.default(child);
    var customOrigin = GetValue(config, 'customChildOrigin', false);
    if (!customOrigin) {
      var origin = !this.rtl ? 0 : 1;
      child.setOrigin(origin);
    }
    var align = GetValue(config, 'align.child', 'left');
    var expand = GetValue(config, 'expand.child', true);
    var proportion = expand ? 1 : 0;
    this.add(child, {
      proportion: proportion,
      align: align,
      expand: expand
    });
    this.addChildrenMap('title', title);
    this.addChildrenMap('child', child);
    this.addChildrenMap('background', background);
    var transitionConfig = config.transition;
    this.setTransitionDuration(GetValue(transitionConfig, 'duration', 200));
    this.setExpandCallback(GetValue(transitionConfig, 'expandCallback', undefined));
    this.setCollapseCallback(GetValue(transitionConfig, 'collapseCallback', undefined));
    this.reLayoutTarget = GetValue(config, 'reLayoutTarget', undefined);
    var onExpandStart = config.onExpandStart;
    if (onExpandStart) {
      this.on('expand.start', onExpandStart);
    }
    var onExpandComplete = config.onExpandComplete;
    if (onExpandComplete) {
      this.on('expand.complete', onExpandComplete);
    }
    var onCollapseStart = config.onCollapseStart;
    if (onCollapseStart) {
      this.on('collapse.start', onCollapseStart);
    }
    var onCollapseComplete = config.onCollapseComplete;
    if (onCollapseComplete) {
      this.on('collapse.complete', onCollapseComplete);
    }
  }
}
Object.assign(Folder.prototype, _ExpandMethods.default, _ConfigurationMethods.default);
var _default = Folder;
exports.default = _default;
},{"../sizer/Sizer":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","./methods/ChildTransition.js":"node_modules/phaser3-rex-plugins/templates/ui/folder/methods/ChildTransition.js","./methods/ExpandMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/folder/methods/ExpandMethods.js","../basesizer/ClickMethods":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/ClickMethods.js","./methods/ConfigurationMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/folder/methods/ConfigurationMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/folder/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Folder = _interopRequireDefault(require("./Folder.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('folder', function (config) {
  var gameObject = new _Folder.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Folder', _Folder.default);
var _default = _Folder.default;
exports.default = _default;
},{"./Folder.js":"node_modules/phaser3-rex-plugins/templates/ui/folder/Folder.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textarea/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextArea = _interopRequireDefault(require("./TextArea.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('textArea', function (config) {
  var gameObject = new _TextArea.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.TextArea', _TextArea.default);
var _default = _TextArea.default;
exports.default = _default;
},{"./TextArea.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/TextArea.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/GetChildrenWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildrenWidth = function () {
  if (this.rexSizer.hidden) {
    return 0;
  }
  var result;
  var child = this.child,
    childConfig = child.rexSizer;
  if (childConfig.hidden) {
    result = 0;
  } else if (this.scrollMode === 0) {
    // scroll y
    result = this.getChildWidth(child);
  } else {
    // scroll x
    result = 0;
  }
  return result;
};
var _default = GetChildrenWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/GetChildrenHeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetDisplaySize = require("../../../../plugins/utils/size/GetDisplaySize.js");
var GetChildrenHeight = function () {
  if (this.rexSizer.hidden) {
    return 0;
  }
  var result;
  var child = this.child,
    childConfig = child.rexSizer;
  if (childConfig.hidden) {
    result = 0;
  } else if (this.scrollMode === 0) {
    // scroll y   
    result = 0;
  } else {
    // scroll x
    result = child.isRexSizer ? Math.max(child.minHeight, child.childrenHeight) : child.hasOwnProperty('minHeight') ? child.minHeight : (0, _GetDisplaySize.GetDisplayHeight)(child);
  }
  return result;
};
var _default = GetChildrenHeight;
exports.default = _default;
},{"../../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/GetChildrenSizers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetChildrenSizers = function (out) {
  if (out === undefined) {
    out = [];
  }
  if (this.child && this.child.isRexSizer) {
    out.push(this.child);
  }
  return out;
};
var _default = GetChildrenSizers;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/ResetChildPosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ResetChildPosition = function () {
  var x = this.left;
  var y = this.top;
  if (this.scrollMode === 0) {
    y += this.childOY;
  } else {
    x += this.childOY;
  }
  this.child.setPosition(x, y);
  this.resetChildPositionState(this.child);
  this.setMaskChildrenFlag();
};
var _default = ResetChildPosition;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/LayoutChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ResizeGameObject = _interopRequireDefault(require("../../../../plugins/utils/size/ResizeGameObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var LayoutChildren = function () {
  // LayoutChildren child
  var child = this.child;
  var childWidth, childHeight;
  if (!child.rexSizer.hidden) {
    // Set size
    if (this.scrollMode === 0) {
      childWidth = this.width;
    } else {
      childHeight = this.height;
    }
    if (child.isRexSizer) {
      child.runLayout(this, childWidth, childHeight);
    } else {
      (0, _ResizeGameObject.default)(child, childWidth, childHeight);
    }

    // Update local state
    this.resetChildPosition();
    // Layout children-mask
    this.layoutChildrenMask();
    // Re-mask children
    this.maskChildren();
  }
};
var _default = LayoutChildren;
exports.default = _default;
},{"../../../../plugins/utils/size/ResizeGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/ResizeGameObject.js"}],"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetChildrenWidth = _interopRequireDefault(require("./GetChildrenWidth.js"));
var _GetChildrenHeight = _interopRequireDefault(require("./GetChildrenHeight.js"));
var _GetChildrenSizers = _interopRequireDefault(require("./GetChildrenSizers.js"));
var _ResetChildPosition = _interopRequireDefault(require("./ResetChildPosition.js"));
var _LayoutChildren = _interopRequireDefault(require("./LayoutChildren.js"));
var _ChildrenMaskMethods = _interopRequireDefault(require("../../../../plugins/gameobjects/container/containerlite/mask/ChildrenMaskMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  getChildrenWidth: _GetChildrenWidth.default,
  getChildrenHeight: _GetChildrenHeight.default,
  getChildrenSizers: _GetChildrenSizers.default,
  resetChildPosition: _ResetChildPosition.default,
  layoutChildren: _LayoutChildren.default
};
Object.assign(methods, _ChildrenMaskMethods.default);
var _default = methods;
exports.default = _default;
},{"./GetChildrenWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/GetChildrenWidth.js","./GetChildrenHeight.js":"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/GetChildrenHeight.js","./GetChildrenSizers.js":"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/GetChildrenSizers.js","./ResetChildPosition.js":"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/ResetChildPosition.js","./LayoutChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/LayoutChildren.js","../../../../plugins/gameobjects/container/containerlite/mask/ChildrenMaskMethods.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/mask/ChildrenMaskMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/ScrollableBlock.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BaseSizer = _interopRequireDefault(require("../../basesizer/BaseSizer.js"));
var _Methods = _interopRequireDefault(require("./Methods.js"));
var _ScrollModeConst = _interopRequireDefault(require("../../utils/ScrollModeConst.js"));
var _GetDisplaySize = require("../../../../plugins/utils/size/GetDisplaySize.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const ALIGN_LEFTTOP = Phaser.Display.Align.TOP_LEFT;
class ScrollableBlock extends _BaseSizer.default {
  constructor(scene, x, y, minWidth, minHeight, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      minWidth = GetValue(config, 'width', undefined);
      minHeight = GetValue(config, 'height', undefined);
    } else if (IsPlainObject(minWidth)) {
      config = minWidth;
      minWidth = GetValue(config, 'width', undefined);
      minHeight = GetValue(config, 'height', undefined);
    }
    super(scene, x, y, minWidth, minHeight, config);
    this.type = 'rexScrollableBlock';
    this.child = undefined;
    this.childrenMask = undefined;
    this._childOY = 0;
    this.execeedTopState = false;
    this.execeedBottomState = false;
    this.setScrollMode(GetValue(config, 'scrollMode', true));
    this.setClampMode(GetValue(config, 'clamplChildOY', true));

    // Add elements
    // No background object, and child does not have padding
    var child = GetValue(config, 'child', undefined);
    var expand = GetValue(config, 'expand', true);
    if (child.setOrigin) {
      child.setOrigin(0);
    }
    this.add(child);
    this.sizerChildren = [child];
    var sizerConfig = this.getSizerConfig(child);
    sizerConfig.align = ALIGN_LEFTTOP;
    sizerConfig.expand = expand;
    this.child = child;

    // Create mask of child object
    this.setupChildrenMask(GetValue(config, 'mask', undefined));
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    this.destroyChildrenMask();
    this.child = undefined;
    super.destroy(fromScene);
  }
  setScrollMode(mode) {
    if (typeof mode === 'string') {
      mode = _ScrollModeConst.default[mode.toLowerCase()];
    }
    this.scrollMode = mode;
    return this;
  }
  setClampMode(mode) {
    if (mode === undefined) {
      mode = true;
    }
    this.clampChildOY = mode;
    return this;
  }
  get instHeight() {
    return this.scrollMode === 0 ? this.height : this.width;
  }
  get instWidth() {
    return this.scrollMode === 0 ? this.width : this.height;
  }
  get childHeight() {
    return this.scrollMode === 0 ? (0, _GetDisplaySize.GetDisplayHeight)(this.child) : (0, _GetDisplaySize.GetDisplayWidth)(this.child);
  }
  get childWidth() {
    return this.scrollMode === 0 ? (0, _GetDisplaySize.GetDisplayWidth)(this.child) : (0, _GetDisplaySize.GetDisplayHeight)(this.child);
  }
  get topChildOY() {
    return 0;
  }
  get bottomChildOY() {
    return -this.visibleHeight;
  }
  get childVisibleHeight() {
    return this.instHeight;
  }
  get visibleHeight() {
    var h = this.childHeight - this.childVisibleHeight;
    if (h < 0) {
      h = 0;
    }
    return h;
  }
  childOYExceedTop(oy) {
    if (oy === undefined) {
      oy = this.childOY;
    }
    return oy > this.topChildOY;
  }
  childOYExeceedBottom(oy) {
    if (oy === undefined) {
      oy = this.childOY;
    }
    return oy < this.bottomChildOY;
  }
  get childOY() {
    return this._childOY;
  }
  set childOY(oy) {
    var topChildOY = this.topChildOY;
    var bottomChildOY = this.bottomChildOY;
    var childOYExceedTop = this.childOYExceedTop(oy);
    var childOYExeceedBottom = this.childOYExeceedBottom(oy);
    if (this.clampChildOY) {
      if (this.childVisibleHeight > this.childHeight) {
        oy = 0;
      } else if (childOYExceedTop) {
        oy = topChildOY;
      } else if (childOYExeceedBottom) {
        oy = bottomChildOY;
      }
    }
    if (this._childOY !== oy) {
      this._childOY = oy;
      this.resetChildPosition();
    }
    if (childOYExceedTop) {
      if (!this.execeedTopState) {
        this.emit('execeedtop', this, oy, topChildOY);
      }
    }
    this.execeedTopState = childOYExceedTop;
    if (childOYExeceedBottom) {
      if (!this.execeedBottomState) {
        this.emit('execeedbottom', this, oy, bottomChildOY);
      }
    }
    this.execeedBottomState = childOYExeceedBottom;
  }
  setChildOY(oy) {
    this.childOY = oy;
    return this;
  }
  set t(value) {
    this.childOY = -this.visibleHeight * value;
  }
  get t() {
    var visibleHeight = this.visibleHeight;
    if (visibleHeight === 0) {
      return 0;
    }
    return this.childOY / -visibleHeight;
  }
  setChildOYByPercentage(percentage) {
    this.t = percentage;
    return this;
  }
}
Object.assign(ScrollableBlock.prototype, _Methods.default);
var _default = ScrollableBlock;
exports.default = _default;
},{"../../basesizer/BaseSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/basesizer/BaseSizer.js","./Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/Methods.js","../../utils/ScrollModeConst.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/ScrollModeConst.js","../../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js"}],"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/ScrollablePanel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Scrollable = _interopRequireDefault(require("../utils/scrollable/Scrollable.js"));
var _GetScrollMode = _interopRequireDefault(require("../utils/GetScrollMode.js"));
var _ScrollableBlock = _interopRequireDefault(require("./scrollableblock/ScrollableBlock.js"));
var _SetChildrenInteractive = _interopRequireDefault(require("../utils/setchildreninteractive/SetChildrenInteractive.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class ScrollablePanel extends _Scrollable.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }

    // Create scrollable-block
    var scrollMode = (0, _GetScrollMode.default)(config);
    var panelConfig = GetValue(config, 'panel', undefined);
    if (panelConfig === undefined) {
      panelConfig = {};
    }
    panelConfig.scrollMode = scrollMode;
    panelConfig.clamplChildOY = GetValue(config, 'clamplChildOY', false);
    var scrollableBlock = new _ScrollableBlock.default(scene, panelConfig);
    scene.add.existing(scrollableBlock); // Important: Add to display list for touch detecting
    var panelWidth = GetValue(panelConfig, 'width', undefined);
    var panelHeight = GetValue(panelConfig, 'height', undefined);
    var proportion, expand;
    if (scrollMode === 0) {
      proportion = panelWidth === undefined ? 1 : 0;
      expand = panelHeight === undefined;
    } else {
      proportion = panelHeight === undefined ? 1 : 0;
      expand = panelWidth === undefined;
    }

    // Fill config of scrollable
    config.type = 'rexScrollablePanel';
    config.child = {
      gameObject: scrollableBlock,
      proportion: proportion,
      expand: expand
    };
    var spaceConfig = GetValue(config, 'space', undefined);
    if (spaceConfig) {
      spaceConfig.child = spaceConfig.panel;
    }
    super(scene, config);
    this.addChildrenMap('panel', scrollableBlock.child);
    this.addChildrenMap('panelLayer', scrollableBlock.maskLayer);
  }
  setChildrenInteractive(config) {
    if (config === undefined) {
      config = {};
    }
    if (!config.hasOwnProperty('eventEmitter')) {
      config.eventEmitter = this;
    }
    if (!config.hasOwnProperty('targets')) {
      config.targets = [this.childrenMap.panel];
    }
    (0, _SetChildrenInteractive.default)(this.childrenMap.child, config);
    return this;
  }
}
var _default = ScrollablePanel;
exports.default = _default;
},{"../utils/scrollable/Scrollable.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/scrollable/Scrollable.js","../utils/GetScrollMode.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetScrollMode.js","./scrollableblock/ScrollableBlock.js":"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/scrollableblock/ScrollableBlock.js","../utils/setchildreninteractive/SetChildrenInteractive.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/SetChildrenInteractive.js"}],"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ScrollablePanel = _interopRequireDefault(require("./ScrollablePanel.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('scrollablePanel', function (config) {
  var gameObject = new _ScrollablePanel.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.ScrollablePanel', _ScrollablePanel.default);
var _default = _ScrollablePanel.default;
exports.default = _default;
},{"./ScrollablePanel.js":"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/ScrollablePanel.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/toast/DefaultTransitCallbacks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  popUp: function (gameObject, duration) {
    gameObject.popUp(duration);
  },
  scaleDown: function (gameObject, duration) {
    gameObject.scaleDown(duration);
  },
  fadeIn: function (gameObject, duration) {
    gameObject.fadeIn(duration);
  },
  fadeOut: function (gameObject, duration) {
    gameObject.fadeOut(duration);
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/clock.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Clock = _interopRequireDefault(require("./time/clock/Clock.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _Clock.default;
exports.default = _default;
},{"./time/clock/Clock.js":"node_modules/phaser3-rex-plugins/plugins/time/clock/Clock.js"}],"node_modules/phaser3-rex-plugins/plugins/logic/runcommands/RunCommands.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetValue = _interopRequireDefault(require("../../utils/object/GetValue.js"));
var _Copy = _interopRequireDefault(require("../../utils/array/Copy.js"));
var _TypeConvert = _interopRequireDefault(require("../../utils/string/TypeConvert.js"));
var _IsArray = _interopRequireDefault(require("../../utils/object/IsArray.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var RunCommands = function (queue, scope, config) {
  var reverse = (0, _GetValue.default)(config, 'reverse', false);
  var retVal;
  if ((0, _IsArray.default)(queue[0])) {
    if (!reverse) {
      for (var i = 0, len = queue.length; i < len; i++) {
        retVal = RunCommands(queue[i], scope, config);
      }
    } else {
      for (var len = queue.length, i = len - 1; i >= 0; i--) {
        retVal = RunCommands(queue[i], scope, config);
      }
    }
  } else {
    retVal = RunCommand(queue, scope, config);
  }
  return retVal;
};
var RunCommand = function (cmd, scope, config) {
  var argsConvert = (0, _GetValue.default)(config, 'argsConvert', undefined);
  var argsConvertScope = (0, _GetValue.default)(config, 'argsConvertScope', undefined);
  var fnName = cmd[0];
  ARGS = (0, _Copy.default)(ARGS, cmd, 1);
  if (argsConvert) {
    // convert string to floating number, boolean, null, or string        
    if (argsConvert === true) {
      argsConvert = _TypeConvert.default;
      argsConvertScope = undefined;
    }
    for (var i = 0, len = ARGS.length; i < len; i++) {
      if (argsConvertScope) {
        ARGS[i] = argsConvert.call(argsConvertScope, ARGS[i], cmd);
      } else {
        ARGS[i] = argsConvert(ARGS[i], cmd);
      }
    }
  }
  var fn;
  if (typeof fnName === 'string') {
    fn = scope[fnName];
    if (fn == null) {
      fn = (0, _GetValue.default)(scope, fnName, null);
    }
  } else {
    fn = fnName;
  }
  var retValue = fn.apply(scope, ARGS);
  return retValue;
};
var ARGS = []; // reuse this array
var _default = RunCommands;
exports.default = _default;
},{"../../utils/object/GetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/GetValue.js","../../utils/array/Copy.js":"node_modules/phaser3-rex-plugins/plugins/utils/array/Copy.js","../../utils/string/TypeConvert.js":"node_modules/phaser3-rex-plugins/plugins/utils/string/TypeConvert.js","../../utils/object/IsArray.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsArray.js"}],"node_modules/phaser3-rex-plugins/plugins/runcommands.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RunCommands = _interopRequireDefault(require("./logic/runcommands/RunCommands.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _RunCommands.default;
exports.default = _default;
},{"./logic/runcommands/RunCommands.js":"node_modules/phaser3-rex-plugins/plugins/logic/runcommands/RunCommands.js"}],"node_modules/phaser3-rex-plugins/plugins/logic/runcommands/tcrp/Player.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../../utils/componentbase/ComponentBase.js"));
var _clock = _interopRequireDefault(require("../../../clock.js"));
var _Copy = _interopRequireDefault(require("../../../utils/array/Copy.js"));
var _runcommands = _interopRequireDefault(require("../../../runcommands.js"));
var _IsArray = _interopRequireDefault(require("../../../utils/object/IsArray.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Player extends _ComponentBase.default {
  constructor(parent, config) {
    super(parent, config);
    var clock = GetValue(config, 'clock', undefined);
    if (!clock) {
      clock = new _clock.default(parent);
    }
    this.clock = clock;
    this.clock.on('update', this.update, this);
    this.resetFromJSON(config); // this function had been called in super(config)
  }

  resetFromJSON(o) {
    this.clock.resetFromJSON(GetValue(o, 'clock', undefined));
    this.state = GetValue(o, 'state', 0); // 0=idle, 1=run, 2=completed
    this.commands = GetValue(o, 'commands', []); // [[time, cmds], [time, cmds], ...]
    this.scope = GetValue(o, 'scope', undefined);
    this.setTimeUnit(GetValue(o, 'timeUnit', 0));
    this.setDtMode(GetValue(o, 'dtMode', 0));
    this.index = GetValue(o, 'index', 0);
    this.nextTime = GetValue(o, 'nextTime', 0);
    return this;
  }
  toJSON() {
    return {
      clock: this.clock.toJSON(),
      state: this.state,
      commands: this.commands,
      scope: this.scope,
      timeUnit: this.timeUnit,
      dtMode: this.dtMode,
      index: this.index,
      nextTime: this.nextTime
    };
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }
    this.clock.shutdown(fromScene);
    this.commands = undefined;
    super.shutdown(fromScene);
  }
  load(commands, scope, config) {
    this.stop();
    var timeUnit = GetValue(config, 'timeUnit', undefined);
    if (timeUnit !== undefined) {
      this.setTimeUnit(timeUnit);
    }
    var dtMode = GetValue(config, 'dtMode', undefined);
    if (dtMode !== undefined) {
      this.setDtMode(dtMode);
    }
    commands = commands.filter(function (item) {
      var dt = item[0];
      return !isNaN(dt);
    }).map(function (item) {
      var dt = item[0];
      if (typeof dt === 'string') {
        item[0] = parseFloat(item[0]);
      }
      return item;
    });
    if (this.dtMode === 0) {
      commands.sort(function (itemA, itemB) {
        var dtA = itemA[0],
          dtB = itemB[0];
        return dtA > dtB ? 1 : dtA < dtB ? -1 : 0;
      });
    }
    this.commands = commands;
    this.scope = scope;
    return this;
  }
  start(startAt) {
    if (startAt === undefined) {
      startAt = 0;
    }
    this.stop();
    this.index = 0;
    this.state = 1;
    this.nextTime = this.getNextDt(0);
    this.clock.start(startAt);
    this.update(startAt);
    this.emit('start', this.parent, this);
    return this;
  }
  pause() {
    this.clock.pause();
    this.emit('pause', this.parent, this);
    return this;
  }
  resume() {
    this.clock.resume();
    this.emit('resume', this.parent, this);
    return this;
  }
  stop() {
    this.clock.stop();
    this.state = 0;
    this.emit('stop', this.parent, this);
    return this;
  }
  seek(time) {
    this.clock.seek(time);
    return this;
  }
  seekToNext() {
    this.seek(this.nextTime);
    return this;
  }
  get isPlaying() {
    return this.clock.isRunning;
  }
  get completed() {
    return this.state === 2;
  }
  get timeScale() {
    return this.clock.timeScale;
  }
  set timeScale(timeScale) {
    this.clock.timeScale = timeScale;
  }
  setTimeScale(timeScale) {
    this.timeScale = timeScale;
    return this;
  }
  get now() {
    return this.clock.now;
  }
  update(now) {
    if (this.nextTime > now) {
      return this;
    }
    var lastCommandIndex = this.commands.length - 1;
    while (1) {
      // Execute a command
      var item = this.commands[this.index];
      var command = item[1];
      if (!(0, _IsArray.default)(command)) {
        // [dt, fnName, param0, param1, ...]
        command = (0, _Copy.default)(CMD, item, 1);
      }
      (0, _runcommands.default)(command, this.scope);
      this.emit('runcommand', command, this.scope);
      // Execute a command

      if (this.index === lastCommandIndex) {
        this.complete();
        return this;
      } else {
        // Get next time
        this.index++; // Point to next command
        this.nextTime = this.getNextDt(this.nextTime);
        if (this.nextTime > now) {
          return this;
        }
        // Get next time
      }
    }
  }

  complete() {
    this.clock.stop();
    this.state = 2;
    this.emit('complete', this.parent, this);
  }
  getNextDt(currentDt) {
    var time = this.commands[this.index][0];
    if (this.timeUnit === 1) {
      // Second mode
      time = time * 1000;
    }
    if (this.dtMode === 1) {
      time += currentDt;
    }
    return time;
  }
  setDtMode(dtMode) {
    if (typeof dtMode === 'string') {
      dtMode = DTMODE[dtMode];
    }
    this.dtMode = dtMode;
    return this;
  }
  setTimeUnit(timeUnit) {
    if (typeof timeUnit === 'string') {
      timeUnit = TIMEUNITMODE[timeUnit];
    }
    this.timeUnit = timeUnit;
    return this;
  }
}
var CMD = []; // reuse this array

const TIMEUNITMODE = {
  ms: 0,
  s: 1,
  sec: 1
};
const DTMODE = {
  abs: 0,
  absolute: 0,
  inc: 1,
  increment: 1
};
var _default = Player;
exports.default = _default;
},{"../../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js","../../../clock.js":"node_modules/phaser3-rex-plugins/plugins/clock.js","../../../utils/array/Copy.js":"node_modules/phaser3-rex-plugins/plugins/utils/array/Copy.js","../../../runcommands.js":"node_modules/phaser3-rex-plugins/plugins/runcommands.js","../../../utils/object/IsArray.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsArray.js"}],"node_modules/phaser3-rex-plugins/templates/ui/toast/Toast.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Label = _interopRequireDefault(require("../label/Label.js"));
var _DefaultTransitCallbacks = _interopRequireDefault(require("./DefaultTransitCallbacks.js"));
var _Player = _interopRequireDefault(require("../../../plugins/logic/runcommands/tcrp/Player.js"));
var _NOOP = _interopRequireDefault(require("../../../plugins/utils/object/NOOP.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Toast extends _Label.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {
        text: createDefaultTextObject(scene)
      };
    }
    super(scene, config);
    this.type = 'rexToast';
    this.setTransitInTime(GetValue(config, 'duration.in', 200));
    this.setDisplayTime(GetValue(config, 'duration.hold', 1200));
    this.setTransitOutTime(GetValue(config, 'duration.out', 200));
    this.setTransitInCallback(GetValue(config, 'transitIn', TransitionMode.popUp));
    this.setTransitOutCallback(GetValue(config, 'transitOut', TransitionMode.scaleDown));
    this.player = new _Player.default(this, {
      dtMode: 1
    });
    this.messages = [];
    this.scaleX0 = undefined;
    this.scaleY0 = undefined;
    this.setVisible(false);
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    this.player.destroy();
    this.player = undefined;
    this.messages = undefined;
    super.destroy(fromScene);
  }
  setDisplayTime(time) {
    this.displayTime = time;
    return this;
  }
  setTransitOutTime(time) {
    this.transitOutTime = time;
    return this;
  }
  setTransitInTime(time) {
    this.transitInTime = time;
    return this;
  }
  setTransitInCallback(callback) {
    if (typeof callback === 'string') {
      callback = TransitionMode[callback];
    }
    switch (callback) {
      case TransitionMode.popUp:
        callback = _DefaultTransitCallbacks.default.popUp;
        break;
      case TransitionMode.fadeIn:
        callback = _DefaultTransitCallbacks.default.fadeIn;
        break;
    }
    if (!callback) {
      callback = _NOOP.default;
    }
    this.transitInCallback = callback;
    // callback = function(gameObject, duration) {}
    return this;
  }
  setTransitOutCallback(callback) {
    if (typeof callback === 'string') {
      callback = TransitionMode[callback];
    }
    switch (callback) {
      case TransitionMode.scaleDown:
        callback = _DefaultTransitCallbacks.default.scaleDown;
        break;
      case TransitionMode.fadeOut:
        callback = _DefaultTransitCallbacks.default.fadeOut;
        break;
    }
    if (!callback) {
      callback = _NOOP.default;
    }
    this.transitOutCallback = callback;
    // callback = function(gameObject, duration) {}
    return this;
  }
  setScale(scaleX, scaleY) {
    if (scaleY === undefined) {
      scaleY = scaleX;
    }
    // Can override initial scale
    this.scaleX0 = scaleX;
    this.scaleY0 = scaleY;
    super.setScale(scaleX, scaleY);
    return this;
  }
  showMessage(callback) {
    // Remember first scaleX, scaleY as initial scale
    if (this.scaleX0 === undefined) {
      this.scaleX0 = this.scaleX;
    }
    if (this.scaleY0 === undefined) {
      this.scaleY0 = this.scaleY;
    }
    if (callback === undefined) {
      // Try pop up a pendding message
      if (this.messages.length === 0) {
        return this;
      }
      callback = this.messages.shift();
    }
    if (this.player.isPlaying) {
      // Pend message
      this.messages.push(callback);
      return this;
    }

    // Recover to initial state
    this.setScale(this.scaleX0, this.scaleY0).setVisible(true);
    if (typeof callback === 'string') {
      this.setText(callback);
    } else {
      callback(this);
    }
    this.layout();
    var commands = [[
    // Transit-in
    0,
    // time
    [this.transitInCallback, this, this.transitInTime] // [callback, param, ...]
    ], [
    // Hold
    this.transitInTime, [_NOOP.default]], [
    // Transit-out
    this.displayTime, [this.transitOutCallback, this, this.transitOutTime]], [
    // End
    this.transitOutTime, [this.setVisible, false]], [
    // Complete - show next message
    30,
    // Add a small delay before complete
    [_NOOP.default]]];
    this.player.load(commands, this).once('complete', function () {
      this.showMessage();
    }, this).start();
    return this;
  }
}
const TransitionMode = {
  popUp: 0,
  fadeIn: 1,
  scaleDown: 0,
  fadeOut: 1
};
var _default = Toast;
exports.default = _default;
},{"../label/Label.js":"node_modules/phaser3-rex-plugins/templates/ui/label/Label.js","./DefaultTransitCallbacks.js":"node_modules/phaser3-rex-plugins/templates/ui/toast/DefaultTransitCallbacks.js","../../../plugins/logic/runcommands/tcrp/Player.js":"node_modules/phaser3-rex-plugins/plugins/logic/runcommands/tcrp/Player.js","../../../plugins/utils/object/NOOP.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/NOOP.js"}],"node_modules/phaser3-rex-plugins/templates/ui/toast/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Toast = _interopRequireDefault(require("./Toast.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('toast', function (config) {
  var gameObject = new _Toast.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Toast', _Toast.default);
var _default = _Toast.default;
exports.default = _default;
},{"./Toast.js":"node_modules/phaser3-rex-plugins/templates/ui/toast/Toast.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/system/IsGameObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const GameObjectClass = Phaser.GameObjects.GameObject;
var IsGameObject = function (object) {
  return object instanceof GameObjectClass;
};
var _default = IsGameObject;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinputbase/methods/CreateSwatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RoundRectangle = _interopRequireDefault(require("../../../roundrectangle/RoundRectangle.js"));
var _IsGameObject = _interopRequireDefault(require("../../../../../plugins/utils/system/IsGameObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateSwatch = function (scene, config) {
  if (config === false) {
    return null;
  } else if ((0, _IsGameObject.default)(config)) {
    return config;
  }
  var swatch = new _RoundRectangle.default(scene, config);
  scene.add.existing(swatch);
  return swatch;
};
var _default = CreateSwatch;
exports.default = _default;
},{"../../../roundrectangle/RoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/roundrectangle/RoundRectangle.js","../../../../../plugins/utils/system/IsGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsGameObject.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateInputText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CanvasInput = _interopRequireDefault(require("../../canvasinput/CanvasInput.js"));
var _DeepClone = _interopRequireDefault(require("../../../../plugins/utils/object/DeepClone.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateInputText = function (scene, config, deepCloneConfig) {
  if (deepCloneConfig === undefined) {
    deepCloneConfig = true;
  }
  if (deepCloneConfig) {
    config = config ? (0, _DeepClone.default)(config) : {};
  } else if (!config) {
    config = {};
  }
  var inputText = new _CanvasInput.default(scene, config);
  scene.add.existing(inputText);
  return inputText;
};
var _default = CreateInputText;
exports.default = _default;
},{"../../canvasinput/CanvasInput.js":"node_modules/phaser3-rex-plugins/templates/ui/canvasinput/CanvasInput.js","../../../../plugins/utils/object/DeepClone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/color/ColorNameToInteger.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IntegerToColorName = exports.ColorNames = exports.ColorNameToInteger = void 0;
const ColorNames = ['AliceBlue', 'AntiqueWhite', 'Aqua', 'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond', 'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue', 'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk', 'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenRod', 'DarkGray', 'DarkGrey', 'DarkGreen', 'DarkKhaki', 'DarkMagenta', 'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed', 'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray', 'DarkSlateGrey', 'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray', 'DimGrey', 'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia', 'Gainsboro', 'GhostWhite', 'Gold', 'GoldenRod', 'Gray', 'Grey', 'Green', 'GreenYellow', 'HoneyDew', 'HotPink', 'IndianRed', 'Indigo', 'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen', 'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan', 'LightGoldenRodYellow', 'LightGray', 'LightGrey', 'LightGreen', 'LightPink', 'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray', 'LightSlateGrey', 'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen', 'Magenta', 'Maroon', 'MediumAquaMarine', 'MediumBlue', 'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue', 'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed', 'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite', 'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed', 'Orchid', 'PaleGoldenRod', 'PaleGreen', 'PaleTurquoise', 'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum', 'PowderBlue', 'Purple', 'RebeccaPurple', 'Red', 'RosyBrown', 'RoyalBlue', 'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'SeaShell', 'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'SlateGrey', 'Snow', 'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato', 'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow', 'YellowGreen'];
exports.ColorNames = ColorNames;
const ColorValues = [0xf0f8ff, 0xfaebd7, 0x00ffff, 0x7fffd4, 0xf0ffff, 0xf5f5dc, 0xffe4c4, 0x000000, 0xffebcd, 0x0000ff, 0x8a2be2, 0xa52a2a, 0xdeb887, 0x5f9ea0, 0x7fff00, 0xd2691e, 0xff7f50, 0x6495ed, 0xfff8dc, 0xdc143c, 0x00ffff, 0x00008b, 0x008b8b, 0xb8860b, 0xa9a9a9, 0xa9a9a9, 0x006400, 0xbdb76b, 0x8b008b, 0x556b2f, 0xff8c00, 0x9932cc, 0x8b0000, 0xe9967a, 0x8fbc8f, 0x483d8b, 0x2f4f4f, 0x2f4f4f, 0x00ced1, 0x9400d3, 0xff1493, 0x00bfff, 0x696969, 0x696969, 0x1e90ff, 0xb22222, 0xfffaf0, 0x228b22, 0xff00ff, 0xdcdcdc, 0xf8f8ff, 0xffd700, 0xdaa520, 0x808080, 0x808080, 0x008000, 0xadff2f, 0xf0fff0, 0xff69b4, 0xcd5c5c, 0x4b0082, 0xfffff0, 0xf0e68c, 0xe6e6fa, 0xfff0f5, 0x7cfc00, 0xfffacd, 0xadd8e6, 0xf08080, 0xe0ffff, 0xfafad2, 0xd3d3d3, 0xd3d3d3, 0x90ee90, 0xffb6c1, 0xffa07a, 0x20b2aa, 0x87cefa, 0x778899, 0x778899, 0xb0c4de, 0xffffe0, 0x00ff00, 0x32cd32, 0xfaf0e6, 0xff00ff, 0x800000, 0x66cdaa, 0x0000cd, 0xba55d3, 0x9370db, 0x3cb371, 0x7b68ee, 0x00fa9a, 0x48d1cc, 0xc71585, 0x191970, 0xf5fffa, 0xffe4e1, 0xffe4b5, 0xffdead, 0x000080, 0xfdf5e6, 0x808000, 0x6b8e23, 0xffa500, 0xff4500, 0xda70d6, 0xeee8aa, 0x98fb98, 0xafeeee, 0xdb7093, 0xffefd5, 0xffdab9, 0xcd853f, 0xffc0cb, 0xdda0dd, 0xb0e0e6, 0x800080, 0x663399, 0xff0000, 0xbc8f8f, 0x4169e1, 0x8b4513, 0xfa8072, 0xf4a460, 0x2e8b57, 0xfff5ee, 0xa0522d, 0xc0c0c0, 0x87ceeb, 0x6a5acd, 0x708090, 0x708090, 0xfffafa, 0x00ff7f, 0x4682b4, 0xd2b48c, 0x008080, 0xd8bfd8, 0xff6347, 0x40e0d0, 0xee82ee, 0xf5deb3, 0xffffff, 0xf5f5f5, 0xffff00, 0x9acd32];
var ColorNameToIntegerDict = {},
  name;
for (var i = 0, cnt = ColorNames.length; i < cnt; i++) {
  name = ColorNames[i].toLowerCase();
  ColorNameToIntegerDict[name] = ColorValues[i];
}
var ColorNameToInteger = function (colorName) {
  colorName = colorName.toLowerCase();
  if (ColorNameToIntegerDict.hasOwnProperty(colorName)) {
    return ColorNameToIntegerDict[colorName];
  } else {
    return null;
  }
};
exports.ColorNameToInteger = ColorNameToInteger;
var IntegerToColorName = function (colorValue) {
  var idx = ColorValues.indexOf(colorValue);
  if (idx === -1) {
    return '';
  } else {
    return ColorNames[idx];
  }
};
exports.IntegerToColorName = IntegerToColorName;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/color/ColorStringToInteger.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ColorNameToInteger = require("./ColorNameToInteger");
var ColorStringToInteger = function (value) {
  if (typeof value !== 'string') {
    return value;
  }
  if (value.startsWith('#')) {
    value = parseInt(value.substring(1), 16);
  } else if (value.startsWith('0x')) {
    value = parseInt(value.substring(2), 16);
  } else {
    value = (0, _ColorNameToInteger.ColorNameToInteger)(value);
  }
  return value;
};
var _default = ColorStringToInteger;
exports.default = _default;
},{"./ColorNameToInteger":"node_modules/phaser3-rex-plugins/plugins/utils/color/ColorNameToInteger.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/color/GetHexColorString.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const Pad = Phaser.Utils.String.Pad;
var GetHexColorString = function (value, prefix) {
  if (prefix === undefined) {
    prefix = '0x';
  }
  var colorString = value.toString(16).toUpperCase();
  colorString = Pad(colorString, 6, 0, 1);
  colorString = prefix + colorString;
  return colorString;
};
var _default = GetHexColorString;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinputbase/methods/SetSwatchColor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetSwatchColor = function (swatch, color) {
  if (!swatch) {
    return;
  }
  if (swatch.setTint) {
    swatch.setTint(color);
  } else if (swatch.setFillStyle) {
    swatch.setFillStyle(color);
  }
};
var _default = SetSwatchColor;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinputbase/ColorInputBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../../sizer/Sizer.js"));
var _CreateSwatch = _interopRequireDefault(require("./methods/CreateSwatch.js"));
var _CreateInputText = _interopRequireDefault(require("../../utils/build/CreateInputText.js"));
var _ColorStringToInteger = _interopRequireDefault(require("../../../../plugins/utils/color/ColorStringToInteger.js"));
var _GetHexColorString = _interopRequireDefault(require("../../../../plugins/utils/color/GetHexColorString.js"));
var _SetSwatchColor = _interopRequireDefault(require("./methods/SetSwatchColor.js"));
var _ResizeGameObject = _interopRequireDefault(require("../../../../plugins/utils/size/ResizeGameObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const Clamp = Phaser.Math.Clamp;
class ColorInput extends _Sizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    config.orientation = 0;
    super(scene, config);
    this.type = 'rexColorInputLite';

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var swatchConfig = GetValue(config, 'swatch');
    var swatchSize;
    if (IsPlainObject(swatchConfig)) {
      swatchSize = GetValue(swatchConfig, 'size');
    }
    var swatch = (0, _CreateSwatch.default)(scene, GetValue(config, 'swatch'));
    var inputTextConfig = GetValue(config, 'inputText', true);
    var inputText;
    if (inputTextConfig) {
      inputText = (0, _CreateInputText.default)(scene, inputTextConfig);
    }
    if (background) {
      this.addBackground(background);
    }
    if (swatch) {
      swatchSize = GetValue(config, 'swatchSize', swatchSize);
      var squareExpandSwatch;
      if (swatchSize !== undefined) {
        (0, _ResizeGameObject.default)(swatch, swatchSize, swatchSize);
        squareExpandSwatch = false;
      } else {
        squareExpandSwatch = GetValue(config, 'squareExpandSwatch', true);
      }
      var fitRatio = squareExpandSwatch ? 1 : 0;
      this.add(swatch, {
        proportion: 0,
        expand: false,
        fitRatio: fitRatio
      });
    }
    if (inputText) {
      var proportion = GetValue(inputTextConfig, 'width') === undefined ? 1 : 0;
      var expand = GetValue(inputTextConfig, 'height') === undefined ? true : false;
      this.add(inputText, {
        proportion: proportion,
        expand: expand
      });
    }
    this.addChildrenMap('background', background);
    this.addChildrenMap('swatch', swatch);
    this.addChildrenMap('inputText', inputText);
    if (inputText) {
      inputText.on('close', function () {
        this.setValue(inputText.value);
      }, this);
    }
    var callback = GetValue(config, 'valuechangeCallback', null);
    if (callback !== null) {
      var scope = GetValue(config, 'valuechangeCallbackScope', undefined);
      this.on('valuechange', callback, scope);
    }
    this.setValue(GetValue(config, 'value', 0x0));
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (typeof value === 'string') {
      value = (0, _ColorStringToInteger.default)(value);
      if (value == null) {
        var inputText = this.childrenMap.inputText;
        if (inputText) {
          inputText.setText((0, _GetHexColorString.default)(this._value));
        }
        return;
      }
    } else {
      value = Clamp(Math.floor(value), 0, 0xffffff);
    }
    if (this._value === value) {
      return;
    }
    this._value = value;
    var swatch = this.childrenMap.swatch;
    if (swatch) {
      (0, _SetSwatchColor.default)(swatch, value);
    }
    var inputText = this.childrenMap.inputText;
    if (inputText) {
      inputText.setText((0, _GetHexColorString.default)(value));
    }
    this.emit('valuechange', this._value);
  }
  setValue(value) {
    this.value = value;
    return this;
  }
  get color() {
    return this._value;
  }
  set color(color) {
    this.value = color;
  }
  setColor(color) {
    this.color = color;
    return this;
  }
}
var _default = ColorInput;
exports.default = _default;
},{"../../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","./methods/CreateSwatch.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinputbase/methods/CreateSwatch.js","../../utils/build/CreateInputText.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateInputText.js","../../../../plugins/utils/color/ColorStringToInteger.js":"node_modules/phaser3-rex-plugins/plugins/utils/color/ColorStringToInteger.js","../../../../plugins/utils/color/GetHexColorString.js":"node_modules/phaser3-rex-plugins/plugins/utils/color/GetHexColorString.js","./methods/SetSwatchColor.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinputbase/methods/SetSwatchColor.js","../../../../plugins/utils/size/ResizeGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/ResizeGameObject.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/methods/ConfigurationMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var methods = {
  // Color picker
  setCreateColorPickerBackgroundCallback(callback) {
    this.colorPickerCreateBackgroundCallback = callback;
    return this;
  },
  setColorPickerHPalettePosition(position) {
    this.colorPickerHPalettePosition = position;
    return this;
  },
  setColorPickerExpandDirection(direction) {
    if (typeof direction === 'string') {
      direction = ColorPickerExpandDirections[direction];
    }
    this.colorPickerExpandDirection = direction;
    return this;
  },
  setColorPickerEaseInDuration(duration) {
    if (duration === undefined) {
      duration = 0;
    }
    this.colorPickerEaseInDuration = duration;
    return this;
  },
  setColorPickerEaseOutDuration(duration) {
    if (duration === undefined) {
      duration = 0;
    }
    this.colorPickerEaseOutDuration = duration;
    return this;
  },
  setColorPickerTransitInCallback(callback) {
    this.colorPickerTransitInCallback = callback;
    // callback = function(gameObject, duration) {}
    return this;
  },
  setColorPickerTransitOutCallback(callback) {
    this.colorPickerTransitOutCallback = callback;
    // callback = function(gameObject, duration) {}
    return this;
  },
  setColorPickerBounds(bounds) {
    this.colorPickerBounds = bounds;
    return this;
  },
  setColorPickerWidth(width) {
    this.colorPickerWidth = width;
    return this;
  },
  setColorPickerHeight(height) {
    this.colorPickerHeight = height;
    return this;
  },
  setColorPickerSize(width, height) {
    this.setColorPickerWidth(width).setColorPickerHeight(height);
    return this;
  },
  setColorPickerSpace(space) {
    if (space === undefined) {
      space = {};
    }
    this.colorPickerSpace = space;
    return this;
  },
  // Color components
  setColorComponentsHeight(height) {
    this.colorComponentsHeight = height;
    return this;
  },
  setColorComponentsFormatLabelConfig(config) {
    this.colorComponentsFormatLabelConfig = config;
    return this;
  },
  setColorComponentsInputTextConfig(config) {
    this.colorComponentsInputTextConfig = config;
    return this;
  },
  setColorComponentsSpace(space) {
    if (space === undefined) {
      space = {};
    }
    this.colorComponentsSpace = space;
    return this;
  }
};
const ColorPickerExpandDirections = {
  down: 0,
  up: 1
};
var _default = methods;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/canvas/DrawHSVPalette.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawSVPalette = exports.DrawHPalette = void 0;
const Color = Phaser.Display.Color;
const Percent = Phaser.Math.Percent;
var DrawHPalette = function (canvas, context, verticalMode) {
  if (verticalMode === undefined) {
    verticalMode = false;
  }
  var width = canvas.width;
  var height = canvas.height;
  var color = new Color();
  if (verticalMode) {
    for (var iy = 0; iy < height; iy++) {
      var h = Percent(iy, 0, height);
      color.setFromHSV(h, 1, 1);
      context.fillStyle = color.rgba;
      context.fillRect(0, iy, width, 1);
    }
  } else {
    for (var ix = 0; ix < width; ix++) {
      var h = Percent(ix, 0, width);
      color.setFromHSV(h, 1, 1);
      context.fillStyle = color.rgba;
      context.fillRect(ix, 0, 1, height);
    }
  }
};
exports.DrawHPalette = DrawHPalette;
var DrawSVPalette = function (canvas, context, h) {
  var width = canvas.width;
  var height = canvas.height;
  var imgData = context.getImageData(0, 0, width, height);
  var data = imgData.data;
  var color = new Color();
  for (var iy = 0; iy < height; iy++) {
    for (var ix = 0; ix < width; ix++) {
      var s = Percent(ix, 0, width);
      var v = 1 - Percent(iy, 0, height);
      color.setFromHSV(h, s, v);
      var i = (iy * width + ix) * 4;
      data[i] = color.red;
      data[i + 1] = color.green;
      data[i + 2] = color.blue;
      data[i + 3] = 255;
    }
  }
  context.putImageData(imgData, 0, 0);
};
exports.DrawSVPalette = DrawSVPalette;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/methods/HPaletteCanvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Canvas = _interopRequireDefault(require("../../../canvas/Canvas.js"));
var _GetOrientationMode = _interopRequireDefault(require("../../../utils/GetOrientationMode.js"));
var _DrawHSVPalette = require("../../../../../plugins/utils/canvas/DrawHSVPalette.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Color = Phaser.Display.Color;
const Percent = Phaser.Math.Percent;
const ColorToRGBA = Phaser.Display.Color.ColorToRGBA;
const HSVToRGB = Phaser.Display.Color.HSVToRGB;
class HPaletteCanvas extends _Canvas.default {
  constructor(scene, x, y, width, height, orientation) {
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (width === undefined) {
      width = 2;
    }
    if (height === undefined) {
      height = 2;
    }
    super(scene, x, y, width, height);
    this.type = 'rexColorPicker.HPaletteCanvas';
    this.colorObject = new Color();
    this.setOrientation(orientation);
    this.setSize(width, height);
  }
  setOrientation(orientation) {
    this.orientation = (0, _GetOrientationMode.default)(orientation);
    return this;
  }
  updateTexture() {
    (0, _DrawHSVPalette.DrawHPalette)(this.canvas, this.context, this.orientation);
    super.updateTexture();
    return this;
  }
  get color() {
    return this.colorObject.color;
  }
  get hue() {
    return this._hue;
  }
  set hue(value) {
    this._hue = value;
  }
  getHue(localX, localY) {
    if (localX === undefined) {
      return this.hue;
    }
    if (this.orientation === 0) {
      this.hue = Percent(localX, 0, this.width);
    } else {
      this.hue = Percent(localY, 0, this.height);
    }
    return this.hue;
  }
  getColor(localX, localY) {
    if (localX === undefined) {
      return this.color;
    }
    var h = this.getHue(localX, localY);
    this.colorObject.setFromRGB(HSVToRGB(h, 1, 1));
    return this.colorObject.color;
  }
  setColor(color) {
    if (this.color === color) {
      return this;
    }
    return this;
  }
  colorToLocalPosition(color, out) {
    if (out === undefined) {
      out = {};
    } else if (out === true) {
      if (LocalXY === undefined) {
        LocalXY = {};
      }
      out = LocalXY;
    }
    this.colorObject.setFromRGB(ColorToRGBA(color));
    if (this.orientation === 0) {
      out.x = this.width * this.colorObject.h;
      out.y = this.height / 2;
    } else {
      out.x = this.width / 2;
      out.y = this.height * this.colorObject.h;
    }
    return out;
  }
}
var LocalXY = undefined;
var _default = HPaletteCanvas;
exports.default = _default;
},{"../../../canvas/Canvas.js":"node_modules/phaser3-rex-plugins/templates/ui/canvas/Canvas.js","../../../utils/GetOrientationMode.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetOrientationMode.js","../../../../../plugins/utils/canvas/DrawHSVPalette.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/DrawHSVPalette.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/methods/Transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalToWorld = void 0;
var RotateAround = Phaser.Math.RotateAround;
var LocalToWorld = function (gameObject, localX, localY, out) {
  if (out === undefined) {
    out = {};
  } else if (out === true) {
    if (GlobOut === undefined) {
      GlobOut = {};
    }
    out = GlobOut;
  }
  localX -= gameObject.width * gameObject.originX;
  localY -= gameObject.height * gameObject.originY;
  var point = {
    x: localX * gameObject.scaleX,
    y: localY * gameObject.scaleY
  };
  RotateAround(point, 0, 0, -gameObject.rotation);
  out.x = gameObject.x + localX;
  out.y = gameObject.y + localY;
  return out;
};
exports.LocalToWorld = LocalToWorld;
var GlobOut;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/methods/HPalette.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OverlapSizer = _interopRequireDefault(require("../../../overlapsizer/OverlapSizer.js"));
var _HPaletteCanvas = _interopRequireDefault(require("./HPaletteCanvas.js"));
var _RoundRectangle = _interopRequireDefault(require("../../../roundrectangle/RoundRectangle.js"));
var _Transform = require("./Transform.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class HPalette extends _OverlapSizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    super(scene, config);
    var orientation = config.width != null ? 1 : 0;
    var paletteCanvas = new _HPaletteCanvas.default(scene).setOrientation(orientation);
    scene.add.existing(paletteCanvas);
    this.type = 'rexColorPicker.HPalette';
    paletteCanvas.setInteractive().on('pointerdown', this.onPaletteCanvasPointerDown, this).on('pointermove', this.onPaletteCanvasPointerDown, this);
    var marker = new _RoundRectangle.default(scene, {
      strokeColor: 0xffffff,
      strokeWidth: 2
    });
    scene.add.existing(marker);
    this.add(paletteCanvas, {
      key: 'paletteCanvas',
      expand: true
    }).add(marker, {
      key: 'marker',
      expand: false
    });
  }
  resize(width, height) {
    if (this.width === width && this.height === height) {
      return this;
    }
    super.resize(width, height);
    var size = Math.min(width, height);
    this.childrenMap.marker.setSize(size, size);
    return this;
  }
  onPaletteCanvasPointerDown(pointer, localX, localY, event) {
    if (!pointer.isDown) {
      return;
    }
    var paletteCanvas = this.childrenMap.paletteCanvas;
    var color = paletteCanvas.getColor(localX, localY);
    this.setMarkerPosition(color);
    this.emit('input', color);
  }
  get color() {
    return this.childrenMap.paletteCanvas.color;
  }
  setColor(color) {
    if (this.color === color) {
      return this;
    }
    var paletteCanvas = this.childrenMap.paletteCanvas;
    paletteCanvas.setColor(color);
    this.setMarkerPosition(color);
    return this;
  }
  setMarkerPosition(color) {
    var paletteCanvas = this.childrenMap.paletteCanvas;
    var marker = this.childrenMap.marker;
    var localXY = paletteCanvas.colorToLocalPosition(color, true);
    (0, _Transform.LocalToWorld)(paletteCanvas, localXY.x, localXY.y, marker);
    this.resetChildPositionState(marker);
    return this;
  }
  getHue(localX, localY) {
    var paletteCanvas = this.childrenMap.paletteCanvas;
    return paletteCanvas.getHue(localX, localY);
  }
}
var _default = HPalette;
exports.default = _default;
},{"../../../overlapsizer/OverlapSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/OverlapSizer.js","./HPaletteCanvas.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/methods/HPaletteCanvas.js","../../../roundrectangle/RoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/roundrectangle/RoundRectangle.js","./Transform.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/methods/Transform.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/methods/SVPaletteCanvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Canvas = _interopRequireDefault(require("../../../canvas/Canvas.js"));
var _DrawHSVPalette = require("../../../../../plugins/utils/canvas/DrawHSVPalette.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Color = Phaser.Display.Color;
const Percent = Phaser.Math.Percent;
const ColorToRGBA = Phaser.Display.Color.ColorToRGBA;
const HSVToRGB = Phaser.Display.Color.HSVToRGB;
class SVPaletteCanvas extends _Canvas.default {
  constructor(scene, x, y, width, height, hue) {
    if (x === undefined) {
      x = 0;
    }
    if (y === undefined) {
      y = 0;
    }
    if (width === undefined) {
      width = 2;
    }
    if (height === undefined) {
      height = 2;
    }
    super(scene, x, y, width, height);
    this.type = 'rexColorPicker.SVPaletteCanvas';
    if (hue === undefined) {
      hue = 1;
    }
    this.colorObject = new Color();
    this.setHue(hue);
    this.setSize(width, height);
  }
  get color() {
    return this.colorObject.color;
  }
  get hue() {
    return this._hue;
  }
  set hue(hue) {
    if (this._hue === hue) {
      return;
    }
    this._hue = hue;
    this.colorObject.h = hue;
    this.dirty = true;
  }
  setHue(hue) {
    this.hue = hue;
    return this;
  }
  updateTexture() {
    (0, _DrawHSVPalette.DrawSVPalette)(this.canvas, this.context, this.hue);
    super.updateTexture();
    return this;
  }
  getColor(localX, localY) {
    if (localX === undefined) {
      return this.colorObject.color;
    }
    var s = Percent(localX, 0, this.width);
    var v = 1 - Percent(localY, 0, this.height);
    this.colorObject.setFromRGB(HSVToRGB(this.hue, s, v));
    return this.colorObject.color;
  }
  setColor(color) {
    if (this.color === color) {
      return this;
    }
    this.colorObject.setFromRGB(ColorToRGBA(color));
    this.setHue(this.colorObject.h);
    return this;
  }
  colorToLocalPosition(color, out) {
    if (out === undefined) {
      out = {};
    } else if (out === true) {
      if (LocalXY === undefined) {
        LocalXY = {};
      }
      out = LocalXY;
    }
    this.colorObject.setFromRGB(ColorToRGBA(color));
    out.x = this.width * this.colorObject.s;
    out.y = this.height * (1 - this.colorObject.v);
    return out;
  }
}
var LocalXY = undefined;
var _default = SVPaletteCanvas;
exports.default = _default;
},{"../../../canvas/Canvas.js":"node_modules/phaser3-rex-plugins/templates/ui/canvas/Canvas.js","../../../../../plugins/utils/canvas/DrawHSVPalette.js":"node_modules/phaser3-rex-plugins/plugins/utils/canvas/DrawHSVPalette.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/methods/SVPalette.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OverlapSizer = _interopRequireDefault(require("../../../overlapsizer/OverlapSizer.js"));
var _SVPaletteCanvas = _interopRequireDefault(require("./SVPaletteCanvas.js"));
var _RoundRectangle = _interopRequireDefault(require("../../../roundrectangle/RoundRectangle.js"));
var _Transform = require("./Transform.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class SVPalette extends _OverlapSizer.default {
  constructor(scene, config) {
    super(scene, config);
    var paletteCanvas = new _SVPaletteCanvas.default(scene);
    scene.add.existing(paletteCanvas);
    this.type = 'rexColorPicker.SVPalette';
    paletteCanvas.setInteractive().on('pointerdown', this.onPaletteCanvasPointerDown, this).on('pointermove', this.onPaletteCanvasPointerDown, this);
    var marker = new _RoundRectangle.default(scene, {
      radius: 5,
      strokeColor: 0xffffff,
      strokeWidth: 2
    });
    scene.add.existing(marker);
    this.add(paletteCanvas, {
      key: 'paletteCanvas',
      expand: true
    }).add(marker, {
      key: 'marker',
      expand: false
    });
  }
  onPaletteCanvasPointerDown(pointer, localX, localY, event) {
    if (!pointer.isDown) {
      return;
    }
    var paletteCanvas = this.childrenMap.paletteCanvas;
    var color = paletteCanvas.getColor(localX, localY);
    this.setMarkerPosition(color);
    this.emit('input', color);
  }
  get color() {
    return this.childrenMap.paletteCanvas.color;
  }
  setHue(hue) {
    var paletteCanvas = this.childrenMap.paletteCanvas;
    paletteCanvas.setHue(hue); // Redraw paletteCanvas
    // Position of marker does not change
    return this;
  }
  setColor(color) {
    if (this.color === color) {
      return this;
    }
    var paletteCanvas = this.childrenMap.paletteCanvas;
    paletteCanvas.setColor(color); // Redraw paletteCanvas
    this.setMarkerPosition(color);
    return this;
  }
  setMarkerPosition(color) {
    var paletteCanvas = this.childrenMap.paletteCanvas;
    var marker = this.childrenMap.marker;
    var localXY = paletteCanvas.colorToLocalPosition(color, true);
    (0, _Transform.LocalToWorld)(paletteCanvas, localXY.x, localXY.y, marker);
    this.resetChildPositionState(marker);
    return this;
  }
}
var _default = SVPalette;
exports.default = _default;
},{"../../../overlapsizer/OverlapSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/OverlapSizer.js","./SVPaletteCanvas.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/methods/SVPaletteCanvas.js","../../../roundrectangle/RoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/roundrectangle/RoundRectangle.js","./Transform.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/methods/Transform.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/ColorPicker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../../sizer/Sizer.js"));
var _HPalette = _interopRequireDefault(require("./methods/HPalette.js"));
var _SVPalette = _interopRequireDefault(require("./methods/SVPalette.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class ColorPicker extends _Sizer.default {
  constructor(scene, config) {
    super(scene, config);
    this.type = 'rexColorPicker';
    this.freezePalettes = false;

    // orientation
    var hPalettePosition = GetValue(config, 'hPalette.position', 0);
    if (typeof hPalettePosition === 'string') {
      hPalettePosition = HPalettePositionNamesMap[hPalettePosition];
    }
    var orientation = hPalettePosition === 0 ||
    // bottom
    hPalettePosition === 2 // top
    ? 1 :
    // y
    0; // x
    this.setOrientation(orientation);

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var hPaletteWidth, hPaletteHeight;
    if (this.orientation === 0) {
      var hPaletteWidth = GetValue(config, 'hPalette.width', undefined);
      if (hPaletteWidth === undefined) {
        hPaletteWidth = GetValue(config, 'hPalette.size', 10);
      }
    } else {
      hPaletteHeight = GetValue(config, 'hPalette.height', undefined);
      if (hPaletteHeight === undefined) {
        hPaletteHeight = GetValue(config, 'hPalette.size', 10);
      }
    }
    var hPalette = new _HPalette.default(scene, {
      width: hPaletteWidth,
      height: hPaletteHeight
    });
    scene.add.existing(hPalette);
    var svPaletteWidth = GetValue(config, 'svPalette.width', undefined);
    var svPaletteHeight = GetValue(config, 'svPalette.height', undefined);
    var svPalette = new _SVPalette.default(scene, {
      width: svPaletteWidth,
      height: svPaletteHeight
    });
    scene.add.existing(svPalette);
    if (background) {
      this.addBackground(background);
    }
    var hPaletteAddConfig = {
      proportion: 0,
      expand: true
    };
    var svPaletteProportion, svPaletteExpand;
    if (this.orientation === 0) {
      svPaletteProportion = svPaletteWidth === undefined ? 1 : 0;
      svPaletteExpand = svPaletteHeight === undefined ? true : false;
    } else {
      svPaletteProportion = svPaletteHeight === undefined ? 1 : 0;
      svPaletteExpand = svPaletteWidth === undefined ? true : false;
    }
    var svPaletteAddConfig = {
      proportion: svPaletteProportion,
      expand: svPaletteExpand
    };
    if (hPalettePosition === 0 || hPalettePosition === 3) {
      // bottom, right
      this.add(svPalette, svPaletteAddConfig).add(hPalette, hPaletteAddConfig);
    } else {
      // left, top
      this.add(hPalette, hPaletteAddConfig).add(svPalette, svPaletteAddConfig);
    }
    hPalette.on('input', function () {
      svPalette.setHue(hPalette.getHue());
      this.setValue(svPalette.color, true);
    }, this);
    svPalette.on('input', function () {
      this.setValue(svPalette.color, true);
    }, this);
    this.addChildrenMap('background', background);
    this.addChildrenMap('hPalette', hPalette);
    this.addChildrenMap('svPalette', svPalette);
    var callback = GetValue(config, 'valuechangeCallback', null);
    if (callback !== null) {
      var scope = GetValue(config, 'valuechangeCallbackScope', undefined);
      this.on('valuechange', callback, scope);
    }
    this.setValue(GetValue(config, 'value', 0xffffff));
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this._value === value) {
      return;
    }
    var oldValue = this._value;
    this._value = value;
    if (!this.freezePalettes) {
      this.updatePalettes();
    }
    this.emit('valuechange', value, oldValue, this);
  }
  setValue(value, freezePalettes) {
    this.freezePalettes = !!freezePalettes;
    this.value = value;
    this.freezePalettes = false;
    return this;
  }
  get color() {
    return this._value;
  }
  set color(color) {
    this.value = color;
  }
  setColor(color) {
    this.color = color;
    return this;
  }
  updatePalettes() {
    this.childrenMap.hPalette.setColor(this.color);
    this.childrenMap.svPalette.setColor(this.color);
    return this;
  }
  runLayout(parent, newWidth, newHeight) {
    if (this.ignoreLayout) {
      return this;
    }
    super.runLayout(parent, newWidth, newHeight);
    this.childrenMap.hPalette.setMarkerPosition(this.value);
    this.childrenMap.svPalette.setMarkerPosition(this.value);
    return this;
  }
}
var HPalettePositionNamesMap = {
  bottom: 0,
  left: 1,
  top: 2,
  right: 3
};
var _default = ColorPicker;
exports.default = _default;
},{"../../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","./methods/HPalette.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/methods/HPalette.js","./methods/SVPalette.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/methods/SVPalette.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorcomponents/ColorComponents.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../../sizer/Sizer.js"));
var _IsGameObject = _interopRequireDefault(require("../../../../plugins/utils/system/IsGameObject.js"));
var _CreateDisplayLabel = _interopRequireDefault(require("../../utils/build/CreateDisplayLabel.js"));
var _CreateInputText = _interopRequireDefault(require("../../utils/build/CreateInputText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const Color = Phaser.Display.Color;
const ColorToRGBA = Phaser.Display.Color.ColorToRGBA;
const HSVToRGB = Phaser.Display.Color.HSVToRGB;
const Clamp = Phaser.Math.Clamp;
class ColorComponents extends _Sizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    config.orientation = 0;
    super(scene, config);
    this.type = 'rexColorComponents';
    this.colorObject = new Color();

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var formatLabel = GetValue(config, 'formatLabel', undefined);
    if (!(0, _IsGameObject.default)(formatLabel)) {
      formatLabel = (0, _CreateDisplayLabel.default)(scene, formatLabel).resetDisplayContent();
    }
    var components = [];
    if (config.inputText0 && config.inputText1 && config.inputText2) {
      components.push(config.inputText0);
      components.push(config.inputText1);
      components.push(config.inputText2);
    } else {
      var inputTextConfig = GetValue(config, 'inputText');
      for (var i = 0; i < 3; i++) {
        var inputText = (0, _CreateInputText.default)(scene, inputTextConfig).setMaxLength(3).setNumberInput();
        components.push(inputText);
      }
    }
    if (background) {
      this.addBackground(background);
    }
    var proportion = GetValue(config, 'proportion.formatLabel', 0);
    var defaultExpand = formatLabel.isRexContainerLite ? true : false;
    var expand = GetValue(config, 'expand.formatLabel', defaultExpand);
    this.add(formatLabel, {
      proportion: proportion,
      expand: expand
    });
    var proportion = GetValue(inputTextConfig, 'width') === undefined ? 1 : 0;
    var expand = GetValue(inputTextConfig, 'height') === undefined ? true : false;
    for (var i = 0, cnt = components.length; i < cnt; i++) {
      this.add(components[i], {
        proportion: proportion,
        expand: expand
      });
    }
    this.addChildrenMap('background', background);
    this.addChildrenMap('formatLabel', formatLabel);
    this.addChildrenMap('components', components);
    this.onClick(formatLabel, this.toggleColorFormat, this);
    for (var i = 0, cnt = components.length; i < cnt; i++) {
      components[i].on('close', function () {
        this.updateColorObject();
        this.setValue(this.colorObject.color);
      }, this);
    }
    var callback = GetValue(config, 'valuechangeCallback', null);
    if (callback !== null) {
      var scope = GetValue(config, 'valuechangeCallbackScope', undefined);
      this.on('valuechange', callback, scope);
    }
    formatLabel.setText('RGB');
    this.setValue(GetValue(config, 'value', 0xffffff));
  }
  get value() {
    return this._value;
  }
  set value(value) {
    value = Clamp(Math.floor(value), 0, 0xffffff);
    if (this._value === value) {
      return;
    }
    this._value = value;
    this.colorObject.setFromRGB(ColorToRGBA(value));
    this.updateComponents();
    this.emit('valuechange', this._value);
  }
  setValue(value) {
    this.value = value;
    return this;
  }
  get color() {
    return this._value;
  }
  set color(color) {
    this.value = color;
  }
  setColor(color) {
    this.color = color;
    return this;
  }
  get colorFormat() {
    return this.childrenMap.formatLabel.text;
  }
  set colorFormat(value) {
    if (this.colorFormat === value) {
      return;
    }
    this.childrenMap.formatLabel.setText(value);
    this.updateComponents();
  }
  setColorFormat(colrType) {
    this.colorFormat = colrType;
    return this;
  }
  toggleColorFormat() {
    this.colorFormat = this.colorFormat === 'RGB' ? 'HSV' : 'RGB';
    return this;
  }
  updateComponents() {
    var components = this.childrenMap.components;
    var value0, value1, value2;
    if (this.colorFormat === 'RGB') {
      value0 = this.colorObject.red;
      value1 = this.colorObject.green;
      value2 = this.colorObject.blue;
    } else {
      // colorFormat === 'HSV'
      value0 = Math.floor(this.colorObject.h * 360);
      value1 = Math.floor(this.colorObject.s * 100);
      value2 = Math.floor(this.colorObject.v * 100);
    }
    components[0].setValue(value0);
    components[1].setValue(value1);
    components[2].setValue(value2);
    return this;
  }
  updateColorObject() {
    var components = this.childrenMap.components;
    if (this.colorFormat === 'RGB') {
      var red = Clamp(components[0].value, 0, 255);
      var green = Clamp(components[1].value, 0, 255);
      var blue = Clamp(components[2].value, 0, 255);
      this.colorObject.setTo(red, green, blue);
    } else {
      var h = Clamp(components[0].value, 0, 359) / 360;
      var s = Clamp(components[1].value, 0, 100) / 100;
      var v = Clamp(components[2].value, 0, 100) / 100;
      this.colorObject.setFromRGB(HSVToRGB(h, s, v));
    }
    return this;
  }
}
var _default = ColorComponents;
exports.default = _default;
},{"../../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../../../../plugins/utils/system/IsGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsGameObject.js","../../utils/build/CreateDisplayLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateDisplayLabel.js","../../utils/build/CreateInputText.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateInputText.js"}],"node_modules/phaser3-rex-plugins/plugins/toucheventstop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TouchEventStop = _interopRequireDefault(require("./input/toucheventstop/TouchEventStop.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _TouchEventStop.default;
exports.default = _default;
},{"./input/toucheventstop/TouchEventStop.js":"node_modules/phaser3-rex-plugins/plugins/input/toucheventstop/TouchEventStop.js"}],"node_modules/phaser3-rex-plugins/templates/ui/toucheventstop/TouchEventStop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toucheventstop = _interopRequireDefault(require("../../../plugins/toucheventstop.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _toucheventstop.default;
exports.default = _default;
},{"../../../plugins/toucheventstop.js":"node_modules/phaser3-rex-plugins/plugins/toucheventstop.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/methods/ColorPicker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../../../sizer/Sizer.js"));
var _ColorPicker = _interopRequireDefault(require("../../colorpicker/ColorPicker.js"));
var _ColorComponents = _interopRequireDefault(require("../../colorcomponents/ColorComponents.js"));
var _TouchEventStop = _interopRequireDefault(require("../../../toucheventstop/TouchEventStop.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class ColorPickerPanel extends _Sizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    config.orientation = 1;
    super(scene, config);
    this.type = 'rexColorInput.ColorPickerPanel';

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var colorPicker = new _ColorPicker.default(scene, {
      hPalette: config.hPalette || {},
      svPalette: config.svPalette || {},
      space: {
        item: GetValue(config, 'space.hPalette', 8)
      }
    });
    scene.add.existing(colorPicker);
    var colorComponents;
    if (config.colorComponents) {
      colorComponents = new _ColorComponents.default(scene, config.colorComponents);
      scene.add.existing(colorComponents);
    }
    if (background) {
      this.addBackground(background);
      var touchEventStop = new _TouchEventStop.default(background, {
        stopAllLevels: false
      });
    }
    this.add(colorPicker, {
      proportion: 1,
      expand: true
    });
    if (colorComponents) {
      this.add(colorComponents, {
        proportion: 0,
        expand: true
      });
    }
    this.addChildrenMap('background', background);
    this.addChildrenMap('colorPicker', colorPicker);
    this.addChildrenMap('colorComponents', colorComponents);
    colorPicker.on('valuechange', function (value) {
      this.setValue(value);
    }, this);
    if (colorComponents) {
      colorComponents.on('valuechange', function (value) {
        this.setValue(value);
      }, this);
    }
    this.setValue(GetValue(config, 'value', 0xffffff));
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this._value === value) {
      return;
    }
    this._value = value;
    var colorPicker = this.childrenMap.colorPicker;
    colorPicker.setValue(value);
    var colorComponents = this.childrenMap.colorComponents;
    if (colorComponents) {
      colorComponents.setValue(value);
    }
    this.emit('valuechange', value);
  }
  setValue(value) {
    this.value = value;
    return this;
  }
}
var _default = ColorPickerPanel;
exports.default = _default;
},{"../../../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","../../colorpicker/ColorPicker.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/ColorPicker.js","../../colorcomponents/ColorComponents.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorcomponents/ColorComponents.js","../../../toucheventstop/TouchEventStop.js":"node_modules/phaser3-rex-plugins/templates/ui/toucheventstop/TouchEventStop.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/methods/CreateColorPicker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ColorPicker = _interopRequireDefault(require("./ColorPicker.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateColorPicker = function (scene) {
  var scene = this.scene;
  var background;
  var createBackgroundCallback = this.colorPickerCreateBackgroundCallback;
  if (createBackgroundCallback) {
    background = createBackgroundCallback.call(this, scene);
    scene.add.existing(background);
  }
  var width = this.colorPickerWidth;
  if (width === undefined) {
    width = this.width;
  }
  var height = this.colorPickerHeight;
  if (height === undefined) {
    height = width;
  }
  var colorComponentsConfig;
  if (this.colorComponentsHeight > 0) {
    colorComponentsConfig = {
      height: this.colorComponentsHeight,
      formatLabel: this.colorComponentsFormatLabelConfig,
      inputText: this.colorComponentsInputTextConfig,
      space: this.colorComponentsSpace
    };
  } else {
    colorComponentsConfig = false;
  }
  var colorPicker = new _ColorPicker.default(scene, {
    width: width,
    height: height,
    background: background,
    space: this.colorPickerSpace,
    hPalette: {
      position: this.colorPickerHPalettePosition
    },
    colorComponents: colorComponentsConfig,
    value: this.value
  });
  scene.add.existing(colorPicker);
  return colorPicker;
};
var _default = CreateColorPicker;
exports.default = _default;
},{"./ColorPicker.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/methods/ColorPicker.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/methods/OpenColorPicker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateColorPicker = _interopRequireDefault(require("./CreateColorPicker.js"));
var _DropDown = _interopRequireDefault(require("../../../dropdown/DropDown.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var OpenColorPicker = function () {
  if (this.colorPicker) {
    return;
  }

  // Layout it to get full height
  var colorPicker = _CreateColorPicker.default.call(this).layout();
  var dropDownBehavior = new _DropDown.default(colorPicker, {
    // Transition
    duration: {
      in: this.colorPickerEaseInDuration,
      out: this.colorPickerEaseOutDuration
    },
    transitIn: this.colorPickerTransitInCallback,
    transitOut: this.colorPickerTransitOutCallback,
    // Position
    expandDirection: this.colorPickerExpandDirection,
    alignTargetX: this,
    alignTargetY: this,
    bounds: this.colorPickerBounds,
    // Close condition
    touchOutsideClose: true
  }).on('open', function () {
    // After popping up
    // Can click
    colorPicker.on('valuechange', function (value) {
      this.setValue(value);
    }, this);
  }, this).on('close', function () {
    this.colorPicker = undefined;
    this.dropDownBehavior = undefined;
  }, this);
  this.colorPicker = colorPicker;
  this.dropDownBehavior = dropDownBehavior;
  this.pin(colorPicker);
  return this;
};
var _default = OpenColorPicker;
exports.default = _default;
},{"./CreateColorPicker.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/methods/CreateColorPicker.js","../../../dropdown/DropDown.js":"node_modules/phaser3-rex-plugins/templates/ui/dropdown/DropDown.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ConfigurationMethods = _interopRequireDefault(require("./ConfigurationMethods.js"));
var _OpenColorPicker = _interopRequireDefault(require("./OpenColorPicker.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  openColorPicker: _OpenColorPicker.default
};
Object.assign(methods, _ConfigurationMethods.default);
var _default = methods;
exports.default = _default;
},{"./ConfigurationMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/methods/ConfigurationMethods.js","./OpenColorPicker.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/methods/OpenColorPicker.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/ColorInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ColorInputBase = _interopRequireDefault(require("../colorinputbase/ColorInputBase.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
var _CreateRoundRectangle = _interopRequireDefault(require("../../utils/build/CreateRoundRectangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class ColorInput extends _ColorInputBase.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    super(scene, config);
    this.type = 'rexColorInput';
    if (!config.hasOwnProperty('colorPicker')) {
      config.colorPicker = {
        background: {
          color: 0x0
        }
      };
    }
    var colorPickerConfig = config.colorPicker;
    var hasColorPicker = colorPickerConfig !== false && colorPickerConfig !== null;
    if (hasColorPicker) {
      this.setColorPickerSize(GetValue(colorPickerConfig, 'width', 160), GetValue(colorPickerConfig, 'height', 170));
      var createBackgroundCallback;
      var background = GetValue(colorPickerConfig, 'background');
      if (background) {
        createBackgroundCallback = function (scene) {
          return (0, _CreateRoundRectangle.default)(scene, background);
        };
      } else {
        createBackgroundCallback = GetValue(colorPickerConfig, 'createBackgroundCallback');
      }
      this.setCreateColorPickerBackgroundCallback(createBackgroundCallback);
      this.setColorPickerHPalettePosition(GetValue(colorPickerConfig, 'hPalettePosition', 0));
      this.setColorPickerExpandDirection(GetValue(colorPickerConfig, 'expandDirection'));
      this.setColorPickerEaseInDuration(GetValue(colorPickerConfig, 'easeIn', 200));
      this.setColorPickerEaseOutDuration(GetValue(colorPickerConfig, 'easeOut', 200));
      this.setColorPickerTransitInCallback(GetValue(colorPickerConfig, 'transitIn'));
      this.setColorPickerTransitOutCallback(GetValue(colorPickerConfig, 'transitOut'));
      this.setColorPickerBounds(GetValue(colorPickerConfig, 'bounds'));
      var colorPickerSpaceConfig = GetValue(colorPickerConfig, 'space');
      if (colorPickerSpaceConfig === undefined) {
        colorPickerSpaceConfig = {
          left: 10,
          right: 10,
          top: 10,
          bottom: 10,
          item: 8
        };
      }
      this.setColorPickerSpace(colorPickerSpaceConfig);
    }
    var colorComponentsConfig = config.colorComponents;
    var hasColorComponents = colorComponentsConfig !== false && colorComponentsConfig !== null;
    if (hasColorPicker && hasColorComponents) {
      this.setColorComponentsHeight(GetValue(colorComponentsConfig, 'height', 30));
      this.setColorComponentsFormatLabelConfig(GetValue(colorComponentsConfig, 'formatLabel'));
      var colorComponentsInputTextConfig = GetValue(colorComponentsConfig, 'inputText');
      if (!colorComponentsInputTextConfig) {
        colorComponentsInputTextConfig = GetValue(config, 'inputText');
      }
      this.setColorComponentsInputTextConfig(colorComponentsInputTextConfig);
      var colorComponentsSpace = GetValue(colorComponentsConfig, 'space');
      if (colorComponentsSpace === undefined) {
        colorComponentsSpace = {
          item: 8
        };
      }
      this.setColorComponentsSpace(colorComponentsSpace);
    }
    var swatch = this.childrenMap.swatch;
    if (swatch && hasColorPicker) {
      this.onClick(swatch, this.openColorPicker, this);
    }
  }
}
Object.assign(ColorInput.prototype, _Methods.default);
var _default = ColorInput;
exports.default = _default;
},{"../colorinputbase/ColorInputBase.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinputbase/ColorInputBase.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/methods/Methods.js","../../utils/build/CreateRoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateRoundRectangle.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ColorInput = _interopRequireDefault(require("./ColorInput.js"));
var _ObjectFactory = _interopRequireDefault(require("../../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('colorInput', function (config) {
  var gameObject = new _ColorInput.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.ColorInput', _ColorInput.default);
var _default = _ColorInput.default;
exports.default = _default;
},{"./ColorInput.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/ColorInput.js","../../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinputbase/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ColorInputBase = _interopRequireDefault(require("./ColorInputBase.js"));
var _ObjectFactory = _interopRequireDefault(require("../../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('colorInputLite', function (config) {
  var gameObject = new _ColorInputBase.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.ColorInputBase', _ColorInputBase.default);
var _default = _ColorInputBase.default;
exports.default = _default;
},{"./ColorInputBase.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinputbase/ColorInputBase.js","../../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ColorPicker = _interopRequireDefault(require("./ColorPicker.js"));
var _ObjectFactory = _interopRequireDefault(require("../../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('colorPicker', function (config) {
  var gameObject = new _ColorPicker.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.ColorPicker', _ColorPicker.default);
var _default = _ColorPicker.default;
exports.default = _default;
},{"./ColorPicker.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/ColorPicker.js","../../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorcomponents/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ColorComponents = _interopRequireDefault(require("./ColorComponents.js"));
var _ObjectFactory = _interopRequireDefault(require("../../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('colorComponents', function (config) {
  var gameObject = new _ColorComponents.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.ColorComponents', _ColorComponents.default);
var _default = _ColorComponents.default;
exports.default = _default;
},{"./ColorComponents.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorcomponents/ColorComponents.js","../../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sides/defaultcallbacks/VisibleCallbacks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetShowCallback = function () {
  return function (child, key, sides, reset) {
    if (key !== 'panel') {
      sides.setChildVisible(child, true);
    }
  };
};
var GetHideCallback = function () {
  return function (child, key, sides, reset) {
    if (key !== 'panel') {
      sides.setChildVisible(child, false);
    }
  };
};
var _default = {
  show: GetShowCallback,
  hide: GetHideCallback
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sides/defaultcallbacks/FadeCallbacks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetShowCallback = function (duration, alpha) {
  if (alpha === undefined) {
    alpha = 1;
  }
  return function (child, key, sides, reset) {
    if (key !== 'panel') {
      sides.fadeChild(child, reset ? 0 : duration, alpha);
    }
  };
};
var GetHideCallback = function (duration, alpha) {
  if (alpha === undefined) {
    alpha = 0;
  }
  return function (child, key, sides, reset) {
    if (key !== 'panel') {
      sides.fadeChild(child, reset ? 0 : duration, alpha);
    }
  };
};
var _default = {
  show: GetShowCallback,
  hide: GetHideCallback
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sides/defaultcallbacks/MoveCallbacks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetCallback = function (duration, ease) {
  return function (child, key, sides, reset) {
    if (key !== 'panel') {
      sides.moveChild(child, reset ? 0 : duration, ease);
    }
  };
};
var _default = {
  show: GetCallback,
  hide: GetCallback
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sides/defaultcallbacks/MovePanelCallbacks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetCallback = function (duration, ease) {
  return function (child, key, sides, reset) {
    if (key === 'panel') {
      sides.moveChild(child, reset ? 0 : duration, ease);
    }
  };
};
var _default = {
  show: GetCallback,
  hide: GetCallback
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sides/defaultcallbacks/GetDefaultCallbacks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _VisibleCallbacks = _interopRequireDefault(require("./VisibleCallbacks.js"));
var _FadeCallbacks = _interopRequireDefault(require("./FadeCallbacks.js"));
var _MoveCallbacks = _interopRequireDefault(require("./MoveCallbacks.js"));
var _MovePanelCallbacks = _interopRequireDefault(require("./MovePanelCallbacks.js"));
var _NOOP = _interopRequireDefault(require("../../../../plugins/utils/object/NOOP.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DefaultCallbacks = {
  visible: _VisibleCallbacks.default,
  fade: _FadeCallbacks.default,
  move: _MoveCallbacks.default,
  'move-panel': _MovePanelCallbacks.default
};
var GetDefaultCallbacks = function (config) {
  var callbackType, callbackParams;
  [callbackType, ...callbackParams] = typeof config === 'string' ? [config] : config;
  var showCallback, hideCallback;
  if (DefaultCallbacks.hasOwnProperty(callbackType)) {
    showCallback = DefaultCallbacks[callbackType].show.apply(null, callbackParams);
    hideCallback = DefaultCallbacks[callbackType].hide.apply(null, callbackParams);
  } else {
    showCallback = _NOOP.default;
    hideCallback = _NOOP.default;
  }
  return {
    show: showCallback,
    hide: hideCallback
  };
};
var _default = GetDefaultCallbacks;
exports.default = _default;
},{"./VisibleCallbacks.js":"node_modules/phaser3-rex-plugins/templates/ui/sides/defaultcallbacks/VisibleCallbacks.js","./FadeCallbacks.js":"node_modules/phaser3-rex-plugins/templates/ui/sides/defaultcallbacks/FadeCallbacks.js","./MoveCallbacks.js":"node_modules/phaser3-rex-plugins/templates/ui/sides/defaultcallbacks/MoveCallbacks.js","./MovePanelCallbacks.js":"node_modules/phaser3-rex-plugins/templates/ui/sides/defaultcallbacks/MovePanelCallbacks.js","../../../../plugins/utils/object/NOOP.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/NOOP.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sides/ShowChildMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  showChild(key, reset) {
    var child = this.sizerChildren[key];
    if (child) {
      this.emit('showchild', child, key, this, reset);
      this.resetChildState(child);
    }
    return this;
  },
  hideChild(key, reset) {
    var child = this.sizerChildren[key];
    if (child) {
      this.emit('hidechild', child, key, this, reset);
      this.resetChildState(child);
    }
    return this;
  },
  swapChild(key, reset) {
    if (this.currentChildKey === key) {
      // Do nothing
    } else if (this.currentChildKey === 'panel' || key === 'panel') {
      this.previousChildKey = this.currentChildKey;
      this.currentChildKey = key;
      this.hideChild(this.previousChildKey, reset);
      this.showChild(this.currentChildKey, reset);
    } else {
      // Swap from current side to another side
      this.swapChild('panel', reset);
      this.swapChild(key, reset);
    }
    return this;
  },
  showPanel(reset) {
    this.swapChild('panel', reset);
    return this;
  },
  showLeftSide() {
    this.swapChild('leftSide');
    return this;
  },
  showRightSide() {
    this.swapChild('rightSide');
    return this;
  },
  showTopSide() {
    this.swapChild('topSide');
    return this;
  },
  showBottomSide() {
    this.swapChild('bottomSide');
    return this;
  },
  hideLeftSide() {
    if (this.currentChildKey == 'leftSide') {
      this.showPanel();
    }
    return this;
  },
  hideRightSide() {
    if (this.currentChildKey == 'rightSide') {
      this.showPanel();
    }
    return this;
  },
  hideTopSide() {
    if (this.currentChildKey == 'topSide') {
      this.showPanel();
    }
    return this;
  },
  hideBottomSide() {
    if (this.currentChildKey == 'bottomSide') {
      this.showPanel();
    }
    return this;
  },
  toggleLeftSide() {
    var key = this.currentChildKey !== 'panel' ? 'panel' : 'leftSide';
    this.swapChild(key);
    return this;
  },
  toggleRightSide() {
    var key = this.currentChildKey !== 'panel' ? 'panel' : 'rightSide';
    this.swapChild(key);
    return this;
  },
  toggleTopSide() {
    var key = this.currentChildKey !== 'panel' ? 'panel' : 'topSide';
    this.swapChild(key);
    return this;
  },
  toggleBottomSide() {
    var key = this.currentChildKey !== 'panel' ? 'panel' : 'bottomSide';
    this.swapChild(key);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/sides/childbehaviors/Visible.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IndexOf = _interopRequireDefault(require("../../../../plugins/utils/object/IndexOf.js"));
var _Container = _interopRequireDefault(require("../../container/Container.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ContainerSetChildVisible = _Container.default.prototype.setChildVisible;
var _default = {
  setChildVisible(child, visible) {
    var key;
    if (typeof child === 'string') {
      var key = child;
      child = this.sizerChildren[key];
    } else {
      key = (0, _IndexOf.default)(this.sizerChildren, child);
    }
    if (visible === undefined) {
      visible = this.currentChildKey === key ? true : false;
    }
    ContainerSetChildVisible.call(this, child, visible);
    return this;
  }
};
exports.default = _default;
},{"../../../../plugins/utils/object/IndexOf.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IndexOf.js","../../container/Container.js":"node_modules/phaser3-rex-plugins/templates/ui/container/Container.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sides/childbehaviors/Fade.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IndexOf = _interopRequireDefault(require("../../../../plugins/utils/object/IndexOf.js"));
var _WaitEvent = require("../../utils/WaitEvent.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  fadeChild(child, duration, alpha) {
    var key;
    if (typeof child === 'string') {
      key = child;
      child = this.sizerChildren[key];
    } else {
      key = (0, _IndexOf.default)(this.sizerChildren, child);
    }
    if (duration === undefined) {
      duration = 500;
    }
    if (alpha === undefined) {
      alpha = this.currentChildKey === key ? 1 : 0;
    }
    child.fadeIn(duration, {
      start: child.alpha,
      end: alpha
    });
    return this;
  },
  fadeChildPromise(child, duration, alpha) {
    if (typeof child === 'string') {
      child = this.sizerChildren[key];
    }
    this.fadeChild(child, duration, alpha);
    if (child._fade) {
      return (0, _WaitEvent.WaitComplete)(child._fade);
    } else {
      return Promise.resolve();
    }
  }
};
exports.default = _default;
},{"../../../../plugins/utils/object/IndexOf.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IndexOf.js","../../utils/WaitEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/WaitEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sides/childbehaviors/Move.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IndexOf = _interopRequireDefault(require("../../../../plugins/utils/object/IndexOf.js"));
var _GetDisplaySize = require("../../../../plugins/utils/size/GetDisplaySize.js");
var _WaitEvent = require("../../utils/WaitEvent.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = {
  moveChild(child, duration, ease, distance) {
    var key;
    if (typeof child === 'string') {
      key = child;
      child = this.sizerChildren[key];
    } else {
      key = (0, _IndexOf.default)(this.sizerChildren, child);
    }
    if (duration === undefined) {
      duration = 500;
    }
    var isShownChild = this.currentChildKey === key;
    if (distance === undefined) {
      switch (key) {
        case 'leftSide':
        case 'rightSide':
          distance = (0, _GetDisplaySize.GetDisplayWidth)(child);
          break;
        case 'topSide':
        case 'bottomSide':
          distance = (0, _GetDisplaySize.GetDisplayHeight)(child);
          break;
        default:
          // 'panel'
          if (isShownChild) {
            // Show panel
            switch (this.previousChildKey) {
              case 'leftSide':
              case 'rightSide':
                distance = (0, _GetDisplaySize.GetDisplayWidth)(this.sizerChildren[this.previousChildKey]);
                break;
              case 'topSide':
              case 'bottomSide':
                distance = (0, _GetDisplaySize.GetDisplayHeight)(this.sizerChildren[this.previousChildKey]);
                break;
              default:
                distance = 0;
                break;
            }
          } else {
            // Hide panel
            switch (this.currentChildKey) {
              case 'leftSide':
              case 'rightSide':
                distance = (0, _GetDisplaySize.GetDisplayWidth)(this.sizerChildren[this.currentChildKey]);
                break;
              case 'topSide':
              case 'bottomSide':
                distance = (0, _GetDisplaySize.GetDisplayHeight)(this.sizerChildren[this.currentChildKey]);
                break;
              default:
                distance = 0;
                break;
            }
          }
          break;
      }
    }
    var moveLeft, moveRight, moveUp, moveDown;
    if (isShownChild) {
      switch (key) {
        case 'panel':
          switch (this.previousChildKey) {
            case 'leftSide':
              moveLeft = true;
              break;
            case 'rightSide':
              moveRight = true;
              break;
            case 'topSide':
              moveUp = true;
              break;
            case 'bottomSide':
              moveDown = true;
              break;
          }
          break;
        case 'leftSide':
          moveRight = true;
          break;
        case 'rightSide':
          moveLeft = true;
          break;
        case 'topSide':
          moveDown = true;
          break;
        case 'bottomSide':
          moveUp = true;
          break;
      }
    } else {
      // Hide
      switch (key) {
        case 'panel':
          switch (this.currentChildKey) {
            case 'leftSide':
              moveRight = true;
              break;
            case 'rightSide':
              moveLeft = true;
              break;
            case 'topSide':
              moveDown = true;
              break;
            case 'bottomSide':
              moveUp = true;
              break;
          }
          break;
        case 'leftSide':
          moveLeft = true;
          break;
        case 'rightSide':
          moveRight = true;
          break;
        case 'topSide':
          moveUp = true;
          break;
        case 'bottomSide':
          moveDown = true;
          break;
      }
    }
    if (moveLeft) {
      child.moveTo(duration, `-=${distance}`, undefined, ease);
    } else if (moveRight) {
      child.moveTo(duration, `+=${distance}`, undefined, ease);
    } else if (moveUp) {
      child.moveTo(duration, undefined, `-=${distance}`, ease);
    } else if (moveDown) {
      child.moveTo(duration, undefined, `+=${distance}`, ease);
    } else {
      child.moveTo(0);
    }
    return this;
  },
  moveChildPromise(child, duration, ease, distance) {
    if (typeof child === 'string') {
      child = this.sizerChildren[key];
    }
    this.moveChild(child, duration, ease, distance);
    if (child._easeMove) {
      return (0, _WaitEvent.WaitComplete)(child._easeMove);
    } else {
      return Promise.resolve();
    }
  }
};
exports.default = _default;
},{"../../../../plugins/utils/object/IndexOf.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IndexOf.js","../../../../plugins/utils/size/GetDisplaySize.js":"node_modules/phaser3-rex-plugins/plugins/utils/size/GetDisplaySize.js","../../utils/WaitEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/WaitEvent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sides/childbehaviors/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Visible = _interopRequireDefault(require("./Visible.js"));
var _Fade = _interopRequireDefault(require("./Fade.js"));
var _Move = _interopRequireDefault(require("./Move.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {};
Object.assign(methods, _Visible.default, _Fade.default, _Move.default);
var _default = methods;
exports.default = _default;
},{"./Visible.js":"node_modules/phaser3-rex-plugins/templates/ui/sides/childbehaviors/Visible.js","./Fade.js":"node_modules/phaser3-rex-plugins/templates/ui/sides/childbehaviors/Fade.js","./Move.js":"node_modules/phaser3-rex-plugins/templates/ui/sides/childbehaviors/Move.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sides/Sides.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _OverlapSizer = _interopRequireDefault(require("../overlapsizer/OverlapSizer.js"));
var _IsFunction = _interopRequireDefault(require("../../../plugins/utils/object/IsFunction.js"));
var _GetDefaultCallbacks = _interopRequireDefault(require("./defaultcallbacks/GetDefaultCallbacks.js"));
var _ShowChildMethods = _interopRequireDefault(require("./ShowChildMethods.js"));
var _index = _interopRequireDefault(require("./childbehaviors/index.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class Sides extends _OverlapSizer.default {
  constructor(scene, config) {
    super(scene, config);
    this.type = 'rexSides';
    this.childrenMap = this.sizerChildren;
    this.previousChildKey = undefined;
    this.currentChildKey = undefined;

    // Callbacks
    var showChildCallback = GetValue(config, 'showChildCallback', undefined);
    if (showChildCallback) {
      // Has showChildCallback, and hideChildCallback
      if ((0, _IsFunction.default)(showChildCallback)) {
        // Custom callbacks
        var showChildCallbackScope = GetValue(config, 'showChildCallbackScope', undefined);
        this.on('showchild', showChildCallback, showChildCallbackScope);
        var hideChildCallback = GetValue(config, 'hideChildCallback', undefined);
        var hideChildCallbackScope = GetValue(config, 'hideChildCallbackScope', undefined);
        this.on('hidechild', hideChildCallback, hideChildCallbackScope);
      } else {
        // Default callbacks
        var defaultCallbacks = (0, _GetDefaultCallbacks.default)(showChildCallback);
        this.on('showchild', defaultCallbacks.show);
        this.on('hidechild', defaultCallbacks.hide);
      }
    }

    // Add elements
    var background = GetValue(config, 'background', undefined);
    var panel = GetValue(config, 'panel', undefined);
    var leftSide = GetValue(config, 'leftSide', undefined);
    var rightSide = GetValue(config, 'rightSide', undefined);
    var topSide = GetValue(config, 'topSide', undefined);
    var bottomSide = GetValue(config, 'bottomSide', undefined);
    if (background) {
      this.addBackground(background);
    }
    if (panel) {
      this.add(panel, 'panel', 'center', 0, true);
    }
    if (leftSide) {
      var expand = GetValue(config, 'expand.left', true);
      this.add(leftSide, 'leftSide', 'left-top', 0, {
        height: expand
      });
    }
    if (rightSide) {
      var expand = GetValue(config, 'expand.right', true);
      this.add(rightSide, 'rightSide', 'right-top', 0, {
        height: expand
      });
    }
    if (topSide) {
      var expand = GetValue(config, 'expand.top', true);
      this.add(topSide, 'topSide', 'left-top', 0, {
        width: expand
      });
    }
    if (bottomSide) {
      var expand = GetValue(config, 'expand.bottom', true);
      this.add(bottomSide, 'bottomSide', 'left-bottom', 0, {
        width: expand
      });
    }
  }
  reset() {
    this.previousChildKey = undefined;
    this.currentChildKey = 'panel';
    this.showChild('panel', true);
    this.hideChild('leftSide', true);
    this.hideChild('rightSide', true);
    this.hideChild('topSide', true);
    this.hideChild('bottomSide', true);
    return this;
  }
}
Object.assign(Sides.prototype, _ShowChildMethods.default, _index.default);
var _default = Sides;
exports.default = _default;
},{"../overlapsizer/OverlapSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/OverlapSizer.js","../../../plugins/utils/object/IsFunction.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsFunction.js","./defaultcallbacks/GetDefaultCallbacks.js":"node_modules/phaser3-rex-plugins/templates/ui/sides/defaultcallbacks/GetDefaultCallbacks.js","./ShowChildMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/sides/ShowChildMethods.js","./childbehaviors/index.js":"node_modules/phaser3-rex-plugins/templates/ui/sides/childbehaviors/index.js"}],"node_modules/phaser3-rex-plugins/templates/ui/sides/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sides = _interopRequireDefault(require("./Sides.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('sides', function (config) {
  var gameObject = new _Sides.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Sides', _Sides.default);
var _default = _Sides.default;
exports.default = _default;
},{"./Sides.js":"node_modules/phaser3-rex-plugins/templates/ui/sides/Sides.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/label/Title.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Label = _interopRequireDefault(require("../../../label/Label.js"));
var _BuildDisplayLabelConfig = _interopRequireDefault(require("../../../utils/build/BuildDisplayLabelConfig.js"));
var _DeepClone = _interopRequireDefault(require("../../../../../plugins/utils/object/DeepClone.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Title extends _Label.default {
  constructor(scene, config) {
    config = (0, _BuildDisplayLabelConfig.default)(scene, config);
    super(scene, config);
    this.type = 'rexTweaker.Title';
  }
  setTitle(config) {
    config = config ? (0, _DeepClone.default)(config) : {};
    if (config.hasOwnProperty('text')) {
      // Do nothing
    } else if (config.hasOwnProperty('title')) {
      config.text = config.title;
    } else {
      config.text = '';
    }
    this.resetDisplayContent(config);
    return this;
  }
}
var _default = Title;
exports.default = _default;
},{"../../../label/Label.js":"node_modules/phaser3-rex-plugins/templates/ui/label/Label.js","../../../utils/build/BuildDisplayLabelConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/BuildDisplayLabelConfig.js","../../../../../plugins/utils/object/DeepClone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/label/FolderTitle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Title = _interopRequireDefault(require("./Title.js"));
var _Triangle = _interopRequireDefault(require("../../../triangle/Triangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class FolderTitle extends _Title.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    super(scene, config);
    this.type = 'rexTweaker.FolderTitle';
    var expandedIcon = new _Triangle.default(scene, config.expandedIcon);
    scene.add.existing(expandedIcon);
    this.addSpace().add(expandedIcon, {
      proportion: 0,
      expand: false,
      padding: 1,
      fitRatio: 1
    });
    this.addChildrenMap('expandedIcon', expandedIcon);
  }
  setExpandedState(expanded) {
    if (expanded === undefined) {
      expanded = true;
    }
    var direction = expanded ? 'down' : 'right';
    var expandedIcon = this.childrenMap.expandedIcon;
    expandedIcon.setDirection(direction);
    return this;
  }
}
var _default = FolderTitle;
exports.default = _default;
},{"./Title.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/label/Title.js","../../../triangle/Triangle.js":"node_modules/phaser3-rex-plugins/templates/ui/triangle/Triangle.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/CreateTweaker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TweakerShell = _interopRequireDefault(require("../../TweakerShell"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateTweaker = function (scene, config) {
  var tweaker = new _TweakerShell.default(scene, config);
  scene.add.existing(tweaker);
  return tweaker;
};
var _default = CreateTweaker;
exports.default = _default;
},{"../../TweakerShell":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/TweakerShell.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateBackground.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateRoundRectangle = _interopRequireDefault(require("../../utils/build/CreateRoundRectangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateBackground = function (scene, config, style) {
  // TODO: Might create nine-slice as background
  return (0, _CreateRoundRectangle.default)(scene, style);
};
var _default = CreateBackground;
exports.default = _default;
},{"../../utils/build/CreateRoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateRoundRectangle.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/folder/BindingTargetMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setBindingTarget(target) {
    var child = this.childrenMap.child; // tweaker
    child.setBindingTarget(target);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/folder/InputRowTitleWidthMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  getMaxInputRowTitleWidth() {
    var child = this.childrenMap.child; // tweaker
    var titleWidth = child.getMaxInputRowTitleWidth();
    return titleWidth + this.getInnerPadding('left');
  },
  setInputRowTitleWidth(width) {
    width -= this.getInnerPadding('left');
    var child = this.childrenMap.child; // tweaker
    child.setInputRowTitleWidth(width);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/folder/Folder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Folder = _interopRequireDefault(require("../../../folder/Folder.js"));
var _BindingTargetMethods = _interopRequireDefault(require("./BindingTargetMethods.js"));
var _InputRowTitleWidthMethods = _interopRequireDefault(require("./InputRowTitleWidthMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Folder extends _Folder.default {
  constructor(scene, config) {
    super(scene, config);
    this.type = 'rexTweaker.Folder';
  }
  setTitle(config) {
    var title = this.childrenMap.title;
    title.setTitle(config);
    return this;
  }
}
Object.assign(Folder.prototype, _BindingTargetMethods.default, _InputRowTitleWidthMethods.default);
var _default = Folder;
exports.default = _default;
},{"../../../folder/Folder.js":"node_modules/phaser3-rex-plugins/templates/ui/folder/Folder.js","./BindingTargetMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/folder/BindingTargetMethods.js","./InputRowTitleWidthMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/folder/InputRowTitleWidthMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateFolder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FolderTitle = _interopRequireDefault(require("../gameobjects/label/FolderTitle.js"));
var _CreateTweaker = _interopRequireDefault(require("../gameobjects/utils/CreateTweaker.js"));
var _CreateBackground = _interopRequireDefault(require("./CreateBackground.js"));
var _Folder = _interopRequireDefault(require("../gameobjects/folder/Folder.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateFolder = function (scene, config, style) {
  // Create Folder-title
  var titleStyle = GetValue(style, 'title') || {};
  var title = new _FolderTitle.default(scene, titleStyle);
  scene.add.existing(title);
  title.on('folder.expand', function () {
    title.setExpandedState(true);
  }).on('folder.collapse', function () {
    title.setExpandedState(false);
  });
  var tweakerConfig = {
    root: GetValue(style, 'root'),
    styles: GetValue(style, 'tweaker'),
    space: GetValue(style, 'space') || {}
  };
  var child = (0, _CreateTweaker.default)(scene, tweakerConfig);
  var backgroundStyle = GetValue(style, 'background');
  var background = (0, _CreateBackground.default)(scene, config, backgroundStyle);
  var folder = new _Folder.default(scene, {
    orientation: 1,
    title: title,
    child: child,
    background: background,
    transition: {
      duration: GetValue(style, 'transition.duration', 200)
    }
  });
  scene.add.existing(folder);
  return folder;
};
var _default = CreateFolder;
exports.default = _default;
},{"../gameobjects/label/FolderTitle.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/label/FolderTitle.js","../gameobjects/utils/CreateTweaker.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/CreateTweaker.js","./CreateBackground.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateBackground.js","../gameobjects/folder/Folder.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/folder/Folder.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/AddFolder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateFolder = _interopRequireDefault(require("../builders/CreateFolder.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var AddFolder = function (config) {
  var scene = this.scene;

  // Create folder
  var folderStyle = GetValue(this.styles, 'folder') || {};
  folderStyle.tweaker = this.styles;
  folderStyle.root = this.root;
  var folder = (0, _CreateFolder.default)(scene, config, folderStyle);
  delete folderStyle.tweaker;
  delete folderStyle.root;

  // Add folder
  this.add(folder, {
    expand: true
  });

  // Set content
  folder.setTitle(config);
  var expanded = GetValue(config, 'expanded', true);
  if (expanded) {
    folder.expand(0);
  } else {
    folder.collapse(0);
  }
  var childTweaker = folder.getElement('child');
  if (config.key) {
    this.root.addChildrenMap(config.key, childTweaker);
  }
  return childTweaker;
};
var _default = AddFolder;
exports.default = _default;
},{"../builders/CreateFolder.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateFolder.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/tabpages/BindingTargetMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setBindingTarget(target) {
    var children = this.childrenMap.pages.children;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      children[i].setBindingTarget(target);
    }
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/tabpages/InputRowTitleWidthMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  getMaxInputRowTitleWidth() {
    var maxTitleWidth = 0;
    var children = this.childrenMap.pages.children; // tweaker array
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      maxTitleWidth = Math.max(maxTitleWidth, children[i].getMaxInputRowTitleWidth());
    }
    return maxTitleWidth + this.getInnerPadding('left');
  },
  setInputRowTitleWidth(width) {
    width -= this.getInnerPadding('left');
    var children = this.childrenMap.pages.children; // tweaker array
    for (var i = 0, cnt = children.length; i < cnt; i++) {
      children[i].setInputRowTitleWidth(width);
    }
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/tabpages/TabPages.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TabPages = _interopRequireDefault(require("../../../tabpages/TabPages.js"));
var _BindingTargetMethods = _interopRequireDefault(require("./BindingTargetMethods.js"));
var _InputRowTitleWidthMethods = _interopRequireDefault(require("./InputRowTitleWidthMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class TabPages extends _TabPages.default {
  constructor(scene, config) {
    super(scene, config);
    this.type = 'rexTweaker.TabPages';
  }
}
Object.assign(TabPages.prototype, _BindingTargetMethods.default, _InputRowTitleWidthMethods.default);
var _default = TabPages;
exports.default = _default;
},{"../../../tabpages/TabPages.js":"node_modules/phaser3-rex-plugins/templates/ui/tabpages/TabPages.js","./BindingTargetMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/tabpages/BindingTargetMethods.js","./InputRowTitleWidthMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/tabpages/InputRowTitleWidthMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateButtonRoundRectangleBackground.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RoundRectangle = _interopRequireDefault(require("../../roundrectangle/RoundRectangle.js"));
var _ExtractByPrefix = _interopRequireDefault(require("../../../../plugins/utils/object/ExtractByPrefix.js"));
var _GetPartialData = _interopRequireDefault(require("../../../../plugins/utils/object/GetPartialData.js"));
var _IsKeyValueEqual = _interopRequireDefault(require("../../../../plugins/utils/object/IsKeyValueEqual.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateButtonRoundRectangleBackground = function (scene, config) {
  var gameObject = new RoundRectangle(scene, config);
  scene.add.existing(gameObject);
  return gameObject;
};
class RoundRectangle extends _RoundRectangle.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    super(scene, config);
    var activeStyle = (0, _ExtractByPrefix.default)(config, 'active');
    for (var name in activeStyle) {
      var propertyName = StyleToProperty[name] || name;
      var value = activeStyle[name];
      delete activeStyle[name];
      activeStyle[propertyName] = value;
    }
    this.activeStyle = activeStyle;
  }
  modifyStyle(style) {
    for (var key in style) {
      this[key] = style[key];
    }
    return this;
  }
  setActiveState(enable) {
    if (enable === undefined) {
      enable = true;
    }
    if (this.activeState === enable) {
      return this;
    }
    this.activeState = enable;
    if (enable) {
      var activeStyle = this.activeStyle;
      var styleSave = (0, _GetPartialData.default)(this, activeStyle);
      if ((0, _IsKeyValueEqual.default)(activeStyle, styleSave)) {
        return;
      }
      this.styleSave = styleSave;
      this.modifyStyle(activeStyle);
    } else {
      if (!this.styleSave) {
        return this;
      }
      this.modifyStyle(this.styleSave);
      this.styleSave = undefined;
    }
    return this;
  }
}
const StyleToProperty = {
  color: 'fillColor',
  alpha: 'fillAlpha',
  strokeColor: 'strokeColor',
  strokeAlpha: 'strokeAlpha',
  strokeWidth: 'lineWidth'
};
var _default = CreateButtonRoundRectangleBackground;
exports.default = _default;
},{"../../roundrectangle/RoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/roundrectangle/RoundRectangle.js","../../../../plugins/utils/object/ExtractByPrefix.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/ExtractByPrefix.js","../../../../plugins/utils/object/GetPartialData.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/GetPartialData.js","../../../../plugins/utils/object/IsKeyValueEqual.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsKeyValueEqual.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateBBCodeText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BBCodeText = _interopRequireDefault(require("../../bbcodetext/BBCodeText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateBBCodeText = function (scene, style) {
  var gameObject = new _BBCodeText.default(scene, 0, 0, '', style);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateBBCodeText;
exports.default = _default;
},{"../../bbcodetext/BBCodeText.js":"node_modules/phaser3-rex-plugins/templates/ui/bbcodetext/BBCodeText.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/BuildInteractiveLabelConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DeepClone = _interopRequireDefault(require("../../../../plugins/utils/object/DeepClone.js"));
var _CreateButtonRoundRectangleBackground = _interopRequireDefault(require("./CreateButtonRoundRectangleBackground.js"));
var _CreateBBCodeText = _interopRequireDefault(require("./CreateBBCodeText.js"));
var _CreateImage = _interopRequireDefault(require("./CreateImage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var BuildInteractiveLabelConfig = function (scene, config, deepCloneConfig) {
  if (deepCloneConfig === undefined) {
    deepCloneConfig = true;
  }
  if (deepCloneConfig) {
    config = config ? (0, _DeepClone.default)(config) : {};
  } else if (!config) {
    config = {};
  }
  config.background = (0, _CreateButtonRoundRectangleBackground.default)(scene, config.background);
  config.text = (0, _CreateBBCodeText.default)(scene, config.text);
  if (config.icon !== null) {
    config.icon = (0, _CreateImage.default)(scene, config.icon);
  }
  if (config.action !== null) {
    config.action = (0, _CreateImage.default)(scene, config.action);
  }
  return config;
};
var _default = BuildInteractiveLabelConfig;
exports.default = _default;
},{"../../../../plugins/utils/object/DeepClone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js","./CreateButtonRoundRectangleBackground.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateButtonRoundRectangleBackground.js","./CreateBBCodeText.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateBBCodeText.js","./CreateImage.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateImage.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateInteractiveLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BuildInteractiveLabelConfig = _interopRequireDefault(require("./BuildInteractiveLabelConfig.js"));
var _Label = _interopRequireDefault(require("../../label/Label.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateInteractiveLabel = function (scene, config) {
  config = (0, _BuildInteractiveLabelConfig.default)(scene, config);
  var gameObject = new Label(scene, config);
  scene.add.existing(gameObject);
  return gameObject;
};
class Label extends _Label.default {
  setActiveState(enable) {
    this.childrenMap.background.setActiveState(enable);
    return this;
  }
}
var _default = CreateInteractiveLabel;
exports.default = _default;
},{"./BuildInteractiveLabelConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/BuildInteractiveLabelConfig.js","../../label/Label.js":"node_modules/phaser3-rex-plugins/templates/ui/label/Label.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TabPages = _interopRequireDefault(require("../gameobjects/tabpages/TabPages.js"));
var _CreateInteractiveLabel = _interopRequireDefault(require("../../utils/build/CreateInteractiveLabel.js"));
var _CreateTweaker = _interopRequireDefault(require("../gameobjects/utils/CreateTweaker"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateTab = function (scene, config, style) {
  var tabPages = new _TabPages.default(scene, style);
  scene.add.existing(tabPages);
  var tabConfig = GetValue(style, 'tab');
  var tweakerConfig = {
    root: GetValue(style, 'root'),
    styles: GetValue(style, 'tweaker')
  };
  var pages = GetValue(config, 'pages') || [];
  for (var i = 0, cnt = pages.length; i < cnt; i++) {
    var page = pages[i];
    tabPages.addPage({
      key: page.title,
      tab: (0, _CreateInteractiveLabel.default)(scene, tabConfig).setActiveState(false).resetDisplayContent({
        text: page.title
      }),
      page: (0, _CreateTweaker.default)(scene, tweakerConfig)
    });
  }
  tabPages.on('tab.focus', function (tab, key) {
    tab.setActiveState(true);
  }).on('tab.blur', function (tab, key) {
    tab.setActiveState(false);
  });
  return tabPages;
};
var _default = CreateTab;
exports.default = _default;
},{"../gameobjects/tabpages/TabPages.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/tabpages/TabPages.js","../../utils/build/CreateInteractiveLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateInteractiveLabel.js","../gameobjects/utils/CreateTweaker":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/CreateTweaker.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/AddTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateTab = _interopRequireDefault(require("../builders/CreateTab.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var AddTab = function (config) {
  var scene = this.scene;

  // Create tab
  var tabStyle = GetValue(this.styles, 'tab') || {};
  tabStyle.tweaker = this.styles;
  tabStyle.root = this.root;
  var tab = (0, _CreateTab.default)(scene, config, tabStyle);
  delete tabStyle.tweaker;
  delete tabStyle.root;

  // Add tab
  this.add(tab, {
    expand: true
  });
  var pagesConfig = GetValue(config, 'pages') || [];
  var pages = [];
  var shownPageIndex = 0;
  for (var i = 0, cnt = pagesConfig.length; i < cnt; i++) {
    var childTweaker = tab.getPage(i);
    var isPageShown = pagesConfig[i].show;
    if (isPageShown) {
      shownPageIndex = i;
    }
    var key = pagesConfig[i].key;
    if (key) {
      this.root.addChildrenMap(key, childTweaker);
    }
    pages.push(childTweaker);
  }
  tab.swapPage(shownPageIndex, 0);
  return pages;
};
var _default = AddTab;
exports.default = _default;
},{"../builders/CreateTab.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateTab.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/utils/inputs/InputTypes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleSwitchType = exports.StringType = exports.RangeType = exports.NumberType = exports.ListType = exports.ColorType = exports.ButtonsType = exports.BooleanType = void 0;
const StringType = 'string';
exports.StringType = StringType;
const NumberType = 'number';
exports.NumberType = NumberType;
const RangeType = 'range';
exports.RangeType = RangeType;
const ListType = 'list';
exports.ListType = ListType;
const ButtonsType = 'buttons';
exports.ButtonsType = ButtonsType;
const BooleanType = 'boolean';
exports.BooleanType = BooleanType;
const ToggleSwitchType = 'toggleSwitch';
exports.ToggleSwitchType = ToggleSwitchType;
const ColorType = 'color';
exports.ColorType = ColorType;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/utils/inputs/GetInputType.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputTypes = require("./InputTypes.js");
var GetInputType = function (object, key, config) {
  // Force input type to view
  if (config.view) {
    return config.view;
  }
  if (config.options) {
    return _InputTypes.ListType;
  }
  if (!object) {
    return _InputTypes.StringType;
  }
  var value = object[key];
  switch (typeof value) {
    case 'number':
      if (HasProperties(config, 'min', 'max')) {
        return _InputTypes.RangeType;
      }
      return _InputTypes.NumberType;
    case 'string':
      return _InputTypes.StringType;
    case 'boolean':
      return _InputTypes.BooleanType;
    default:
      return _InputTypes.StringType;
  }
};
var HasProperties = function (object, ...keys) {
  for (var i = 0, cnt = keys.length; i < cnt; i++) {
    if (object[keys[i]] === undefined) {
      return false;
    }
  }
  return true;
};
var _default = GetInputType;
exports.default = _default;
},{"./InputTypes.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/utils/inputs/InputTypes.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputrow/BindingTargetMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  setupBinding() {
    var inputField = this.childrenMap.inputField;
    inputField
    // Set text value to object when closing editor
    .on('valuechange', function (value) {
      if (!this.bindingTarget || !this.autoUpdateEnable) {
        return;
      }
      this.bindingTarget[this.bindTargetKey] = value;
    }, this);
    return this;
  },
  setAutoUpdateEnable(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.autoUpdateEnable = enable;
    return this;
  },
  setBindingTarget(target, key) {
    this.bindingTarget = target;
    if (key !== undefined) {
      this.setBindingTargetKey(key);
    }
    this.syncTargetValue();
    return this;
  },
  setBindingTargetKey(key) {
    this.bindTargetKey = key;
    return this;
  },
  syncTargetValue() {
    if (!this.bindingTarget || !this.bindTargetKey) {
      return this;
    }
    var inputField = this.childrenMap.inputField;
    inputField.syncValue(this.bindingTarget[this.bindTargetKey]);
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputrow/MonitorTargetMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  startMonitorTarget() {
    if (this.isMonitoring) {
      return this;
    }
    this.isMonitoring = true;
    this.scene.events.on('postupdate', this.onMonitorTarget, this);
    return this;
  },
  stopMonitorTarget() {
    if (!this.isMonitoring) {
      return this;
    }
    this.isMonitoring = false;
    this.scene.events.off('postupdate', this.onMonitorTarget, this);
    return this;
  },
  onMonitorTarget() {
    if (!this.bindingTarget) {
      return;
    }
    var newValue = this.bindingTarget[this.bindTargetKey];
    var inputField = this.childrenMap.inputField;
    if (inputField.value === newValue) {
      return;
    }
    // Sync new value
    inputField.syncValue(newValue);
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputrow/MinTitleWidthMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  getMinTitleWidth() {
    var title = this.childrenMap.title;
    if (!title) {
      return 0;
    }
    var padding = title.rexSizer.padding;
    var titleWidth = this.getChildWidth(this.childrenMap.title) + padding.left + padding.right;
    return titleWidth + this.getInnerPadding('left');
  },
  setMinTitleWidth(width) {
    var title = this.childrenMap.title;
    if (!title) {
      return this;
    }
    var padding = title.rexSizer.padding;
    width -= padding.left + padding.right;
    title.minWidth = width;
    return this;
  }
};
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputrow/InputRow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../../../sizer/Sizer.js"));
var _BindingTargetMethods = _interopRequireDefault(require("./BindingTargetMethods.js"));
var _MonitorTargetMethods = _interopRequireDefault(require("./MonitorTargetMethods.js"));
var _MinTitleWidthMethods = _interopRequireDefault(require("./MinTitleWidthMethods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class InputRow extends _Sizer.default {
  constructor(scene, config) {
    super(scene, config);
    this.type = 'rexTweaker.InputRow';
    this.bindingTarget = undefined;
    this.bindTargetKey = undefined;
    this.autoUpdateEnable = true;
    var inputTitle = config.inputTitle;
    var inputField = config.inputField;
    var background = config.background;
    var proportion = GetValue(config, 'proportion.title', 0);
    var titleSpace = GetValue(config, 'space.title', 0);
    var padding;
    if (this.orientation === 0) {
      padding = {
        right: titleSpace
      };
    } else {
      padding = {
        bottom: titleSpace
      };
    }
    this.add(inputTitle, {
      proportion: proportion,
      expand: true,
      padding: padding
    });
    var defaultProportion = config.parentOrientation === 1 ? 1 : 0;
    var proportion = GetValue(config, 'proportion.inputField', defaultProportion);
    this.add(inputField, {
      proportion: proportion,
      expand: true
    });
    if (background) {
      this.addBackground(background);
    }
    this.addChildrenMap('title', inputTitle);
    this.addChildrenMap('inputField', inputField);
    this.addChildrenMap('background', background);
    this.setupBinding();
  }
  destroy(fromScene) {
    //  This Game Object has already been destroyed
    if (!this.scene) {
      return;
    }
    this.stopMonitorTarget();
    super.destroy(fromScene);
  }
  setTitle(config) {
    var title = this.childrenMap.title;
    title.setTitle(config);
    return this;
  }
  preLayout() {
    var title = this.childrenMap.title;
    if (title) {
      title.minWidth = 0;
    }
    super.preLayout();
  }
}
Object.assign(InputRow.prototype, _BindingTargetMethods.default, _MonitorTargetMethods.default, _MinTitleWidthMethods.default);
var _default = InputRow;
exports.default = _default;
},{"../../../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","./BindingTargetMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputrow/BindingTargetMethods.js","./MonitorTargetMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputrow/MonitorTargetMethods.js","./MinTitleWidthMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputrow/MinTitleWidthMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateTitleLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Title = _interopRequireDefault(require("../gameobjects/label/Title.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateTitleLabel = function (scene, config, style) {
  var gameObject = new _Title.default(scene, style);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateTitleLabel;
exports.default = _default;
},{"../gameobjects/label/Title.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/label/Title.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/InputFieldBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../../../sizer/Sizer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class InputFiledBase extends _Sizer.default {
  get bindingTarget() {
    return this.getParentSizer().bindingTarget;
  }
  get bindingKey() {
    return this.getParentSizer().bindTargetKey;
  }
  get value() {
    return this._value;
  }
  validate(newValue) {
    if (this.syncValueFlag || !this.validateCallback) {
      return true;
    }
    return this.validateCallback(newValue, this._value, this.bindingTarget, this.bindingKey);
  }

  // Override
  set value(value) {
    if (this._value === value) {
      return;
    }
    var oldValue = this._value;
    this._value = value;
    if (!this.syncValueFlag) {
      this.emit('valuechange', value, oldValue, this.bindingTarget, this.bindingKey);
    }
  }
  getValue() {
    return this.value;
  }
  setValue(value) {
    this.value = value;
    return this;
  }

  /* 
  Internal method invoked when 
  - inputRow.setBindingTarget(target), or 
  - inputRow.syncTargetValue()
  */
  syncValue(value) {
    this.syncValueFlag = true;
    this.value = value;
    this.syncValueFlag = false;
    return this;
  }

  // Override
  get readOnly() {
    return this._readOnly;
  }

  // Override
  set readOnly(value) {
    this._readOnly = value;
  }
  setReadOnly(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.readOnly = enable;
    return true;
  }
  setTextFormatCallback(callback) {
    this.textFormatCallback = callback;
    return this;
  }
  setValidateCallback(callback) {
    this.validateCallback = callback;
    return this;
  }
}
var _default = InputFiledBase;
exports.default = _default;
},{"../../../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/TextInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputFieldBase = _interopRequireDefault(require("./InputFieldBase.js"));
var _CreateInputText = _interopRequireDefault(require("../../../utils/build/CreateInputText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class TextInput extends _InputFieldBase.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    super(scene);
    this.type = 'rexTweaker.TextInput';
    var inputTextConfig = config.inputText;
    var inputText = (0, _CreateInputText.default)(scene, inputTextConfig);
    this.add(inputText, {
      proportion: 1,
      expand: true
    });
    this.addChildrenMap('inputText', inputText);
    inputText.on('close', function () {
      this.setValue(inputText.value);
    }, this);
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this._value === value) {
      return;
    }
    if (!this.validate(value)) {
      value = this._value; // Back to previous value
    }

    var text = this.textFormatCallback ? this.textFormatCallback(value) : value;
    this.childrenMap.inputText.setText(text);
    super.value = value; // Fire 'valuechange' event
  }

  setInputTextReadOnly(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.childrenMap.inputText.setReadOnly(enable);
    return this;
  }
}
var _default = TextInput;
exports.default = _default;
},{"./InputFieldBase.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/InputFieldBase.js","../../../utils/build/CreateInputText.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateInputText.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateTextInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextInput = _interopRequireDefault(require("../gameobjects/inputfield/TextInput.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateTextInput = function (scene, config, style) {
  var gameObject = new _TextInput.default(scene, style);
  scene.add.existing(gameObject);
  gameObject.setInputTextReadOnly(!!config.inputTextReadOnly);
  return gameObject;
};
var _default = CreateTextInput;
exports.default = _default;
},{"../gameobjects/inputfield/TextInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/TextInput.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/NumberInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputFieldBase = _interopRequireDefault(require("./InputFieldBase.js"));
var _CreateInputText = _interopRequireDefault(require("../../../utils/build/CreateInputText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class NumberInput extends _InputFieldBase.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    super(scene);
    this.type = 'rexTweaker.NumberInput';
    var inputTextConfig = config.inputNumber || config.inputText;
    var inputText = (0, _CreateInputText.default)(scene, inputTextConfig).setNumberInput();
    this.add(inputText, {
      proportion: 1,
      expand: true
    });
    this.addChildrenMap('inputText', inputText);
    inputText.on('close', function () {
      this.setValue(inputText.value);
    }, this);
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this._value === value) {
      return;
    }
    if (!this.validate(value)) {
      value = this._value; // Back to previous value
    }

    var text = this.textFormatCallback ? this.textFormatCallback(value) : value;
    this.childrenMap.inputText.setText(text);
    super.value = value; // Fire 'valuechange' event
  }

  setInputTextReadOnly(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.childrenMap.inputText.setReadOnly(enable);
    return this;
  }
}
var _default = NumberInput;
exports.default = _default;
},{"./InputFieldBase.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/InputFieldBase.js","../../../utils/build/CreateInputText.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateInputText.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateNumberInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NumberInput = _interopRequireDefault(require("../gameobjects/inputfield/NumberInput.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateNumberInput = function (scene, config, style) {
  var gameObject = new _NumberInput.default(scene, style);
  scene.add.existing(gameObject);
  gameObject.setInputTextReadOnly(!!config.inputTextReadOnly);
  return gameObject;
};
var _default = CreateNumberInput;
exports.default = _default;
},{"../gameobjects/inputfield/NumberInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/NumberInput.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/CreateSlider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Slider = _interopRequireDefault(require("../../../slider/Slider.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateSlider = function (scene, config) {
  var gameObject = new _Slider.default(scene, config);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateSlider;
exports.default = _default;
},{"../../../slider/Slider.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/Slider.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/RangeInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputFieldBase = _interopRequireDefault(require("./InputFieldBase.js"));
var _CreateSlider = _interopRequireDefault(require("../utils/CreateSlider.js"));
var _CreateInputText = _interopRequireDefault(require("../../../utils/build/CreateInputText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const Linear = Phaser.Math.Linear;
const SnapFloor = Phaser.Math.Snap.Floor;
class RangeInput extends _InputFieldBase.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    super(scene);
    this.type = 'rexTweaker.RangeInput';
    var sliderConfig = config.slider;
    var trackSizeKey = this.orientation === 0 ? 'track.height' : 'track.width';
    var trackSize = GetValue(sliderConfig, trackSizeKey);
    var slider = (0, _CreateSlider.default)(scene, sliderConfig);
    var defaultProportion = config.parentOrientation === 1 ? 2 : 0;
    var proportion = GetValue(config, 'proportion.range.slider', defaultProportion);
    var expand = trackSize === undefined;
    this.add(slider, {
      proportion: proportion,
      expand: expand
    });
    var inputTextConfig = config.inputNumber || config.inputText;
    var inputText = (0, _CreateInputText.default)(scene, inputTextConfig).setNumberInput();
    var defaultProportion = config.parentOrientation === 1 ? 1 : 0;
    var proportion = GetValue(config, 'proportion.range.inputText', defaultProportion);
    this.add(inputText, {
      proportion: proportion,
      expand: true
    });
    this.addChildrenMap('slider', slider);
    this.addChildrenMap('inputText', inputText);
    inputText.on('close', function () {
      this.setValue(inputText.value);
    }, this);
    slider.on('valuechange', function () {
      var value = Linear(this.minValue, this.maxValue, slider.value);
      if (this.step) {
        value = SnapFloor(value, this.step, this.minValue);
      }
      this.setValue(value);
    }, this);
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this._value === value) {
      return;
    }
    if (!this.validate(value)) {
      value = this._value; // Back to previous value
    }

    var text = this.textFormatCallback ? this.textFormatCallback(value) : value;
    this.childrenMap.inputText.setText('').setText(text);
    this.childrenMap.slider.setValue(value, this.minValue, this.maxValue);
    super.value = value; // Fire 'valuechange' event
  }

  setRange(min, max, step) {
    this.minValue = min;
    this.maxValue = max;
    this.step = step;
    this.childrenMap.slider.setGap(step, min, max);
    return this;
  }
  setInputTextReadOnly(enable) {
    if (enable === undefined) {
      enable = true;
    }
    this.childrenMap.inputText.setReadOnly(enable);
    return this;
  }
}
var _default = RangeInput;
exports.default = _default;
},{"./InputFieldBase.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/InputFieldBase.js","../utils/CreateSlider.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/CreateSlider.js","../../../utils/build/CreateInputText.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateInputText.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateRangeInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _RangeInput = _interopRequireDefault(require("../gameobjects/inputfield/RangeInput.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateRangeInput = function (scene, config, style) {
  var gameObject = new _RangeInput.default(scene, style);
  scene.add.existing(gameObject);
  gameObject.setRange(config.min, config.max, config.step);
  gameObject.setInputTextReadOnly(!!config.inputTextReadOnly);
  return gameObject;
};
var _default = CreateRangeInput;
exports.default = _default;
},{"../gameobjects/inputfield/RangeInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/RangeInput.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/BuildListConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DeepClone = _interopRequireDefault(require("../../../../plugins/utils/object/DeepClone.js"));
var _BuildDisplayLabelConfig = _interopRequireDefault(require("./BuildDisplayLabelConfig.js"));
var _CreateInteractiveLabel = _interopRequireDefault(require("./CreateInteractiveLabel.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var BuildListConfig = function (scene, config, deepCloneConfig) {
  if (deepCloneConfig === undefined) {
    deepCloneConfig = true;
  }
  if (deepCloneConfig) {
    config = config ? (0, _DeepClone.default)(config) : {};
  } else if (!config) {
    config = {};
  }
  var labelConfig = config.label || config.button;
  var listButtonConfig = config.button || config.label;
  delete config.label;
  delete config.button;
  var listConfig = (0, _BuildDisplayLabelConfig.default)(scene, labelConfig);
  listConfig.list = config;
  listConfig.list.createButtonCallback = function (scene, option) {
    var gameObject = (0, _CreateInteractiveLabel.default)(scene, listButtonConfig).resetDisplayContent({
      text: option.text
    });
    return gameObject;
  };
  listConfig.list.onButtonOver = function (button, index, pointer, event) {
    button.setActiveState(true);
  };
  listConfig.list.onButtonOut = function (button, index, pointer, event) {
    button.setActiveState(false);
  };
  return listConfig;
};
var _default = BuildListConfig;
exports.default = _default;
},{"../../../../plugins/utils/object/DeepClone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js","./BuildDisplayLabelConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/BuildDisplayLabelConfig.js","./CreateInteractiveLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateInteractiveLabel.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateDropDownList.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BuildListConfig = _interopRequireDefault(require("./BuildListConfig.js"));
var _DropDownList = _interopRequireDefault(require("../../dropdownlist/DropDownList.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateDropDownList = function (scene, config) {
  config = (0, _BuildListConfig.default)(scene, config);
  var gameObject = new _DropDownList.default(scene, config);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateDropDownList;
exports.default = _default;
},{"./BuildListConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/BuildListConfig.js","../../dropdownlist/DropDownList.js":"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/DropDownList.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/utils/OptionsMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GetOptionValue = exports.GetOptionText = void 0;
var GetOptionText = function (options, value) {
  for (var i = 0, cnt = options.length; i < cnt; i++) {
    var option = options[i];
    if (option.value === value) {
      return option.text;
    }
  }
  return undefined;
};
exports.GetOptionText = GetOptionText;
var GetOptionValue = function (options, text) {
  for (var i = 0, cnt = options.length; i < cnt; i++) {
    var option = options[i];
    if (option.text === text) {
      return option.value;
    }
  }
  return undefined;
};
exports.GetOptionValue = GetOptionValue;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/ListInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputFieldBase = _interopRequireDefault(require("./InputFieldBase.js"));
var _CreateDropDownList = _interopRequireDefault(require("../../../utils/build/CreateDropDownList.js"));
var _OptionsMethods = require("../../utils/OptionsMethods.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class ListInput extends _InputFieldBase.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    super(scene);
    this.type = 'rexTweaker.ListInput';
    var list = (0, _CreateDropDownList.default)(scene, config.list);
    this.add(list, {
      proportion: 1,
      expand: true
    });
    this.addChildrenMap('list', list);
    list.on('button.click', function (dropDownList, listPanel, button, index, pointer, event) {
      var value = (0, _OptionsMethods.GetOptionValue)(list.options, button.text);
      this.setValue(value);
    }, this);
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this._value === value) {
      return;
    }
    if (!this.validate(value)) {
      value = this._value; // Back to previous value
    }

    var list = this.childrenMap.list;
    var text = (0, _OptionsMethods.GetOptionText)(list.options, value);
    list.resetDisplayContent({
      text: text
    });
    super.value = value; // Fire 'valuechange' event
  }

  setOptions(options) {
    this.childrenMap.list.setOptions(options);
    return this;
  }
}
var _default = ListInput;
exports.default = _default;
},{"./InputFieldBase.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/InputFieldBase.js","../../../utils/build/CreateDropDownList.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateDropDownList.js","../../utils/OptionsMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/utils/OptionsMethods.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateListInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ListInput = _interopRequireDefault(require("../gameobjects/inputfield/ListInput.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateListInput = function (scene, config, style) {
  var gameObject = new _ListInput.default(scene, style);
  scene.add.existing(gameObject);
  gameObject.setOptions(config.options);
  return gameObject;
};
var _default = CreateListInput;
exports.default = _default;
},{"../gameobjects/inputfield/ListInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/ListInput.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/CreateButtons.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Buttons = _interopRequireDefault(require("../../../buttons/Buttons.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateButtons = function (scene, config) {
  var gameObject = new _Buttons.default(scene, config);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateButtons;
exports.default = _default;
},{"../../../buttons/Buttons.js":"node_modules/phaser3-rex-plugins/templates/ui/buttons/Buttons.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/SetButtonsActiveState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetButtonsActiveStateByText = function (buttons, text) {
  for (var i = 0, cnt = buttons.length; i < cnt; i++) {
    var button = buttons[i];
    if (!button) {
      continue;
    }
    button.setActiveState(button.text === text);
  }
};
var _default = SetButtonsActiveStateByText;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/ButtonsInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputFieldBase = _interopRequireDefault(require("./InputFieldBase.js"));
var _CreateButtons = _interopRequireDefault(require("../utils/CreateButtons.js"));
var _DeepClone = _interopRequireDefault(require("../../../../../plugins/utils/object/DeepClone.js"));
var _CreateInteractiveLabel = _interopRequireDefault(require("../../../utils/build/CreateInteractiveLabel.js"));
var _OptionsMethods = require("../../utils/OptionsMethods.js");
var _SetButtonsActiveState = _interopRequireDefault(require("../utils/SetButtonsActiveState.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class ButtonsInput extends _InputFieldBase.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    super(scene);
    this.type = 'rexTweaker.ButtonsInput';
    var buttonConfig = config.button ? (0, _DeepClone.default)(config.button) : {};
    var buttonExpand = GetValue(buttonConfig, 'expand', true);
    if (buttonExpand) {
      buttonConfig.align = 'center';
    }
    delete buttonConfig.expand;
    var list = (0, _CreateButtons.default)(scene, {
      expand: buttonExpand
    });
    list.buttonConfig = buttonConfig;
    this.add(list, {
      proportion: 1,
      expand: true
    });
    this.addChildrenMap('list', list);
    list.on('button.click', function (button, index, pointer, event) {
      var value = (0, _OptionsMethods.GetOptionValue)(list.options, button.text);
      this.setValue(value);
    }, this);
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this._value === value) {
      return;
    }
    if (!this.validate(value)) {
      value = this._value; // Back to previous value
    }

    var list = this.childrenMap.list;
    var text = (0, _OptionsMethods.GetOptionText)(list.options, value);
    (0, _SetButtonsActiveState.default)(list.childrenMap.buttons, text);
    super.value = value; // Fire 'valuechange' event
  }

  setOptions(options) {
    var list = this.childrenMap.list;
    list.options = options;
    var scene = this.scene;
    var buttonConfig = list.buttonConfig;
    list.clearButtons(true);
    for (var i = 0, cnt = options.length; i < cnt; i++) {
      var option = options[i];
      var button = (0, _CreateInteractiveLabel.default)(scene, buttonConfig).setActiveState(false).resetDisplayContent({
        text: option.text
      });
      list.addButton(button);
    }
    return this;
  }
}
var _default = ButtonsInput;
exports.default = _default;
},{"./InputFieldBase.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/InputFieldBase.js","../utils/CreateButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/CreateButtons.js","../../../../../plugins/utils/object/DeepClone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js","../../../utils/build/CreateInteractiveLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateInteractiveLabel.js","../../utils/OptionsMethods.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/utils/OptionsMethods.js","../utils/SetButtonsActiveState.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/SetButtonsActiveState.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateButtonsInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ButtonsInput = _interopRequireDefault(require("../gameobjects/inputfield/ButtonsInput.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateButtonsInput = function (scene, config, style) {
  var gameObject = new _ButtonsInput.default(scene, style);
  scene.add.existing(gameObject);
  gameObject.setOptions(config.options);
  return gameObject;
};
var _default = CreateButtonsInput;
exports.default = _default;
},{"../gameobjects/inputfield/ButtonsInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/ButtonsInput.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/CreateCheckbox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Checkbox = _interopRequireDefault(require("../../../checkbox/Checkbox.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateCheckbox = function (scene, config) {
  var gameObject = new _Checkbox.default(scene, config);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateCheckbox;
exports.default = _default;
},{"../../../checkbox/Checkbox.js":"node_modules/phaser3-rex-plugins/templates/ui/checkbox/Checkbox.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/CheckboxInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputFieldBase = _interopRequireDefault(require("./InputFieldBase.js"));
var _CreateCheckbox = _interopRequireDefault(require("../utils/CreateCheckbox.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class CheckboxInput extends _InputFieldBase.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    super(scene);
    this.type = 'rexTweaker.CheckboxInput';
    var checkboxConfig = config.checkbox;
    var checkbox = (0, _CreateCheckbox.default)(scene, checkboxConfig);
    var size = GetValue(checkboxConfig, 'size');
    if (size !== undefined) {
      checkbox.setSize(size, size);
    }
    var fitRatio = size !== undefined ? 0 : 1;
    this.add(checkbox, {
      proportion: 0,
      expand: false,
      fitRatio: fitRatio
    });
    this.addChildrenMap('checkbox', checkbox);
    checkbox.on('valuechange', function (value) {
      this.setValue(value);
    }, this);
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this._value === value) {
      return;
    }
    if (!this.validate(value)) {
      value = this._value; // Back to previous value
    }

    this.childrenMap.checkbox.setValue(value);
    super.value = value; // Fire 'valuechange' event
  }
}
var _default = CheckboxInput;
exports.default = _default;
},{"./InputFieldBase.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/InputFieldBase.js","../utils/CreateCheckbox.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/CreateCheckbox.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateCheckboxInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CheckboxInput = _interopRequireDefault(require("../gameobjects/inputfield/CheckboxInput.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateCheckboxInput = function (scene, config, style) {
  var gameObject = new _CheckboxInput.default(scene, style);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateCheckboxInput;
exports.default = _default;
},{"../gameobjects/inputfield/CheckboxInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/CheckboxInput.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/CreateToggleSwitch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ToggleSwitch = _interopRequireDefault(require("../../../toggleswitch/ToggleSwitch.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateToggleSwitch = function (scene, config) {
  var gameObject = new _ToggleSwitch.default(scene, config);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateToggleSwitch;
exports.default = _default;
},{"../../../toggleswitch/ToggleSwitch.js":"node_modules/phaser3-rex-plugins/templates/ui/toggleswitch/ToggleSwitch.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/ToggleSwitchInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputFieldBase = _interopRequireDefault(require("./InputFieldBase.js"));
var _CreateToggleSwitch = _interopRequireDefault(require("../utils/CreateToggleSwitch.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class ToggleSwitchInput extends _InputFieldBase.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    super(scene);
    this.type = 'rexTweaker.ToggleSwitchInput';
    var toggleSwitchConfig = config.toggleSwitch;
    var toggleSwitch = (0, _CreateToggleSwitch.default)(scene, toggleSwitchConfig);
    var size = GetValue(toggleSwitchConfig, 'size');
    if (size !== undefined) {
      toggleSwitch.setSize(size, size);
    }
    var fitRatio = size !== undefined ? 0 : 1;
    this.addSpace().add(toggleSwitch, {
      proportion: 0,
      expand: false,
      fitRatio: fitRatio
    });
    this.addChildrenMap('toggleSwitch', toggleSwitch);
    toggleSwitch.on('valuechange', function (value) {
      this.setValue(value);
    }, this);
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this._value === value) {
      return;
    }
    if (!this.validate(value)) {
      value = this._value; // Back to previous value
    }

    this.childrenMap.toggleSwitch.setValue(value);
    super.value = value; // Fire 'valuechange' event
  }
}
var _default = ToggleSwitchInput;
exports.default = _default;
},{"./InputFieldBase.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/InputFieldBase.js","../utils/CreateToggleSwitch.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/CreateToggleSwitch.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateToggleSwitchInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ToggleSwitchInput = _interopRequireDefault(require("../gameobjects/inputfield/ToggleSwitchInput.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateToggleSwitchInput = function (scene, config, style) {
  var gameObject = new _ToggleSwitchInput.default(scene, style);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateToggleSwitchInput;
exports.default = _default;
},{"../gameobjects/inputfield/ToggleSwitchInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/ToggleSwitchInput.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateColorInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ColorInput = _interopRequireDefault(require("../../colorinput/colorinput/ColorInput.js"));
var _DeepClone = _interopRequireDefault(require("../../../../plugins/utils/object/DeepClone.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateColorInput = function (scene, config, deepCloneConfig) {
  if (deepCloneConfig === undefined) {
    deepCloneConfig = true;
  }
  if (deepCloneConfig) {
    config = config ? (0, _DeepClone.default)(config) : {};
  } else if (!config) {
    config = {};
  }
  var inputText = new _ColorInput.default(scene, config);
  scene.add.existing(inputText);
  return inputText;
};
var _default = CreateColorInput;
exports.default = _default;
},{"../../colorinput/colorinput/ColorInput.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/ColorInput.js","../../../../plugins/utils/object/DeepClone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/ColorInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputFieldBase = _interopRequireDefault(require("./InputFieldBase.js"));
var _CreateColorInput = _interopRequireDefault(require("../../../utils/build/CreateColorInput.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class ColorInput extends _InputFieldBase.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    super(scene);
    this.type = 'rexTweaker.ColorInput';
    var colorInputConfig = config.colorInput;
    var colorInput = (0, _CreateColorInput.default)(scene, colorInputConfig);
    this.add(colorInput, {
      proportion: 1,
      expand: true
    });
    this.addChildrenMap('colorInput', colorInput);
    colorInput.on('valuechange', function (value) {
      this.setValue(value);
    }, this);
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this._value === value) {
      return;
    }
    if (!this.validate(value)) {
      value = this._value; // Back to previous value
    }

    this.childrenMap.colorInput.setValue(value);
    super.value = value; // Fire 'valuechange' event
  }
}
var _default = ColorInput;
exports.default = _default;
},{"./InputFieldBase.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/InputFieldBase.js","../../../utils/build/CreateColorInput.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateColorInput.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateColorInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ColorInput = _interopRequireDefault(require("../gameobjects/inputfield/ColorInput.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateColorInput = function (scene, config, style) {
  var gameObject = new _ColorInput.default(scene, style);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateColorInput;
exports.default = _default;
},{"../gameobjects/inputfield/ColorInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputfield/ColorInput.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateInputField.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputTypes = require("../utils/inputs/InputTypes.js");
var _CreateTextInput = _interopRequireDefault(require("./CreateTextInput.js"));
var _CreateNumberInput = _interopRequireDefault(require("./CreateNumberInput.js"));
var _CreateRangeInput = _interopRequireDefault(require("./CreateRangeInput.js"));
var _CreateListInput = _interopRequireDefault(require("./CreateListInput.js"));
var _CreateButtonsInput = _interopRequireDefault(require("./CreateButtonsInput.js"));
var _CreateCheckboxInput = _interopRequireDefault(require("./CreateCheckboxInput.js"));
var _CreateToggleSwitchInput = _interopRequireDefault(require("./CreateToggleSwitchInput.js"));
var _CreateColorInput = _interopRequireDefault(require("./CreateColorInput.js"));
var _IsFunction = _interopRequireDefault(require("../../../../plugins/utils/object/IsFunction.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateInputField = function (scene, config, style) {
  var viewType = config.view;
  var callback;
  switch (viewType) {
    case _InputTypes.StringType:
      callback = _CreateTextInput.default;
      break;
    case _InputTypes.NumberType:
      callback = _CreateNumberInput.default;
      break;
    case _InputTypes.RangeType:
      callback = _CreateRangeInput.default;
      break;
    case _InputTypes.ListType:
      callback = _CreateListInput.default;
      break;
    case _InputTypes.ButtonsType:
      callback = _CreateButtonsInput.default;
      break;
    case _InputTypes.BooleanType:
      callback = _CreateCheckboxInput.default;
      break;
    case _InputTypes.ToggleSwitchType:
      callback = _CreateToggleSwitchInput.default;
      break;
    case _InputTypes.ColorType:
      callback = _CreateColorInput.default;
      break;
    default:
      callback = (0, _IsFunction.default)(viewType) ? viewType : _CreateTextInput.default;
      break;
  }
  var gameObject = callback(scene, config, style, gameObject);

  // Extra settings
  gameObject.setTextFormatCallback(config.format);
  return gameObject;
};
var _default = CreateInputField;
exports.default = _default;
},{"../utils/inputs/InputTypes.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/utils/inputs/InputTypes.js","./CreateTextInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateTextInput.js","./CreateNumberInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateNumberInput.js","./CreateRangeInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateRangeInput.js","./CreateListInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateListInput.js","./CreateButtonsInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateButtonsInput.js","./CreateCheckboxInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateCheckboxInput.js","./CreateToggleSwitchInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateToggleSwitchInput.js","./CreateColorInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateColorInput.js","../../../../plugins/utils/object/IsFunction.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsFunction.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateInputRow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputRow = _interopRequireDefault(require("../gameobjects/inputrow/InputRow.js"));
var _CreateRoundRectangle = _interopRequireDefault(require("../../utils/build/CreateRoundRectangle.js"));
var _CreateTitleLabel = _interopRequireDefault(require("./CreateTitleLabel.js"));
var _CreateInputField = _interopRequireDefault(require("./CreateInputField.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateInputRow = function (scene, config, style) {
  // Title
  var titleStyle = GetValue(style, 'title') || {};
  var inputTitle = (0, _CreateTitleLabel.default)(scene, config, titleStyle);

  // InputField
  var inputField = (0, _CreateInputField.default)(scene, config, style);

  // Background
  var backgroundStyle = GetValue(style, 'background') || {};
  var background = (0, _CreateRoundRectangle.default)(scene, backgroundStyle);
  var inputRow = new _InputRow.default(scene, {
    ...config,
    ...style,
    inputTitle: inputTitle,
    inputField: inputField,
    background: background
  });
  scene.add.existing(inputRow);
  inputRow.setTitle(config);
  return inputRow;
};
var _default = CreateInputRow;
exports.default = _default;
},{"../gameobjects/inputrow/InputRow.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputrow/InputRow.js","../../utils/build/CreateRoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateRoundRectangle.js","./CreateTitleLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateTitleLabel.js","./CreateInputField.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateInputField.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/AddInput.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetInputType = _interopRequireDefault(require("../utils/inputs/GetInputType.js"));
var _CreateInputRow = _interopRequireDefault(require("../builders/CreateInputRow.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var AddInput = function (object, key, config) {
  if (arguments.length === 1) {
    config = object;
    object = config.bindingTarget;
    key = config.bindingKey;
  } else if (config === undefined) {
    config = {};
  }
  if (!config.title) {
    config.title = key;
  }
  if (!config.view) {
    config.view = (0, _GetInputType.default)(object, key, config);
  }

  // Create InputRow
  var inputRowStyle = this.styles.inputRow || {};
  inputRowStyle.parentOrientation = this.styles.orientation;
  var inputSizer = (0, _CreateInputRow.default)(this.scene, config, inputRowStyle);
  var inputField = inputSizer.childrenMap.inputField;
  var proportion;
  if (this.orientation === 1) {
    // y
    proportion = 0;
  } else {
    // x
    proportion = this.itemWidth > 0 ? 0 : 1;
    inputSizer.setMinWidth(this.itemWidth);
  }

  // Add InputRow to Tweaker
  this.add(inputSizer, {
    proportion: proportion,
    expand: true
  });
  if (config.onValueChange) {
    inputField.on('valuechange', config.onValueChange);
  }
  if (config.onValidate) {
    inputField.setValidateCallback(config.onValidate);
  }

  // Bind target
  inputSizer.setAutoUpdateEnable(config.autoUpdate);
  inputSizer.setBindingTarget(object, key);
  if (config.monitor) {
    inputSizer.startMonitorTarget();
  }
  if (config.key) {
    this.root.addChildrenMap(config.key, inputSizer);
  }
  return this;
};
var _default = AddInput;
exports.default = _default;
},{"../utils/inputs/GetInputType.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/utils/inputs/GetInputType.js","../builders/CreateInputRow.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateInputRow.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateButtons.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateRoundRectangle = _interopRequireDefault(require("../../utils/build/CreateRoundRectangle.js"));
var _CreateTitleLabel = _interopRequireDefault(require("./CreateTitleLabel.js"));
var _CreateDisplayLabel = _interopRequireDefault(require("../../utils/build/CreateDisplayLabel.js"));
var _CreateButtons = _interopRequireDefault(require("../gameobjects/utils/CreateButtons.js"));
var _InputRow = _interopRequireDefault(require("../gameobjects/inputrow/InputRow.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateButtons = function (scene, config, style) {
  // Title
  var titleStyle = GetValue(style, 'title') || {};
  var title = (0, _CreateTitleLabel.default)(scene, config, titleStyle);

  // Buttons
  var buttonsConfig = config.buttons;
  var buttonStyle = GetValue(style, 'button') || {};
  var buttons = [];
  for (var i = 0, cnt = buttonsConfig.length; i < cnt; i++) {
    var button = (0, _CreateDisplayLabel.default)(scene, buttonStyle);
    buttons.push(button);
    var buttonConfig = buttonsConfig[i];
    button.resetDisplayContent({
      text: buttonConfig.label
    });
    button.callback = buttonConfig.callback;
  }
  var buttonsSizer = (0, _CreateButtons.default)(scene, {
    buttons: buttons,
    expand: buttons.length === 1
  });

  // Background
  var backgroundStyle = GetValue(style, 'background') || {};
  var background = (0, _CreateRoundRectangle.default)(scene, backgroundStyle);

  // InputRow
  var inputRow = new _InputRow.default(scene, {
    ...style,
    inputTitle: title,
    inputField: buttonsSizer,
    background: background
  });
  scene.add.existing(inputRow);
  inputRow.setTitle(config);
  buttonsSizer.on('button.click', function (button) {
    button.callback(inputRow.bindingTarget);
  });
  return inputRow;
};
var _default = CreateButtons;
exports.default = _default;
},{"../../utils/build/CreateRoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateRoundRectangle.js","./CreateTitleLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateTitleLabel.js","../../utils/build/CreateDisplayLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/build/CreateDisplayLabel.js","../gameobjects/utils/CreateButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/utils/CreateButtons.js","../gameobjects/inputrow/InputRow.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/gameobjects/inputrow/InputRow.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/AddButtons.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateButtons = _interopRequireDefault(require("../builders/CreateButtons.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var AddButtons = function (config) {
  var scene = this.scene;
  if (config === undefined) {
    config = {};
  }
  if (config.hasOwnProperty('label')) {
    config.buttons = [{
      label: config.label,
      callback: config.callback
    }];
    delete config.label;
    delete config.callback;
  }
  var target = config.bindingTarget;
  delete config.bindingTarget;

  // Create buttons
  var buttonsStyle = GetValue(this.styles, 'inputRow') || {};
  var buttons = (0, _CreateButtons.default)(scene, config, buttonsStyle);

  // Add buttons
  this.add(buttons, {
    expand: true
  });

  // Set binding target
  if (target) {
    buttons.setBindingTarget(target);
  }
  if (config.key) {
    this.root.addChildrenMap(config.key, buttons);
  }
  return this;
};
var _default = AddButtons;
exports.default = _default;
},{"../builders/CreateButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateButtons.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/AddSeparator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateBackground = _interopRequireDefault(require("../builders/CreateBackground"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
var AddSeparator = function (config) {
  var scene = this.scene;

  // Create separator
  var separatorStyle = GetValue(this.styles, 'separator');
  var separator = (0, _CreateBackground.default)(scene, config, separatorStyle);

  // Add separator
  this.add(separator, {
    expand: true
  });
  return this;
};
var _default = AddSeparator;
exports.default = _default;
},{"../builders/CreateBackground":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateBackground.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/SetBindingTarget.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetBindingTarget = function (target) {
  var children = this.sizerChildren;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (!child.setBindingTarget) {
      continue;
    }
    child.setBindingTarget(target);
  }
  return this;
};
var _default = SetBindingTarget;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/GetMaxInputRowTitleWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetMaxInputRowTitleWidth = function () {
  var maxTitleWidth = 0;
  var children = this.sizerChildren;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (child.rexSizer.hidden) {
      continue;
    }
    if (child.getMinTitleWidth) {
      // InputRow
      maxTitleWidth = Math.max(maxTitleWidth, child.getMinTitleWidth());
    } else if (child.getMaxInputRowTitleWidth) {
      // Folder, TabPages
      maxTitleWidth = Math.max(maxTitleWidth, child.getMaxInputRowTitleWidth());
    }
  }
  return maxTitleWidth + this.getInnerPadding('left');
};
var _default = GetMaxInputRowTitleWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/SetInputRowTitleWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SetInputRowTitleWidth = function (width) {
  width -= this.getInnerPadding('left');
  var children = this.sizerChildren;
  for (var i = 0, cnt = children.length; i < cnt; i++) {
    var child = children[i];
    if (child.rexSizer.hidden) {
      continue;
    }
    if (child.setMinTitleWidth) {
      // InputRow
      child.setMinTitleWidth(width);
    } else if (child.setInputRowTitleWidth) {
      // Folder, TabPages
      child.setInputRowTitleWidth(width);
    }
  }
  return this;
};
var _default = SetInputRowTitleWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AddFolder = _interopRequireDefault(require("./AddFolder.js"));
var _AddTab = _interopRequireDefault(require("./AddTab.js"));
var _AddInput = _interopRequireDefault(require("./AddInput.js"));
var _AddButtons = _interopRequireDefault(require("./AddButtons.js"));
var _AddSeparator = _interopRequireDefault(require("./AddSeparator.js"));
var _SetBindingTarget = _interopRequireDefault(require("./SetBindingTarget.js"));
var _GetMaxInputRowTitleWidth = _interopRequireDefault(require("./GetMaxInputRowTitleWidth.js"));
var _SetInputRowTitleWidth = _interopRequireDefault(require("./SetInputRowTitleWidth.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var methods = {
  addFolder: _AddFolder.default,
  addTab: _AddTab.default,
  addInput: _AddInput.default,
  addButton: _AddButtons.default,
  addButtons: _AddButtons.default,
  addSeparator: _AddSeparator.default,
  setBindingTarget: _SetBindingTarget.default,
  getMaxInputRowTitleWidth: _GetMaxInputRowTitleWidth.default,
  setInputRowTitleWidth: _SetInputRowTitleWidth.default
};
var _default = methods;
exports.default = _default;
},{"./AddFolder.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/AddFolder.js","./AddTab.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/AddTab.js","./AddInput.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/AddInput.js","./AddButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/AddButtons.js","./AddSeparator.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/AddSeparator.js","./SetBindingTarget.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/SetBindingTarget.js","./GetMaxInputRowTitleWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/GetMaxInputRowTitleWidth.js","./SetInputRowTitleWidth.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/SetInputRowTitleWidth.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/TweakerShell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Sizer = _interopRequireDefault(require("../sizer/Sizer.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
var _CreateBackground = _interopRequireDefault(require("./builders/CreateBackground.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class TweakerShell extends _Sizer.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    if (config.orientation === undefined) {
      config.orientation = 1;
    }

    // Create sizer
    super(scene, config);
    this.type = 'rexTweakerShell';
    this.root = config.root || this;
    this.styles = GetValue(config, 'styles') || {};
    this.styles.orientation = this.orientation;
    this.itemWidth = GetValue(this.styles, 'itemWidth', 0);
    if (this.root === this && this.orientation === 1) {
      var alignTitle = GetValue(config, 'inputRow.alignTitle');
      if (alignTitle === undefined) {
        var titleProportion = GetValue(this.styles, 'inputRow.proportion.title');
        alignTitle = !titleProportion;
      } else {
        if (alignTitle) {
          // Override title proportion to 0
          (0, _SetValue.default)(this.styles, 'inputRow.proportion.title', 0);
        }
      }
      this.alignInputRowTitle = alignTitle;
    } else {
      this.alignInputRowTitle = false;
    }
    var background = (0, _CreateBackground.default)(scene, undefined, config.background);
    if (background) {
      this.addBackground(background);
    }
  }
  preLayout() {
    super.preLayout();
    if (this.alignInputRowTitle) {
      this.setInputRowTitleWidth(this.getMaxInputRowTitleWidth());
    }
  }
}
Object.assign(TweakerShell.prototype, _Methods.default);
var _default = TweakerShell;
exports.default = _default;
},{"../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/methods/Methods.js","./builders/CreateBackground.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/builders/CreateBackground.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/Tweaker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TweakerShell = _interopRequireDefault(require("./TweakerShell.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Tweaker extends _TweakerShell.default {
  constructor(scene, config) {
    if (config === undefined) {
      config = {};
    }
    if (config.styles === undefined) {
      config.styles = {}; // TODO: Default styles
    }

    config.background = config.styles.background || {};
    config.space = config.styles.space || {};

    // Create sizer
    super(scene, config);
    this.type = 'rexTweaker';
  }
}
var _default = Tweaker;
exports.default = _default;
},{"./TweakerShell.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/TweakerShell.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tweaker/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Tweaker = _interopRequireDefault(require("./Tweaker.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('tweaker', function (config) {
  var gameObject = new _Tweaker.default(this.scene, config);
  this.scene.add.existing(gameObject);
  return gameObject;
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Tweaker', _Tweaker.default);
var _default = _Tweaker.default;
exports.default = _default;
},{"./Tweaker.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/Tweaker.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/js-yaml/dist/js-yaml.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.types = exports.safeLoadAll = exports.safeLoad = exports.safeDump = exports.loadAll = exports.load = exports.dump = exports.default = exports.YAMLException = exports.Type = exports.Schema = exports.JSON_SCHEMA = exports.FAILSAFE_SCHEMA = exports.DEFAULT_SCHEMA = exports.CORE_SCHEMA = void 0;
/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */
function isNothing(subject) {
  return typeof subject === 'undefined' || subject === null;
}
function isObject(subject) {
  return typeof subject === 'object' && subject !== null;
}
function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;else if (isNothing(sequence)) return [];
  return [sequence];
}
function extend(target, source) {
  var index, length, key, sourceKeys;
  if (source) {
    sourceKeys = Object.keys(source);
    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }
  return target;
}
function repeat(string, count) {
  var result = '',
    cycle;
  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }
  return result;
}
function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}
var isNothing_1 = isNothing;
var isObject_1 = isObject;
var toArray_1 = toArray;
var repeat_1 = repeat;
var isNegativeZero_1 = isNegativeZero;
var extend_1 = extend;
var common = {
  isNothing: isNothing_1,
  isObject: isObject_1,
  toArray: toArray_1,
  repeat: repeat_1,
  isNegativeZero: isNegativeZero_1,
  extend: extend_1
};

// YAML error class. http://stackoverflow.com/questions/8458984

function formatError(exception, compact) {
  var where = '',
    message = exception.reason || '(unknown reason)';
  if (!exception.mark) return message;
  if (exception.mark.name) {
    where += 'in "' + exception.mark.name + '" ';
  }
  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';
  if (!compact && exception.mark.snippet) {
    where += '\n\n' + exception.mark.snippet;
  }
  return message + ' ' + where;
}
function YAMLException$1(reason, mark) {
  // Super constructor
  Error.call(this);
  this.name = 'YAMLException';
  this.reason = reason;
  this.mark = mark;
  this.message = formatError(this, false);

  // Include stack trace in error object
  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = new Error().stack || '';
  }
}

// Inherit from Error
YAMLException$1.prototype = Object.create(Error.prototype);
YAMLException$1.prototype.constructor = YAMLException$1;
YAMLException$1.prototype.toString = function toString(compact) {
  return this.name + ': ' + formatError(this, compact);
};
var exception = YAMLException$1;

// get snippet for a single line, respecting maxLength
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = '';
  var tail = '';
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
  if (position - lineStart > maxHalfLength) {
    head = ' ... ';
    lineStart = position - maxHalfLength + head.length;
  }
  if (lineEnd - position > maxHalfLength) {
    tail = ' ...';
    lineEnd = position + maxHalfLength - tail.length;
  }
  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, '→') + tail,
    pos: position - lineStart + head.length // relative position
  };
}

function padStart(string, max) {
  return common.repeat(' ', max - string.length) + string;
}
function makeSnippet(mark, options) {
  options = Object.create(options || null);
  if (!mark.buffer) return null;
  if (!options.maxLength) options.maxLength = 79;
  if (typeof options.indent !== 'number') options.indent = 1;
  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;
  if (typeof options.linesAfter !== 'number') options.linesAfter = 2;
  var re = /\r?\n|\r|\0/g;
  var lineStarts = [0];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;
  while (match = re.exec(mark.buffer)) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);
    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }
  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;
  var result = '',
    i,
    line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0) break;
    line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);
    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + ' | ' + line.str + '\n' + result;
  }
  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + ' | ' + line.str + '\n';
  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\n';
  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length) break;
    line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);
    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + ' | ' + line.str + '\n';
  }
  return result.replace(/\n$/, '');
}
var snippet = makeSnippet;
var TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'multi', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'representName', 'defaultStyle', 'styleAliases'];
var YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];
function compileStyleAliases(map) {
  var result = {};
  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }
  return result;
}
function Type$1(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });

  // TODO: Add tag format check.
  this.options = options; // keep original options in case user wants to extend this type later
  this.tag = tag;
  this.kind = options['kind'] || null;
  this.resolve = options['resolve'] || function () {
    return true;
  };
  this.construct = options['construct'] || function (data) {
    return data;
  };
  this.instanceOf = options['instanceOf'] || null;
  this.predicate = options['predicate'] || null;
  this.represent = options['represent'] || null;
  this.representName = options['representName'] || null;
  this.defaultStyle = options['defaultStyle'] || null;
  this.multi = options['multi'] || false;
  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);
  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}
var type = Type$1;

/*eslint-disable max-len*/

function compileList(schema, name) {
  var result = [];
  schema[name].forEach(function (currentType) {
    var newIndex = result.length;
    result.forEach(function (previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
        newIndex = previousIndex;
      }
    });
    result[newIndex] = currentType;
  });
  return result;
}
function compileMap( /* lists... */
) {
  var result = {
      scalar: {},
      sequence: {},
      mapping: {},
      fallback: {},
      multi: {
        scalar: [],
        sequence: [],
        mapping: [],
        fallback: []
      }
    },
    index,
    length;
  function collectType(type) {
    if (type.multi) {
      result.multi[type.kind].push(type);
      result.multi['fallback'].push(type);
    } else {
      result[type.kind][type.tag] = result['fallback'][type.tag] = type;
    }
  }
  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}
function Schema$1(definition) {
  return this.extend(definition);
}
Schema$1.prototype.extend = function extend(definition) {
  var implicit = [];
  var explicit = [];
  if (definition instanceof type) {
    // Schema.extend(type)
    explicit.push(definition);
  } else if (Array.isArray(definition)) {
    // Schema.extend([ type1, type2, ... ])
    explicit = explicit.concat(definition);
  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })
    if (definition.implicit) implicit = implicit.concat(definition.implicit);
    if (definition.explicit) explicit = explicit.concat(definition.explicit);
  } else {
    throw new exception('Schema.extend argument should be a Type, [ Type ], ' + 'or a schema definition ({ implicit: [...], explicit: [...] })');
  }
  implicit.forEach(function (type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }
    if (type$1.loadKind && type$1.loadKind !== 'scalar') {
      throw new exception('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    }
    if (type$1.multi) {
      throw new exception('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');
    }
  });
  explicit.forEach(function (type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }
  });
  var result = Object.create(Schema$1.prototype);
  result.implicit = (this.implicit || []).concat(implicit);
  result.explicit = (this.explicit || []).concat(explicit);
  result.compiledImplicit = compileList(result, 'implicit');
  result.compiledExplicit = compileList(result, 'explicit');
  result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
  return result;
};
var schema = Schema$1;
var str = new type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function (data) {
    return data !== null ? data : '';
  }
});
var seq = new type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function (data) {
    return data !== null ? data : [];
  }
});
var map = new type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function (data) {
    return data !== null ? data : {};
  }
});
var failsafe = new schema({
  explicit: [str, seq, map]
});
function resolveYamlNull(data) {
  if (data === null) return true;
  var max = data.length;
  return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');
}
function constructYamlNull() {
  return null;
}
function isNull(object) {
  return object === null;
}
var _null = new type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function () {
      return '~';
    },
    lowercase: function () {
      return 'null';
    },
    uppercase: function () {
      return 'NULL';
    },
    camelcase: function () {
      return 'Null';
    },
    empty: function () {
      return '';
    }
  },
  defaultStyle: 'lowercase'
});
function resolveYamlBoolean(data) {
  if (data === null) return false;
  var max = data.length;
  return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');
}
function constructYamlBoolean(data) {
  return data === 'true' || data === 'True' || data === 'TRUE';
}
function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]';
}
var bool = new type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function (object) {
      return object ? 'true' : 'false';
    },
    uppercase: function (object) {
      return object ? 'TRUE' : 'FALSE';
    },
    camelcase: function (object) {
      return object ? 'True' : 'False';
    }
  },
  defaultStyle: 'lowercase'
});
function isHexCode(c) {
  return 0x30 /* 0 */ <= c && c <= 0x39 /* 9 */ || 0x41 /* A */ <= c && c <= 0x46 /* F */ || 0x61 /* a */ <= c && c <= 0x66 /* f */;
}

function isOctCode(c) {
  return 0x30 /* 0 */ <= c && c <= 0x37 /* 7 */;
}

function isDecCode(c) {
  return 0x30 /* 0 */ <= c && c <= 0x39 /* 9 */;
}

function resolveYamlInteger(data) {
  if (data === null) return false;
  var max = data.length,
    index = 0,
    hasDigits = false,
    ch;
  if (!max) return false;
  ch = data[index];

  // sign
  if (ch === '-' || ch === '+') {
    ch = data[++index];
  }
  if (ch === '0') {
    // 0
    if (index + 1 === max) return true;
    ch = data[++index];

    // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch !== '0' && ch !== '1') return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }
    if (ch === 'x') {
      // base 16
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }
    if (ch === 'o') {
      // base 8
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isOctCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }
  }

  // base 10 (except 0)

  // value should not start with `_`;
  if (ch === '_') return false;
  for (; index < max; index++) {
    ch = data[index];
    if (ch === '_') continue;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }

  // Should have digits and should not end with `_`
  if (!hasDigits || ch === '_') return false;
  return true;
}
function constructYamlInteger(data) {
  var value = data,
    sign = 1,
    ch;
  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '');
  }
  ch = value[0];
  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1;
    value = value.slice(1);
    ch = value[0];
  }
  if (value === '0') return 0;
  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);
    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);
  }
  return sign * parseInt(value, 10);
}
function isInteger(object) {
  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);
}
var int = new type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary: function (obj) {
      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);
    },
    octal: function (obj) {
      return obj >= 0 ? '0o' + obj.toString(8) : '-0o' + obj.toString(8).slice(1);
    },
    decimal: function (obj) {
      return obj.toString(10);
    },
    /* eslint-disable max-len */
    hexadecimal: function (obj) {
      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);
    }
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary: [2, 'bin'],
    octal: [8, 'oct'],
    decimal: [10, 'dec'],
    hexadecimal: [16, 'hex']
  }
});
var YAML_FLOAT_PATTERN = new RegExp(
// 2.5e4, 2.5 and integers
'^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
// .2e4, .2
// special case, seems not from spec
'|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
// .inf
'|[-+]?\\.(?:inf|Inf|INF)' +
// .nan
'|\\.(?:nan|NaN|NAN))$');
function resolveYamlFloat(data) {
  if (data === null) return false;
  if (!YAML_FLOAT_PATTERN.test(data) ||
  // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === '_') {
    return false;
  }
  return true;
}
function constructYamlFloat(data) {
  var value, sign;
  value = data.replace(/_/g, '').toLowerCase();
  sign = value[0] === '-' ? -1 : 1;
  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }
  if (value === '.inf') {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === '.nan') {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}
var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
function representYamlFloat(object, style) {
  var res;
  if (isNaN(object)) {
    switch (style) {
      case 'lowercase':
        return '.nan';
      case 'uppercase':
        return '.NAN';
      case 'camelcase':
        return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '.inf';
      case 'uppercase':
        return '.INF';
      case 'camelcase':
        return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '-.inf';
      case 'uppercase':
        return '-.INF';
      case 'camelcase':
        return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }
  res = object.toString(10);

  // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}
function isFloat(object) {
  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));
}
var float = new type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});
var json = failsafe.extend({
  implicit: [_null, bool, int, float]
});
var core = json;
var YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' +
// [1] year
'-([0-9][0-9])' +
// [2] month
'-([0-9][0-9])$'); // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' +
// [1] year
'-([0-9][0-9]?)' +
// [2] month
'-([0-9][0-9]?)' +
// [3] day
'(?:[Tt]|[ \\t]+)' +
// ...
'([0-9][0-9]?)' +
// [4] hour
':([0-9][0-9])' +
// [5] minute
':([0-9][0-9])' +
// [6] second
'(?:\\.([0-9]*))?' +
// [7] fraction
'(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' +
// [8] tz [9] tz_sign [10] tz_hour
'(?::([0-9][0-9]))?))?$'); // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}
function constructYamlTimestamp(data) {
  var match,
    year,
    month,
    day,
    hour,
    minute,
    second,
    fraction = 0,
    delta = null,
    tz_hour,
    tz_minute,
    date;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null) throw new Error('Date resolve error');

  // match: [1] year [2] month [3] day

  year = +match[1];
  month = +match[2] - 1; // JS month starts with 0
  day = +match[3];
  if (!match[4]) {
    // no hour
    return new Date(Date.UTC(year, month, day));
  }

  // match: [4] hour [5] minute [6] second [7] fraction

  hour = +match[4];
  minute = +match[5];
  second = +match[6];
  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) {
      // milli-seconds
      fraction += '0';
    }
    fraction = +fraction;
  }

  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
    if (match[9] === '-') delta = -delta;
  }
  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta) date.setTime(date.getTime() - delta);
  return date;
}
function representYamlTimestamp(object /*, style*/) {
  return object.toISOString();
}
var timestamp = new type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});
function resolveYamlMerge(data) {
  return data === '<<' || data === null;
}
var merge = new type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge
});

/*eslint-disable no-bitwise*/

// [ 64, 65, 66 ] -> [ padding, CR, LF ]
var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';
function resolveYamlBinary(data) {
  if (data === null) return false;
  var code,
    idx,
    bitlen = 0,
    max = data.length,
    map = BASE64_MAP;

  // Convert one by one.
  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx));

    // Skip CR/LF
    if (code > 64) continue;

    // Fail on illegal characters
    if (code < 0) return false;
    bitlen += 6;
  }

  // If there are any bits left, source was corrupted
  return bitlen % 8 === 0;
}
function constructYamlBinary(data) {
  var idx,
    tailbits,
    input = data.replace(/[\r\n=]/g, ''),
    // remove CR/LF & padding to simplify scan
    max = input.length,
    map = BASE64_MAP,
    bits = 0,
    result = [];

  // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 0xFF);
      result.push(bits >> 8 & 0xFF);
      result.push(bits & 0xFF);
    }
    bits = bits << 6 | map.indexOf(input.charAt(idx));
  }

  // Dump tail

  tailbits = max % 4 * 6;
  if (tailbits === 0) {
    result.push(bits >> 16 & 0xFF);
    result.push(bits >> 8 & 0xFF);
    result.push(bits & 0xFF);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 0xFF);
    result.push(bits >> 2 & 0xFF);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 0xFF);
  }
  return new Uint8Array(result);
}
function representYamlBinary(object /*, style*/) {
  var result = '',
    bits = 0,
    idx,
    tail,
    max = object.length,
    map = BASE64_MAP;

  // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map[bits >> 18 & 0x3F];
      result += map[bits >> 12 & 0x3F];
      result += map[bits >> 6 & 0x3F];
      result += map[bits & 0x3F];
    }
    bits = (bits << 8) + object[idx];
  }

  // Dump tail

  tail = max % 3;
  if (tail === 0) {
    result += map[bits >> 18 & 0x3F];
    result += map[bits >> 12 & 0x3F];
    result += map[bits >> 6 & 0x3F];
    result += map[bits & 0x3F];
  } else if (tail === 2) {
    result += map[bits >> 10 & 0x3F];
    result += map[bits >> 4 & 0x3F];
    result += map[bits << 2 & 0x3F];
    result += map[64];
  } else if (tail === 1) {
    result += map[bits >> 2 & 0x3F];
    result += map[bits << 4 & 0x3F];
    result += map[64];
    result += map[64];
  }
  return result;
}
function isBinary(obj) {
  return Object.prototype.toString.call(obj) === '[object Uint8Array]';
}
var binary = new type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});
var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
var _toString$2 = Object.prototype.toString;
function resolveYamlOmap(data) {
  if (data === null) return true;
  var objectKeys = [],
    index,
    length,
    pair,
    pairKey,
    pairHasKey,
    object = data;
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;
    if (_toString$2.call(pair) !== '[object Object]') return false;
    for (pairKey in pair) {
      if (_hasOwnProperty$3.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;else return false;
      }
    }
    if (!pairHasKey) return false;
    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;
  }
  return true;
}
function constructYamlOmap(data) {
  return data !== null ? data : [];
}
var omap = new type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});
var _toString$1 = Object.prototype.toString;
function resolveYamlPairs(data) {
  if (data === null) return true;
  var index,
    length,
    pair,
    keys,
    result,
    object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    if (_toString$1.call(pair) !== '[object Object]') return false;
    keys = Object.keys(pair);
    if (keys.length !== 1) return false;
    result[index] = [keys[0], pair[keys[0]]];
  }
  return true;
}
function constructYamlPairs(data) {
  if (data === null) return [];
  var index,
    length,
    pair,
    keys,
    result,
    object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    keys = Object.keys(pair);
    result[index] = [keys[0], pair[keys[0]]];
  }
  return result;
}
var pairs = new type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});
var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
function resolveYamlSet(data) {
  if (data === null) return true;
  var key,
    object = data;
  for (key in object) {
    if (_hasOwnProperty$2.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }
  return true;
}
function constructYamlSet(data) {
  return data !== null ? data : {};
}
var set = new type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet
});
var _default = core.extend({
  implicit: [timestamp, merge],
  explicit: [binary, omap, pairs, set]
});

/*eslint-disable max-len,no-use-before-define*/

var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
function _class(obj) {
  return Object.prototype.toString.call(obj);
}
function is_EOL(c) {
  return c === 0x0A /* LF */ || c === 0x0D /* CR */;
}

function is_WHITE_SPACE(c) {
  return c === 0x09 /* Tab */ || c === 0x20 /* Space */;
}

function is_WS_OR_EOL(c) {
  return c === 0x09 /* Tab */ || c === 0x20 /* Space */ || c === 0x0A /* LF */ || c === 0x0D /* CR */;
}

function is_FLOW_INDICATOR(c) {
  return c === 0x2C /* , */ || c === 0x5B /* [ */ || c === 0x5D /* ] */ || c === 0x7B /* { */ || c === 0x7D /* } */;
}

function fromHexCode(c) {
  var lc;
  if (0x30 /* 0 */ <= c && c <= 0x39 /* 9 */) {
    return c - 0x30;
  }

  /*eslint-disable no-bitwise*/
  lc = c | 0x20;
  if (0x61 /* a */ <= lc && lc <= 0x66 /* f */) {
    return lc - 0x61 + 10;
  }
  return -1;
}
function escapedHexLen(c) {
  if (c === 0x78 /* x */) {
    return 2;
  }
  if (c === 0x75 /* u */) {
    return 4;
  }
  if (c === 0x55 /* U */) {
    return 8;
  }
  return 0;
}
function fromDecimalCode(c) {
  if (0x30 /* 0 */ <= c && c <= 0x39 /* 9 */) {
    return c - 0x30;
  }
  return -1;
}
function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return c === 0x30 /* 0 */ ? '\x00' : c === 0x61 /* a */ ? '\x07' : c === 0x62 /* b */ ? '\x08' : c === 0x74 /* t */ ? '\x09' : c === 0x09 /* Tab */ ? '\x09' : c === 0x6E /* n */ ? '\x0A' : c === 0x76 /* v */ ? '\x0B' : c === 0x66 /* f */ ? '\x0C' : c === 0x72 /* r */ ? '\x0D' : c === 0x65 /* e */ ? '\x1B' : c === 0x20 /* Space */ ? ' ' : c === 0x22 /* " */ ? '\x22' : c === 0x2F /* / */ ? '/' : c === 0x5C /* \ */ ? '\x5C' : c === 0x4E /* N */ ? '\x85' : c === 0x5F /* _ */ ? '\xA0' : c === 0x4C /* L */ ? '\u2028' : c === 0x50 /* P */ ? '\u2029' : '';
}
function charFromCodepoint(c) {
  if (c <= 0xFFFF) {
    return String.fromCharCode(c);
  }
  // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);
}
var simpleEscapeCheck = new Array(256); // integer, for fast access
var simpleEscapeMap = new Array(256);
for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}
function State$1(input, options) {
  this.input = input;
  this.filename = options['filename'] || null;
  this.schema = options['schema'] || _default;
  this.onWarning = options['onWarning'] || null;
  // (Hidden) Remove? makes the loader to expect YAML 1.1 documents
  // if such documents have no explicit %YAML directive
  this.legacy = options['legacy'] || false;
  this.json = options['json'] || false;
  this.listener = options['listener'] || null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;
  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0;

  // position of first leading tab in the current line,
  // used to make sure there are no tabs in the indentation
  this.firstTabInLine = -1;
  this.documents = [];

  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/
}

function generateError(state, message) {
  var mark = {
    name: state.filename,
    buffer: state.input.slice(0, -1),
    // omit trailing \0
    position: state.position,
    line: state.line,
    column: state.position - state.lineStart
  };
  mark.snippet = snippet(mark);
  return new exception(message, mark);
}
function throwError(state, message) {
  throw generateError(state, message);
}
function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}
var directiveHandlers = {
  YAML: function handleYamlDirective(state, name, args) {
    var match, major, minor;
    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive');
    }
    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument');
    }
    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive');
    }
    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);
    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document');
    }
    state.version = args[0];
    state.checkLineBreaks = minor < 2;
    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document');
    }
  },
  TAG: function handleTagDirective(state, name, args) {
    var handle, prefix;
    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments');
    }
    handle = args[0];
    prefix = args[1];
    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
    }
    if (_hasOwnProperty$1.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }
    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
    }
    try {
      prefix = decodeURIComponent(prefix);
    } catch (err) {
      throwError(state, 'tag prefix is malformed: ' + prefix);
    }
    state.tagMap[handle] = prefix;
  }
};
function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;
  if (start < end) {
    _result = state.input.slice(start, end);
    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {
          throwError(state, 'expected valid JSON character');
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters');
    }
    state.result += _result;
  }
}
function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;
  if (!common.isObject(source)) {
    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
  }
  sourceKeys = Object.keys(source);
  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];
    if (!_hasOwnProperty$1.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}
function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
  var index, quantity;

  // The output is a plain object here, so keys can only be strings.
  // We need to convert keyNode to a string, but doing so can hang the process
  // (deeply nested arrays that explode exponentially using aliases).
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);
    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, 'nested arrays are not supported inside keys');
      }
      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
        keyNode[index] = '[object Object]';
      }
    }
  }

  // Avoid code execution in load() via toString property
  // (still use its own toString for arrays, timestamps,
  // and whatever user schema extensions happen to have @@toStringTag)
  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
    keyNode = '[object Object]';
  }
  keyNode = String(keyNode);
  if (_result === null) {
    _result = {};
  }
  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, 'duplicated mapping key');
    }

    // used for this specific key only because Object.defineProperty is slow
    if (keyNode === '__proto__') {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }
  return _result;
}
function readLineBreak(state) {
  var ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 0x0A /* LF */) {
    state.position++;
  } else if (ch === 0x0D /* CR */) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 0x0A /* LF */) {
      state.position++;
    }
  } else {
    throwError(state, 'a line break is expected');
  }
  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}
function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
    ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 0x09 /* Tab */ && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }
    if (allowComments && ch === 0x23 /* # */) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0x0A /* LF */ && ch !== 0x0D /* CR */ && ch !== 0);
    }
    if (is_EOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;
      while (ch === 0x20 /* Space */) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }
  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, 'deficient indentation');
  }
  return lineBreaks;
}
function testDocumentSeparator(state) {
  var _position = state.position,
    ch;
  ch = state.input.charCodeAt(_position);

  // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.
  if ((ch === 0x2D /* - */ || ch === 0x2E /* . */) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);
    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }
  return false;
}
function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' ';
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1);
  }
}
function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
    following,
    captureStart,
    captureEnd,
    hasPendingContent,
    _line,
    _lineStart,
    _lineIndent,
    _kind = state.kind,
    _result = state.result,
    ch;
  ch = state.input.charCodeAt(state.position);
  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23 /* # */ || ch === 0x26 /* & */ || ch === 0x2A /* * */ || ch === 0x21 /* ! */ || ch === 0x7C /* | */ || ch === 0x3E /* > */ || ch === 0x27 /* ' */ || ch === 0x22 /* " */ || ch === 0x25 /* % */ || ch === 0x40 /* @ */ || ch === 0x60 /* ` */) {
    return false;
  }
  if (ch === 0x3F /* ? */ || ch === 0x2D /* - */) {
    following = state.input.charCodeAt(state.position + 1);
    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }
  state.kind = 'scalar';
  state.result = '';
  captureStart = captureEnd = state.position;
  hasPendingContent = false;
  while (ch !== 0) {
    if (ch === 0x3A /* : */) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }
    } else if (ch === 0x23 /* # */) {
      preceding = state.input.charCodeAt(state.position - 1);
      if (is_WS_OR_EOL(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);
      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }
    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }
    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }
    ch = state.input.charCodeAt(++state.position);
  }
  captureSegment(state, captureStart, captureEnd, false);
  if (state.result) {
    return true;
  }
  state.kind = _kind;
  state.result = _result;
  return false;
}
function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x27 /* ' */) {
    return false;
  }
  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27 /* ' */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (ch === 0x27 /* ' */) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a single quoted scalar');
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, 'unexpected end of the stream within a single quoted scalar');
}
function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x22 /* " */) {
    return false;
  }
  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22 /* " */) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    } else if (ch === 0x5C /* \ */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);

        // TODO: rework to inline fn with no type cast?
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;
        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);
          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            throwError(state, 'expected hexadecimal character');
          }
        }
        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        throwError(state, 'unknown escape sequence');
      }
      captureStart = captureEnd = state.position;
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a double quoted scalar');
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, 'unexpected end of the stream within a double quoted scalar');
}
function readFlowCollection(state, nodeIndent) {
  var readNext = true,
    _line,
    _lineStart,
    _pos,
    _tag = state.tag,
    _result,
    _anchor = state.anchor,
    following,
    terminator,
    isPair,
    isExplicitPair,
    isMapping,
    overridableKeys = Object.create(null),
    keyNode,
    keyTag,
    valueNode,
    ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 0x5B /* [ */) {
    terminator = 0x5D; /* ] */
    isMapping = false;
    _result = [];
  } else if (ch === 0x7B /* { */) {
    terminator = 0x7D; /* } */
    isMapping = true;
    _result = {};
  } else {
    return false;
  }
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(++state.position);
  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? 'mapping' : 'sequence';
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries');
    } else if (ch === 0x2C /* , */) {
      // "flow collection entries can never be completely empty", as per YAML 1.2, section 7.4
      throwError(state, "expected the node content, but found ','");
    }
    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;
    if (ch === 0x3F /* ? */) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }
    _line = state.line; // Save the current line.
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if ((isExplicitPair || state.line === _line) && ch === 0x3A /* : */) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }
    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === 0x2C /* , */) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }
  throwError(state, 'unexpected end of the stream within a flow collection');
}
function readBlockScalar(state, nodeIndent) {
  var captureStart,
    folding,
    chomping = CHOMPING_CLIP,
    didReadContent = false,
    detectedIndent = false,
    textIndent = nodeIndent,
    emptyLines = 0,
    atMoreIndented = false,
    tmp,
    ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 0x7C /* | */) {
    folding = false;
  } else if (ch === 0x3E /* > */) {
    folding = true;
  } else {
    return false;
  }
  state.kind = 'scalar';
  state.result = '';
  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);
    if (ch === 0x2B /* + */ || ch === 0x2D /* - */) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 0x2B /* + */ ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, 'repeat of a chomping mode identifier');
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, 'repeat of an indentation width identifier');
      }
    } else {
      break;
    }
  }
  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));
    if (ch === 0x23 /* # */) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!is_EOL(ch) && ch !== 0);
    }
  }
  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);
    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20 /* Space */) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }
    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }
    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }

    // End of the scalar.
    if (state.lineIndent < textIndent) {
      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          // i.e. only if the scalar is not empty.
          state.result += '\n';
        }
      }

      // Break this `while` cycle and go to the funciton's epilogue.
      break;
    }

    // Folded style: use fancy rules to handle line breaks.
    if (folding) {
      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        // except for the first content line (cf. Example 8.1)
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);

        // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat('\n', emptyLines + 1);

        // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) {
          // i.e. only if we have already read some scalar content.
          state.result += ' ';
        }

        // Several line breaks - perceive as different lines.
      } else {
        state.result += common.repeat('\n', emptyLines);
      }

      // Literal style: just add exact number of line breaks between content lines.
    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
    }
    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;
    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, state.position, false);
  }
  return true;
}
function readBlockSequence(state, nodeIndent) {
  var _line,
    _tag = state.tag,
    _anchor = state.anchor,
    _result = [],
    following,
    detected = false,
    ch;

  // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar
  if (state.firstTabInLine !== -1) return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }
    if (ch !== 0x2D /* - */) {
      break;
    }
    following = state.input.charCodeAt(state.position + 1);
    if (!is_WS_OR_EOL(following)) {
      break;
    }
    detected = true;
    state.position++;
    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }
    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, 'bad indentation of a sequence entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'sequence';
    state.result = _result;
    return true;
  }
  return false;
}
function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
    allowCompact,
    _line,
    _keyLine,
    _keyLineStart,
    _keyPos,
    _tag = state.tag,
    _anchor = state.anchor,
    _result = {},
    overridableKeys = Object.create(null),
    keyTag = null,
    keyNode = null,
    valueNode = null,
    atExplicitKey = false,
    detected = false,
    ch;

  // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar
  if (state.firstTabInLine !== -1) return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line; // Save the current line.

    //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //
    if ((ch === 0x3F /* ? */ || ch === 0x3A /* : */) && is_WS_OR_EOL(following)) {
      if (ch === 0x3F /* ? */) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }
        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
      }
      state.position += 1;
      ch = following;

      //
      // Implicit notation case. Flow-style node as the key first, then ":", and the value.
      //
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;
      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        // Neither implicit nor explicit notation.
        // Reading is done. Go to the epilogue.
        break;
      }
      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 0x3A /* : */) {
          ch = state.input.charCodeAt(++state.position);
          if (!is_WS_OR_EOL(ch)) {
            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
          }
          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          throwError(state, 'can not read an implicit mapping pair; a colon is missed');
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true; // Keep the result of `composeNode`.
        }
      } else if (detected) {
        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true; // Keep the result of `composeNode`.
      }
    }

    //
    // Common reading code for both explicit and implicit notations.
    //
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }
      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, 'bad indentation of a mapping entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  //
  // Epilogue.
  //

  // Special case: last mapping's node contains only the key in explicit notation.
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }

  // Expose the resulting mapping.
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'mapping';
    state.result = _result;
  }
  return detected;
}
function readTagProperty(state) {
  var _position,
    isVerbatim = false,
    isNamed = false,
    tagHandle,
    tagName,
    ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x21 /* ! */) return false;
  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property');
  }
  ch = state.input.charCodeAt(++state.position);
  if (ch === 0x3C /* < */) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 0x21 /* ! */) {
    isNamed = true;
    tagHandle = '!!';
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = '!';
  }
  _position = state.position;
  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 0x3E /* > */);

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag');
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 0x21 /* ! */) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);
          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, 'named tag handle cannot contain such characters');
          }
          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, 'tag suffix cannot contain exclamation marks');
        }
      }
      ch = state.input.charCodeAt(++state.position);
    }
    tagName = state.input.slice(_position, state.position);
    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
  }
  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName);
  }
  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, 'tag name is malformed: ' + tagName);
  }
  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === '!') {
    state.tag = '!' + tagName;
  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }
  return true;
}
function readAnchorProperty(state) {
  var _position, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x26 /* & */) return false;
  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property');
  }
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, 'name of an anchor node must contain at least one character');
  }
  state.anchor = state.input.slice(_position, state.position);
  return true;
}
function readAlias(state) {
  var _position, alias, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x2A /* * */) return false;
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, 'name of an alias node must contain at least one character');
  }
  alias = state.input.slice(_position, state.position);
  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }
  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}
function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles,
    allowBlockScalars,
    allowBlockCollections,
    indentStatus = 1,
    // 1: this>parent, 0: this=parent, -1: this<parent
    atNewLine = false,
    hasContent = false,
    typeIndex,
    typeQuantity,
    typeList,
    type,
    flowIndent,
    blockIndent;
  if (state.listener !== null) {
    state.listener('open', state);
  }
  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;
      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }
  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }
  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }
  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }
    blockIndent = state.position - state.lineStart;
    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;
          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties');
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;
          if (state.tag === null) {
            state.tag = '?';
          }
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }
  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }
  } else if (state.tag === '?') {
    // Implicit resolving is not allowed for non-scalar types, and '?'
    // non-specific tag is only automatically assigned to plain scalars.
    //
    // We only need to check kind conformity in case user explicitly assigns '?'
    // tag, for example like this: "!<?> [0]"
    //
    if (state.result !== null && state.kind !== 'scalar') {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }
    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type = state.implicitTypes[typeIndex];
      if (type.resolve(state.result)) {
        // `state.result` updated in resolver if matched
        state.result = type.construct(state.result);
        state.tag = type.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== '!') {
    if (_hasOwnProperty$1.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
      type = state.typeMap[state.kind || 'fallback'][state.tag];
    } else {
      // looking for multi type
      type = null;
      typeList = state.typeMap.multi[state.kind || 'fallback'];
      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type = typeList[typeIndex];
          break;
        }
      }
    }
    if (!type) {
      throwError(state, 'unknown tag !<' + state.tag + '>');
    }
    if (state.result !== null && type.kind !== state.kind) {
      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
    }
    if (!type.resolve(state.result, state.tag)) {
      // `state.result` updated in resolver if matched
      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
    } else {
      state.result = type.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }
  if (state.listener !== null) {
    state.listener('close', state);
  }
  return state.tag !== null || state.anchor !== null || hasContent;
}
function readDocument(state) {
  var documentStart = state.position,
    _position,
    directiveName,
    directiveArgs,
    hasDirectives = false,
    ch;
  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = Object.create(null);
  state.anchorMap = Object.create(null);
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if (state.lineIndent > 0 || ch !== 0x25 /* % */) {
      break;
    }
    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];
    if (directiveName.length < 1) {
      throwError(state, 'directive name must not be less than one character in length');
    }
    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (ch === 0x23 /* # */) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !is_EOL(ch));
        break;
      }
      if (is_EOL(ch)) break;
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveArgs.push(state.input.slice(_position, state.position));
    }
    if (ch !== 0) readLineBreak(state);
    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }
  skipSeparationSpace(state, true, -1);
  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D /* - */ && state.input.charCodeAt(state.position + 1) === 0x2D /* - */ && state.input.charCodeAt(state.position + 2) === 0x2D /* - */) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected');
  }
  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);
  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
  }
  state.documents.push(state.result);
  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 0x2E /* . */) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }
  if (state.position < state.length - 1) {
    throwError(state, 'end of the stream or a document separator is expected');
  } else {
    return;
  }
}
function loadDocuments(input, options) {
  input = String(input);
  options = options || {};
  if (input.length !== 0) {
    // Add tailing `\n` if not exists
    if (input.charCodeAt(input.length - 1) !== 0x0A /* LF */ && input.charCodeAt(input.length - 1) !== 0x0D /* CR */) {
      input += '\n';
    }

    // Strip BOM
    if (input.charCodeAt(0) === 0xFEFF) {
      input = input.slice(1);
    }
  }
  var state = new State$1(input, options);
  var nullpos = input.indexOf('\0');
  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, 'null byte is not allowed in input');
  }

  // Use 0 as string terminator. That significantly simplifies bounds check.
  state.input += '\0';
  while (state.input.charCodeAt(state.position) === 0x20 /* Space */) {
    state.lineIndent += 1;
    state.position += 1;
  }
  while (state.position < state.length - 1) {
    readDocument(state);
  }
  return state.documents;
}
function loadAll$1(input, iterator, options) {
  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }
  var documents = loadDocuments(input, options);
  if (typeof iterator !== 'function') {
    return documents;
  }
  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}
function load$1(input, options) {
  var documents = loadDocuments(input, options);
  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new exception('expected a single document in the stream, but found more');
}
var loadAll_1 = loadAll$1;
var load_1 = load$1;
var loader = {
  loadAll: loadAll_1,
  load: load_1
};

/*eslint-disable no-use-before-define*/

var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CHAR_BOM = 0xFEFF;
var CHAR_TAB = 0x09; /* Tab */
var CHAR_LINE_FEED = 0x0A; /* LF */
var CHAR_CARRIAGE_RETURN = 0x0D; /* CR */
var CHAR_SPACE = 0x20; /* Space */
var CHAR_EXCLAMATION = 0x21; /* ! */
var CHAR_DOUBLE_QUOTE = 0x22; /* " */
var CHAR_SHARP = 0x23; /* # */
var CHAR_PERCENT = 0x25; /* % */
var CHAR_AMPERSAND = 0x26; /* & */
var CHAR_SINGLE_QUOTE = 0x27; /* ' */
var CHAR_ASTERISK = 0x2A; /* * */
var CHAR_COMMA = 0x2C; /* , */
var CHAR_MINUS = 0x2D; /* - */
var CHAR_COLON = 0x3A; /* : */
var CHAR_EQUALS = 0x3D; /* = */
var CHAR_GREATER_THAN = 0x3E; /* > */
var CHAR_QUESTION = 0x3F; /* ? */
var CHAR_COMMERCIAL_AT = 0x40; /* @ */
var CHAR_LEFT_SQUARE_BRACKET = 0x5B; /* [ */
var CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */
var CHAR_GRAVE_ACCENT = 0x60; /* ` */
var CHAR_LEFT_CURLY_BRACKET = 0x7B; /* { */
var CHAR_VERTICAL_LINE = 0x7C; /* | */
var CHAR_RIGHT_CURLY_BRACKET = 0x7D; /* } */

var ESCAPE_SEQUENCES = {};
ESCAPE_SEQUENCES[0x00] = '\\0';
ESCAPE_SEQUENCES[0x07] = '\\a';
ESCAPE_SEQUENCES[0x08] = '\\b';
ESCAPE_SEQUENCES[0x09] = '\\t';
ESCAPE_SEQUENCES[0x0A] = '\\n';
ESCAPE_SEQUENCES[0x0B] = '\\v';
ESCAPE_SEQUENCES[0x0C] = '\\f';
ESCAPE_SEQUENCES[0x0D] = '\\r';
ESCAPE_SEQUENCES[0x1B] = '\\e';
ESCAPE_SEQUENCES[0x22] = '\\"';
ESCAPE_SEQUENCES[0x5C] = '\\\\';
ESCAPE_SEQUENCES[0x85] = '\\N';
ESCAPE_SEQUENCES[0xA0] = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';
var DEPRECATED_BOOLEANS_SYNTAX = ['y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'];
var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type;
  if (map === null) return {};
  result = {};
  keys = Object.keys(map);
  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map[tag]);
    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2);
    }
    type = schema.compiledTypeMap['fallback'][tag];
    if (type && _hasOwnProperty.call(type.styleAliases, style)) {
      style = type.styleAliases[style];
    }
    result[tag] = style;
  }
  return result;
}
function encodeHex(character) {
  var string, handle, length;
  string = character.toString(16).toUpperCase();
  if (character <= 0xFF) {
    handle = 'x';
    length = 2;
  } else if (character <= 0xFFFF) {
    handle = 'u';
    length = 4;
  } else if (character <= 0xFFFFFFFF) {
    handle = 'U';
    length = 8;
  } else {
    throw new exception('code point within a string may not be greater than 0xFFFFFFFF');
  }
  return '\\' + handle + common.repeat('0', length - string.length) + string;
}
var QUOTING_TYPE_SINGLE = 1,
  QUOTING_TYPE_DOUBLE = 2;
function State(options) {
  this.schema = options['schema'] || _default;
  this.indent = Math.max(1, options['indent'] || 2);
  this.noArrayIndent = options['noArrayIndent'] || false;
  this.skipInvalid = options['skipInvalid'] || false;
  this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];
  this.styleMap = compileStyleMap(this.schema, options['styles'] || null);
  this.sortKeys = options['sortKeys'] || false;
  this.lineWidth = options['lineWidth'] || 80;
  this.noRefs = options['noRefs'] || false;
  this.noCompatMode = options['noCompatMode'] || false;
  this.condenseFlow = options['condenseFlow'] || false;
  this.quotingType = options['quotingType'] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes = options['forceQuotes'] || false;
  this.replacer = typeof options['replacer'] === 'function' ? options['replacer'] : null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;
  this.tag = null;
  this.result = '';
  this.duplicates = [];
  this.usedDuplicates = null;
}

// Indents every line in a string. Empty lines (\n only) are not indented.
function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
    position = 0,
    next = -1,
    result = '',
    line,
    length = string.length;
  while (position < length) {
    next = string.indexOf('\n', position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }
    if (line.length && line !== '\n') result += ind;
    result += line;
  }
  return result;
}
function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level);
}
function testImplicitResolving(state, str) {
  var index, length, type;
  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type = state.implicitTypes[index];
    if (type.resolve(str)) {
      return true;
    }
  }
  return false;
}

// [33] s-white ::= s-space | s-tab
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}

// Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
function isPrintable(c) {
  return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== CHAR_BOM || 0x10000 <= c && c <= 0x10FFFF;
}

// [34] ns-char ::= nb-char - s-white
// [27] nb-char ::= c-printable - b-char - c-byte-order-mark
// [26] b-char  ::= b-line-feed | b-carriage-return
// Including s-white (for some reason, examples doesn't match specs in this aspect)
// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark
function isNsCharOrWhitespace(c) {
  return isPrintable(c) && c !== CHAR_BOM
  // - b-char
  && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
}

// [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out
//                             c = flow-in   ⇒ ns-plain-safe-in
//                             c = block-key ⇒ ns-plain-safe-out
//                             c = flow-key  ⇒ ns-plain-safe-in
// [128] ns-plain-safe-out ::= ns-char
// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator
// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )
//                            | ( /* An ns-char preceding */ “#” )
//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (
  // ns-plain-safe
  inblock ?
  // c = flow-in
  cIsNsCharOrWhitespace : cIsNsCharOrWhitespace
  // - c-flow-indicator
  && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET

  // ns-plain-char
  ) && c !== CHAR_SHARP // false on '#'
  && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '
  || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP // change to true on '[^ ]#'
  || prev === CHAR_COLON && cIsNsChar; // change to true on ':[^ ]'
}

// Simplified test for values allowed as the first character in plain style.
function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part
  return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) // - s-white
  // - (c-indicator ::=
  // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
  && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET
  // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
  && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE
  // | “%” | “@” | “`”)
  && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
}

// Simplified test for values allowed as the last character in plain style.
function isPlainSafeLast(c) {
  // just not whitespace or colon, it will be checked to be plain character later
  return !isWhitespace(c) && c !== CHAR_COLON;
}

// Same as 'string'.codePointAt(pos), but works in older browsers.
function codePointAt(string, pos) {
  var first = string.charCodeAt(pos),
    second;
  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);
    if (second >= 0xDC00 && second <= 0xDFFF) {
      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
    }
  }
  return first;
}

// Determines whether block indentation indicator is required.
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}
var STYLE_PLAIN = 1,
  STYLE_SINGLE = 2,
  STYLE_LITERAL = 3,
  STYLE_FOLDED = 4,
  STYLE_DOUBLE = 5;

// Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false; // only checked if shouldTrackWidth
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1; // count the first line correctly
  var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
  if (singleLineOnly || forceQuotes) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        // Check if any line can be folded.
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine ||
          // Foldable line = too long, and not more-indented.
          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    // in case the end is missing a \n
    hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
  }
  // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.
  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  // Edge case: block indentation indicator can only have one digit.
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}

// Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.
function writeScalar(state, string, level, iskey, inblock) {
  state.dump = function () {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
      }
    }
    var indent = state.indent * Math.max(1, level); // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.
    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);

    // Without knowing if keys are implicit/explicit, assume implicit for safety.
    var singleLineOnly = iskey
    // No block styles in flow mode.
    || state.flowLevel > -1 && level >= state.flowLevel;
    function testAmbiguity(string) {
      return testImplicitResolving(state, string);
    }
    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {
      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string) + '"';
      default:
        throw new exception('impossible error: invalid scalar style');
    }
  }();
}

// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';

  // note the special case: the string '\n' counts as a "trailing" empty line.
  var clip = string[string.length - 1] === '\n';
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
  var chomp = keep ? '+' : clip ? '' : '-';
  return indentIndicator + chomp + '\n';
}

// (See the note for writeScalar.)
function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
}

// Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.
function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g;

  // first line (possibly an empty line)
  var result = function () {
    var nextLF = string.indexOf('\n');
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }();
  // If we haven't reached the first content line yet, don't add an extra \n.
  var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
  var moreIndented;

  // rest of the lines
  var match;
  while (match = lineRe.exec(string)) {
    var prefix = match[1],
      line = match[2];
    moreIndented = line[0] === ' ';
    result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\n' : '') + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }
  return result;
}

// Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.
function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line;

  // Since a more-indented line adds a \n, breaks can't be followed by a space.
  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.
  var match;
  // start is an inclusive index. end, curr, and next are exclusive.
  var start = 0,
    end,
    curr = 0,
    next = 0;
  var result = '';

  // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.
  while (match = breakRe.exec(line)) {
    next = match.index;
    // maintain invariant: curr - start <= width
    if (next - start > width) {
      end = curr > start ? curr : next; // derive end <= length-2
      result += '\n' + line.slice(start, end);
      // skip the space that was output as \n
      start = end + 1; // derive start <= length-1
    }

    curr = next;
  }

  // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.
  result += '\n';
  // Insert a break if the remainder is too long and there is a break available.
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }
  return result.slice(1); // drop extra \n joiner
}

// Escapes a double-quoted string.
function escapeString(string) {
  var result = '';
  var char = 0;
  var escapeSeq;
  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];
    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 0x10000) result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }
  return result;
}
function writeFlowSequence(state, level, object) {
  var _result = '',
    _tag = state.tag,
    index,
    length,
    value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }

    // Write only valid elements, put null instead of invalid elements.
    if (writeNode(state, level, value, false, false) || typeof value === 'undefined' && writeNode(state, level, null, false, false)) {
      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = '[' + _result + ']';
}
function writeBlockSequence(state, level, object, compact) {
  var _result = '',
    _tag = state.tag,
    index,
    length,
    value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }

    // Write only valid elements, put null instead of invalid elements.
    if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === 'undefined' && writeNode(state, level + 1, null, true, true, false, true)) {
      if (!compact || _result !== '') {
        _result += generateNextLine(state, level);
      }
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-';
      } else {
        _result += '- ';
      }
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = _result || '[]'; // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result = '',
    _tag = state.tag,
    objectKeyList = Object.keys(object),
    index,
    length,
    objectKey,
    objectValue,
    pairBuffer;
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';
    if (_result !== '') pairBuffer += ', ';
    if (state.condenseFlow) pairBuffer += '"';
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level, objectKey, false, false)) {
      continue; // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? ';
    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');
    if (!writeNode(state, level, objectValue, false, false)) {
      continue; // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = '{' + _result + '}';
}
function writeBlockMapping(state, level, object, compact) {
  var _result = '',
    _tag = state.tag,
    objectKeyList = Object.keys(object),
    index,
    length,
    objectKey,
    objectValue,
    explicitPair,
    pairBuffer;

  // Allow sorting keys so that the output file is deterministic
  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort();
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    // Something is wrong
    throw new exception('sortKeys must be a boolean or a function');
  }
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';
    if (!compact || _result !== '') {
      pairBuffer += generateNextLine(state, level);
    }
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue; // Skip this pair because of invalid key.
    }

    explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;
    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?';
      } else {
        pairBuffer += '? ';
      }
    }
    pairBuffer += state.dump;
    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }
    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue; // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':';
    } else {
      pairBuffer += ': ';
    }
    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style;
  typeList = explicit ? state.explicitTypes : state.implicitTypes;
  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index];
    if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
      if (explicit) {
        if (type.multi && type.representName) {
          state.tag = type.representName(object);
        } else {
          state.tag = type.tag;
        }
      } else {
        state.tag = '?';
      }
      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle;
        if (_toString.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style);
        } else if (_hasOwnProperty.call(type.represent, style)) {
          _result = type.represent[style](object, style);
        } else {
          throw new exception('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
        }
        state.dump = _result;
      }
      return true;
    }
  }
  return false;
}

// Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;
  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }
  var type = _toString.call(state.dump);
  var inblock = block;
  var tagStr;
  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level;
  }
  var objectOrArray = type === '[object Object]' || type === '[object Array]',
    duplicateIndex,
    duplicate;
  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }
  if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) {
    compact = false;
  }
  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type === '[object Object]') {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object Array]') {
      if (block && state.dump.length !== 0) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type === '[object Undefined]') {
      return false;
    } else {
      if (state.skipInvalid) return false;
      throw new exception('unacceptable kind of an object to dump ' + type);
    }
    if (state.tag !== null && state.tag !== '?') {
      // Need to encode all characters except those allowed by the spec:
      //
      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */
      // [36] ns-hex-digit    ::=  ns-dec-digit
      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */
      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */
      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”
      // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”
      //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”
      //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”
      //
      // Also need to encode '!' because it has special meaning (end of tag prefix).
      //
      tagStr = encodeURI(state.tag[0] === '!' ? state.tag.slice(1) : state.tag).replace(/!/g, '%21');
      if (state.tag[0] === '!') {
        tagStr = '!' + tagStr;
      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {
        tagStr = '!!' + tagStr.slice(18);
      } else {
        tagStr = '!<' + tagStr + '>';
      }
      state.dump = tagStr + ' ' + state.dump;
    }
  }
  return true;
}
function getDuplicateReferences(object, state) {
  var objects = [],
    duplicatesIndexes = [],
    index,
    length;
  inspectNode(object, objects, duplicatesIndexes);
  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}
function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index, length;
  if (object !== null && typeof object === 'object') {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);
      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);
        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}
function dump$1(input, options) {
  options = options || {};
  var state = new State(options);
  if (!state.noRefs) getDuplicateReferences(input, state);
  var value = input;
  if (state.replacer) {
    value = state.replacer.call({
      '': value
    }, '', value);
  }
  if (writeNode(state, 0, value, true, true)) return state.dump + '\n';
  return '';
}
var dump_1 = dump$1;
var dumper = {
  dump: dump_1
};
function renamed(from, to) {
  return function () {
    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' + 'Use yaml.' + to + ' instead, which is now safe by default.');
  };
}
var Type = type;
exports.Type = Type;
var Schema = schema;
exports.Schema = Schema;
var FAILSAFE_SCHEMA = failsafe;
exports.FAILSAFE_SCHEMA = FAILSAFE_SCHEMA;
var JSON_SCHEMA = json;
exports.JSON_SCHEMA = JSON_SCHEMA;
var CORE_SCHEMA = core;
exports.CORE_SCHEMA = CORE_SCHEMA;
var DEFAULT_SCHEMA = _default;
exports.DEFAULT_SCHEMA = DEFAULT_SCHEMA;
var load = loader.load;
exports.load = load;
var loadAll = loader.loadAll;
exports.loadAll = loadAll;
var dump = dumper.dump;
exports.dump = dump;
var YAMLException = exception;

// Re-export all types in case user wants to create custom schema
exports.YAMLException = YAMLException;
var types = {
  binary: binary,
  float: float,
  map: map,
  null: _null,
  pairs: pairs,
  set: set,
  timestamp: timestamp,
  bool: bool,
  int: int,
  merge: merge,
  omap: omap,
  seq: seq,
  str: str
};

// Removed functions from JS-YAML 3.0.x
exports.types = types;
var safeLoad = renamed('safeLoad', 'load');
exports.safeLoad = safeLoad;
var safeLoadAll = renamed('safeLoadAll', 'loadAll');
exports.safeLoadAll = safeLoadAll;
var safeDump = renamed('safeDump', 'dump');
exports.safeDump = safeDump;
var jsYaml = {
  Type: Type,
  Schema: Schema,
  FAILSAFE_SCHEMA: FAILSAFE_SCHEMA,
  JSON_SCHEMA: JSON_SCHEMA,
  CORE_SCHEMA: CORE_SCHEMA,
  DEFAULT_SCHEMA: DEFAULT_SCHEMA,
  load: load,
  loadAll: loadAll,
  dump: dump,
  YAMLException: YAMLException,
  types: types,
  safeLoad: safeLoad,
  safeLoadAll: safeLoadAll,
  safeDump: safeDump
};
var _default2 = jsYaml;
exports.default = _default2;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/yaml/yaml.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _jsYaml = _interopRequireDefault(require("js-yaml"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _jsYaml.default;
exports.default = _default;
},{"js-yaml":"node_modules/js-yaml/dist/js-yaml.mjs"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/utils/ParseYAML.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _yaml = _interopRequireDefault(require("../../yaml/yaml.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ParseYAML = function (s) {
  if (typeof s === 'string') {
    try {
      return _yaml.default.load(s);
    } catch (e) {
      console.log(e);
      return undefined;
    }
  }
  return s;
};
var _default = ParseYAML;
exports.default = _default;
},{"../../yaml/yaml.js":"node_modules/phaser3-rex-plugins/templates/ui/yaml/yaml.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/GetTypeName.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetTypeName = function (data, styles) {
  if (data.hasOwnProperty('$type')) {
    return data.$type;
  }

  // Get $type from styles[`#${data.name}`]
  if (data.hasOwnProperty('name')) {
    var style = styles[`#${data.name}`];
    if (style && style.hasOwnProperty('$type')) {
      return style.$type;
    }
  }
  if (data.hasOwnProperty('$class')) {
    var clasKeys = data.$class.split(' ');
    for (var i = 0, cnt = clasKeys.length; i < cnt; i++) {
      var style = styles[`.${clasKeys[i]}`];
      if (style && style.hasOwnProperty('$type')) {
        return style.$type;
      }
    }
  }

  // return undefined
};
var _default = GetTypeName;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepMerge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DeepClone = _interopRequireDefault(require("./DeepClone.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var DeepMerge = function (toObj, fromObj) {
  if (fromObj === undefined) {
    return toObj;
  }
  for (var key in fromObj) {
    if (!toObj.hasOwnProperty(key)) {
      // Only add nonexistent property
      toObj[key] = (0, _DeepClone.default)(fromObj[key]);
    } else {
      var value = toObj[key];
      if (value && typeof value === 'object') {
        DeepMerge(value, fromObj[key]);
      }
    }
  }
  return toObj;
};
var _default = DeepMerge;
exports.default = _default;
},{"./DeepClone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DeepMerge = _interopRequireDefault(require("../../../../../plugins/utils/object/DeepMerge"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
Priority of styles : name, $class, $type
  1. name    (#name)
  2. $class  (.class)
  3. $type   (type)    
*/

var MergeStyle = function (data, styles) {
  if (styles === undefined) {
    return data;
  }
  if (data.hasOwnProperty('name')) {
    (0, _DeepMerge.default)(data, styles[`#${data.name}`]);
  }
  if (data.hasOwnProperty('$class')) {
    var clasKeys = data.$class.split(' ');
    for (var i = 0, cnt = clasKeys.length; i < cnt; i++) {
      (0, _DeepMerge.default)(data, styles[`.${clasKeys[i]}`]);
    }
  }
  if (data.hasOwnProperty('$type')) {
    (0, _DeepMerge.default)(data, styles[data.$type]);
  }
  return data;
};
var _default = MergeStyle;
exports.default = _default;
},{"../../../../../plugins/utils/object/DeepMerge":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepMerge.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/SetTextureProperties.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const ProperiteList = ['tint', 'alpha', 'visible', 'flipX', 'flipY'];
var SetTextureProperties = function (gameObject, data) {
  for (var i = 0, cnt = ProperiteList.length; i < cnt; i++) {
    var key = ProperiteList[i];
    var value = data[key];
    if (value !== undefined) {
      gameObject[key] = value;
    }
  }
  if (data.cropResize && !gameObject.resize) {
    gameObject.resize = function (width, height) {
      gameObject.setCrop(0, 0, width, height);
      return gameObject;
    };
  }
  return gameObject;
};
var _default = SetTextureProperties;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateAnyImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./MergeStyle.js"));
var _SetTextureProperties = _interopRequireDefault(require("./SetTextureProperties.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateAnyImage = function (scene, data, view, styles, customBuilders, ImageClass) {
  data = (0, _MergeStyle.default)(data, styles);
  var gameObject = new ImageClass(scene, 0, 0, data.key, data.frame);
  if (data.width !== undefined) {
    gameObject.setDisplayWidth(data.width);
  }
  if (data.height !== undefined) {
    gameObject.setDisplayHeight(data.height);
  }
  (0, _SetTextureProperties.default)(gameObject, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateAnyImage;
exports.default = _default;
},{"./MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","./SetTextureProperties.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/SetTextureProperties.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateAnyImage = _interopRequireDefault(require("./utils/CreateAnyImage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const PhaserImage = Phaser.GameObjects.Image;
var CreateImage = function (scene, data, view, styles, customBuilders) {
  return (0, _CreateAnyImage.default)(scene, data, view, styles, customBuilders, PhaserImage);
};
var _default = CreateImage;
exports.default = _default;
},{"./utils/CreateAnyImage.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateAnyImage.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateSprite.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateAnyImage = _interopRequireDefault(require("./utils/CreateAnyImage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Sprite = Phaser.GameObjects.Sprite;
var CreateSprite = function (scene, data, view, styles, customBuilders) {
  return (0, _CreateAnyImage.default)(scene, data, view, styles, customBuilders, Sprite);
};
var _default = CreateSprite;
exports.default = _default;
},{"./utils/CreateAnyImage.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateAnyImage.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateVideo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _SetTextureProperties = _interopRequireDefault(require("./utils/SetTextureProperties.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const PhaserVideo = Phaser.GameObjects.Video;
var CreateVideo = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);
  var gameObject = new PhaserVideo(scene, 0, 0, data.key);
  if (data.width !== undefined) {
    gameObject.setDisplayWidth(data.width);
  }
  if (data.height !== undefined) {
    gameObject.setDisplayHeight(data.height);
  }
  (0, _SetTextureProperties.default)(gameObject, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateVideo;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","./utils/SetTextureProperties.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/SetTextureProperties.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _SetTextureProperties = _interopRequireDefault(require("./utils/SetTextureProperties.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const PhaserText = Phaser.GameObjects.Text;
var CreateText = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);
  var gameObject = new PhaserText(scene, 0, 0, data.text, data);
  (0, _SetTextureProperties.default)(gameObject, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateText;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","./utils/SetTextureProperties.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/SetTextureProperties.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateBBCodeText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _BBCodeText = _interopRequireDefault(require("../../bbcodetext/BBCodeText.js"));
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _SetTextureProperties = _interopRequireDefault(require("./utils/SetTextureProperties.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateBBCodeText = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);
  var gameObject = new _BBCodeText.default(scene, 0, 0, data.text, data);
  (0, _SetTextureProperties.default)(gameObject, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateBBCodeText;
exports.default = _default;
},{"../../bbcodetext/BBCodeText.js":"node_modules/phaser3-rex-plugins/templates/ui/bbcodetext/BBCodeText.js","./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","./utils/SetTextureProperties.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/SetTextureProperties.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateRoundRectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _RoundRectangle = _interopRequireDefault(require("../../roundrectangle/RoundRectangle.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateRoundRectangle = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);
  var gameObject = new _RoundRectangle.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateRoundRectangle;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../roundrectangle/RoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/roundrectangle/RoundRectangle.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateNinePatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _NinePatch = _interopRequireDefault(require("../../ninepatch/NinePatch.js"));
var _SetTextureProperties = _interopRequireDefault(require("./utils/SetTextureProperties.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateNinePatch = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);
  var gameObject = new _NinePatch.default(scene, data);
  (0, _SetTextureProperties.default)(gameObject, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateNinePatch;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../ninepatch/NinePatch.js":"node_modules/phaser3-rex-plugins/templates/ui/ninepatch/NinePatch.js","./utils/SetTextureProperties.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/SetTextureProperties.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateNinePatch2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _NinePatch = _interopRequireDefault(require("../../ninepatch2/NinePatch.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateNinePatch2 = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);
  var gameObject = new _NinePatch.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateNinePatch2;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../ninepatch2/NinePatch.js":"node_modules/phaser3-rex-plugins/templates/ui/ninepatch2/NinePatch.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateCanvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _Canvas = _interopRequireDefault(require("../../canvas/Canvas.js"));
var _SetTextureProperties = _interopRequireDefault(require("./utils/SetTextureProperties.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateCanvas = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);
  var width = data.width || 1;
  var height = data.height || 1;
  var gameObject = new _Canvas.default(scene, 0, 0, width, height);
  if (data.fill !== undefined) {
    gameObject.fill(data.fill);
  }
  (0, _SetTextureProperties.default)(gameObject, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateCanvas;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../canvas/Canvas.js":"node_modules/phaser3-rex-plugins/templates/ui/canvas/Canvas.js","./utils/SetTextureProperties.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/SetTextureProperties.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateCircleMaskImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _CircleMaskImage = _interopRequireDefault(require("../../circlemaskimage/CircleMaskImage.js"));
var _SetTextureProperties = _interopRequireDefault(require("./utils/SetTextureProperties.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateCircleMaskImage = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);
  var gameObject = new _CircleMaskImage.default(scene, 0, 0, data.key, data.frame, data);
  if (data.width !== undefined) {
    gameObject.setDisplayWidth(data.width);
  }
  if (data.height !== undefined) {
    gameObject.setDisplayHeight(data.height);
  }
  (0, _SetTextureProperties.default)(gameObject, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateCircleMaskImage;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../circlemaskimage/CircleMaskImage.js":"node_modules/phaser3-rex-plugins/templates/ui/circlemaskimage/CircleMaskImage.js","./utils/SetTextureProperties.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/SetTextureProperties.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateSpace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Space = _interopRequireDefault(require("../../space/Space.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateSpace = function (scene, data, view, styles, customBuilders) {
  var gameObject = new _Space.default(scene);
  // Don't add Zone into scene
  // this.scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateSpace;
exports.default = _default;
},{"../../space/Space.js":"node_modules/phaser3-rex-plugins/templates/ui/space/Space.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Make = _interopRequireDefault(require("../../Make.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateChild = function (scene, data, subKey, view, styles, customBuilders) {
  var childData = data[subKey];
  if (!childData) {
    return undefined;
  }
  var child;
  child = (0, _Make.default)(scene, childData, view, styles, customBuilders);
  data[subKey] = child;
  return child;
};
var _default = CreateChild;
exports.default = _default;
},{"../../Make.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/Make.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/ReplaceChildrenConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateChild = _interopRequireDefault(require("./CreateChild.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ReplaceChildrenConfig = function (scene, childrenConfig, view, styles, customBuilders) {
  if (childrenConfig) {
    if (!Array.isArray(childrenConfig)) {
      childrenConfig = [childrenConfig];
    }
    for (var i = 0, cnt = childrenConfig.length; i < cnt; i++) {
      var childConfig = childrenConfig[i];
      if (!childConfig.$child) {
        childConfig = {
          $child: childConfig
        };
        childrenConfig[i] = childConfig;
      }
      (0, _CreateChild.default)(scene, childConfig, '$child', view, styles, customBuilders);
    }
  }
  return childrenConfig;
};
var _default = ReplaceChildrenConfig;
exports.default = _default;
},{"./CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateAnySizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./MergeStyle.js"));
var _ReplaceChildrenConfig = _interopRequireDefault(require("./ReplaceChildrenConfig.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateAnySizer = function (scene, data, view, styles, customBuilders, SizerClass) {
  data = (0, _MergeStyle.default)(data, styles);
  var backgroundConfig = (0, _ReplaceChildrenConfig.default)(scene, data.background, view, styles, customBuilders);
  var childrenConfig = (0, _ReplaceChildrenConfig.default)(scene, data.children, view, styles, customBuilders);
  var gameObject = new SizerClass(scene, data);
  scene.add.existing(gameObject);
  if (backgroundConfig) {
    for (var i = 0, cnt = backgroundConfig.length; i < cnt; i++) {
      var childConfig = backgroundConfig[i];
      gameObject.addBackground(childConfig.$child, childConfig.padding);
    }
  }
  if (childrenConfig) {
    for (var i = 0, cnt = childrenConfig.length; i < cnt; i++) {
      var childConfig = childrenConfig[i];
      gameObject.add(childConfig.$child, childConfig);
    }
  }
  return gameObject;
};
var _default = CreateAnySizer;
exports.default = _default;
},{"./MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","./ReplaceChildrenConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/ReplaceChildrenConfig.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateSizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateAnySizer = _interopRequireDefault(require("./utils/CreateAnySizer.js"));
var _Sizer = _interopRequireDefault(require("../../sizer/Sizer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateSizer = function (scene, data, view, styles, customBuilders) {
  return (0, _CreateAnySizer.default)(scene, data, view, styles, customBuilders, _Sizer.default);
};
var _default = CreateSizer;
exports.default = _default;
},{"./utils/CreateAnySizer.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateAnySizer.js","../../sizer/Sizer.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Sizer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateFixWidthSizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateAnySizer = _interopRequireDefault(require("./utils/CreateAnySizer.js"));
var _FixWidthSizer = _interopRequireDefault(require("../../fixwidthsizer/FixWidthSizer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateFixWidthSizer = function (scene, data, view, styles, customBuilders) {
  return (0, _CreateAnySizer.default)(scene, data, view, styles, customBuilders, _FixWidthSizer.default);
};
var _default = CreateFixWidthSizer;
exports.default = _default;
},{"./utils/CreateAnySizer.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateAnySizer.js","../../fixwidthsizer/FixWidthSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/FixWidthSizer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateGridSizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateAnySizer = _interopRequireDefault(require("./utils/CreateAnySizer.js"));
var _GridSizer = _interopRequireDefault(require("../../gridsizer/GridSizer.js"));
var _Make = _interopRequireDefault(require("../Make.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateGridSizer = function (scene, data, view, styles, customBuilders) {
  // Build createCellContainerCallback
  var createCellContainerCallbackConfig = data.createCellContainerCallback;
  if (createCellContainerCallbackConfig) {
    var childData = createCellContainerCallbackConfig.$child;
    delete createCellContainerCallbackConfig.$child;
    data.createCellContainerCallback = function (scene, x, y, config) {
      var child = (0, _Make.default)(scene, childData, view, styles, customBuilders);

      // Copy config
      for (var key in createCellContainerCallbackConfig) {
        config[key] = createCellContainerCallbackConfig[key];
      }
      return child;
    };
  }
  return (0, _CreateAnySizer.default)(scene, data, view, styles, customBuilders, _GridSizer.default);
};
var _default = CreateGridSizer;
exports.default = _default;
},{"./utils/CreateAnySizer.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateAnySizer.js","../../gridsizer/GridSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/GridSizer.js","../Make.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/Make.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateOverlapSizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateAnySizer = _interopRequireDefault(require("./utils/CreateAnySizer.js"));
var _OverlapSizer = _interopRequireDefault(require("../../overlapsizer/OverlapSizer.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateOverlapSizer = function (scene, data, view, styles, customBuilders) {
  return (0, _CreateAnySizer.default)(scene, data, view, styles, customBuilders, _OverlapSizer.default);
};
var _default = CreateOverlapSizer;
exports.default = _default;
},{"./utils/CreateAnySizer.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateAnySizer.js","../../overlapsizer/OverlapSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/OverlapSizer.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChildren.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateChild = _interopRequireDefault(require("./CreateChild.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateChildren = function (scene, data, subKey, view, styles, customBuilders) {
  var childData = data[subKey];
  if (!childData) {
    return undefined;
  }
  if (Array.isArray(childData)) {
    for (var i = 0, cnt = childData.length; i < cnt; i++) {
      if (Array.isArray(childData[i])) {
        // Nested array
        CreateChildren(scene, childData, i, view, styles, customBuilders);
      } else {
        (0, _CreateChild.default)(scene, childData, i, view, styles, customBuilders);
      }
    }
  } else {
    for (var key in childData) {
      (0, _CreateChild.default)(scene, childData, key, view, styles, customBuilders);
    }
  }
  return childData;
};
var _default = CreateChildren;
exports.default = _default;
},{"./CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateButtons.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _Buttons = _interopRequireDefault(require("../../buttons/Buttons.js"));
var _CreateChild = _interopRequireDefault(require("./utils/CreateChild.js"));
var _CreateChildren = _interopRequireDefault(require("./utils/CreateChildren.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateButtons = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);

  // Replace data by child game object
  (0, _CreateChild.default)(scene, data, 'background', view, styles, customBuilders);
  (0, _CreateChildren.default)(scene, data, 'buttons', view, styles, customBuilders);
  var gameObject = new _Buttons.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateButtons;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../buttons/Buttons.js":"node_modules/phaser3-rex-plugins/templates/ui/buttons/Buttons.js","./utils/CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js","./utils/CreateChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChildren.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateFixWidthButtons.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _FixWidthButtons = _interopRequireDefault(require("../../fixwidthbuttons/FixWidthButtons.js"));
var _CreateChild = _interopRequireDefault(require("./utils/CreateChild.js"));
var _CreateChildren = _interopRequireDefault(require("./utils/CreateChildren.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateFixWidthButtons = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);

  // Replace data by child game object
  (0, _CreateChild.default)(scene, data, 'background', view, styles, customBuilders);
  (0, _CreateChildren.default)(scene, data, 'buttons', view, styles, customBuilders);
  var gameObject = new _FixWidthButtons.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateFixWidthButtons;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../fixwidthbuttons/FixWidthButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthbuttons/FixWidthButtons.js","./utils/CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js","./utils/CreateChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChildren.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateGridButtons.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _GridButtons = _interopRequireDefault(require("../../gridbuttons/GridButtons.js"));
var _CreateChild = _interopRequireDefault(require("./utils/CreateChild.js"));
var _CreateChildren = _interopRequireDefault(require("./utils/CreateChildren.js"));
var _Make = _interopRequireDefault(require("../Make.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateGridButtons = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);

  // Replace data by child game object
  (0, _CreateChild.default)(scene, data, 'background', view, styles, customBuilders);
  var buttonsConfig = data.buttons; // Game objects in 2d array
  if (buttonsConfig) {
    for (var i = 0, cnt = buttonsConfig.length; i < cnt; i++) {
      (0, _CreateChildren.default)(scene, buttonsConfig, i, view, styles, customBuilders);
    }
  }

  // Build createCellContainerCallback
  var createCellContainerCallbackConfig = data.createCellContainerCallback;
  if (createCellContainerCallbackConfig) {
    var childData = createCellContainerCallbackConfig.$child;
    delete createCellContainerCallbackConfig.$child;
    data.createCellContainerCallback = function (scene, x, y, config) {
      var child = (0, _Make.default)(scene, childData, view, styles, customBuilders);

      // Copy config
      for (var key in createCellContainerCallbackConfig) {
        config[key] = createCellContainerCallbackConfig[key];
      }
      return child;
    };
  }
  var gameObject = new _GridButtons.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateGridButtons;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../gridbuttons/GridButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/gridbuttons/GridButtons.js","./utils/CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js","./utils/CreateChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChildren.js","../Make.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/Make.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateAnyLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./MergeStyle.js"));
var _CreateChild = _interopRequireDefault(require("./CreateChild.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateAnyLabel = function (scene, data, view, styles, customBuilders, LabelClass) {
  data = (0, _MergeStyle.default)(data, styles);

  // Replace data by child game object
  (0, _CreateChild.default)(scene, data, 'background', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'icon', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'text', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'action', view, styles, customBuilders);
  var gameObject = new LabelClass(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateAnyLabel;
exports.default = _default;
},{"./MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","./CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateAnyLabel = _interopRequireDefault(require("./utils/CreateAnyLabel.js"));
var _Label = _interopRequireDefault(require("../../label/Label.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateLabel = function (scene, data, view, styles, customBuilders) {
  return (0, _CreateAnyLabel.default)(scene, data, view, styles, customBuilders, _Label.default);
};
var _default = CreateLabel;
exports.default = _default;
},{"./utils/CreateAnyLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateAnyLabel.js","../../label/Label.js":"node_modules/phaser3-rex-plugins/templates/ui/label/Label.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateBadgeLabel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _BadgeLabel = _interopRequireDefault(require("../../badgelabel/BadgeLabel.js"));
var _CreateChild = _interopRequireDefault(require("./utils/CreateChild.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateBadgeLabel = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);

  // Replace data by child game object
  (0, _CreateChild.default)(scene, data, 'background', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'main', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'leftTop', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'centerTop', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'rightTop', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'leftCenter', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'center', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'rightCenter', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'leftBottom', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'centerBottom', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'rightBottom', view, styles, customBuilders);
  var gameObject = new _BadgeLabel.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateBadgeLabel;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../badgelabel/BadgeLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/badgelabel/BadgeLabel.js","./utils/CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateDialog.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _Dialog = _interopRequireDefault(require("../../dialog/Dialog.js"));
var _CreateChild = _interopRequireDefault(require("./utils/CreateChild.js"));
var _CreateChildren = _interopRequireDefault(require("./utils/CreateChildren.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateDialog = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);

  // Replace data by child game object
  (0, _CreateChild.default)(scene, data, 'background', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'toolbarBackground', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'leftToolbarBackground', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'choicesBackground', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'actionsBackground', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'title', view, styles, customBuilders);
  (0, _CreateChildren.default)(scene, data, 'toolbar', view, styles, customBuilders);
  (0, _CreateChildren.default)(scene, data, 'leftToolbar', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'content', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'description', view, styles, customBuilders);
  (0, _CreateChildren.default)(scene, data, 'choices', view, styles, customBuilders);
  (0, _CreateChildren.default)(scene, data, 'actions', view, styles, customBuilders);
  var gameObject = new _Dialog.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateDialog;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../dialog/Dialog.js":"node_modules/phaser3-rex-plugins/templates/ui/dialog/Dialog.js","./utils/CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js","./utils/CreateChildren.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChildren.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateTextBox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateAnyLabel = _interopRequireDefault(require("./utils/CreateAnyLabel.js"));
var _TextBox = _interopRequireDefault(require("../../textbox/TextBox.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateTextBox = function (scene, data, view, styles, customBuilders) {
  return (0, _CreateAnyLabel.default)(scene, data, view, styles, customBuilders, _TextBox.default);
};
var _default = CreateTextBox;
exports.default = _default;
},{"./utils/CreateAnyLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateAnyLabel.js","../../textbox/TextBox.js":"node_modules/phaser3-rex-plugins/templates/ui/textbox/TextBox.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateSlider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _Slider = _interopRequireDefault(require("../../slider/Slider.js"));
var _CreateChild = _interopRequireDefault(require("./utils/CreateChild.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateSlider = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);

  // Replace data by child game object
  (0, _CreateChild.default)(scene, data, 'background', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'track', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'indicator', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'thumb', view, styles, customBuilders);
  var gameObject = new _Slider.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateSlider;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../slider/Slider.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/Slider.js","./utils/CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/ReplaceSliderConfig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateChild = _interopRequireDefault(require("./CreateChild.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var ReplaceSliderConfig = function (scene, sliderConfig, view, styles, customBuilders) {
  if (sliderConfig) {
    (0, _CreateChild.default)(scene, sliderConfig, 'background', view, styles, customBuilders);
    (0, _CreateChild.default)(scene, sliderConfig, 'track', view, styles, customBuilders);
    (0, _CreateChild.default)(scene, sliderConfig, 'indicator', view, styles, customBuilders);
    (0, _CreateChild.default)(scene, sliderConfig, 'thumb', view, styles, customBuilders);
  }
  return sliderConfig;
};
var _default = ReplaceSliderConfig;
exports.default = _default;
},{"./CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateNumberBar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _NumberBar = _interopRequireDefault(require("../../numberbar/NumberBar.js"));
var _CreateChild = _interopRequireDefault(require("./utils/CreateChild.js"));
var _ReplaceSliderConfig = _interopRequireDefault(require("./utils/ReplaceSliderConfig.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateNumberBar = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);

  // Replace data by child game object
  (0, _CreateChild.default)(scene, data, 'background', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'icon', view, styles, customBuilders);
  (0, _ReplaceSliderConfig.default)(scene, data.slider, view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'text', view, styles, customBuilders);
  var gameObject = new _NumberBar.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateNumberBar;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../numberbar/NumberBar.js":"node_modules/phaser3-rex-plugins/templates/ui/numberbar/NumberBar.js","./utils/CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js","./utils/ReplaceSliderConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/ReplaceSliderConfig.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateScrollBar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _ScrollBar = _interopRequireDefault(require("../../scrollbar/ScrollBar.js"));
var _CreateChild = _interopRequireDefault(require("./utils/CreateChild.js"));
var _ReplaceSliderConfig = _interopRequireDefault(require("./utils/ReplaceSliderConfig.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateScrollBar = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);

  // Replace data by child game object
  (0, _CreateChild.default)(scene, data, 'background', view, styles, customBuilders);
  (0, _ReplaceSliderConfig.default)(scene, data.slider, view, styles, customBuilders);
  var buttonsConfig = data.buttons;
  if (buttonsConfig) {
    (0, _CreateChild.default)(scene, buttonsConfig, 'top', view, styles, customBuilders);
    (0, _CreateChild.default)(scene, buttonsConfig, 'bottom', view, styles, customBuilders);
    (0, _CreateChild.default)(scene, buttonsConfig, 'left', view, styles, customBuilders);
    (0, _CreateChild.default)(scene, buttonsConfig, 'right', view, styles, customBuilders);
  }
  var gameObject = new _ScrollBar.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateScrollBar;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../scrollbar/ScrollBar.js":"node_modules/phaser3-rex-plugins/templates/ui/scrollbar/ScrollBar.js","./utils/CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js","./utils/ReplaceSliderConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/ReplaceSliderConfig.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateTextArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _TextArea = _interopRequireDefault(require("../../textarea/TextArea.js"));
var _CreateChild = _interopRequireDefault(require("./utils/CreateChild.js"));
var _ReplaceSliderConfig = _interopRequireDefault(require("./utils/ReplaceSliderConfig.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateTextArea = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);

  // Replace data by child game object
  (0, _CreateChild.default)(scene, data, 'background', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'text', view, styles, customBuilders);
  (0, _ReplaceSliderConfig.default)(scene, data.slider, view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'header', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'footer', view, styles, customBuilders);
  var gameObject = new _TextArea.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateTextArea;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../textarea/TextArea.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/TextArea.js","./utils/CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js","./utils/ReplaceSliderConfig.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/ReplaceSliderConfig.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreatePages.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateAnySizer = _interopRequireDefault(require("./utils/CreateAnySizer.js"));
var _Pages = _interopRequireDefault(require("../../pages/Pages.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreatePages = function (scene, data, view, styles, customBuilders) {
  return (0, _CreateAnySizer.default)(scene, data, view, styles, customBuilders, _Pages.default);
};
var _default = CreatePages;
exports.default = _default;
},{"./utils/CreateAnySizer.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateAnySizer.js","../../pages/Pages.js":"node_modules/phaser3-rex-plugins/templates/ui/pages/Pages.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateToast.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateAnyLabel = _interopRequireDefault(require("./utils/CreateAnyLabel.js"));
var _Toast = _interopRequireDefault(require("../../toast/Toast.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateToast = function (scene, data, view, styles, customBuilders) {
  return (0, _CreateAnyLabel.default)(scene, data, view, styles, customBuilders, _Toast.default);
};
var _default = CreateToast;
exports.default = _default;
},{"./utils/CreateAnyLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateAnyLabel.js","../../toast/Toast.js":"node_modules/phaser3-rex-plugins/templates/ui/toast/Toast.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateKnob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _Knob = _interopRequireDefault(require("../../knob/Knob.js"));
var _CreateChild = _interopRequireDefault(require("./utils/CreateChild.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateKnob = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);

  // Replace data by child game object
  (0, _CreateChild.default)(scene, data, 'background', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'text', view, styles, customBuilders);
  var gameObject = new _Knob.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateKnob;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../knob/Knob.js":"node_modules/phaser3-rex-plugins/templates/ui/knob/Knob.js","./utils/CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateHolyGrail.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _HolyGrail = _interopRequireDefault(require("../../holygrail/HolyGrail.js"));
var _CreateChild = _interopRequireDefault(require("./utils/CreateChild.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateDialog = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);

  // Replace data by child game object
  (0, _CreateChild.default)(scene, data, 'background', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'content', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'leftSide', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'rightSide', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'header', view, styles, customBuilders);
  (0, _CreateChild.default)(scene, data, 'footer', view, styles, customBuilders);
  var gameObject = new _HolyGrail.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateDialog;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../holygrail/HolyGrail.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/HolyGrail.js","./utils/CreateChild.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/CreateChild.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateMenu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MergeStyle = _interopRequireDefault(require("./utils/MergeStyle.js"));
var _Menu = _interopRequireDefault(require("../../menu/Menu.js"));
var _Make = _interopRequireDefault(require("../Make.js"));
var _DeepClone = _interopRequireDefault(require("../../../../plugins/utils/object/DeepClone.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var CreateMenu = function (scene, data, view, styles, customBuilders) {
  data = (0, _MergeStyle.default)(data, styles);
  var backgroundConfig = data.background;
  delete data.background;
  if (backgroundConfig) {
    data.createBackgroundCallback = function (items) {
      var scene = items.scene;
      var gameObject = (0, _Make.default)(scene, (0, _DeepClone.default)(backgroundConfig), view, styles, customBuilders);
      return gameObject;
    };
  }
  data.createButtonCallback = function (item, index, items) {
    // Don't deep-clone scene and $next properties
    var scene = item.scene;
    var $next = item.$next;
    delete item.scene;
    delete item.$next;
    var gameObject = (0, _Make.default)(scene, (0, _DeepClone.default)(item), view, styles, customBuilders);

    // Add scene, $next properties back
    item.scene = scene;
    item.$next = $next;
    return gameObject;
  };
  data.childrenKey = '$next';
  var gameObject = new _Menu.default(scene, data);
  scene.add.existing(gameObject);
  return gameObject;
};
var _default = CreateMenu;
exports.default = _default;
},{"./utils/MergeStyle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/MergeStyle.js","../../menu/Menu.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/Menu.js","../Make.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/Make.js","../../../../plugins/utils/object/DeepClone.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/DeepClone.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/Builders.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateImage = _interopRequireDefault(require("./CreateImage.js"));
var _CreateSprite = _interopRequireDefault(require("./CreateSprite.js"));
var _CreateVideo = _interopRequireDefault(require("./CreateVideo.js"));
var _CreateText = _interopRequireDefault(require("./CreateText.js"));
var _CreateBBCodeText = _interopRequireDefault(require("./CreateBBCodeText.js"));
var _CreateRoundRectangle = _interopRequireDefault(require("./CreateRoundRectangle.js"));
var _CreateNinePatch = _interopRequireDefault(require("./CreateNinePatch.js"));
var _CreateNinePatch2 = _interopRequireDefault(require("./CreateNinePatch2.js"));
var _CreateCanvas = _interopRequireDefault(require("./CreateCanvas.js"));
var _CreateCircleMaskImage = _interopRequireDefault(require("./CreateCircleMaskImage.js"));
var _CreateSpace = _interopRequireDefault(require("./CreateSpace.js"));
var _CreateSizer = _interopRequireDefault(require("./CreateSizer.js"));
var _CreateFixWidthSizer = _interopRequireDefault(require("./CreateFixWidthSizer.js"));
var _CreateGridSizer = _interopRequireDefault(require("./CreateGridSizer.js"));
var _CreateOverlapSizer = _interopRequireDefault(require("./CreateOverlapSizer.js"));
var _CreateButtons = _interopRequireDefault(require("./CreateButtons.js"));
var _CreateFixWidthButtons = _interopRequireDefault(require("./CreateFixWidthButtons.js"));
var _CreateGridButtons = _interopRequireDefault(require("./CreateGridButtons.js"));
var _CreateLabel = _interopRequireDefault(require("./CreateLabel.js"));
var _CreateBadgeLabel = _interopRequireDefault(require("./CreateBadgeLabel.js"));
var _CreateDialog = _interopRequireDefault(require("./CreateDialog.js"));
var _CreateTextBox = _interopRequireDefault(require("./CreateTextBox.js"));
var _CreateSlider = _interopRequireDefault(require("./CreateSlider.js"));
var _CreateNumberBar = _interopRequireDefault(require("./CreateNumberBar.js"));
var _CreateScrollBar = _interopRequireDefault(require("./CreateScrollBar.js"));
var _CreateTextArea = _interopRequireDefault(require("./CreateTextArea.js"));
var _CreatePages = _interopRequireDefault(require("./CreatePages.js"));
var _CreateToast = _interopRequireDefault(require("./CreateToast.js"));
var _CreateKnob = _interopRequireDefault(require("./CreateKnob.js"));
var _CreateHolyGrail = _interopRequireDefault(require("./CreateHolyGrail.js"));
var _CreateMenu = _interopRequireDefault(require("./CreateMenu.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Builders = {
  Image: _CreateImage.default,
  Sprite: _CreateSprite.default,
  Video: _CreateVideo.default,
  Text: _CreateText.default,
  BBCodeText: _CreateBBCodeText.default,
  RoundRectangle: _CreateRoundRectangle.default,
  Ninepatch: _CreateNinePatch.default,
  Ninepatch2: _CreateNinePatch2.default,
  Canvas: _CreateCanvas.default,
  CircleMaskImage: _CreateCircleMaskImage.default,
  Space: _CreateSpace.default,
  Sizer: _CreateSizer.default,
  FixWidthSizer: _CreateFixWidthSizer.default,
  GridSizer: _CreateGridSizer.default,
  OverlapSizer: _CreateOverlapSizer.default,
  Buttons: _CreateButtons.default,
  FixWidthButtons: _CreateFixWidthButtons.default,
  GridButtons: _CreateGridButtons.default,
  Label: _CreateLabel.default,
  BadgeLabel: _CreateBadgeLabel.default,
  Dialog: _CreateDialog.default,
  TextBox: _CreateTextBox.default,
  Slider: _CreateSlider.default,
  NumberBar: _CreateNumberBar.default,
  ScrollBar: _CreateScrollBar.default,
  TextArea: _CreateTextArea.default,
  Pages: _CreatePages.default,
  Toast: _CreateToast.default,
  Knob: _CreateKnob.default,
  HolyGrail: _CreateHolyGrail.default,
  Menu: _CreateMenu.default
};

/*
function(scene, data, view, styles, customBuilders) {
    return gameObject;
}
*/
var _default = Builders;
exports.default = _default;
},{"./CreateImage.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateImage.js","./CreateSprite.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateSprite.js","./CreateVideo.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateVideo.js","./CreateText.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateText.js","./CreateBBCodeText.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateBBCodeText.js","./CreateRoundRectangle.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateRoundRectangle.js","./CreateNinePatch.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateNinePatch.js","./CreateNinePatch2.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateNinePatch2.js","./CreateCanvas.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateCanvas.js","./CreateCircleMaskImage.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateCircleMaskImage.js","./CreateSpace.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateSpace.js","./CreateSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateSizer.js","./CreateFixWidthSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateFixWidthSizer.js","./CreateGridSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateGridSizer.js","./CreateOverlapSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateOverlapSizer.js","./CreateButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateButtons.js","./CreateFixWidthButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateFixWidthButtons.js","./CreateGridButtons.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateGridButtons.js","./CreateLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateLabel.js","./CreateBadgeLabel.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateBadgeLabel.js","./CreateDialog.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateDialog.js","./CreateTextBox.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateTextBox.js","./CreateSlider.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateSlider.js","./CreateNumberBar.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateNumberBar.js","./CreateScrollBar.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateScrollBar.js","./CreateTextArea.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateTextArea.js","./CreatePages.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreatePages.js","./CreateToast.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateToast.js","./CreateKnob.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateKnob.js","./CreateHolyGrail.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateHolyGrail.js","./CreateMenu.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/CreateMenu.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/Make.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GetTypeName = _interopRequireDefault(require("./builders/utils/GetTypeName.js"));
var _Builders = _interopRequireDefault(require("./builders/Builders.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Make = function (scene, data, view, styles, customBuilders) {
  var type = (0, _GetTypeName.default)(data, styles);
  if (!type) {
    console.warn(`rexUI.Make: Can't get type name in ${JSON.stringify(data)}`);
    return undefined;
  }
  var callback;
  if (customBuilders) {
    callback = customBuilders[type];
  }
  if (!callback) {
    callback = _Builders.default[type];
  }
  if (!callback) {
    console.warn(`rexUI.Make: Can't create ${type} game object.`);
    return undefined;
  }
  var gameObject = callback(scene, data, view, styles, customBuilders);
  if (data.name) {
    gameObject.setName(data.name);
  }
  return gameObject;
};
var _default = Make;
exports.default = _default;
},{"./builders/utils/GetTypeName.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/utils/GetTypeName.js","./builders/Builders.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/builders/Builders.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/YAMLMake.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ParseYAML = _interopRequireDefault(require("./utils/ParseYAML.js"));
var _Make = _interopRequireDefault(require("./Make.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var YAMLMake = function (scene, data, view, styles, customBuilders) {
  data = (0, _ParseYAML.default)(data);
  if (Array.isArray(data)) {
    // Parsing result of YAML data might be an array, 
    // Only last item will be used to create game object, others are references
    data = data[data.length - 1];
  } else if (data.$root) {
    // Parsing result of YAML data might be an object, with $root key, 
    // data.$root will be used to create game object, others are default styles
    var defaultStyles = data;
    data = data.$root;
    delete defaultStyles.$root;
    if (styles === undefined) {
      styles = defaultStyles;
    } else {
      for (var key in defaultStyles) {
        if (!styles[key]) {
          styles[key] = defaultStyles[key];
        }
      }
    }
  }
  styles = (0, _ParseYAML.default)(styles);
  var gameObject = (0, _Make.default)(scene, data, view, styles, customBuilders);
  return gameObject;
};
var _default = YAMLMake;
exports.default = _default;
},{"./utils/ParseYAML.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/utils/ParseYAML.js","./Make.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/Make.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/Maker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ParseYAML = _interopRequireDefault(require("./utils/ParseYAML.js"));
var _YAMLMake = _interopRequireDefault(require("./YAMLMake.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class Maker {
  constructor(scene, styles, customBuilders) {
    this.setScene(scene);
    this.setStyles(styles);
    this.setBuilders(customBuilders);
  }
  setScene(scene) {
    this.scene = scene;
    return this;
  }
  setStyles(styles) {
    this.styles = (0, _ParseYAML.default)(styles);
    return this;
  }
  addStyle(key, style) {
    if (this.styles === undefined) {
      this.styles = {};
    }
    if (typeof key === 'string' && style === undefined) {
      key = (0, _ParseYAML.default)(key);
    }
    if (IsPlainObject(key)) {
      var styles = key;
      for (key in styles) {
        this.styles[key] = styles[key];
      }
    } else {
      this.styles[key] = (0, _ParseYAML.default)(style);
    }
    return this;
  }
  clearStyles() {
    this.setStyles();
    return this;
  }
  setBuilders(customBuilders) {
    this.customBuilders = customBuilders;
    return this;
  }
  addBuilder(key, customBuilder) {
    if (this.customBuilders === undefined) {
      this.customBuilders = {};
    }
    if (IsPlainObject(key)) {
      var customBuilders = key;
      for (key in customBuilders) {
        this.customBuilders[key] = customBuilders[key];
      }
    } else {
      this.customBuilders[key] = customBuilder;
    }
    return this;
  }
  clearBuilder() {
    this.setBuilders();
    return this;
  }
  make(data, view) {
    return (0, _YAMLMake.default)(this.scene, data, view, this.styles, this.customBuilders);
  }
}
var _default = Maker;
exports.default = _default;
},{"./utils/ParseYAML.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/utils/ParseYAML.js","./YAMLMake.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/YAMLMake.js"}],"node_modules/phaser3-rex-plugins/templates/ui/maker/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Maker = _interopRequireDefault(require("./Maker.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('maker', function (styles, customBuilders) {
  return new _Maker.default(this.scene, styles, customBuilders);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Maker', _Maker.default);
var _default = _Maker.default;
exports.default = _default;
},{"./Maker.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/Maker.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/click/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Click = _interopRequireDefault(require("./Click.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('click', function (gameObject, config) {
  return new _Click.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Click', _Click.default);
var _default = _Click.default;
exports.default = _default;
},{"./Click.js":"node_modules/phaser3-rex-plugins/templates/ui/click/Click.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/clickoutside/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ClickOutside = _interopRequireDefault(require("./ClickOutside.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('clickOutside', function (gameObject, config) {
  return new _ClickOutside.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.ClickOutside', _ClickOutside.default);
var _default = _ClickOutside.default;
exports.default = _default;
},{"./ClickOutside.js":"node_modules/phaser3-rex-plugins/templates/ui/clickoutside/ClickOutside.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/intouching/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InTouching = _interopRequireDefault(require("./InTouching.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('inTouching', function (gameObject, config) {
  return new _InTouching.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.InTouching', _InTouching.default);
var _default = _InTouching.default;
exports.default = _default;
},{"./InTouching.js":"node_modules/phaser3-rex-plugins/templates/ui/intouching/InTouching.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/tap/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Tap = _interopRequireDefault(require("./Tap.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _IsGameObject = _interopRequireDefault(require("../../../plugins/utils/system/IsGameObject.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('tap', function (gameObject, config) {
  if (!(0, _IsGameObject.default)(gameObject)) {
    config = gameObject;
    gameObject = this.scene;
  }
  return new _Tap.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Tap', _Tap.default);
var _default = _Tap.default;
exports.default = _default;
},{"./Tap.js":"node_modules/phaser3-rex-plugins/templates/ui/tap/Tap.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/system/IsGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsGameObject.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/press/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Press = _interopRequireDefault(require("./Press.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _IsGameObject = _interopRequireDefault(require("../../../plugins/utils/system/IsGameObject.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('press', function (gameObject, config) {
  if (!(0, _IsGameObject.default)(gameObject)) {
    config = gameObject;
    gameObject = this.scene;
  }
  return new _Press.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Press', _Press.default);
var _default = _Press.default;
exports.default = _default;
},{"./Press.js":"node_modules/phaser3-rex-plugins/templates/ui/press/Press.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/system/IsGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsGameObject.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/swipe/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Swipe = _interopRequireDefault(require("./Swipe.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _IsGameObject = _interopRequireDefault(require("../../../plugins/utils/system/IsGameObject.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('swipe', function (gameObject, config) {
  if (!(0, _IsGameObject.default)(gameObject)) {
    config = gameObject;
    gameObject = this.scene;
  }
  return new _Swipe.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Swipe', _Swipe.default);
var _default = _Swipe.default;
exports.default = _default;
},{"./Swipe.js":"node_modules/phaser3-rex-plugins/templates/ui/swipe/Swipe.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/system/IsGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsGameObject.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/pan/Pan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _gestures = require("../../../plugins/gestures");
var _default = _gestures.Pan;
exports.default = _default;
},{"../../../plugins/gestures":"node_modules/phaser3-rex-plugins/plugins/gestures.js"}],"node_modules/phaser3-rex-plugins/templates/ui/pan/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Pan = _interopRequireDefault(require("./Pan.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _IsGameObject = _interopRequireDefault(require("../../../plugins/utils/system/IsGameObject.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('pan', function (gameObject, config) {
  if (!(0, _IsGameObject.default)(gameObject)) {
    config = gameObject;
    gameObject = this.scene;
  }
  return new _Pan.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Pan', _Pan.default);
var _default = _Pan.default;
exports.default = _default;
},{"./Pan.js":"node_modules/phaser3-rex-plugins/templates/ui/pan/Pan.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/system/IsGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/IsGameObject.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/input/RequestDrag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _IsPointerInHitArea = _interopRequireDefault(require("./IsPointerInHitArea.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var RequestDrag = function (gameObject) {
  var inputPlugin = gameObject.scene.input;
  var inputManager = inputPlugin.manager;
  var pointersTotal = inputManager.pointersTotal;
  var pointers = inputManager.pointers,
    pointer;
  for (var i = 0; i < pointersTotal; i++) {
    pointer = pointers[i];
    if (!pointer.primaryDown || inputPlugin.getDragState(pointer) !== 0 || !(0, _IsPointerInHitArea.default)(gameObject, pointer)) {
      continue;
    }

    // For 3.18.0
    inputPlugin.setDragState(pointer, 1);
    inputPlugin._drag[pointer.id] = [gameObject];
    if (inputPlugin.dragDistanceThreshold === 0 || inputPlugin.dragTimeThreshold === 0) {
      //  No drag criteria, so snap immediately to mode 3
      inputPlugin.setDragState(pointer, 3);
      inputPlugin.processDragStartList(pointer);
    } else {
      //  Check the distance / time on the next event
      inputPlugin.setDragState(pointer, 2);
    }
    // For 3.18.0

    return true;
  }
  return false;
};
var _default = RequestDrag;
exports.default = _default;
},{"./IsPointerInHitArea.js":"node_modules/phaser3-rex-plugins/plugins/utils/input/IsPointerInHitArea.js"}],"node_modules/phaser3-rex-plugins/plugins/input/drag/Drag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
var _RequestDrag = _interopRequireDefault(require("../../utils/input/RequestDrag.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const DistanceBetween = Phaser.Math.Distance.Between;
const RotateAroundDistance = Phaser.Math.RotateAroundDistance;
class Drag extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject, {
      eventEmitter: false
    });
    // No event emitter
    // this.parent = gameObject;

    this._enable = undefined;
    gameObject.setInteractive(GetValue(config, "inputConfig", undefined));
    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    this.pointer = undefined;
    this.setEnable(GetValue(o, "enable", true));
    this.setAxisMode(GetValue(o, "axis", 0));
    this.setAxisRotation(GetValue(o, "rotation", 0));
    return this;
  }
  toJSON() {
    return {
      enable: this.enable,
      axis: this.axisMode,
      rotation: this.axisRotation
    };
  }
  boot() {
    var gameObject = this.parent;
    gameObject.on('dragstart', this.onDragStart, this);
    gameObject.on('drag', this.onDrag, this);
    gameObject.on('dragend', this.onDragEnd, this);
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }

    // GameObject events will be removed when this gameObject destroyed 
    // this.parent.on('dragstart', this.onDragStart, this);
    // this.parent.on('drag', this.onDrag, this);
    // this.parent.on('dragend', this.onDragEnd, this);
    this.pointer = undefined;
    super.shutdown(fromScene);
  }
  get enable() {
    return this._enable;
  }
  set enable(e) {
    if (this._enable === e) {
      return;
    }
    if (!e) {
      this.dragend();
    }
    this._enable = e;
    this.scene.input.setDraggable(this.parent, e);
    return this;
  }
  setEnable(e) {
    if (e === undefined) {
      e = true;
    }
    this.enable = e;
    return this;
  }
  toggleEnable() {
    this.setEnable(!this.enable);
    return this;
  }
  setAxisMode(m) {
    if (typeof m === 'string') {
      m = DIRECTIONNODE[m];
    }
    this.axisMode = m;
    return this;
  }
  setAxisRotation(a) {
    this.axisRotation = a;
    return this;
  }
  drag() {
    (0, _RequestDrag.default)(this.parent);
    return this;
  }
  dragend() {
    if (!this.isDragging) {
      return;
    }
    this.scene.input.setDragState(this.pointer, 5);
    return this;
  }
  onDragStart(pointer, dragX, dragY) {
    if (this.isDragging) {
      return;
    }
    this.pointer = pointer;
  }
  onDrag(pointer, dragX, dragY) {
    if (this.pointer !== pointer) {
      return;
    }
    var gameObject = this.parent;
    if (this.axisMode === 0) {
      gameObject.x = dragX;
      gameObject.y = dragY;
    } else if (this.axisRotation === 0) {
      if (this.axisMode === 1) {
        gameObject.x = dragX;
      } else if (this.axisMode === 2) {
        gameObject.y = dragY;
      }
    } else {
      var dist;
      var p1 = {
        x: dragX,
        y: dragY
      };
      dist = DistanceBetween(p1.x, p1.y, gameObject.x, gameObject.y);
      p1 = RotateAroundDistance(p1, gameObject.x, gameObject.y, -this.axisRotation, dist);
      if (this.axisMode === 1) {
        p1.y = gameObject.y;
      } else if (this.axisMode === 2) {
        p1.x = gameObject.x;
      }
      dist = DistanceBetween(p1.x, p1.y, gameObject.x, gameObject.y);
      p1 = RotateAroundDistance(p1, gameObject.x, gameObject.y, this.axisRotation, dist);
      gameObject.x = p1.x;
      gameObject.y = p1.y;
    }
  }
  onDragEnd(pointer, dragX, dragY, dropped) {
    if (this.pointer !== pointer) {
      return;
    }
    this.pointer = undefined;
  }
  get isDragging() {
    return this.pointer !== undefined;
  }
}
const DIRECTIONNODE = {
  'both': 0,
  'h&v': 0,
  'x&y': 0,
  'horizontal': 1,
  'h': 1,
  'x': 1,
  'vertical': 2,
  'v': 2,
  'y': 2
};
var _default = Drag;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js","../../utils/input/RequestDrag.js":"node_modules/phaser3-rex-plugins/plugins/utils/input/RequestDrag.js"}],"node_modules/phaser3-rex-plugins/plugins/drag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Drag = _interopRequireDefault(require("./input/drag/Drag.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _Drag.default;
exports.default = _default;
},{"./input/drag/Drag.js":"node_modules/phaser3-rex-plugins/plugins/input/drag/Drag.js"}],"node_modules/phaser3-rex-plugins/templates/ui/drag/Drag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _drag = _interopRequireDefault(require("../../../plugins/drag.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _drag.default;
exports.default = _default;
},{"../../../plugins/drag.js":"node_modules/phaser3-rex-plugins/plugins/drag.js"}],"node_modules/phaser3-rex-plugins/templates/ui/drag/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Drag = _interopRequireDefault(require("./Drag.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('drag', function (gameObject, config) {
  return new _Drag.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Drag', _Drag.default);
var _default = _Drag.default;
exports.default = _default;
},{"./Drag.js":"node_modules/phaser3-rex-plugins/templates/ui/drag/Drag.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/pinch/Pinch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _gestures = require("../../../plugins/gestures.js");
var _default = _gestures.Pinch;
exports.default = _default;
},{"../../../plugins/gestures.js":"node_modules/phaser3-rex-plugins/plugins/gestures.js"}],"node_modules/phaser3-rex-plugins/templates/ui/pinch/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Pinch = _interopRequireDefault(require("./Pinch.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('pinch', function (config) {
  return new _Pinch.default(this.scene, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Pinch', _Pinch.default);
var _default = _Pinch.default;
exports.default = _default;
},{"./Pinch.js":"node_modules/phaser3-rex-plugins/templates/ui/pinch/Pinch.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/rotate/Rotate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _gestures = require("../../../plugins/gestures.js");
var _default = _gestures.Rotate;
exports.default = _default;
},{"../../../plugins/gestures.js":"node_modules/phaser3-rex-plugins/plugins/gestures.js"}],"node_modules/phaser3-rex-plugins/templates/ui/rotate/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Rotate = _interopRequireDefault(require("./Rotate.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('rotate', function (config) {
  return new _Rotate.default(this.scene, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Rotate', _Rotate.default);
var _default = _Rotate.default;
exports.default = _default;
},{"./Rotate.js":"node_modules/phaser3-rex-plugins/templates/ui/rotate/Rotate.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/flip/GetFaceUpdatingCallback.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
var GetFrameUpdatingCallback = function (key, frame, gameObject) {
  var callback;
  if (key === undefined) {
    key = gameObject.texture.key;
    frame = gameObject.frame.name;
  } else if (IsPlainObject(key)) {
    var config = key;
    key = GetValue(config, 'key', gameObject.texture.key);
    frame = GetValue(config, 'frame', gameObject.frame.name);
  } else if (typeof key === 'string') {} else {
    callback = key;
  }
  if (callback === undefined) {
    callback = function (gameObject) {
      gameObject.setTexture(key, frame);
    };
  }
  return callback;
};
var _default = GetFrameUpdatingCallback;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/flip/Flip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _EaseValueTaskBase = _interopRequireDefault(require("../../utils/componentbase/tweentask/EaseValueTaskBase.js"));
var _GetFaceUpdatingCallback = _interopRequireDefault(require("./GetFaceUpdatingCallback.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const Linear = Phaser.Math.Linear;
class Flip extends _EaseValueTaskBase.default {
  constructor(gameObject, config) {
    super(gameObject, config);
    // this.parent = gameObject;
    // this.timer

    this.resetFromJSON(config);
    this.boot();
  }
  resetFromJSON(o) {
    super.resetFromJSON(o);
    this.setDuration(GetAdvancedValue(o, 'duration', 500));
    this.setEase(GetValue(o, 'ease', 'Sine'));
    this.setOrientation(GetValue(o, 'orientation', 0));
    this.setFrontFace(GetValue(o, 'front', undefined));
    this.setBackFace(GetValue(o, 'back', undefined));
    this.setFace(GetValue(o, 'face', 0));
    return this;
  }
  setOrientation(orientation) {
    if (typeof orientation === 'string') {
      orientation = ORIENTATIONMODE[orientation];
    }
    this.orientation = orientation;
    return this;
  }
  get face() {
    return this._face;
  }
  set face(face) {
    if (typeof face === 'string') {
      face = FACEMODE[face];
    }
    this._face = face;
    if (face === 0 && this.frontFaceCallback) {
      this.frontFaceCallback(this.parent);
    } else if (face === 1 && this.backFaceCallback) {
      this.backFaceCallback(this.parent);
    }
  }
  setFace(face) {
    this.face = face;
    return this;
  }
  toggleFace() {
    var newFace = this.face === 0 ? 1 : 0;
    this.setFace(newFace);
    return this;
  }
  setFrontFace(key, frame) {
    this.frontFaceCallback = (0, _GetFaceUpdatingCallback.default)(key, frame, this.parent);
    return this;
  }
  setBackFace(key, frame) {
    this.backFaceCallback = (0, _GetFaceUpdatingCallback.default)(key, frame, this.parent);
    return this;
  }
  start() {
    if (this.timer.isRunning) {
      return this;
    }
    var gameObject = this.parent;
    if (this.orientation === 0) {
      this.scale0 = gameObject.scaleX;
    } else {
      this.scale0 = gameObject.scaleY;
    }
    this.timer.setDelay(this.delay).setDuration(this.duration / 2).setRepeat(1); // 2 times

    super.start();
    return this;
  }
  flip(duration) {
    if (this.isRunning) {
      return this;
    }
    if (duration !== undefined) {
      this.setDuration(duration);
    }
    this.start();
    return this;
  }
  updateGameObject(gameObject, timer) {
    if (timer.justRestart) {
      this.toggleFace();
    }
    var t = timer.t;
    if (timer.isOddIteration) {
      // Yoyo
      t = 1 - t;
    }
    t = this.easeFn(t);
    var value = Linear(this.scale0, 0, t);
    if (this.orientation === 0) {
      gameObject.scaleX = value;
    } else {
      gameObject.scaleY = value;
    }
  }
}
const ORIENTATIONMODE = {
  x: 0,
  horizontal: 0,
  y: 1,
  vertical: 1
};
const FACEMODE = {
  front: 0,
  back: 1
};
var _default = Flip;
exports.default = _default;
},{"../../utils/componentbase/tweentask/EaseValueTaskBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/tweentask/EaseValueTaskBase.js","./GetFaceUpdatingCallback.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/flip/GetFaceUpdatingCallback.js"}],"node_modules/phaser3-rex-plugins/plugins/flip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Flip = _interopRequireDefault(require("./behaviors/flip/Flip.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _Flip.default;
exports.default = _default;
},{"./behaviors/flip/Flip.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/flip/Flip.js"}],"node_modules/phaser3-rex-plugins/templates/ui/flip/Flip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _flip = _interopRequireDefault(require("../../../plugins/flip.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _flip.default;
exports.default = _default;
},{"../../../plugins/flip.js":"node_modules/phaser3-rex-plugins/plugins/flip.js"}],"node_modules/phaser3-rex-plugins/templates/ui/flip/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Flip = _interopRequireDefault(require("./Flip.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('flip', function (gameObject, config) {
  return new _Flip.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Flip', _Flip.default);
var _default = _Flip.default;
exports.default = _default;
},{"./Flip.js":"node_modules/phaser3-rex-plugins/templates/ui/flip/Flip.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/shake/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Shake = _interopRequireDefault(require("./Shake.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('shake', function (gameObject, config) {
  return new _Shake.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Shake', _Shake.default);
var _default = _Shake.default;
exports.default = _default;
},{"./Shake.js":"node_modules/phaser3-rex-plugins/templates/ui/shake/Shake.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/toucheventstop/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TouchEventStop = _interopRequireDefault(require("./TouchEventStop.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('touchEventStop', function (gameObject, config) {
  return new _TouchEventStop.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.TouchEventStop', _TouchEventStop.default);
var _default = _TouchEventStop.default;
exports.default = _default;
},{"./TouchEventStop.js":"node_modules/phaser3-rex-plugins/templates/ui/toucheventstop/TouchEventStop.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/perspective/Perspective.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _perspectiveimage = require("../../../plugins/perspectiveimage.js");
var _default = _perspectiveimage.ContainerPerspective;
exports.default = _default;
},{"../../../plugins/perspectiveimage.js":"node_modules/phaser3-rex-plugins/plugins/perspectiveimage.js"}],"node_modules/phaser3-rex-plugins/templates/ui/perspective/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Perspective = _interopRequireDefault(require("./Perspective.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('perspective', function (gameObject, config) {
  return new _Perspective.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Perspective', _Perspective.default);
var _default = _Perspective.default;
exports.default = _default;
},{"./Perspective.js":"node_modules/phaser3-rex-plugins/templates/ui/perspective/Perspective.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/utils/LocalXY.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorldXYToLocalXY = exports.LocalXYToWorldXY = void 0;
const RotateAround = Phaser.Math.RotateAround;
var LocalXYToWorldXY = function (gameObject, localX, localY) {
  var ox = gameObject.width / 2;
  var oy = gameObject.height / 2;
  out.x = localX - ox;
  out.y = localY - oy;
  RotateAround(out, 0, 0, gameObject.rotation);
  out.x *= gameObject.scaleX;
  out.y *= gameObject.scaleY;
  out.x += gameObject.x;
  out.y += gameObject.y;
  return out;
};
exports.LocalXYToWorldXY = LocalXYToWorldXY;
var WorldXYToLocalXY = function (gameObject, worldX, worldY) {
  var ox = gameObject.width / 2;
  var oy = gameObject.height / 2;
  out.x = worldX - gameObject.x;
  out.y = worldY - gameObject.y;
  out.x /= gameObject.scaleX;
  out.y /= gameObject.scaleY;
  RotateAround(out, 0, 0, -gameObject.rotation);
  out.x += ox;
  out.y += oy;
  return out;
};
exports.WorldXYToLocalXY = WorldXYToLocalXY;
var out = {
  x: 0,
  y: 0
};
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/image/methods/ControlPoint.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _LocalXY = require("../../../utils/LocalXY.js");
class ControlPoint {
  constructor(parent, vertex) {
    this.parent = parent;
    this.vertex = vertex;
    this._localX = undefined;
    this._localY = undefined;
  }
  destroy() {
    this.parent = undefined;
    this.vertex = undefined;
  }
  updateVertexPosition(x, y) {
    var gameObject = this.parent;
    var srcHeight = gameObject.height;
    var vHalfWidth = gameObject.frame.cutWidth / srcHeight / 2;
    var vHalfHeight = gameObject.frame.cutHeight / srcHeight / 2;
    var vx = x / srcHeight - vHalfWidth;
    var vy = y / srcHeight - vHalfHeight;
    var vertex = this.vertex;
    vertex.x = vx;
    vertex.y = -vy;
    gameObject.forceUpdate();
    return this;
  }
  get localX() {
    return this._localX;
  }
  set localX(x) {
    this.setLocalXY(x, this._localY);
  }
  get localY() {
    return this._localY;
  }
  set localY(y) {
    this.setLocalXY(this._localX, y);
  }
  get localXOrigin() {
    return this._localXOrigin;
  }
  get localYOrigin() {
    return this._localYOrigin;
  }
  resetLocalXY(x, y) {
    this._localXOrigin = x;
    this._localYOrigin = y;
    this._localX = x;
    this._localY = y;
    return this;
  }
  setLocalXY(x, y, ignoreUpdateVertex) {
    if (this._localX === x && this._localY === y) {
      return this;
    }
    this._localX = x;
    this._localY = y;
    if (!ignoreUpdateVertex) {
      this.updateVertexPosition(x, y);
    }
    return this;
  }
  setWorldXY(x, y) {
    if (this._worldX === x && this._worldY === y) {
      return this;
    }
    var localXY = (0, _LocalXY.WorldXYToLocalXY)(this.parent, x, y);
    this.setLocalXY(localXY.x, localXY.y);
    return this;
  }
  setPosition(x, y) {
    this.setWorldXY(x, y);
    return this;
  }
  getWorldXY() {
    return (0, _LocalXY.LocalXYToWorldXY)(this.parent, this._localX, this._localY);
  }
  get x() {
    var worldXY = (0, _LocalXY.LocalXYToWorldXY)(this.parent, this._localX, this._localY);
    return worldXY.x;
  }
  set x(x) {
    this.setWorldXY(x, this.y);
  }
  get y() {
    var worldXY = (0, _LocalXY.LocalXYToWorldXY)(this.parent, this._localX, this._localY);
    return worldXY.y;
  }
  set y(y) {
    this.setWorldXY(this.x, y);
  }
}
var _default = ControlPoint;
exports.default = _default;
},{"../../../utils/LocalXY.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/utils/LocalXY.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/image/methods/InitFaces.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ControlPoint = _interopRequireDefault(require("./ControlPoint.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Vertex = Phaser.Geom.Mesh.Vertex;
const Face = Phaser.Geom.Mesh.Face;
var InitFaces = function (quad) {
  var isNinePointMode = quad.isNinePointMode;
  var pointCount = isNinePointMode ? 9 : 4;
  var vertices = quad.vertices;
  var faces = quad.faces;
  var controlPoints = quad.controlPoints;
  for (var i = 0; i < pointCount; i++) {
    var vertex = new Vertex();
    vertices.push(vertex);
    controlPoints.push(new _ControlPoint.default(quad, vertex));
  }
  var indices;
  if (isNinePointMode) {
    indices = NinePointsIndices;
  } else {
    if (!quad.fourPointsModeRTL) {
      indices = FourPointsIndices;
    } else {
      indices = FourPointsIndicesRTL;
    }
  }
  for (var i = 0, cnt = indices.length; i < cnt; i += 3) {
    var vert1 = vertices[indices[i + 0]];
    var vert2 = vertices[indices[i + 1]];
    var vert3 = vertices[indices[i + 2]];
    faces.push(new Face(vert1, vert2, vert3));
  }
  if (isNinePointMode) {
    quad.topLeft = controlPoints[0];
    quad.topCenter = controlPoints[1];
    quad.topRight = controlPoints[2];
    quad.centerLeft = controlPoints[3];
    quad.center = controlPoints[4];
    quad.centerRight = controlPoints[5];
    quad.bottomLeft = controlPoints[6];
    quad.bottomCenter = controlPoints[7];
    quad.bottomRight = controlPoints[8];
  } else {
    quad.topLeft = controlPoints[0];
    quad.topRight = controlPoints[1];
    quad.bottomLeft = controlPoints[2];
    quad.bottomRight = controlPoints[3];
  }
};

/*
0, 1,
2, 3,
*/
const FourPointsIndices = [0, 2, 3, 0, 3, 1];
const FourPointsIndicesRTL = [1, 3, 2, 1, 2, 0];

/*
0, 1, 2,
3, 4, 5,
6, 7, 8
*/
const NinePointsIndices = [0, 3, 4, 0, 4, 1, 1, 4, 2, 4, 5, 2, 3, 6, 4, 6, 7, 4, 4, 7, 8, 4, 8, 5];
var _default = InitFaces;
exports.default = _default;
},{"./ControlPoint.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/image/methods/ControlPoint.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/image/methods/GetPointPosition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var GetPointPosition = function (quad) {
  var points;
  var top = 0,
    bottom = quad.height,
    left = 0,
    right = quad.width;
  if (quad.isNinePointMode) {
    var centerX = (left + right) / 2;
    var centerY = (top + bottom) / 2;
    points = [left, top,
    // top-left
    centerX, top,
    // top-center
    right, top,
    // top-right
    left, centerY,
    // center-left
    centerX, centerY,
    // center-center
    right, centerY,
    // top-right
    left, bottom,
    // center-left
    centerX, bottom,
    // bottom-center
    right, bottom // bottom-right
    ];
  } else {
    points = [left, top,
    // top-left
    right, top,
    // top-right
    left, bottom,
    // bottom-left
    right, bottom // bottom-right
    ];
  }

  return points;
};
var _default = GetPointPosition;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/image/Image.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InitFaces = _interopRequireDefault(require("./methods/InitFaces.js"));
var _GetPointPosition = _interopRequireDefault(require("./methods/GetPointPosition.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Mesh = Phaser.GameObjects.Mesh;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class Image extends Mesh {
  constructor(scene, x, y, key, frame, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      key = GetValue(config, 'key', null);
      frame = GetValue(config, 'frame', null);
    }
    super(scene, x, y, key, frame);
    this.type = 'rexQuadImage';
    this.isNinePointMode = GetValue(config, 'ninePointMode', false);
    this.fourPointsModeRTL = GetValue(config, 'rtl', false);
    this.controlPoints = [];
    (0, _InitFaces.default)(this);
    this.hideCCW = false;
    this.syncSize();
  }
  preDestroy() {
    for (var i = 0, cnt = this.controlPoints.length; i < cnt; i++) {
      this.controlPoints[i].destroy();
    }
    this.controlPoints = undefined;
    super.preDestroy();
  }
  resetVerts() {
    // Clear faces and vertices        
    this.dirtyCache[9] = -1;
    var points = (0, _GetPointPosition.default)(this);

    // Calculate vertex data
    var srcWidth = this.width;
    var srcHeight = this.height;
    var vHalfWidth = this.frame.cutWidth / srcHeight / 2;
    var vHalfHeight = this.frame.cutHeight / srcHeight / 2;
    var flipY = this.frame.source.isRenderTexture;
    var frameU0 = this.frame.u0;
    var frameU1 = this.frame.u1;
    var frameV0 = !flipY ? this.frame.v0 : this.frame.v1;
    var frameV1 = !flipY ? this.frame.v1 : this.frame.v0;
    var frameU = frameU1 - frameU0;
    var frameV = frameV1 - frameV0;

    // Update vertex
    var controlPoints = this.controlPoints;
    for (var i = 0, cnt = points.length; i < cnt; i += 2) {
      var px = points[i + 0];
      var py = points[i + 1];
      var vertexIndex = i / 2;
      var x = px / srcHeight - vHalfWidth;
      var y = py / srcHeight - vHalfHeight;
      var u = frameU0 + frameU * (px / srcWidth);
      var v = frameV0 + frameV * (py / srcHeight);
      this.vertices[vertexIndex].set(x, -y, 0).setUVs(u, v);
      controlPoints[vertexIndex].resetLocalXY(px, py);
    }
    return this;
  }
  syncSize() {
    this.setSizeToFrame(); // Reset size
    this.setOrtho(this.width / this.height, 1);
    this.resetVerts(); // Reset verts
    return this;
  }
  forceUpdate() {
    this.dirtyCache[10] = 1;
    return this;
  }
  get tint() {
    if (this.vertices.length === 0) {
      return 0xffffff;
    } else {
      return this.vertices[0].color;
    }
  }
  set tint(value) {
    var vertices = this.vertices;
    for (var i = 0, cnt = vertices.length; i < cnt; i++) {
      vertices[i].color = value;
    }
  }
  setTint(color) {
    this.tint = color;
    return this;
  }
}
var _default = Image;
exports.default = _default;
},{"./methods/InitFaces.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/image/methods/InitFaces.js","./methods/GetPointPosition.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/image/methods/GetPointPosition.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/rendertexture/RenderTexture.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Image = _interopRequireDefault(require("../image/Image.js"));
var _Snapshot = _interopRequireDefault(require("../../../../utils/rendertexture/Snapshot.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const RT = Phaser.GameObjects.RenderTexture;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class RenderTexture extends _Image.default {
  constructor(scene, x, y, width, height, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      width = GetValue(config, 'width', 32);
      height = GetValue(config, 'height', 32);
    }

    // render-texture -> quad-image
    var rt = new RT(scene, x, y, width, height).setOrigin(0.5);
    super(scene, x, y, rt.texture.key, null, config);
    this.type = 'rexQuadRenderTexture';
    this.rt = rt;
  }
  destroy(fromScene) {
    super.destroy(fromScene);
    this.rt.destroy();
    this.rt = null;
  }
  snapshot(gameObjects, config) {
    if (config === undefined) {
      config = {};
    }
    config.gameObjects = gameObjects;
    config.renderTexture = this.rt;
    (0, _Snapshot.default)(config);
    if (this.width !== this.frame.realWidth || this.height !== this.frame.realHeight) {
      this.syncSize();
    }
    return this;
  }
}
var _default = RenderTexture;
exports.default = _default;
},{"../image/Image.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/image/Image.js","../../../../utils/rendertexture/Snapshot.js":"node_modules/phaser3-rex-plugins/plugins/utils/rendertexture/Snapshot.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/skewimage/Skew.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Skew = function (gameObject, skewX, skewY) {
  if (skewX === undefined) {
    skewX = 0;
  }
  if (skewY === undefined) {
    skewY = 0;
  }
  var width = gameObject.width,
    height = gameObject.height;
  var ox = width * 0.5;
  var oy = height * 0.5;
  var xOffset = Math.tan(skewX) * oy;
  var yOffset = Math.tan(skewY) * ox;
  var controlPoints = gameObject.controlPoints;
  for (var i = 0, cnt = controlPoints.length; i < cnt; i++) {
    var controlPoint = controlPoints[i];
    var x = controlPoint.localXOrigin;
    var y = controlPoint.localYOrigin;
    controlPoint.localX = x + (y > oy ? xOffset : -xOffset);
    controlPoint.localY = y + (x > ox ? yOffset : -yOffset);
  }
};
var _default = Skew;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/skewimage/SkewImage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Image = _interopRequireDefault(require("../image/Image.js"));
var _Skew = _interopRequireDefault(require("./Skew.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const DegToRad = Phaser.Math.DegToRad;
const RadToDeg = Phaser.Math.RadToDeg;
class SkewImage extends _Image.default {
  constructor(scene, x, y, key, frame) {
    if (IsPlainObject(x)) {
      var config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      key = GetValue(config, 'key', null);
      frame = GetValue(config, 'frame', null);
    }
    super(scene, x, y, key, frame);
    this.type = 'rexSkewmage';
    this._skewX = 0;
    this._skewY = 0;
  }
  get skewX() {
    return this._skewX;
  }
  set skewX(value) {
    this._skewX = value;
    (0, _Skew.default)(this, this._skewX, this._skewY);
  }
  get skewXDeg() {
    return RadToDeg(this._skewX);
  }
  set skewXDeg(value) {
    this.skewX = DegToRad(value);
  }
  get skewY() {
    return this._skewY;
  }
  set skewY(value) {
    this._skewY = value;
    (0, _Skew.default)(this, this._skewX, this._skewY);
  }
  get skewYDeg() {
    return RadToDeg(this._skewY);
  }
  set skewYDeg(value) {
    this.skewY = DegToRad(value);
  }
  setSkewX(skewX) {
    this.skewX = skewX;
    return this;
  }
  setSkewY(skewY) {
    this.skewY = skewY;
    return this;
  }
  setSkew(skewX, skewY) {
    if (skewY === undefined) {
      skewY = skewX;
    }
    this.skewX = skewX;
    this.skewY = skewY;
    return this;
  }
  setSkewXDeg(skewX) {
    this.skewXDeg = skewX;
    return this;
  }
  setSkewYDeg(skewY) {
    this.skewYDeg = skewY;
    return this;
  }
  setSkewDeg(skewX, skewY) {
    if (skewY === undefined) {
      skewY = skewX;
    }
    this.skewXDeg = skewX;
    this.skewYDeg = skewY;
    return this;
  }
}
var _default = SkewImage;
exports.default = _default;
},{"../image/Image.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/image/Image.js","./Skew.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/skewimage/Skew.js"}],"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/skewrendertexture/SkewRenderTexture.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SkewImage = _interopRequireDefault(require("../skewimage/SkewImage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const RT = Phaser.GameObjects.RenderTexture;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class SkewRenderTexture extends _SkewImage.default {
  constructor(scene, x, y, width, height) {
    if (IsPlainObject(x)) {
      var config = x;
      x = GetValue(config, 'x', 0);
      y = GetValue(config, 'y', 0);
      width = GetValue(config, 'width', 32);
      height = GetValue(config, 'height', 32);
    }

    // render-texture -> skew-image
    var rt = new RT(scene, x, y, width, height).setOrigin(0.5);
    super(scene, x, y, rt.texture.key, null);
    this.type = 'rexSkewRenderTexture';
    this.rt = rt;
  }
  destroy(fromScene) {
    super.destroy(fromScene);
    this.rt.destroy();
    this.rt = null;
  }
}
var _default = SkewRenderTexture;
exports.default = _default;
},{"../skewimage/SkewImage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/skewimage/SkewImage.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/containerskew/ContainerSkew.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MeshRenderTextureBase = _interopRequireDefault(require("../../gameobjects/container/containerlite/rendertexture/MeshRenderTextureBase.js"));
var _SkewRenderTexture = _interopRequireDefault(require("../../gameobjects/mesh/quad/skewrendertexture/SkewRenderTexture.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class ContainerSkew extends (0, _MeshRenderTextureBase.default)(_SkewRenderTexture.default) {
  get skewState() {
    return this.isRunning;
  }
}
var _default = ContainerSkew;
exports.default = _default;
},{"../../gameobjects/container/containerlite/rendertexture/MeshRenderTextureBase.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/rendertexture/MeshRenderTextureBase.js","../../gameobjects/mesh/quad/skewrendertexture/SkewRenderTexture.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/skewrendertexture/SkewRenderTexture.js"}],"node_modules/phaser3-rex-plugins/plugins/quadimage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ContainerSkew", {
  enumerable: true,
  get: function () {
    return _ContainerSkew.default;
  }
});
Object.defineProperty(exports, "QuadImage", {
  enumerable: true,
  get: function () {
    return _Image.default;
  }
});
Object.defineProperty(exports, "QuadRenderTexture", {
  enumerable: true,
  get: function () {
    return _RenderTexture.default;
  }
});
Object.defineProperty(exports, "SkewImage", {
  enumerable: true,
  get: function () {
    return _SkewImage.default;
  }
});
Object.defineProperty(exports, "SkewRenderTexture", {
  enumerable: true,
  get: function () {
    return _SkewRenderTexture.default;
  }
});
var _Image = _interopRequireDefault(require("./gameobjects/mesh/quad/image/Image.js"));
var _RenderTexture = _interopRequireDefault(require("./gameobjects/mesh/quad/rendertexture/RenderTexture.js"));
var _SkewImage = _interopRequireDefault(require("./gameobjects/mesh/quad/skewimage/SkewImage.js"));
var _SkewRenderTexture = _interopRequireDefault(require("./gameobjects/mesh/quad/skewrendertexture/SkewRenderTexture.js"));
var _ContainerSkew = _interopRequireDefault(require("./behaviors/containerskew/ContainerSkew.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./gameobjects/mesh/quad/image/Image.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/image/Image.js","./gameobjects/mesh/quad/rendertexture/RenderTexture.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/rendertexture/RenderTexture.js","./gameobjects/mesh/quad/skewimage/SkewImage.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/skewimage/SkewImage.js","./gameobjects/mesh/quad/skewrendertexture/SkewRenderTexture.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/mesh/quad/skewrendertexture/SkewRenderTexture.js","./behaviors/containerskew/ContainerSkew.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/containerskew/ContainerSkew.js"}],"node_modules/phaser3-rex-plugins/templates/ui/skew/Skew.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _quadimage = require("../../../plugins/quadimage.js");
var _default = _quadimage.ContainerSkew;
exports.default = _default;
},{"../../../plugins/quadimage.js":"node_modules/phaser3-rex-plugins/plugins/quadimage.js"}],"node_modules/phaser3-rex-plugins/templates/ui/skew/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Skew = _interopRequireDefault(require("./Skew.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('skew', function (gameObject, config) {
  return new _Skew.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Skew', _Skew.default);
var _default = _Skew.default;
exports.default = _default;
},{"./Skew.js":"node_modules/phaser3-rex-plugins/templates/ui/skew/Skew.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/anchor/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Anchor = _interopRequireDefault(require("./Anchor.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('anchor', function (gameObject, config) {
  return new _Anchor.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.Anchor', _Anchor.default);
var _default = _Anchor.default;
exports.default = _default;
},{"./Anchor.js":"node_modules/phaser3-rex-plugins/templates/ui/anchor/Anchor.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/methods/LastOpenedEditor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SetLastOpenedEditor = exports.CloseLastOpenEditor = void 0;
var LastOpenedEditor = undefined;
var SetLastOpenedEditor = function (editor) {
  if (editor === LastOpenedEditor) {
    return;
  }
  if (LastOpenedEditor !== undefined) {
    LastOpenedEditor.close();
  }
  LastOpenedEditor = editor;
};
exports.SetLastOpenedEditor = SetLastOpenedEditor;
var CloseLastOpenEditor = function (editor) {
  if (editor !== LastOpenedEditor) {
    return;
  }

  // Don't call `LastOpenedEditor.close()`
  LastOpenedEditor = undefined;
};
exports.CloseLastOpenEditor = CloseLastOpenEditor;
},{}],"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/methods/CreateInputText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _InputText = _interopRequireDefault(require("../../../gameobjects/dom/inputtext/InputText.js"));
var _IsTextGameObject = _interopRequireDefault(require("../../../utils/text/IsTextGameObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const Clone = Phaser.Utils.Objects.Clone;
var CreateInputText = function (text, config) {
  if (config === undefined) {
    config = {};
  }
  config = Clone(config);
  var scene = text.scene;
  var style = text.style;
  var backgroundColor = GetValue(config, 'backgroundColor', style.backgroundColor);
  if (backgroundColor === null) {
    backgroundColor = 'transparent';
  }
  config.text = GetValue(config, 'text', text.text);
  config.fontFamily = GetValue(config, 'fontFamily', style.fontFamily);
  config.fontSize = GetValue(config, 'fontSize', style.fontSize);
  config.color = GetValue(config, 'color', style.color);
  config.backgroundColor = backgroundColor;
  config.direction = GetValue(config, 'rtl', style.rtl) ? 'rtl' : 'ltr';
  config.align = GetValue(config, 'align', GetHAlign(style));

  // Built-in text game object with RTL only has 'right' align
  if (config.direction === 'rtl' && (0, _IsTextGameObject.default)(text)) {
    config.align = 'right';
  }

  // config.paddingLeft = 0;
  // config.paddingRight = 0;
  // config.paddingTop = 0;
  // config.paddingBottom = 0;
  // var valign = GetVAlign(style);
  // switch (valign) {
  //     case 'top':
  //         break;
  //     case 'bottom':
  //         break;
  // }

  var inputText = new _InputText.default(scene, text.x, text.y, GetValue(config, 'width', text.width), GetValue(config, 'height', text.height), config);
  inputText
  // Sync origin
  .setOrigin(text.originX, text.originY)
  // Sync scrollFactor
  .setScrollFactor(text.scrollFactorX, text.scrollFactorY);
  var textParentContainer = text.parentContainer;
  if (!textParentContainer) {
    scene.add.existing(inputText);
  } else {
    textParentContainer.add(inputText);
  }
  return inputText;
};
var GetHAlign = function (style) {
  if (style.hasOwnProperty('align')) {
    return style.align;
  } else if (style.hasOwnProperty('halign')) {
    return style.halign;
  } else {
    return 'left';
  }
};
var GetVAlign = function (style) {
  if (style.hasOwnProperty('halign')) {
    return style.halign;
  } else {
    return 'top';
  }
};
var _default = CreateInputText;
exports.default = _default;
},{"../../../gameobjects/dom/inputtext/InputText.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/inputtext/InputText.js","../../../utils/text/IsTextGameObject.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/IsTextGameObject.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/methods/Open.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _LastOpenedEditor = require("./LastOpenedEditor.js");
var _IsFunction = _interopRequireDefault(require("../../../utils/object/IsFunction.js"));
var _CreateInputText = _interopRequireDefault(require("./CreateInputText.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
const Merge = Phaser.Utils.Objects.Merge;
var Open = function (config, onCloseCallback) {
  if (config === undefined) {
    config = {};
  }
  config = Merge(config, this.openConfig);
  (0, _LastOpenedEditor.SetLastOpenedEditor)(this);
  if ((0, _IsFunction.default)(config)) {
    onCloseCallback = config;
    config = undefined;
  }
  if (onCloseCallback === undefined) {
    onCloseCallback = GetValue(config, 'onClose', undefined);
  }
  var onOpenCallback = GetValue(config, 'onOpen', undefined);
  var customOnTextChanged = GetValue(config, 'onTextChanged', undefined);
  this.inputText = (0, _CreateInputText.default)(this.parent, config).on('textchange', function (inputText) {
    var text = inputText.text;
    if (customOnTextChanged) {
      // Custom on-text-changed callback
      customOnTextChanged(this.parent, text);
    } else {
      // Default on-text-changed callback
      this.parent.text = text;
    }
  }, this).setFocus();
  this.parent.setVisible(false); // Set parent text invisible

  // Attach close event
  this.onClose = onCloseCallback;
  if (GetValue(config, 'enterClose', true)) {
    this.scene.input.keyboard.once('keydown-ENTER', this.close, this);
  }
  // Attach pointerdown (outside of input-text) event, at next tick
  this.delayCall = this.scene.time.delayedCall(0, function () {
    this.scene.input.once('pointerdown', this.close, this);

    // Open editor completly, invoke onOpenCallback
    if (onOpenCallback) {
      onOpenCallback(this.parent);
    }
    this.emit('open', this.parent);
  }, [], this);
  return this;
};
var _default = Open;
exports.default = _default;
},{"./LastOpenedEditor.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/methods/LastOpenedEditor.js","../../../utils/object/IsFunction.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/IsFunction.js","./CreateInputText.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/methods/CreateInputText.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/methods/Close.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _LastOpenedEditor = require("./LastOpenedEditor.js");
var Close = function () {
  (0, _LastOpenedEditor.CloseLastOpenEditor)(this);
  this.parent.setVisible(true); // Set parent text visible

  if (this.inputText) {
    this.inputText.destroy();
    this.inputText = undefined;
  }
  if (this.delayCall) {
    this.delayCall.remove();
    this.delayCall = undefined;
  }

  // Remove close event
  this.scene.input.keyboard.off('keydown-ENTER', this.close, this);
  this.scene.input.off('pointerdown', this.close, this);
  if (this.onClose) {
    this.onClose(this.parent);
  }
  this.emit('close', this.parent);
  return this;
};
var _default = Close;
exports.default = _default;
},{"./LastOpenedEditor.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/methods/LastOpenedEditor.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/methods/Methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Open = _interopRequireDefault(require("./Open.js"));
var _Close = _interopRequireDefault(require("./Close.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Methods = {
  open: _Open.default,
  close: _Close.default
};
var _default = Methods;
exports.default = _default;
},{"./Open.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/methods/Open.js","./Close.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/methods/Close.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/TextEdit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ComponentBase = _interopRequireDefault(require("../../utils/componentbase/ComponentBase.js"));
var _Methods = _interopRequireDefault(require("./methods/Methods.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GetValue = Phaser.Utils.Objects.GetValue;
class TextEdit extends _ComponentBase.default {
  constructor(gameObject, config) {
    super(gameObject);
    // this.parent = gameObject;

    this.inputText = undefined;
    this.onClose = undefined;
    this.delayCall = undefined;
    this.setOpenConfig(config);
    var clickEnable = GetValue(config, 'clickEnable', true);
    if (clickEnable) {
      gameObject.on('pointerdown', function () {
        this.open();
      }, this).setInteractive();
    }
  }
  shutdown(fromScene) {
    // Already shutdown
    if (this.isShutdown) {
      return;
    }
    this.close();
    super.shutdown(fromScene);
  }
  setOpenConfig(config) {
    if (config === undefined) {
      config = {};
    }
    this.openConfig = config;
    return this;
  }
  get isOpened() {
    return this.inputText !== undefined;
  }
  get text() {
    return this.isOpened ? this.inputText.text : this.parent.text;
  }
}
Object.assign(TextEdit.prototype, _Methods.default);
var _default = TextEdit;
exports.default = _default;
},{"../../utils/componentbase/ComponentBase.js":"node_modules/phaser3-rex-plugins/plugins/utils/componentbase/ComponentBase.js","./methods/Methods.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/methods/Methods.js"}],"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/Edit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextEdit = _interopRequireDefault(require("./TextEdit.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Edit = function (gameObject, config, onCloseCallback) {
  if (!gameObject._edit) {
    gameObject._edit = new _TextEdit.default(gameObject, {
      clickEnable: false
    });
  }
  gameObject._edit.open(config, onCloseCallback);
  return gameObject._edit;
};
var _default = Edit;
exports.default = _default;
},{"./TextEdit.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/TextEdit.js"}],"node_modules/phaser3-rex-plugins/plugins/textedit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Edit", {
  enumerable: true,
  get: function () {
    return _Edit.default;
  }
});
Object.defineProperty(exports, "TextEdit", {
  enumerable: true,
  get: function () {
    return _TextEdit.default;
  }
});
var _TextEdit = _interopRequireDefault(require("./behaviors/textedit/TextEdit.js"));
var _Edit = _interopRequireDefault(require("./behaviors/textedit/Edit.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./behaviors/textedit/TextEdit.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/TextEdit.js","./behaviors/textedit/Edit.js":"node_modules/phaser3-rex-plugins/plugins/behaviors/textedit/Edit.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textedit/TextEdit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _textedit = require("../../../plugins/textedit.js");
var _default = _textedit.TextEdit;
exports.default = _default;
},{"../../../plugins/textedit.js":"node_modules/phaser3-rex-plugins/plugins/textedit.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textedit/Factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TextEdit = _interopRequireDefault(require("./TextEdit.js"));
var _ObjectFactory = _interopRequireDefault(require("../ObjectFactory.js"));
var _SetValue = _interopRequireDefault(require("../../../plugins/utils/object/SetValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_ObjectFactory.default.register('textEdit', function (gameObject, config) {
  return new _TextEdit.default(gameObject, config);
});
(0, _SetValue.default)(window, 'RexPlugins.UI.TextEdit', _TextEdit.default);
var _default = _TextEdit.default;
exports.default = _default;
},{"./TextEdit.js":"node_modules/phaser3-rex-plugins/templates/ui/textedit/TextEdit.js","../ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","../../../plugins/utils/object/SetValue.js":"node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js"}],"node_modules/phaser3-rex-plugins/templates/ui/utils/GetParentSizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "GetParentSizer", {
  enumerable: true,
  get: function () {
    return _GetParent.GetParent;
  }
});
Object.defineProperty(exports, "GetTopmostSizer", {
  enumerable: true,
  get: function () {
    return _GetParent.GetTopmostParent;
  }
});
var _GetParent = require("../../../plugins/gameobjects/container/containerlite/GetParent.js");
},{"../../../plugins/gameobjects/container/containerlite/GetParent.js":"node_modules/phaser3-rex-plugins/plugins/gameobjects/container/containerlite/GetParent.js"}],"node_modules/phaser3-rex-plugins/templates/ui/textedit/Edit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _textedit = require("../../../plugins/textedit.js");
var _default = _textedit.Edit;
exports.default = _default;
},{"../../../plugins/textedit.js":"node_modules/phaser3-rex-plugins/plugins/textedit.js"}],"node_modules/phaser3-rex-plugins/plugins/utils/text/setfontsizetofitwidth/SetFontSizeToFitWidth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const MaxTestCount = 65535;
var SetFontSizeToFitWidth = function (textObject, width, height) {
  if (width == null) {
    // Do nothing if invalid width input
    return textObject;
  }
  if (width === 0) {
    SetTextWidth(textObject, 0, height);
    return textObject;
  }
  var textLength = textObject.text.length;
  if (textLength === 0) {
    SetTextWidth(textObject, width, height);
    return textObject;
  }
  var fontSize = Math.floor(width * 1.5 / textLength);
  var sizeData = {};
  var testResult = TestFontSize(textObject, fontSize, width, height, sizeData);
  for (var i = 0; i <= MaxTestCount; i++) {
    if (testResult === 0) {
      break;
    } else {
      fontSize += testResult;
      if (fontSize < 0) {
        fontSize = 0;
        break;
      }
    }
    testResult = TestFontSize(textObject, fontSize, width, height, sizeData);
    // console.log(fontSize, testResult)
  }

  if (i === MaxTestCount) {
    console.warn(`SetFontSizeToFitWidth: Test count exceeds ${MaxTestCount}`);
  }
  textObject.setFontSize(fontSize);
  SetTextWidth(textObject, width, height);
  return textObject;
};
var GetTextSize = function (textObject, fontSize, sizeData) {
  if (sizeData[fontSize] === undefined) {
    textObject.setFontSize(fontSize);
    sizeData[fontSize] = {
      width: textObject.width,
      height: textObject.height
    };
  }
  return sizeData[fontSize];
};
var TestFontSize = function (textObject, fontSize, width, height, sizeData) {
  var textSize = GetTextSize(textObject, fontSize, sizeData);
  var textSize1 = GetTextSize(textObject, fontSize + 1, sizeData);
  if (height !== undefined) {
    // Clamp by height
    if (textSize.height <= height && textSize1.height > height) {
      return 0;
    } else if (textSize.height > height) {
      // Reduce text size
      return -1;
    }
  }

  // Clamp by width
  if (textSize.width <= width && textSize1.width > width) {
    return 0;
  } else if (textSize.width > width) {
    // Reduce text size
    return -1;
  } else {
    // Increase text size
    return Math.floor(width - textSize.width);
  }
};
var SetTextWidth = function (textObject, width, height) {
  var style = textObject.style;
  style.fixedWidth = width;
  style.parent.width = width;
  if (height !== undefined) {
    style.fixedHeight = height;
    style.parent.height = height;
  }
  style.update(false);
};
var _default = SetFontSizeToFitWidth;
exports.default = _default;
},{}],"node_modules/phaser3-rex-plugins/templates/ui/utils/fontsizeexpandtext/FontSizeExpandText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SetFontSizeToFitWidth = _interopRequireDefault(require("../../../../plugins/utils/text/setfontsizetofitwidth/SetFontSizeToFitWidth.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var FontSizeExpandText = function (textObject, minWidth) {
  if (minWidth === undefined) {
    minWidth = 0;
  }
  textObject._minWidth = minWidth;
  textObject.runWidthWrap = function (width, maxHeight) {
    (0, _SetFontSizeToFitWidth.default)(textObject, width, maxHeight);
    return textObject;
  };
  textObject.resize = function (width, height) {
    if (textObject.width === width && textObject.height === height) {
      return textObject;
    }

    // Font size is set under runWidthWrap/SetFontSizeToFitWidth
    textObject.setFixedSize(width, height);
    return textObject;
  };
  return textObject;
};
var _default = FontSizeExpandText;
exports.default = _default;
},{"../../../../plugins/utils/text/setfontsizetofitwidth/SetFontSizeToFitWidth.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/setfontsizetofitwidth/SetFontSizeToFitWidth.js"}],"node_modules/phaser3-rex-plugins/templates/ui/ui-plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ObjectFactory = _interopRequireDefault(require("./ObjectFactory.js"));
var _Factory = _interopRequireDefault(require("./ninepatch/Factory.js"));
var _Factory2 = _interopRequireDefault(require("./ninepatch2/Factory.js"));
var _Factory3 = _interopRequireDefault(require("./roundrectangle/Factory.js"));
var _Factory4 = _interopRequireDefault(require("./roundrectanglecanvas/Factory.js"));
var _Factory5 = _interopRequireDefault(require("./bbcodetext/Factory.js"));
var _Factory6 = _interopRequireDefault(require("./tagtext/Factory.js"));
var _Factory7 = _interopRequireDefault(require("./dynamictext/Factory.js"));
var _Factory8 = _interopRequireDefault(require("./textplayer/Factory.js"));
var _Factory9 = _interopRequireDefault(require("./canvasinput/Factory.js"));
var _Factory10 = _interopRequireDefault(require("./hiddenedit/Factory.js"));
var _Factory11 = _interopRequireDefault(require("./checkbox/Factory.js"));
var _Factory12 = _interopRequireDefault(require("./toggleswitch/Factory.js"));
var _Factory13 = _interopRequireDefault(require("./canvas/Factory.js"));
var _Factory14 = _interopRequireDefault(require("./circlemaskimage/Factory.js"));
var _Factory15 = _interopRequireDefault(require("./alphamaskimage/Factory.js"));
var _Factory16 = _interopRequireDefault(require("./circularprogress/Factory.js"));
var _Factory17 = _interopRequireDefault(require("./circularprogresscanvas/Factory.js"));
var _Factory18 = _interopRequireDefault(require("./lineprogress/Factory.js"));
var _Factory19 = _interopRequireDefault(require("./lineprogresscanvas/Factory.js"));
var _Factory20 = _interopRequireDefault(require("./triangle/Factory.js"));
var _Factory21 = _interopRequireDefault(require("./knob/Factory.js"));
var _Factory22 = _interopRequireDefault(require("./customshapes/Factory.js"));
var _Factory23 = _interopRequireDefault(require("./customprogress/Factory.js"));
var _Factory24 = _interopRequireDefault(require("./transitionimage/Factory.js"));
var _Factory25 = _interopRequireDefault(require("./imagebox/Factory.js"));
var _Factory26 = _interopRequireDefault(require("./fullwindowrectangle/Factory.js"));
var _Factory27 = _interopRequireDefault(require("./cover/Factory.js"));
var _Factory28 = _interopRequireDefault(require("./inputtext/Factory"));
var _Factory29 = _interopRequireDefault(require("./filechooser/Factory.js"));
var _Factory30 = _interopRequireDefault(require("./filedropzone/Factory.js"));
var _Factory31 = _interopRequireDefault(require("./chart/Factory.js"));
var _Factory32 = _interopRequireDefault(require("./container/Factory.js"));
var _Factory33 = _interopRequireDefault(require("./sizer/Factory.js"));
var _Factory34 = _interopRequireDefault(require("./gridsizer/Factory.js"));
var _Factory35 = _interopRequireDefault(require("./fixwidthsizer/Factory.js"));
var _Factory36 = _interopRequireDefault(require("./overlapsizer/Factory.js"));
var _Factory37 = _interopRequireDefault(require("./space/Factory.js"));
var _Factory38 = _interopRequireDefault(require("./label/Factory.js"));
var _Factory39 = _interopRequireDefault(require("./simplelabel/Factory.js"));
var _Factory40 = _interopRequireDefault(require("./titlelabel/Factory.js"));
var _Factory41 = _interopRequireDefault(require("./namevaluelabel/Factory.js"));
var _Factory42 = _interopRequireDefault(require("./buttons/Factory.js"));
var _Factory43 = _interopRequireDefault(require("./gridbuttons/Factory.js"));
var _Factory44 = _interopRequireDefault(require("./fixwidthbuttons/Factory.js"));
var _Factory45 = _interopRequireDefault(require("./fileselectorbutton/Factory.js"));
var _Factory46 = _interopRequireDefault(require("./dialog/Factory.js"));
var _Factory47 = _interopRequireDefault(require("./choices/Factory.js"));
var _Factory48 = _interopRequireDefault(require("./confirmdialog/Factory.js"));
var _Factory49 = _interopRequireDefault(require("./holygrail/Factory.js"));
var _Factory50 = _interopRequireDefault(require("./tabs/Factory.js"));
var _Factory51 = _interopRequireDefault(require("./slider/Factory.js"));
var _Factory52 = _interopRequireDefault(require("./gridtable/Factory.js"));
var _Factory53 = _interopRequireDefault(require("./menu/Factory.js"));
var _Factory54 = _interopRequireDefault(require("./dropdownlist/Factory.js"));
var _Factory55 = _interopRequireDefault(require("./textbox/Factory.js"));
var _Factory56 = _interopRequireDefault(require("./numberbar/Factory.js"));
var _Factory57 = _interopRequireDefault(require("./scrollbar/Factory.js"));
var _Factory58 = _interopRequireDefault(require("./badgelabel/Factory.js"));
var _Factory59 = _interopRequireDefault(require("./pages/Factory.js"));
var _Factory60 = _interopRequireDefault(require("./perspectivecard/Factory.js"));
var _Factory61 = _interopRequireDefault(require("./tabpages/Factory.js"));
var _Factory62 = _interopRequireDefault(require("./folder/Factory.js"));
var _Factory63 = _interopRequireDefault(require("./textarea/Factory.js"));
var _Factory64 = _interopRequireDefault(require("./scrollablepanel/Factory.js"));
var _Factory65 = _interopRequireDefault(require("./toast/Factory.js"));
var _Factory66 = _interopRequireDefault(require("./colorinput/colorinput/Factory.js"));
var _Factory67 = _interopRequireDefault(require("./colorinput/colorinputbase/Factory.js"));
var _Factory68 = _interopRequireDefault(require("./colorinput/colorpicker/Factory.js"));
var _Factory69 = _interopRequireDefault(require("./colorinput/colorcomponents/Factory.js"));
var _Factory70 = _interopRequireDefault(require("./sides/Factory.js"));
var _Factory71 = _interopRequireDefault(require("./tweaker/Factory.js"));
var _Factory72 = _interopRequireDefault(require("./maker/Factory.js"));
var _Factory73 = _interopRequireDefault(require("./click/Factory.js"));
var _Factory74 = _interopRequireDefault(require("./clickoutside/Factory.js"));
var _Factory75 = _interopRequireDefault(require("./intouching/Factory.js"));
var _Factory76 = _interopRequireDefault(require("./tap/Factory.js"));
var _Factory77 = _interopRequireDefault(require("./press/Factory.js"));
var _Factory78 = _interopRequireDefault(require("./swipe/Factory.js"));
var _Factory79 = _interopRequireDefault(require("./pan/Factory.js"));
var _Factory80 = _interopRequireDefault(require("./drag/Factory.js"));
var _Factory81 = _interopRequireDefault(require("./pinch/Factory.js"));
var _Factory82 = _interopRequireDefault(require("./rotate/Factory.js"));
var _Factory83 = _interopRequireDefault(require("./flip/Factory.js"));
var _Factory84 = _interopRequireDefault(require("./shake/Factory.js"));
var _Factory85 = _interopRequireDefault(require("./toucheventstop/Factory.js"));
var _Factory86 = _interopRequireDefault(require("./perspective/Factory.js"));
var _Factory87 = _interopRequireDefault(require("./skew/Factory.js"));
var _Factory88 = _interopRequireDefault(require("./anchor/Factory.js"));
var _Factory89 = _interopRequireDefault(require("./textedit/Factory.js"));
var _GetParentSizer = require("./utils/GetParentSizer.js");
var _IsPointerInBounds = _interopRequireDefault(require("../../plugins/utils/input/IsPointerInBounds.js"));
var _Hide = require("./utils/Hide.js");
var _Edit = _interopRequireDefault(require("./textedit/Edit.js"));
var _WrapExpandText = _interopRequireDefault(require("./utils/wrapexpandtext/WrapExpandText.js"));
var _FontSizeExpandText = _interopRequireDefault(require("./utils/fontsizeexpandtext/FontSizeExpandText.js"));
var _SetFontSizeToFitWidth = _interopRequireDefault(require("../../plugins/utils/text/setfontsizetofitwidth/SetFontSizeToFitWidth.js"));
var _WaitEvent = require("./utils/WaitEvent.js");
var _Delay = _interopRequireDefault(require("../../plugins/utils/promise/Delay.js"));
var _GetViewport = _interopRequireDefault(require("../../plugins/utils/system/GetViewport.js"));
var _SetChildrenInteractive = _interopRequireDefault(require("./utils/setchildreninteractive/SetChildrenInteractive.js"));
var _Fade = require("./fade/Fade.js");
var _EaseMove = require("./easemove/EaseMove.js");
var _Modal = require("./modal/Modal.js");
var _RequestDrag = _interopRequireDefault(require("../../plugins/utils/input/RequestDrag.js"));
var _FileChooser = require("./filechooser/FileChooser.js");
var _yaml = _interopRequireDefault(require("./yaml/yaml.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// import Make from './maker/YAMLMake.js';
// import Maker from './maker/Maker.js';

class UIPlugin extends Phaser.Plugins.ScenePlugin {
  constructor(scene, pluginManager) {
    super(scene, pluginManager);
    this.add = new _ObjectFactory.default(scene);
  }
  start() {
    var eventEmitter = this.scene.events;
    eventEmitter.on('destroy', this.destroy, this);
  }
  isInTouching(gameObject, pointer, preTest, postTest) {
    if (!gameObject.visible) {
      return false;
    }
    return (0, _IsPointerInBounds.default)(gameObject, pointer, preTest, postTest);
  }
  get viewport() {
    return (0, _GetViewport.default)(this.scene, this.scene.cameras.main, true);
  }

  // make(data, view, styles, customBuilders) {
  //     return Make(this.scene, data, view, styles, customBuilders);
  // }

  //get maker() {
  //    if (!this._maker) {
  //        this._maker = new Maker(this.scene);
  //    }
  //    return this._maker;
  //}
}

var methods = {
  getParentSizer: _GetParentSizer.GetParentSizer,
  getTopmostSizer: _GetParentSizer.GetTopmostSizer,
  hide: _Hide.Hide,
  show: _Hide.Show,
  isShown: _Hide.IsShown,
  edit: _Edit.default,
  wrapExpandText: _WrapExpandText.default,
  fontSizeExpandText: _FontSizeExpandText.default,
  fontSizeResize: _SetFontSizeToFitWidth.default,
  // Backward compatibility
  setFontSizeToFitWidth: _SetFontSizeToFitWidth.default,
  waitEvent: _WaitEvent.WaitEvent,
  waitComplete: _WaitEvent.WaitComplete,
  delayPromise: _Delay.default,
  setChildrenInteractive: _SetChildrenInteractive.default,
  fadeIn: _Fade.FadeIn,
  fadeOutDestroy: _Fade.FadeOutDestroy,
  easeMoveTo: _EaseMove.EaseMoveTo,
  easeMoveFrom: _EaseMove.EaseMoveFrom,
  modal: _Modal.Modal,
  modalPromise: _Modal.ModalPromise,
  modalClose: _Modal.ModalClose,
  requestDrag: _RequestDrag.default,
  openFileChooser: _FileChooser.OpenFileChooser,
  yaml: _yaml.default
};
Object.assign(UIPlugin.prototype, methods);
var _default = UIPlugin;
exports.default = _default;
},{"./ObjectFactory.js":"node_modules/phaser3-rex-plugins/templates/ui/ObjectFactory.js","./ninepatch/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/ninepatch/Factory.js","./ninepatch2/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/ninepatch2/Factory.js","./roundrectangle/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/roundrectangle/Factory.js","./roundrectanglecanvas/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/roundrectanglecanvas/Factory.js","./bbcodetext/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/bbcodetext/Factory.js","./tagtext/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/tagtext/Factory.js","./dynamictext/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/dynamictext/Factory.js","./textplayer/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/textplayer/Factory.js","./canvasinput/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/canvasinput/Factory.js","./hiddenedit/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/hiddenedit/Factory.js","./checkbox/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/checkbox/Factory.js","./toggleswitch/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/toggleswitch/Factory.js","./canvas/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/canvas/Factory.js","./circlemaskimage/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/circlemaskimage/Factory.js","./alphamaskimage/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/alphamaskimage/Factory.js","./circularprogress/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/circularprogress/Factory.js","./circularprogresscanvas/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/circularprogresscanvas/Factory.js","./lineprogress/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/lineprogress/Factory.js","./lineprogresscanvas/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/lineprogresscanvas/Factory.js","./triangle/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/triangle/Factory.js","./knob/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/knob/Factory.js","./customshapes/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/customshapes/Factory.js","./customprogress/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/customprogress/Factory.js","./transitionimage/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/transitionimage/Factory.js","./imagebox/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/imagebox/Factory.js","./fullwindowrectangle/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/fullwindowrectangle/Factory.js","./cover/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/cover/Factory.js","./inputtext/Factory":"node_modules/phaser3-rex-plugins/templates/ui/inputtext/Factory.js","./filechooser/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/filechooser/Factory.js","./filedropzone/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/filedropzone/Factory.js","./chart/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/chart/Factory.js","./container/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/container/Factory.js","./sizer/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/sizer/Factory.js","./gridsizer/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/gridsizer/Factory.js","./fixwidthsizer/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthsizer/Factory.js","./overlapsizer/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/overlapsizer/Factory.js","./space/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/space/Factory.js","./label/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/label/Factory.js","./simplelabel/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/simplelabel/Factory.js","./titlelabel/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/titlelabel/Factory.js","./namevaluelabel/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/namevaluelabel/Factory.js","./buttons/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/buttons/Factory.js","./gridbuttons/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/gridbuttons/Factory.js","./fixwidthbuttons/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/fixwidthbuttons/Factory.js","./fileselectorbutton/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/fileselectorbutton/Factory.js","./dialog/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/dialog/Factory.js","./choices/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/choices/Factory.js","./confirmdialog/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/confirmdialog/Factory.js","./holygrail/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/holygrail/Factory.js","./tabs/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/tabs/Factory.js","./slider/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/slider/Factory.js","./gridtable/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/gridtable/Factory.js","./menu/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/menu/Factory.js","./dropdownlist/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/dropdownlist/Factory.js","./textbox/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/textbox/Factory.js","./numberbar/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/numberbar/Factory.js","./scrollbar/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/scrollbar/Factory.js","./badgelabel/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/badgelabel/Factory.js","./pages/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/pages/Factory.js","./perspectivecard/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/perspectivecard/Factory.js","./tabpages/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/tabpages/Factory.js","./folder/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/folder/Factory.js","./textarea/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/textarea/Factory.js","./scrollablepanel/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/scrollablepanel/Factory.js","./toast/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/toast/Factory.js","./colorinput/colorinput/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinput/Factory.js","./colorinput/colorinputbase/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorinputbase/Factory.js","./colorinput/colorpicker/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorpicker/Factory.js","./colorinput/colorcomponents/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/colorinput/colorcomponents/Factory.js","./sides/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/sides/Factory.js","./tweaker/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/tweaker/Factory.js","./maker/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/maker/Factory.js","./click/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/click/Factory.js","./clickoutside/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/clickoutside/Factory.js","./intouching/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/intouching/Factory.js","./tap/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/tap/Factory.js","./press/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/press/Factory.js","./swipe/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/swipe/Factory.js","./pan/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/pan/Factory.js","./drag/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/drag/Factory.js","./pinch/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/pinch/Factory.js","./rotate/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/rotate/Factory.js","./flip/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/flip/Factory.js","./shake/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/shake/Factory.js","./toucheventstop/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/toucheventstop/Factory.js","./perspective/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/perspective/Factory.js","./skew/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/skew/Factory.js","./anchor/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/anchor/Factory.js","./textedit/Factory.js":"node_modules/phaser3-rex-plugins/templates/ui/textedit/Factory.js","./utils/GetParentSizer.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/GetParentSizer.js","../../plugins/utils/input/IsPointerInBounds.js":"node_modules/phaser3-rex-plugins/plugins/utils/input/IsPointerInBounds.js","./utils/Hide.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/Hide.js","./textedit/Edit.js":"node_modules/phaser3-rex-plugins/templates/ui/textedit/Edit.js","./utils/wrapexpandtext/WrapExpandText.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/wrapexpandtext/WrapExpandText.js","./utils/fontsizeexpandtext/FontSizeExpandText.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/fontsizeexpandtext/FontSizeExpandText.js","../../plugins/utils/text/setfontsizetofitwidth/SetFontSizeToFitWidth.js":"node_modules/phaser3-rex-plugins/plugins/utils/text/setfontsizetofitwidth/SetFontSizeToFitWidth.js","./utils/WaitEvent.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/WaitEvent.js","../../plugins/utils/promise/Delay.js":"node_modules/phaser3-rex-plugins/plugins/utils/promise/Delay.js","../../plugins/utils/system/GetViewport.js":"node_modules/phaser3-rex-plugins/plugins/utils/system/GetViewport.js","./utils/setchildreninteractive/SetChildrenInteractive.js":"node_modules/phaser3-rex-plugins/templates/ui/utils/setchildreninteractive/SetChildrenInteractive.js","./fade/Fade.js":"node_modules/phaser3-rex-plugins/templates/ui/fade/Fade.js","./easemove/EaseMove.js":"node_modules/phaser3-rex-plugins/templates/ui/easemove/EaseMove.js","./modal/Modal.js":"node_modules/phaser3-rex-plugins/templates/ui/modal/Modal.js","../../plugins/utils/input/RequestDrag.js":"node_modules/phaser3-rex-plugins/plugins/utils/input/RequestDrag.js","./filechooser/FileChooser.js":"node_modules/phaser3-rex-plugins/templates/ui/filechooser/FileChooser.js","./yaml/yaml.js":"node_modules/phaser3-rex-plugins/templates/ui/yaml/yaml.js"}],"src/main.js":[function(require,module,exports) {
"use strict";

var _LoadScene = require("./scenes/LoadScene");
var _MenuScene = require("./scenes/MenuScene");
var _OptionsScene = require("./scenes/OptionsScene");
var _CreditsScene = require("./scenes/CreditsScene");
var _JoinGameScene = require("./scenes/JoinGameScene");
var _CreateGameScene = require("./scenes/CreateGameScene");
var _LobbyScene = require("./scenes/LobbyScene");
var _uiPlugin = _interopRequireDefault(require("phaser3-rex-plugins/templates/ui/ui-plugin"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
This file is used to create the game and add any scenes.
*/

// Imports the scenes

// Creates the game
var game = new Phaser.Game({
  width: 1000,
  height: 800,
  scale: {
    parent: 'phaser-container',
    mode: Phaser.Scale.FIT,
    autoCenter: Phaser.Scale.CENTER_BOTH
  },
  scene: [_LoadScene.LoadScene, _MenuScene.MenuScene, _OptionsScene.OptionsScene, _CreditsScene.CreditsScene, _JoinGameScene.JoinGameScene, _CreateGameScene.CreateGameScene, _LobbyScene.LobbyScene],
  render: {
    pixelArt: true
  },
  parent: "phaser-container",
  dom: {
    createContainer: true
  },
  plugins: {
    scene: [{
      key: "rexUI",
      plugin: _uiPlugin.default,
      mapping: "rexUI"
    }]
  }
});

// Function to load a font - https://stackoverflow.com/questions/51217147/how-to-use-a-local-font-in-phaser-3
function loadFont(name, url) {
  var newFont = new FontFace(name, "url(".concat(url, ")"));
  newFont.load().then(function (loaded) {
    document.fonts.add(loaded);
  }).catch(function (error) {
    return error;
  });
}
loadFont("font1", "./assets/PixelboyFont.ttf");

//NOTES
// Remove username field from create game scene and join game scene
// Update loading screen
},{"./scenes/LoadScene":"src/scenes/LoadScene.js","./scenes/MenuScene":"src/scenes/MenuScene.js","./scenes/OptionsScene":"src/scenes/OptionsScene.js","./scenes/CreditsScene":"src/scenes/CreditsScene.js","./scenes/JoinGameScene":"src/scenes/JoinGameScene.js","./scenes/CreateGameScene":"src/scenes/CreateGameScene.js","./scenes/LobbyScene":"src/scenes/LobbyScene.js","phaser3-rex-plugins/templates/ui/ui-plugin":"node_modules/phaser3-rex-plugins/templates/ui/ui-plugin.js"}],"../../../Users/nicks/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}
module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "55740" + '/');
  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);
    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);
          if (didAccept) {
            handled = true;
          }
        }
      });

      // Enable HMR for CSS by default.
      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });
      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }
    if (data.type === 'reload') {
      ws.close();
      ws.onclose = function () {
        location.reload();
      };
    }
    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }
    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
  }
}
function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;

  // html encode message and stack trace
  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}
function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}
function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });
    return true;
  }
}
},{}]},{},["../../../Users/nicks/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js","src/main.js"], null)
//# sourceMappingURL=/main.1e43358e.js.map